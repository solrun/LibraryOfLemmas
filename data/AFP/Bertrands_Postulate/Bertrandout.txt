Loading theory "HOL-Library.Cancellation" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Decision_Procs.Dense_Linear_Order" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### theory "HOL-Library.Code_Abstract_Nat"
### 0.076s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### ML warning (line 98 of "~~/src/HOL/Decision_Procs/langford_data.ML"):
### Pattern is not exhaustive.
### ML warning (line 99 of "~~/src/HOL/Decision_Procs/langford_data.ML"):
### Pattern is not exhaustive.
signature LANGFORD_DATA =
  sig
    val add: entry -> attribute
    val del: attribute
    type entry
    val get: Proof.context -> simpset * (thm * entry) list
    val match: Proof.context -> cterm -> entry option
  end
structure Langford_Data: LANGFORD_DATA
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
signature FERRANTE_RACKOF_DATA =
  sig
    val add: entry -> attribute
    val del: attribute
    type entry
    val funs:
       thm ->
         {isolate_conv:
          morphism -> Proof.context -> cterm list -> cterm -> thm,
          simpset: morphism -> Proof.context -> simpset,
          whatis: morphism -> cterm -> cterm -> ord}
           -> declaration
    val get: Proof.context -> (thm * entry) list
    val match: Proof.context -> cterm -> entry option
    datatype ord = Eq | Ge | Gt | Le | Lt | NEq | Nox
  end
structure Ferrante_Rackoff_Data: FERRANTE_RACKOF_DATA
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Code_Target_Int"
### 0.161s elapsed time, 0.659s cpu time, 0.020s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.129s elapsed time, 0.499s cpu time, 0.020s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Code_Target_Numeral"
### 0.121s elapsed time, 0.479s cpu time, 0.047s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.490s cpu time, 0.073s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.477s elapsed time, 1.899s cpu time, 0.140s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.FuncSet"
### 0.400s elapsed time, 1.580s cpu time, 0.120s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Infinite_Set"
### 0.467s elapsed time, 1.699s cpu time, 0.575s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (file "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 24 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Value identifier (q) has not been referenced.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Value identifier (p) has not been referenced.
### ML warning (file "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 100 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 136 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Pattern is not exhaustive.
signature LANGFORD =
  sig
    val dlo_conv: Proof.context -> cterm -> thm
    val dlo_tac: Proof.context -> int -> tactic
  end
structure Langford: LANGFORD
Found termination order: "size_list size <*mlex*> {}"
locale linorder_stupid_syntax
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_stupid_syntax less_eq less"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
### theory "HOL-Library.Nat_Bijection"
### 0.387s elapsed time, 1.508s cpu time, 0.208s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs")
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
locale linorder_no_ub
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_no_ub (\<sqsubseteq>) (\<sqsubset>)"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Algebra.Congruence"
### 0.977s elapsed time, 3.692s cpu time, 0.798s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
locale linorder_no_lb
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_no_lb (\<sqsubseteq>) (\<sqsubset>)"
locale constr_dense_linorder
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and between :: "'a => 'a => 'a"
  assumes "constr_dense_linorder (\<sqsubseteq>) (\<sqsubset>) between"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### ML warning (line 33 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (simpset) has not been referenced.
### ML warning (line 32 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (atoms) has not been referenced.
### ML warning (line 31 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (entr) has not been referenced.
### ML warning (line 35 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (vs) has not been referenced.
### ML warning (line 35 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 63 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 113 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 115 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 117 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 119 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 121 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 149 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 147 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 149 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 147 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
signature FERRANTE_RACKOFF =
  sig
    val dlo_conv: Proof.context -> conv
    val dlo_tac: Proof.context -> int -> tactic
  end
structure FerranteRackoff: FERRANTE_RACKOFF
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Min (<=) (set (?x # ?xs)) == fold (ord.min (<=)) ?xs ?x
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Max (<=) (set (?x # ?xs)) == fold (ord.max (<=)) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  flat :: "'a list stream => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  mset :: "'a list => 'a multiset"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Decision_Procs.Dense_Linear_Order"
### 2.798s elapsed time, 10.714s cpu time, 2.307s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
### theory "HOL-Library.Stream"
### 1.571s elapsed time, 6.046s cpu time, 1.423s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.221s elapsed time, 0.891s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.515s elapsed time, 5.822s cpu time, 1.392s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.015s cpu time, 0.088s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Algebra.Lattice"
### 1.169s elapsed time, 4.377s cpu time, 1.456s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.BigO"
### 1.249s elapsed time, 4.684s cpu time, 1.534s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.175s elapsed time, 0.696s cpu time, 0.076s GC time
Loading theory "HOL-Library.Lattice_Algebras" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float" via "HOL-Library.Interval")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Found termination order: "size <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Complete_Lattice"
### 0.741s elapsed time, 2.916s cpu time, 0.348s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 5.005s elapsed time, 19.186s cpu time, 4.363s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Tree"
### 2.558s elapsed time, 9.849s cpu time, 2.156s GC time
Loading theory "Draft.Templates" (required by "Draft.BertrandMoreTemplates" via "Draft.ExtrEqs")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.127s elapsed time, 0.500s cpu time, 0.117s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BertrandMoreTemplates")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.762s elapsed time, 3.020s cpu time, 0.296s GC time
Loading theory "HOL-Library.Log_Nat" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float" via "HOL-Library.Float")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Library.Log_Nat"
### 0.119s elapsed time, 0.479s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Algebra.Group"
### 1.626s elapsed time, 6.431s cpu time, 0.756s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order: "size <*mlex*> {}"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Number_Theory.Fib"
### 0.277s elapsed time, 1.105s cpu time, 0.120s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.511s elapsed time, 2.021s cpu time, 0.244s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class lattice_ab_group_add_abs = abs + lattice_ab_group_add +
  assumes "abs_lattice": "!!a. \<bar>a\<bar> = sup a (- a)"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.272s elapsed time, 5.031s cpu time, 0.517s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### theory "HOL-Algebra.Generated_Groups"
### 0.693s elapsed time, 2.740s cpu time, 0.231s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.544s elapsed time, 2.153s cpu time, 0.173s GC time
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
### theory "HOL-Library.Lattice_Algebras"
### 4.697s elapsed time, 18.596s cpu time, 1.871s GC time
Loading theory "HOL-Library.Interval" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float")
Loading theory "HOL-Library.Float" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
instantiation
  float :: {equal,linordered_idom}
  sgn_float == sgn :: float => float
  abs_float == abs :: float => float
  uminus_float == uminus :: float => float
  one_float == one_class.one :: float
  times_float == times :: float => float => float
  zero_float == zero_class.zero :: float
  minus_float == minus :: float => float => float
  less_eq_float == less_eq :: float => float => bool
  less_float == less :: float => float => bool
  plus_float == plus :: float => float => float
  equal_float == equal_class.equal :: float => float => bool
instantiation
  float :: lattice_ab_group_add
  inf_float == inf :: float => float => float
  sup_float == sup :: float => float => float
instantiation
  float :: exhaustive
  exhaustive_float == exhaustive_class.exhaustive ::
    (float => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  float :: full_exhaustive
  full_exhaustive_float == full_exhaustive_class.full_exhaustive ::
    (float * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  float :: random
  random_float == random_class.random ::
    natural
    => natural * natural => (float * (unit => term)) * natural * natural
instantiation
  interval :: ({equal,preorder}) equal
  equal_interval == equal_class.equal :: 'a interval => 'a interval => bool
instantiation
  interval :: (preorder) ord
  less_eq_interval == less_eq :: 'a interval => 'a interval => bool
  less_interval == less :: 'a interval => 'a interval => bool
instantiation
  interval :: (lattice) semilattice_sup
  sup_interval == sup :: 'a interval => 'a interval => 'a interval
instantiation
  interval :: (ordered_ab_semigroup_add) ab_semigroup_add
  plus_interval == plus :: 'a interval => 'a interval => 'a interval
instantiation
  interval :: ({zero,preorder}) zero
  zero_interval == zero_class.zero :: 'a interval
instantiation
  interval :: (ordered_ab_group_add) uminus
  uminus_interval == uminus :: 'a interval => 'a interval
### theory "HOL-Algebra.Ring"
### 2.820s elapsed time, 11.207s cpu time, 0.887s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
instantiation
  interval :: (ordered_ab_group_add) minus
  minus_interval == minus :: 'a interval => 'a interval => 'a interval
instantiation
  interval :: (linordered_semiring) times
  times_interval == times :: 'a interval => 'a interval => 'a interval
instantiation
  interval :: ({one,preorder}) one
  one_interval == one_class.one :: 'a interval
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
instantiation
  interval :: ({preorder,topological_space}) topological_space
  open_interval == open :: 'a interval set => bool
instantiation
  interval :: ({preorder,exhaustive}) exhaustive
  exhaustive_interval == exhaustive_class.exhaustive ::
    ('a interval => (bool * term list) option)
    => natural => (bool * term list) option
### theory "HOL-Library.Float"
### 1.987s elapsed time, 7.852s cpu time, 0.960s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
instantiation
  interval :: ({preorder,full_exhaustive}) full_exhaustive
  full_exhaustive_interval == full_exhaustive_class.full_exhaustive ::
    ('a interval * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  interval :: ({preorder,random}) random
  random_interval == random_class.random ::
    natural
    => natural * natural
       => ('a interval * (unit => term)) * natural * natural
### theory "HOL-Library.Interval"
### 2.085s elapsed time, 8.260s cpu time, 0.960s GC time
Loading theory "HOL-Library.Interval_Float" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Decision_Procs.Approximation_Bounds")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
Found termination order: "length <*mlex*> {}"
### theory "HOL-Library.Interval_Float"
### 1.372s elapsed time, 5.431s cpu time, 0.410s GC time
Loading theory "HOL-Decision_Procs.Approximation_Bounds" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand")
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.534s elapsed time, 29.841s cpu time, 2.933s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
consts
  horner ::
    "(nat => nat)
     => (nat => nat => nat) => nat => nat => nat => real => real"
### theory "HOL-Algebra.Module"
### 2.035s elapsed time, 8.053s cpu time, 0.636s GC time
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
### theory "HOL-Algebra.AbelCoset"
### 3.385s elapsed time, 13.265s cpu time, 1.321s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.813s elapsed time, 5.531s cpu time, 0.526s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Algebra.RingHom"
### 0.753s elapsed time, 2.291s cpu time, 0.201s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
### theory "HOL-Decision_Procs.Approximation_Bounds"
### 3.459s elapsed time, 11.173s cpu time, 1.008s GC time
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.785s elapsed time, 23.163s cpu time, 5.056s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
### theory "HOL-Computational_Algebra.Primes"
### 0.231s elapsed time, 0.519s cpu time, 0.072s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.242s elapsed time, 0.962s cpu time, 0.129s GC time
### theory "HOL-Number_Theory.Prime_Powers"
### 0.888s elapsed time, 2.923s cpu time, 0.309s GC time
### theory "HOL-Number_Theory.Cong"
### 1.043s elapsed time, 3.283s cpu time, 0.430s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Mod_Exp"
### 0.519s elapsed time, 1.628s cpu time, 0.163s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Totient"
### 0.559s elapsed time, 1.691s cpu time, 0.163s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Algebra.UnivPoly"
### 8.344s elapsed time, 19.714s cpu time, 5.030s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.980s elapsed time, 5.961s cpu time, 3.721s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.222s elapsed time, 1.398s cpu time, 0.158s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "Lehmer.Lehmer" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "Pratt_Certificate.Pratt_Certificate")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
### theory "Lehmer.Lehmer"
### 0.062s elapsed time, 0.184s cpu time, 0.000s GC time
Loading theory "Pratt_Certificate.Pratt_Certificate" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.099s elapsed time, 0.297s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.281s elapsed time, 0.881s cpu time, 0.195s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.210s elapsed time, 0.663s cpu time, 0.195s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.254s elapsed time, 0.788s cpu time, 0.131s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.304s elapsed time, 0.877s cpu time, 0.131s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.BertrandMoreTemplates" via "Draft.Bertrand")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
locale efficient_power
  fixes f :: "'a => 'a => 'a"
  assumes "efficient_power f"
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature PRATT =
  sig
    exception INVALID_CERT of cert
    datatype cert = Pratt_Node of int * int * cert list
    val certT: typ
    val cert_cartouche: cert parser
    val check_cert: cert -> bool
    val get_cert_number: cert -> int
    val mk_cert: int -> cert option
    val pretty_cert: cert -> Pretty.T
    type prime_thm_cache = (int * thm) list
    val prove_prime:
       prime_thm_cache ->
         int -> Proof.context -> thm option * prime_thm_cache
    val read_cert: Input.source -> cert
    val replay_cert:
       prime_thm_cache -> cert -> Proof.context -> thm * prime_thm_cache
    val replay_cert_code: cert -> Proof.context -> thm
    val setup_valid_cert_code_conv:
       (Proof.context -> conv) -> Context.generic -> Context.generic
    val tac: tac_config -> cert option -> Proof.context -> int -> tactic
    type tac_config = {cache: prime_thm_cache, code: bool, verbose: bool}
    val tac_config_parser: tac_config parser
    val termify_cert: cert -> term
    val untermify_cert: term -> cert
  end
structure Pratt: PRATT
### theory "Pratt_Certificate.Pratt_Certificate"
### 1.592s elapsed time, 3.836s cpu time, 0.518s GC time
### theory "HOL-Number_Theory.Number_Theory"
### 1.101s elapsed time, 2.290s cpu time, 0.247s GC time
Loading theory "Draft.Bertrand" (required by "Draft.BertrandMoreTemplates")
### Ignoring duplicate rewrite rule:
### (0::?'a1) + ?y == ?y
signature BERTRAND =
  sig
    type cache = (int * thm) list
    val mk_prime_cache: Proof.context -> int -> cache
    val pre_mangoldt_conv: Proof.context -> cache -> conv
    val prime_conv: Proof.context -> cache -> conv
    val primepow_conv: Proof.context -> cache -> conv
    datatype primepow_thm = NotPrimepowThm of thm | PrimepowThm of thm * thm
    val prove_pre_mangoldt: Proof.context -> cache -> term -> thm
    val prove_primepow: Proof.context -> cache -> term -> primepow_thm
    val prove_psi: Proof.context -> int -> (int * int * thm) list
  end
structure Bertrand: BERTRAND
### theory "Draft.Bertrand"
### 7.451s elapsed time, 9.866s cpu time, 0.393s GC time
Loading theory "Draft.BertrandMoreTemplates"
val templateLemmas =
   [("Bertrand.pre_mangoldt_pos", "0 < pre_mangoldt ?n",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.mangoldt_odd_pos", "0 <= mangoldt_odd ?d",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.psi_pos", "0 <= psi ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.psi_odd_pos", "0 <= psi_odd ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.psi_residues_compare", "psi_odd ?n <= psi_even ?n",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.psi_sqrt", "psi (Discrete.sqrt ?n) = psi_even ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.primepow_even_imp_primepow",
     "primepow_even ?n ==> primepow ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Bertrand.primepow_odd_imp_primepow",
     "primepow_odd ?n ==> primepow ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Bertrand.of_nat_prod_mset",
     "\<Prod>\<^sub># (image_mset of_nat ?A) = of_nat (\<Prod>\<^sub># ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bertrand.of_nat_ge_1_iff", "((1::?'a) <= of_nat ?x) = (1 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Bertrand.primepow_iff_even_sqr",
     "primepow ?n = primepow_even (?n\<^sup>2)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bertrand.psi_theta", "theta ?n + psi (Discrete.sqrt ?n) <= psi ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Bertrand.pre_mangoldt_notprimepow",
     "~ primepow ?n ==> pre_mangoldt ?n = 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bertrand.psi_conv_pre_mangoldt",
     "psi ?n = ln (real (prod pre_mangoldt {1..?n}))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))))),
    ("Bertrand.psi_mono", "?m <= ?n ==> psi ?m <= psi ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.psi_odd_mono", "?m <= ?n ==> psi_odd ?m <= psi_odd ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.psi_split", "psi ?n = theta ?n + psi_even ?n + psi_odd ?n",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.mangoldt_split",
     "mangoldt ?d = mangoldt_1 ?d + mangoldt_even ?d + mangoldt_odd ?d",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.Ball_insertD", "ALL x:insert ?y ?A. ?P x ==> ?P ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Bertrand.ln_fact", "ln (fact ?n) = (SUM d = 1..?n. ln (real d))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Bertrand.floor_conv_div_nat",
     "real_of_int \<lfloor>real ?m / real ?n\<rfloor> = real (?m div ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bertrand.psi_theta",
     "psi ?n <= theta ?n + 2 * psi (Discrete.sqrt ?n)",
     template_inequation
      (less_equals, template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 0)))))),
    ("Bertrand.psi_ubound_3_2", "psi ?n <= 3 / 2 * real ?n",
     template_inequation
      (less_equals, template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 4,
               template_app (template_hole 1, template_hole 2)))),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.primepow_even_altdef",
     "primepow_even ?n =
      (primepow ?n & even (multiplicity (aprimedivisor ?n) ?n))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0))))),
    ("Bertrand.frac_conv_mod_nat",
     "frac (real ?m / real ?n) = real (?m mod ?n) / real ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Bertrand.primepow_odd_mult",
     "Suc 0 < ?d ==>
      primepow_odd (aprimedivisor ?d * ?d) = primepow_even ?d",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.Ball_insertD", "ALL x:insert ?y ?A. ?P x ==> ALL x:?A. ?P x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Bertrand.pre_mangoldt_primepow",
     "[| primepow ?n; aprimedivisor ?n = ?p |] ==> pre_mangoldt ?n = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bertrand.bertrand", "1 < ?n ==> EX p:{?n<..<2 * ?n}. prime p",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_var 0))),
             t_empty)
           ))),
    ("Bertrand.prod_mset_pos",
     "(!!x. x :# ?A ==> (0::?'a) < x) ==> (0::?'a) < \<Prod>\<^sub># ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.psi_bounds_ln_fact",
     "ln (fact ?n) - 2 * ln (fact (?n div 2)) <= psi ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_hole 3))))))),
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.ln_fact_conv_mangoldt",
     "ln (fact ?n) =
      (SUM d = 1..?n.
       mangoldt d * real_of_int \<lfloor>real ?n / real d\<rfloor>)",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Bertrand.psi_residues_compare_2",
     "sum mangoldt_odd {2..?n} <= sum mangoldt_even {2..?n}",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("Bertrand.sum_minus_one",
     "(SUM x = 1..?y. (- 1) ^ (x + 1)) = (if odd ?y then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 13, t_empty),
         template_app
          (template_app (template_hole 7, template_hole 8),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0))),
           template_hole 10),
         template_hole 0))),
    ("Bertrand.n_div_d_eq_1",
     "?d : {?n div 2 + 1..?n} ==> \<lfloor>real ?n / real ?d\<rfloor> = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 0),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 7, template_hole 6)))),
                    template_hole 5)),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Bertrand.primepow_odd_altdef",
     "primepow_odd ?n =
      (primepow ?n &
       odd (multiplicity (aprimedivisor ?n) ?n) &
       1 < multiplicity (aprimedivisor ?n) ?n)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_var 0)))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_var 0)))))),
    ("Bertrand.div_invert",
     "[| 0 < ?x; 0 < ?y; ?y <= ?n div ?x |] ==> ?x <= ?n div ?y",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Bertrand.divisors",
     "[| ?x : {1..?n}; ?d dvd ?x |] ==> EX k:{1..?n div ?d}. ?x = ?d * k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Bertrand.fact_psi_bound_2_3",
     "psi ?n - psi (?n div 2) <= ln (fact ?n) - 2 * ln (fact (?n div 2))",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))))),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))))))))),
    ("Bertrand.ln_fact_bounds",
     "0 < ?n ==>
      \<bar>ln (fact ?n) - real ?n * ln (real ?n) + real ?n\<bar>
      <= 1 + ln (real ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 1, template_var 0))))),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 6, template_hole 0),
           template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0)))))),
    ("Bertrand.theta_double_lemma",
     "1200 <= ?n ==> theta (?n div 2) < theta ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app
               (template_hole 5,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 5,
                              template_app
                               (template_hole 5, template_hole 3))))))))))),
          template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 3)))),
         template_app (template_hole 1, template_var 0)))),
    ("Bertrand.Mertens_lemma",
     "?n ~= 0 ==>
      \<bar>(SUM d = 1..?n. mangoldt d / real d) - ln (real ?n)\<bar> <= 4",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, t_empty),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app (template_hole 6, template_var 0)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bertrand.ln_primefact",
     "?n ~= 0 ==>
      ln (real ?n) =
      (SUM d = 1..?n.
       if primepow d & d dvd ?n then ln (real (aprimedivisor d)) else 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_equation
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bertrand.psi_bounds_induct",
     "real ?n * ln 2 - (4 * ln (real (if ?n = 0 then 1 else ?n)) + 3)
      <= psi ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 0)),
             template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_hole 7))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 8, template_hole 7)))),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_hole 3)),
                       template_hole 2),
                     template_var 0))))),
           template_app
            (template_hole 9,
             template_app (template_hole 1, template_hole 7)))),
       template_app (template_hole 0, template_var 0))),
    ("Bertrand.div_2_mult_2_bds",
     "0 < ?d ==>
      0 <= \<lfloor>real ?n / real ?d\<rfloor> -
           2 * \<lfloor>real (?n div 2) / real ?d\<rfloor>",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1)],
       template_inequation
        (less_equals, template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_app (template_hole 6, template_var 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 3, template_hole 2))))),
                 template_app (template_hole 6, template_var 1)))))))),
    ("Bertrand.div_2_mult_2_bds",
     "0 < ?d ==>
      \<lfloor>real ?n / real ?d\<rfloor> -
      2 * \<lfloor>real (?n div 2) / real ?d\<rfloor>
      <= 1",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_app (template_hole 7, template_var 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 4, template_hole 3))))),
                 template_app (template_hole 7, template_var 1))))),
         template_hole 0))),
    ("Bertrand.ln_msetprod",
     "(!!x. x :# ?I ==> 0 < x) ==>
      (SUM p:#?I. ln (real p)) = ln (\<Prod>\<^sub># (image_mset real ?I))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty),
               template_var 0)))))),
    ("Bertrand.theta_lessE",
     "[| theta ?m < theta ?n; 1 <= ?m;
         !!p. [| p : {?m<..?n}; prime p |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_equals, template_hole 4, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Bertrand.fact_expand_psi",
     "ln (fact ?n) - 2 * ln (fact (?n div 2)) =
      (SUM d = 1..?n. (- 1) ^ (d + 1) * psi (?n div d))",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app (template_hole 14, template_var 0))),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_hole 10))),
           template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 11, template_hole 10))))))),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Bertrand.fact_psi_bound_2_3",
     "ln (fact ?n) - 2 * ln (fact (?n div 2))
      <= psi ?n - psi (?n div 2) + psi (?n div 3)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_hole 5))))))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_hole 5)))))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_hole 5))))))),
    ("Bertrand.Mertens",
     "?n ~= 0 ==>
      \<bar>(SUM p | prime p & p <= ?n. ln (real p) / real p) -
            ln (real ?n)\<bar>
      <= 7",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 14))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, t_empty),
                 template_app (template_hole 6, t_empty))),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bertrand.psi_ubound_log", "psi ?n <= 551 / 256 * ln 2 * real ?n",
     template_inequation
      (less_equals, template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3, template_hole 2))))))))))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_hole 2))))))))))),
             template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app (template_hole 3, template_hole 2))))),
         template_app (template_hole 0, template_var 0)))),
    ("Bertrand.psi_double_lemma",
     "1200 <= ?n ==> real ?n / 6 <= psi ?n - psi (?n div 2)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app
             (template_hole 9,
              template_app
               (template_hole 9,
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 9,
                              template_app
                               (template_hole 9, template_hole 7))))))))))),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 7)))))))),
    ("Bertrand.primepow_cases",
     "primepow ?d =
      (primepow_even ?d & ~ primepow_odd ?d & ~ prime ?d |
       ~ primepow_even ?d & primepow_odd ?d & ~ prime ?d |
       ~ primepow_even ?d & ~ primepow_odd ?d & prime ?d)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 0))))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 2,
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 0))))))),
    ("Bertrand.psi_bounds_induct",
     "psi ?n - psi (?n div 2)
      <= real ?n * ln 2 + (4 * ln (real (if ?n = 0 then 1 else ?n)) + 3)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 0),
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_hole 10))))),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 11, template_hole 10))))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 11, template_hole 10)))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2)),
                       template_hole 1),
                     template_var 0))))),
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_hole 10)))))),
    ("Bertrand.floor_half_interval",
     "?d ~= 0 ==>
      real (?n div ?d) - real (2 * (?n div 2 div ?d)) =
      (if odd (?n div ?d) then 1 else 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)))),
                 template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)))),
    ("Bertrand.sum_expand_lemma",
     "(SUM d = 1..?n. (- 1) ^ (d + 1) * psi (?n div d)) =
      (SUM d = 1..?n. (if odd (?n div d) then 1 else 0) * mangoldt d)",
     template_equation
      (template_app
        (template_app (template_hole 17, t_empty),
         template_app
          (template_app (template_hole 8, template_hole 11),
           template_var 0)),
       template_app
        (template_app (template_hole 17, t_empty),
         template_app
          (template_app (template_hole 8, template_hole 11),
           template_var 0)))),
    ("Bertrand.eval_psi_aux2",
     "[| psi ?m = ln (real (numeral ?x)); pre_mangoldt ?n = ?y; ?m + 1 = ?n;
         numeral ?x * ?y = ?z |]
      ==> psi ?n = ln (real ?z)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)))),
        template_equation
         (template_app (template_hole 3, template_var 2), template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4),
            template_hole 1),
          template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 0,
              template_app (template_hole 5, template_var 3)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))))),
    ("Bertrand.Mertens_mangoldt_versus_ln",
     "?I <= {1..?n} ==>
      \<bar>(SUM i:?I. mangoldt i / real i) -
            (SUM p | prime p & p : ?I. ln (real p) / real p)\<bar>
      <= 3",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, t_empty), template_var 1)),
             template_app
              (template_app (template_hole 11, t_empty),
               template_app (template_hole 6, t_empty)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bertrand.eval_psi_ineq_aux2",
     "(numeral ?m)\<^sup>2 <= 2 ^ (3 * ?n) ==>
      ln (real (numeral ?m)) <= 3 / 2 * ln 2 * real ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1)),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))),
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 10,
                  template_app (template_hole 6, template_hole 8))),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 10, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 6, template_hole 8))),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_hole 8)))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 9, template_hole 8))))),
           template_app (template_hole 3, template_var 0))))),
    ("Bertrand.fact_psi_bound_even",
     "even ?k ==>
      (SUM d = 1..?k. (- 1) ^ (d + 1) * psi (?n div d))
      <= ln (fact ?n) - 2 * ln (fact (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_hole 15))),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 7),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 0,
                 template_app (template_hole 16, template_hole 15))),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 17,
                     template_app
                      (template_hole 16, template_hole 15)))))))))),
    ("Bertrand.fact_psi_bound_odd",
     "odd ?k ==>
      ln (fact ?n) - 2 * ln (fact (?n div 2))
      <= (SUM d = 1..?k. (- 1) ^ (d + 1) * psi (?n div d))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_hole 17,
                      template_app (template_hole 16, template_hole 15))),
                  template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 0))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 16, template_hole 15))),
             template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 17,
                     template_app
                      (template_hole 16, template_hole 15))))))),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 1))))),
    ("Bertrand.ln_fact_diff_bounds",
     "\<bar>ln (fact ?n) - 2 * ln (fact (?n div 2)) - real ?n * ln 2\<bar>
      <= 4 * ln (real (if ?n = 0 then 1 else ?n)) + 3",
     template_inequation
      (less_equals,
       template_app
        (template_hole 16,
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 0))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9))),
                 template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 10, template_hole 9)))))))),
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_hole 14,
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9)))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 10, template_hole 9)))),
             template_app
              (template_hole 14,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)),
                     template_hole 1),
                   template_var 0))))),
         template_app
          (template_hole 11,
           template_app (template_hole 0, template_hole 9))))),
    ("Bertrand.eval_psi_ineq_aux",
     "[| psi ?n = ?x; ?x <= 3 / 2 * ln 2 * real ?n |]
      ==> psi ?n <= 3 / 2 * ln 2 * real ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1), template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_app
                     (template_hole 5,
                      template_app (template_hole 2, template_hole 3)))),
                template_app
                 (template_hole 1,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 2, template_hole 3))))),
            template_app (template_hole 0, template_var 1)))],
       template_inequation
        (less_equals, template_app (template_hole 9, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3))),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 2, template_hole 3)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_hole 3))))),
           template_app (template_hole 0, template_var 1))))),
    ("Bertrand.psi_expansion_cutoff",
     "?m <= ?p ==>
      (SUM d = 1..2 * ?m. (- 1) ^ (d + 1) * psi (?n div d))
      <= (SUM d = 1..2 * ?p. (- 1) ^ (d + 1) * psi (?n div d))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 7),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 2))),
         template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 7),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 1)))))),
    ("Bertrand.psi_ubound_aux",
     "[| 2 <= ?x; ?x <= ?y |]
      ==> (4 * ln ?y + 3) / (ln 2 * ?y) <= (4 * ln ?x + 3) / (ln 2 * ?x)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 6, template_hole 5)))),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 7,
                 template_app (template_hole 0, template_hole 5)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 6, template_hole 5)))),
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_hole 7,
                 template_app (template_hole 0, template_hole 5)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))),
             template_var 1))))),
    ("Bertrand.psi_expansion_cutoff",
     "?m <= ?p ==>
      (SUM d = 1..2 * ?p + 1. (- 1) ^ (d + 1) * psi (?n div d))
      <= (SUM d = 1..2 * ?m + 1. (- 1) ^ (d + 1) * psi (?n div d))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 7),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 1)),
               template_hole 7))),
         template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 7),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 2)),
               template_hole 7)))))),
    ("Bertrand.overpower_lemma",
     "[| ?f ?a <= ?g ?a;
         !!x. ?a <= x ==>
              ((%x. ?g x - ?f x) has_real_derivative ?d x) (at x);
         !!x. ?a <= x ==> 0 <= ?d x; ?a <= ?x |]
      ==> ?f ?x <= ?g ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 4, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Bertrand.eval_psi_ineq_aux_mono",
     "[| psi ?n = ?x; psi ?m = ?x; psi ?n <= 3 / 2 * ln 2 * real ?n;
         ?n <= ?m |]
      ==> psi ?m <= 3 / 2 * ln 2 * real ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 10, template_var 0), template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 3, template_hole 4)))),
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 3, template_hole 4))))),
            template_app (template_hole 1, template_var 2))),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 3, template_hole 4)))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 3, template_hole 4))))),
           template_app (template_hole 1, template_var 0))))),
    ("Bertrand.sum_integral_ubound_decreasing'",
     "[| ?m <= ?n;
         !!x. x : {real ?m - 1..real ?n} ==>
              (?g has_real_derivative ?f x) (at x);
         !!x y.
            [| real ?m - 1 <= x; x <= y; y <= real ?n |] ==> ?f y <= ?f x |]
      ==> (SUM k = ?m..?n. ?f (real k)) <= ?g (real ?n) - ?g (real ?m - 1)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_var 1,
               template_app (template_hole 7, template_var 2))),
           template_app
            (template_var 1,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 3)),
               template_hole 6)))))),
    ("Bertrand.Ball_atLeast0AtMost_insert",
     "[| ALL x:{0..?m}. psi x <= 3 / 2 * ln 2 * real x;
         psi (numeral ?n) <= 3 / 2 * ln 2 * real (numeral ?n);
         ?m = pred_numeral ?n |]
      ==> ALL x:{0..numeral ?n}. psi x <= 3 / 2 * ln 2 * real x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 1)),
              t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app (template_hole 2, template_var 0)),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_hole 6))),
                    template_app
                     (template_hole 8,
                      template_app (template_hole 5, template_hole 6)))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 5, template_hole 6))))),
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)))),
        template_equation
         (template_var 1, template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("Bertrand.psi_ubound_log_double_cases",
     "[| ALL n<=?m. psi n <= ?c * ln 2 * real n;
         1 + ?c / 2 + (4 * ln (real ?m + 1) + 3) / (ln 2 * (real ?m + 1))
         <= ?c';
         ?m' = 2 * ?m; ?c <= ?c'; 0 <= ?c; 1 <= ?m |]
      ==> ALL n<=?m'. psi n <= ?c' * ln 2 * real n",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))))),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 11, template_hole 10)))),
                      template_app
                       (template_hole 13,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app (template_hole 9, template_var 3)),
                          template_hole 7)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 5, template_hole 10)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10)))),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 9, template_var 3)),
                  template_hole 7)))),
          template_var 1),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 11, template_hole 10))),
            template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_hole 0, template_var 3)],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("Bertrand.psi_ubound_log_double_cases'",
     "[| !!n. n <= ?m ==> psi n <= ?c * ln 2 * real n; ?n <= ?m';
         ?m' = 2 * ?m; ?c <= ?c'; 0 <= ?c; 1 <= ?m;
         1 + ?c / 2 + (4 * ln (real ?m + 1) + 3) / (ln 2 * (real ?m + 1))
         <= ?c' |]
      ==> psi ?n <= ?c' * ln 2 * real ?n",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 11, template_hole 10))),
            template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_equals, template_hole 5, template_var 3),
        template_inequation (less_equals, template_hole 4, template_var 4),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))))),
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 11, template_hole 10)))),
                      template_app
                       (template_hole 13,
                        template_app
                         (template_app
                           (template_hole 3,
                            template_app (template_hole 9, template_var 4)),
                          template_hole 2)))),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 0, template_hole 10)))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10)))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 9, template_var 4)),
                  template_hole 2)))),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 15, template_var 2),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 14, template_var 0),
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))))),
           template_app (template_hole 9, template_var 2))))),
    ("Bertrand.psi_bounds_sustained",
     "[| !!n. n <= 2 ^ ?k ==> psi n <= ?c * ln 2 * real n;
         4 * ln (1 + 2 ^ ?k) + 3 <= (?c / 2 - 1) * ln 2 * (1 + 2 ^ ?k);
         4 / (1 + 2 ^ ?k) <= (?c / 2 - 1) * ln 2; 0 <= ?c |]
      ==> psi ?n <= ?c * ln 2 * real ?n",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 14, template_hole 13)))),
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 14, template_hole 13))),
                      template_var 2))))),
            template_app
             (template_hole 8,
              template_app (template_hole 3, template_hole 13))),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 14, template_hole 13)))),
                    template_hole 5)),
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 14, template_hole 13))))),
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 14, template_hole 13))),
                template_var 2)))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_hole 8,
                template_app
                 (template_hole 14,
                  template_app (template_hole 14, template_hole 13)))),
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 14, template_hole 13))),
                template_var 2))),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_app
                     (template_hole 8,
                      template_app (template_hole 14, template_hole 13)))),
                template_hole 5)),
            template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 14, template_hole 13))))),
        template_inequation (less_equals, template_hole 0, template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 11, template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 14, template_hole 13))))),
           template_app (template_hole 7, template_var 0))))),
    ("Bertrand.psi_bounds_sustained_induct",
     "[| 4 * ln (1 + 2 ^ ?j) + 3 <= ?d * ln 2 * (1 + 2 ^ ?j);
         4 / (1 + 2 ^ ?j) <= ?d * ln 2; 0 <= ?c; ?c / 2 + ?d + 1 <= ?c;
         ?j <= ?k; !!n. n <= 2 ^ ?k ==> psi n <= ?c * ln 2 * real n;
         ?n <= 2 ^ Suc ?k |]
      ==> psi ?n <= ?c * ln 2 * real ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 14, template_hole 13)))),
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 17, template_hole 11),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 15,
                          template_app
                           (template_hole 14, template_hole 13))),
                      template_var 4))))),
            template_app
             (template_hole 15,
              template_app (template_hole 9, template_hole 13))),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 16, template_var 3),
                template_app
                 (template_hole 12,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13))))),
            template_app
             (template_app (template_hole 17, template_hole 11),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13))),
                template_var 4)))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app (template_hole 14, template_hole 13)))),
            template_app
             (template_app (template_hole 17, template_hole 11),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13))),
                template_var 4))),
          template_app
           (template_app (template_hole 16, template_var 3),
            template_app
             (template_hole 12,
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_hole 13))))),
        template_inequation (less_equals, template_hole 7, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_app
                     (template_hole 15,
                      template_app (template_hole 14, template_hole 13)))),
                template_var 3)),
            template_hole 11),
          template_var 2),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 14, template_hole 13))),
            template_app (template_hole 0, template_var 1)))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 16, template_var 2),
               template_app
                (template_hole 12,
                 template_app
                  (template_hole 15,
                   template_app (template_hole 14, template_hole 13))))),
           template_app (template_hole 1, template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.BertrandMoreTemplates"
### 0.723s elapsed time, 1.098s cpu time, 0.134s GC time
val it = (): unit
