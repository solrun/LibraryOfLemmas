Loading theory "Draft.Core_DOM_Basic_Datatypes" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass")
Loading theory "Draft.Hiding_Type_Variables" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass" via "Draft.Ref")
Loading theory "Draft.Templates" (required by "Draft.NodeMonadTemplates" via "Draft.ExtrEqs")
locale l_dummy
### theory "Draft.Core_DOM_Basic_Datatypes"
### 0.042s elapsed time, 0.163s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.230s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NodeMonadTemplates")
signature HIDE_TVAR =
  sig
    val hide_tvar_ast_tr: Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_return_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_tr': string -> Proof.context -> term list -> term
    type hide_varT =
       {name: string,
        parse_mode: parse_mode,
        print_mode: print_mode,
        tvars: typ list,
        typ_syn_tab: (string * typ list * string) Symtab.table}
    val lookup: theory -> string -> hide_varT option
    datatype parse_mode = noparse | parse
    val parse_parse_mode: string -> parse_mode
    val parse_print_mode: string -> print_mode
    datatype print_mode = noprint | print | print_all
    val register:
       string -> print_mode option -> parse_mode option -> theory -> theory
    datatype tvar_subst = left | right
    val update_mode:
       string -> print_mode option -> parse_mode option -> theory -> theory
  end
structure Hide_Tvar: HIDE_TVAR
val modeP = fn: Token.T list -> (string * string) * Token.T list
val typ_modeP = fn:
   Token.T list -> (string * (string * string)) * Token.T list
### theory "Draft.Hiding_Type_Variables"
### 0.592s elapsed time, 1.281s cpu time, 0.101s GC time
Loading theory "Draft.Ref" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass")
Loading theory "Draft.Heap_Error_Monad" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.BaseMonad")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.177s cpu time, 0.101s GC time
instantiation
  sum :: (linorder, linorder) linorder
  less_eq_sum == less_eq :: 'a + 'b => 'a + 'b => bool
  less_sum == less :: 'a + 'b => 'a + 'b => bool
### theory "Draft.Ref"
### 0.127s elapsed time, 0.293s cpu time, 0.000s GC time
Loading theory "Draft.ObjectPointer" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.ObjectClass")
Loading theory "Draft.BaseClass" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad" via "Draft.BaseMonad")
instantiation
  (_) object_ptr :: (linorder) linorder
  less_eq_object_ptr == less_eq :: (_) object_ptr => (_) object_ptr => bool
  less_object_ptr == less :: (_) object_ptr => (_) object_ptr => bool
### theory "Draft.ObjectPointer"
### 0.376s elapsed time, 1.134s cpu time, 0.158s GC time
Loading theory "Draft.NodePointer" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.NodeClass")
locale l_type_wf
  fixes type_wf :: "'heap => bool"
locale l_known_ptr
  fixes known_ptr :: "'ptr => bool"
### theory "Draft.BaseClass"
### 0.492s elapsed time, 1.487s cpu time, 0.158s GC time
Loading theory "Draft.ObjectClass" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad")
Found termination order: "{}"
Found termination order: "{}"
instantiation
  (_) node_ptr :: (linorder) linorder
  less_eq_node_ptr == less_eq :: (_) node_ptr => (_) node_ptr => bool
  less_node_ptr == less :: (_) node_ptr => (_) node_ptr => bool
Found termination order: "{}"
### theory "Draft.NodePointer"
### 0.534s elapsed time, 1.593s cpu time, 0.455s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale l_type_wf_def\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t type_wf"
locale l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
locale l_known_ptr\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_known_ptrs
  fixes known_ptr :: "(_) object_ptr => bool"
    and known_ptrs :: "(_) heap => bool"
  assumes "l_known_ptrs known_ptr known_ptrs"
locale l_known_ptrs\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes known_ptr :: "(_) object_ptr => bool"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Type
### ((_) object_ptr, (_) Object) fmap => (_) object_ptr => (_) Object option
### of constant "Finite_Map.fmap.fmlookup"
### is too specific compared to declared type
### (?'a::{}, ?'b::{}) fmap => ?'a::{} => ?'b::{} option, in theorem:
### fmlookup (the_heap (create_heap ?xs)) ?x == map_of ?xs ?x
### theory "Draft.ObjectClass"
### 0.968s elapsed time, 2.403s cpu time, 0.580s GC time
Loading theory "Draft.NodeClass" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad")
### Ambiguous input (line 569 of "$AFP/Core_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###       ("_applC" ("_position" filter_M)
###         ("_cargs" ("_position" P) ("_position" xs)))
###       ("_position" ys)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_position" x)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" set) ("_position" xs))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("_applC"
###             ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###               ("_position" P))
###             ("_position" x)))
###         ("\<^const>HOL.eq" ("_position" ys)
###           ("_applC" ("_position" filter)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("\<^const>Heap_Error_Monad.select_result"
###                   ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                     ("_applC" ("_position" P) ("_position" x)))))
###               ("_position" xs))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###       ("_applC" ("_position" filter_M)
###         ("_cargs" ("_position" P) ("_position" xs)))
###       ("_position" ys)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_position" x)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" set) ("_position" xs))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>HOL.eq" ("_position" ys)
###           ("_applC" ("_position" filter)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("\<^const>Heap_Error_Monad.select_result"
###                   ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                     ("_applC" ("_position" P) ("_position" x)))))
###               ("_position" xs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 574 of "$AFP/Core_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h)))
###           ("_applC"
###             ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###               ("_position" P))
###             ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" filter)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("\<^const>Heap_Error_Monad.select_result"
###                 ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                   ("_applC" ("_position" P) ("_position" x)))))
###             ("_position" xs)))
###         ("_position" ys)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###         ("_applC" ("_position" filter_M)
###           ("_cargs" ("_position" P) ("_position" xs)))
###         ("_position" ys)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h)))
###           ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###             ("_applC" ("_position" P) ("_position" x)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" filter)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("\<^const>Heap_Error_Monad.select_result"
###                 ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                   ("_applC" ("_position" P) ("_position" x)))))
###             ("_position" xs)))
###         ("_position" ys)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###         ("_applC" ("_position" filter_M)
###           ("_cargs" ("_position" P) ("_position" xs)))
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 681 of "$AFP/Core_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Monad_Syntax.bind"
###       ("\<^const>Heap_Error_Monad.execute" ("_position" h) ("_position" f))
###       ("_position" g))
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h')
###       ("_applC" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###       ("\<^const>Monad_Syntax.bind" ("_position" f) ("_position" g)))
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h')
###       ("_applC" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Heap_Error_Monad"
### 1.821s elapsed time, 4.669s cpu time, 0.800s GC time
Loading theory "Draft.BaseMonad" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad" via "Draft.ObjectMonad")
locale l_type_wf_def\<^sub>N\<^sub>o\<^sub>d\<^sub>e
locale l_type_wf\<^sub>N\<^sub>o\<^sub>d\<^sub>e
  fixes type_wf :: "(_) heap => bool"
  assumes "l_type_wf\<^sub>N\<^sub>o\<^sub>d\<^sub>e type_wf"
locale l_get\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes "l_get\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas type_wf"
locale l_known_ptr\<^sub>N\<^sub>o\<^sub>d\<^sub>e
locale l_known_ptrs\<^sub>N\<^sub>o\<^sub>d\<^sub>e
  fixes known_ptr :: "(_) object_ptr => bool"
### theory "Draft.NodeClass"
### 0.447s elapsed time, 0.947s cpu time, 0.119s GC time
locale l_ptr_kinds_M
  fixes ptr_kinds :: "'heap => 'ptr fset"
locale l_get_M
  fixes get :: "'ptr => 'heap => 'obj option"
    and type_wf :: "'heap => bool"
    and ptr_kinds :: "'heap => 'ptr fset"
  assumes "l_get_M get type_wf ptr_kinds"
locale l_put_M
  fixes type_wf :: "'heap => bool"
    and ptr_kinds :: "'heap => 'ptr fset"
    and get :: "'ptr => 'heap => 'obj option"
    and put :: "'ptr => 'obj => 'heap => 'heap"
  assumes "l_put_M type_wf ptr_kinds get"
### Cannot skip proof of schematic goal statement
### theory "Draft.BaseMonad"
### 0.796s elapsed time, 1.063s cpu time, 0.105s GC time
Loading theory "Draft.ObjectMonad" (required by "Draft.NodeMonadTemplates" via "Draft.NodeMonad")
locale l_get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
### Cannot skip proof of schematic goal statement
locale l_put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.ObjectMonad"
### 0.585s elapsed time, 1.044s cpu time, 0.634s GC time
Loading theory "Draft.NodeMonad" (required by "Draft.NodeMonadTemplates")
locale l_get_M\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes "l_get_M\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas type_wf"
### Cannot skip proof of schematic goal statement
locale l_put_M\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes "l_put_M\<^sub>N\<^sub>o\<^sub>d\<^sub>e_lemmas type_wf"
### theory "Draft.NodeMonad"
### 0.266s elapsed time, 0.294s cpu time, 0.039s GC time
Loading theory "Draft.NodeMonadTemplates"
val templateLemmas =
   [("NodeMonad.ptr_kinds_M_ok", "?h \<turnstile> ok node_ptr_kinds_M",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("NodeMonad.ptr_kinds_M_pure", "pure node_ptr_kinds_M ?h",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("NodeMonad.get_M_pure", "pure (get_M ?ptr ?getter) ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("NodeMonad.ptr_kinds_M_ptr_kinds",
     "?h \<turnstile> node_ptr_kinds_M \<rightarrow>\<^sub>r ?xa =
      (?xa = sorted_list_of_set (fset (node_ptr_kinds ?h)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("NodeMonad.get_M_ptr_in_heap",
     "?h \<turnstile> ok get_M ?ptr ?getter ==>
      ?ptr |\<in>| node_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("NodeMonad.get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ptr_in_heap",
     "?h \<turnstile> ok get_M ?ptr ?getter ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("NodeMonad.ptr_kinds_ptr_kinds_M",
     "(?ptr : set |?h \<turnstile> node_ptr_kinds_M|\<^sub>r) =
      (?ptr |\<in>| node_ptr_kinds ?h)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("NodeMonad.put_M_ptr_in_heap",
     "?h \<turnstile> ok put_M ?ptr ?setter ?v ==>
      ?ptr |\<in>| node_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 3))
           ))),
    ("NodeMonad.put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ptr_in_heap",
     "?h \<turnstile> ok put_M ?ptr ?setter ?v ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 3))
           ))),
    ("NodeMonad.node_ptr_kinds_M_reads",
     "reads (UN object_ptr. {preserved (get_M object_ptr RObject.nothing)})
       node_ptr_kinds_M ?h ?h'",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, t_empty),
                     template_hole 1))),
               template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("NodeMonad.ptr_kinds_M_ptr_kinds_returns_heap",
     "?h \<turnstile> node_ptr_kinds_M >>= ?f \<rightarrow>\<^sub>h ?h' =
      ?h \<turnstile> ?f (sorted_list_of_set (fset (node_ptr_kinds ?h)))
      \<rightarrow>\<^sub>h ?h'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_var 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))),
         template_var 0))),
    ("NodeMonad.ptr_kinds_M_ptr_kinds_returns_result",
     "?h \<turnstile> node_ptr_kinds_M >>= ?f \<rightarrow>\<^sub>r ?x =
      ?h \<turnstile> ?f (sorted_list_of_set (fset (node_ptr_kinds ?h)))
      \<rightarrow>\<^sub>r ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_var 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))),
         template_var 0))),
    ("NodeMonad.node_ptr_kinds_small",
     "(!!object_ptr.
          preserved (get_M object_ptr RObject.nothing) ?h ?h') ==>
      node_ptr_kinds ?h = node_ptr_kinds ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("NodeMonad.get_M_ok",
     "[| NodeClass.type_wf ?h; ?ptr |\<in>| node_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok get_M ?ptr ?getter",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NodeMonad.get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ok",
     "[| NodeClass.type_wf ?h; ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok get_M ?ptr ?getter",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NodeMonad.put_M_ok",
     "[| NodeClass.type_wf ?h; ?ptr |\<in>| node_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok put_M ?ptr ?setter ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("NodeMonad.put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ok",
     "[| NodeClass.type_wf ?h; ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok put_M ?ptr ?setter ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("NodeMonad.type_wf_put_ptr_not_in_heap_E",
     "[| NodeClass.type_wf (put ?ptr ?obj ?h);
         ?ptr |\<notin>| object_ptr_kinds ?h |]
      ==> NodeClass.type_wf ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_app (template_hole 0, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("NodeMonad.get_node_ptr_simp",
     "get ?node_ptr (put ?ptr ?obj ?h) =
      (if ?ptr = cast ?node_ptr then cast ?obj else get ?node_ptr ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 1, template_var 3))),
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 0))
           ))),
    ("NodeMonad.node_ptr_kinds_simp",
     "node_ptr_kinds (put ?ptr ?obj ?h) =
      node_ptr_kinds ?h |\<union>|
      (if is_node_ptr_kind ?ptr then {|the (cast ?ptr)|} else {||})",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))),
               template_hole 0)),
           template_hole 0)))),
    ("NodeMonad.node_ptr_kinds_M_eq",
     "|?h \<turnstile> object_ptr_kinds_M|\<^sub>r =
      |?h' \<turnstile> object_ptr_kinds_M|\<^sub>r ==>
      |?h \<turnstile> node_ptr_kinds_M|\<^sub>r =
      |?h' \<turnstile> node_ptr_kinds_M|\<^sub>r",
     template_implication
      ([template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("NodeMonad.get_M_Object_preserved2",
     "[| cast ?node_ptr ~= ?object_ptr;
         ?h \<turnstile> put_M ?node_ptr ?setter ?v
         \<rightarrow>\<^sub>h ?h' |]
      ==> preserved (get_M ?object_ptr ?getter) ?h ?h'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0)),
               template_var 4),
             template_var 1)
           ))),
    ("NodeMonad.get_M_Object_preserved4",
     "[| cast ?node_ptr ~= ?object_ptr;
         ?h \<turnstile> put_M ?object_ptr ?setter ?v
         \<rightarrow>\<^sub>h ?h' |]
      ==> preserved (get_M ?node_ptr ?getter) ?h ?h'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 0)),
               template_var 4),
             template_var 1)
           ))),
    ("NodeMonad.type_wf_put_I",
     "[| NodeClass.type_wf ?h; ObjectClass.type_wf (put ?ptr ?obj ?h);
         is_node_ptr_kind ?ptr ==> is_node_kind ?obj |]
      ==> NodeClass.type_wf (put ?ptr ?obj ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0),
                template_var 2))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate
           (template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("NodeMonad.type_wf_preserved_small",
     "[| !!object_ptr. preserved (get_M object_ptr RObject.nothing) ?h ?h';
         !!node_ptr. preserved (get_M node_ptr RNode.nothing) ?h ?h' |]
      ==> NodeClass.type_wf ?h = NodeClass.type_wf ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("NodeMonad.get_M_Object_preserved3",
     "[| ?h \<turnstile> put_M ?node_ptr ?setter ?v
         \<rightarrow>\<^sub>h ?h';
         !!x. ?getter (cast (?setter (%_. ?v) x)) = ?getter (cast x) |]
      ==> preserved (get_M ?object_ptr ?getter) ?h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 6),
             template_var 2)
           ))),
    ("NodeMonad.get_M_Object_preserved1",
     "[| !!x. ?getter (cast (?setter (%_. ?v) x)) = ?getter (cast x);
         ?h \<turnstile> put_M ?node_ptr ?setter ?v
         \<rightarrow>\<^sub>h ?h' |]
      ==> preserved (get_M ?object_ptr ?getter) ?h ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 5),
                  template_var 4)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 6)),
               template_var 3),
             template_var 1)
           ))),
    ("NodeMonad.type_wf_put_ptr_in_heap_E",
     "[| NodeClass.type_wf (put ?ptr ?obj ?h);
         ?ptr |\<in>| object_ptr_kinds ?h; ObjectClass.type_wf ?h;
         is_node_ptr_kind ?ptr ==> is_node_kind (the (get ?ptr ?h)) |]
      ==> NodeClass.type_wf ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_hole 3, template_var 2))],
          template_predicate
           (
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 0)))
              ))],
       template_predicate
        (template_app (template_hole 8, template_var 0)))),
    ("NodeMonad.node_ptr_kinds_preserved",
     "[| writes ?SW ?setter ?h ?h';
         ?h \<turnstile> ?setter \<rightarrow>\<^sub>h ?h';
         !!h h'.
            ALL w:?SW.
               h \<turnstile> w \<rightarrow>\<^sub>h h' -->
               (ALL object_ptr.
                   preserved (get_M object_ptr RObject.nothing) h h') |]
      ==> node_ptr_kinds ?h = node_ptr_kinds ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("NodeMonad.type_wf_preserved",
     "[| writes ?SW ?setter ?h ?h';
         ?h \<turnstile> ?setter \<rightarrow>\<^sub>h ?h';
         !!h h' w.
            [| w : ?SW; h \<turnstile> w \<rightarrow>\<^sub>h h' |]
            ==> ALL object_ptr.
                   preserved (get_M object_ptr RObject.nothing) h h';
         !!h h' w.
            [| w : ?SW; h \<turnstile> w \<rightarrow>\<^sub>h h' |]
            ==> ALL node_ptr.
                   preserved (get_M node_ptr RNode.nothing) h h' |]
      ==> NodeClass.type_wf ?h = NodeClass.type_wf ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.NodeMonadTemplates"
### 0.508s elapsed time, 0.674s cpu time, 0.070s GC time
val it = (): unit
