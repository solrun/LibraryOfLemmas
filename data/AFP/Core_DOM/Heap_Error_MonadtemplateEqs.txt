   [("Heap_Error_Monad.return_id", "?f >>= return = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Heap_Error_Monad.error_bind", "error ?e >>= ?g = error ?e",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Heap_Error_Monad.return_bind", "return ?x >>= ?g = ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Heap_Error_Monad.noop_returns_heap",
     "?h \<turnstile> noop \<rightarrow>\<^sub>h ?h' = (?h = ?h')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Heap_Error_Monad.return_returns_heap",
     "?h \<turnstile> return ?x \<rightarrow>\<^sub>h ?h' = (?h = ?h')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Heap_Error_Monad.return_heap_E",
     "?h \<turnstile> return_heap ?h' \<rightarrow>\<^sub>h ?h'' =
      (?h'' = ?h')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Heap_Error_Monad.return_returns_result",
     "?h \<turnstile> return ?x \<rightarrow>\<^sub>r ?y = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Heap_Error_Monad.get_heap_is_OK",
     "?h \<turnstile> ok (get_heap >>= ?f) = ?h \<turnstile> ok ?f ?h",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0), t_empty)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Heap_Error_Monad.bind_assoc",
     "?f >>= ?g >>= ?h = ?f >>= (%x. ?g x >>= ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Heap_Error_Monad.get_heap_returns_heap",
     "?h \<turnstile> get_heap >>= ?f \<rightarrow>\<^sub>h ?h'' =
      ?h \<turnstile> ?f ?h \<rightarrow>\<^sub>h ?h''",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_hole 0), t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_var 1, template_var 2)),
         template_var 0))),
    ("Heap_Error_Monad.get_heap_returns_result",
     "?h \<turnstile> get_heap >>= ?f \<rightarrow>\<^sub>r ?x =
      ?h \<turnstile> ?f ?h \<rightarrow>\<^sub>r ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_hole 0), t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_var 1, template_var 2)),
         template_var 0))),
    ("Heap_Error_Monad.pure_eq_iff",
     "(ALL h' x.
          ?h \<turnstile> ?f \<rightarrow>\<^sub>r x -->
          ?h \<turnstile> ?f \<rightarrow>\<^sub>h h' --> ?h = h') =
      pure ?f ?h",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Heap_Error_Monad.return_result_heap_code",
     "?h \<turnstile> ?p
      \<rightarrow>\<^sub>r ?r \<rightarrow>\<^sub>h ?h' =
      (case ?h \<turnstile> ?p of Inl x => False
       | Inr (r', h'') => ?r = r' & ?h' = h'')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 6, t_empty), t_empty),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("Heap_Error_Monad.preserved_code",
     "preserved ?f ?h ?h' =
      (?h \<turnstile> ok ?f &
       ?h' \<turnstile> ok ?f &
       |?h \<turnstile> ?f|\<^sub>r = |?h' \<turnstile> ?f|\<^sub>r |
       ~ ?h \<turnstile> ok ?f & ~ ?h' \<turnstile> ok ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno))]
