Loading theory "Draft.MyTactics" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.During_Execution" via "Draft.Bisim" via "Draft.Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
val impI = "(?P ==> ?Q) ==> ?P --> ?Q": thm
val allI = "(!!x. ?P x) ==> ALL x. ?P x": thm
val ballI = "(!!x. x : ?A ==> ?P x) ==> ALL x:?A. ?P x": thm
val conjE = "[| ?P & ?Q; [| ?P; ?Q |] ==> ?R |] ==> ?R": thm
val conjI = "[| ?P; ?Q |] ==> ?P & ?Q": thm
val exE = "[| EX x. ?P x; !!x. ?P x ==> ?Q |] ==> ?Q": thm
val disjE = "[| ?P | ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R": thm
val mclarTacs = fn: Proof.context -> int -> tactic list
val mclarify_all_tac = fn: Proof.context -> tactic
val mclarsimp_all_tac = fn: Proof.context -> tactic
val mautoTacs = fn: Proof.context -> int -> tactic list
val mauto_no_simp_tac = fn: Proof.context -> tactic
val clarify_all_tac = fn: Proof.context -> tactic
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.MyTactics"
### 0.046s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.Interface" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.During_Execution" via "Draft.Bisim")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Interface"
### 0.032s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.Bisim" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.During_Execution")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.569s cpu time, 0.044s GC time
Loading theory "Draft.Language_Semantics" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.During_Execution")
### theory "Draft.Bisim"
### 0.094s elapsed time, 0.362s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.984s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.431s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.752s cpu time, 0.927s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.091s elapsed time, 3.961s cpu time, 0.912s GC time
Found termination order: "size <*mlex*> {}"
locale PL
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
locale PL
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "transT"
  Proving monotonicity ...
Proofs for inductive predicate(s) "transC", "MtransC"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "MtransT"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. numSt (while v do va) = undefined
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "mayDiverge"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 1.986s elapsed time, 6.223s cpu time, 1.171s GC time
Loading theory "Draft.Templates" (required by "Draft.ConcreteMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConcreteMoreTemplates")
### theory "Draft.Language_Semantics"
### 2.103s elapsed time, 6.523s cpu time, 1.171s GC time
Loading theory "Draft.During_Execution" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality")
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
Proofs for coinductive predicate(s) "discr"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "discr0"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "siso"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.147s cpu time, 0.117s GC time
Proofs for coinductive predicate(s) "siso0"
  Proving monotonicity ...
### theory "Draft.During_Execution"
### 1.092s elapsed time, 1.705s cpu time, 0.195s GC time
Loading theory "Draft.After_Execution" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete")
Loading theory "Draft.Compositionality" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria")
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
consts
  parTrace :: "(('test, 'atom) com * 'state) list => bool"
Found termination order: "{}"
### theory "Draft.After_Execution"
### 0.461s elapsed time, 0.981s cpu time, 0.140s GC time
### theory "Draft.Compositionality"
### 0.846s elapsed time, 1.383s cpu time, 0.182s GC time
Loading theory "Draft.Syntactic_Criteria" (required by "Draft.ConcreteMoreTemplates" via "Draft.Concrete")
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
consts
  SC_discr :: "('a, 'atom) com => bool"
consts
  SC_siso :: "('test, 'atom) com => bool"
### Ambiguous input (line 127 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_WbisT)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_WbisT) ("_position" c1))
###         ("_applC" ("_position" SC_WbisT) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" noWhile)
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" tst)
###                 ("_cargs" ("_position" c1) ("_position" c2)))))
###           ("_applC" ("_position" SC_discr)
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" tst)
###                 ("_cargs" ("_position" c1) ("_position" c2))))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_WbisT)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_WbisT) ("_position" c1))
###         ("_applC" ("_position" SC_WbisT) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" noWhile)
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" tst)
###                 ("_cargs" ("_position" c1) ("_position" c2)))))
###           ("_applC" ("_position" SC_discr)
###             ("_applC" ("_position" If)
###               ("_cargs" ("_position" tst)
###                 ("_cargs" ("_position" c1) ("_position" c2))))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_WbisT)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" tst) ("_position" c))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("_applC" ("_position" SC_WbisT) ("_position" c))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" noWhile)
###             ("_applC" ("_position" While)
###               ("_cargs" ("_position" tst) ("_position" c))))
###           ("_applC" ("_position" SC_discr)
###             ("_applC" ("_position" While)
###               ("_cargs" ("_position" tst) ("_position" c)))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_WbisT)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" tst) ("_position" c))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("_applC" ("_position" SC_WbisT) ("_position" c))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" noWhile)
###             ("_applC" ("_position" While)
###               ("_cargs" ("_position" tst) ("_position" c))))
###           ("_applC" ("_position" SC_discr)
###             ("_applC" ("_position" While)
###               ("_cargs" ("_position" tst) ("_position" c)))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  SC_WbisT :: "('test, 'atom) com => bool"
### Ambiguous input (line 145 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_ZObis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_ZObis) ("_position" c1))
###         ("_applC" ("_position" SC_ZObis) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_ZObis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_ZObis) ("_position" c1))
###         ("_applC" ("_position" SC_ZObis) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_siso)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  SC_ZObis :: "('test, 'atom) com => bool"
### Ambiguous input (line 161 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_Wbis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj" ("_applC" ("_position" SC_Wbis) ("_position" c1))
###         ("_applC" ("_position" SC_Wbis) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_ZObis)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_Wbis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj" ("_applC" ("_position" SC_Wbis) ("_position" c1))
###         ("_applC" ("_position" SC_Wbis) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_ZObis)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  SC_Wbis :: "('test, 'atom) com => bool"
### Ambiguous input (line 176 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_BisT)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj" ("_applC" ("_position" SC_BisT) ("_position" c1))
###         ("_applC" ("_position" SC_BisT) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_BisT)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj" ("_applC" ("_position" SC_BisT) ("_position" c1))
###         ("_applC" ("_position" SC_BisT) ("_position" c2)))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" If)
###             ("_cargs" ("_position" tst)
###               ("_cargs" ("_position" c1) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_BisT)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" tst) ("_position" c))))
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" compatTst) ("_position" tst))
###       ("_applC" ("_position" SC_BisT) ("_position" c))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_BisT)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" tst) ("_position" c))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("_applC" ("_position" SC_BisT) ("_position" c))
###       ("\<^const>HOL.disj"
###         ("_applC" ("_position" SC_discr)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))
###         ("_applC" ("_position" SC_WbisT)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" tst) ("_position" c))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  SC_BisT :: "('test, 'atom) com => bool"
### Ambiguous input (line 244 of "$AFP/Possibilistic_Noninterference/Syntactic_Criteria.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_ZObis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.If" ("_applC" ("_position" compatTst) ("_position" tst))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_ZObis) ("_position" c1))
###         ("_applC" ("_position" SC_ZObis) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" SC_discr) ("_position" c1))
###         ("_applC" ("_position" SC_discr) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" SC_ZObis)
###       ("_applC" ("_position" If)
###         ("_cargs" ("_position" tst)
###           ("_cargs" ("_position" c1) ("_position" c2)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Language_Semantics.com.If"
###         ("_applC" ("_position" compatTst) ("_position" tst))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" SC_ZObis) ("_position" c1))
###           ("_applC" ("_position" SC_ZObis) ("_position" c2)))
###         ("_applC" ("_position" SC_discr) ("_position" c1)))
###       ("_applC" ("_position" SC_discr) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Syntactic_Criteria"
### 0.422s elapsed time, 0.450s cpu time, 0.039s GC time
Loading theory "Draft.Concrete" (required by "Draft.ConcreteMoreTemplates")
instantiation
  level :: complete_lattice
  Inf_level == Inf :: level set => level
  Sup_level == Sup :: level set => level
  bot_level == bot :: level
  sup_level == sup :: level => level => level
  top_level == top :: level
  inf_level == inf :: level => level => level
  less_eq_level == less_eq :: level => level => bool
  less_level == less :: level => level => bool
### Ambiguous input (line 64 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" inf) ("_cargs" ("_position" l1) ("_position" l2)))
###   ("\<^const>Language_Semantics.com.If"
###     ("\<^const>Set.member" ("_position" Lo)
###       ("_Finset" ("_args" ("_position" l1) ("_position" l2))))
###     ("_position" Lo) ("_position" Hi)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" inf) ("_cargs" ("_position" l1) ("_position" l2)))
###   ("\<^const>HOL.If"
###     ("\<^const>Set.member" ("_position" Lo)
###       ("_Finset" ("_args" ("_position" l1) ("_position" l2))))
###     ("_position" Lo) ("_position" Hi)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sup) ("_cargs" ("_position" l1) ("_position" l2)))
###   ("\<^const>Language_Semantics.com.If"
###     ("\<^const>Set.member" ("_position" Hi)
###       ("_Finset" ("_args" ("_position" l1) ("_position" l2))))
###     ("_position" Hi) ("_position" Lo)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" sup) ("_cargs" ("_position" l1) ("_position" l2)))
###   ("\<^const>HOL.If"
###     ("\<^const>Set.member" ("_position" Hi)
###       ("_Finset" ("_args" ("_position" l1) ("_position" l2))))
###     ("_position" Hi) ("_position" Lo)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" Inf) ("_position" L))
###   ("\<^const>Language_Semantics.com.If"
###     ("\<^const>Set.member" ("_position" Lo) ("_position" L))
###     ("_position" Lo) ("_position" Hi)))
### ("\<^const>Pure.eq" ("_applC" ("_position" Inf) ("_position" L))
###   ("\<^const>HOL.If"
###     ("\<^const>Set.member" ("_position" Lo) ("_position" L))
###     ("_position" Lo) ("_position" Hi)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" Sup) ("_position" L))
###   ("\<^const>Language_Semantics.com.If"
###     ("\<^const>Set.member" ("_position" Hi) ("_position" L))
###     ("_position" Hi) ("_position" Lo)))
### ("\<^const>Pure.eq" ("_applC" ("_position" Sup) ("_position" L))
###   ("\<^const>HOL.If"
###     ("\<^const>Set.member" ("_position" Hi) ("_position" L))
###     ("_position" Hi) ("_position" Lo)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sec :: "Concrete.var => level"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 167 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c1)
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" l))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c1)
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" l))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c2)
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c2)
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c3)
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Language_Semantics.com.Seq"
###         ("_assign" ("_position" h)
###           ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###         ("_assign" ("_position" h)
###           ("_applC" ("_position" Ct)
###             ("_Numeral" ("_constify" ("_position" 2))))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 3))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c3)
###     ("\<^const>Language_Semantics.com.If"
###       ("_applC" ("_position" Eq)
###         ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###           ("_applC" ("_position" Ct) ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Language_Semantics.com.Seq"
###         ("_assign" ("_position" h)
###           ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###         ("_assign" ("_position" h)
###           ("_applC" ("_position" Ct)
###             ("_Numeral" ("_constify" ("_position" 2))))))
###       ("_assign" ("_position" h)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 3))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" c9) ("_position" c7))
###     ("_assign" ("_position" l')
###       ("_applC" ("_position" Var) ("_position" l)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c9)
###     ("\<^const>Language_Semantics.com.Par" ("_position" c7)
###       ("_assign" ("_position" l')
###         ("_applC" ("_position" Var) ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.eq" ("_position" c10) ("_position" c5))
###     ("_assign" ("_position" l)
###       ("_applC" ("_position" Ct)
###         ("_Numeral" ("_constify" ("_position" 5)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c10)
###     ("\<^const>Language_Semantics.com.Par" ("_position" c5)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 5))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.eq" ("_position" c11) ("_position" c8))
###     ("_assign" ("_position" l)
###       ("_applC" ("_position" Ct)
###         ("_Numeral" ("_constify" ("_position" 5)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c11)
###     ("\<^const>Language_Semantics.com.Par" ("_position" c8)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 5))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Concrete.BisT_abbrev"
###     ("\<^const>Language_Semantics.com.Par" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))
###     ("\<^const>Language_Semantics.com.Par" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Concrete.BisT_abbrev"
###     ("\<^const>HOL.disj" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))
###     ("\<^const>Language_Semantics.com.Par" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Concrete.BisT_abbrev"
###     ("\<^const>Language_Semantics.com.Par" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))
###     ("\<^const>HOL.disj" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Concrete.BisT_abbrev"
###     ("\<^const>HOL.disj" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))
###     ("\<^const>HOL.disj" ("_position" c12)
###       ("_assign" ("_position" l)
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/Possibilistic_Noninterference/Concrete.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c13)
###     ("\<^const>Language_Semantics.com.Seq"
###       ("\<^const>HOL.If"
###         ("_applC" ("_position" Eq)
###           ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###             ("_applC" ("_position" Ct)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>Language_Semantics.com.Seq"
###           ("_assign" ("_position" h)
###             ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###           ("_assign" ("_position" l)
###             ("_applC" ("_position" Ct)
###               ("_Numeral" ("_constify" ("_position" 2))))))
###         ("_assign" ("_position" l)
###           ("_applC" ("_position" Ct)
###             ("_Numeral" ("_constify" ("_position" 2))))))
###       ("_assign" ("_position" l')
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c13)
###     ("\<^const>Language_Semantics.com.Seq"
###       ("\<^const>Language_Semantics.com.If"
###         ("_applC" ("_position" Eq)
###           ("_cargs" ("_applC" ("_position" Var) ("_position" h))
###             ("_applC" ("_position" Ct)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>Language_Semantics.com.Seq"
###           ("_assign" ("_position" h)
###             ("_applC" ("_position" Ct) ("\<^const>Groups.one_class.one")))
###           ("_assign" ("_position" l)
###             ("_applC" ("_position" Ct)
###               ("_Numeral" ("_constify" ("_position" 2))))))
###         ("_assign" ("_position" l)
###           ("_applC" ("_position" Ct)
###             ("_Numeral" ("_constify" ("_position" 2))))))
###       ("_assign" ("_position" l')
###         ("_applC" ("_position" Ct)
###           ("_Numeral" ("_constify" ("_position" 4))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Concrete"
### 2.592s elapsed time, 3.523s cpu time, 1.289s GC time
Loading theory "Draft.ConcreteMoreTemplates"
val templateLemmas =
   [("Concrete.compatTstSyntactic",
     "tstSec ?tst = Lo ==> Example_PL.compatTst ?tst",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Concrete.presAtmSyntactic",
     "sec ?v = Hi ==> Example_PL.presAtm (Assign ?v ?expr)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Concrete.sup_eq_Lo", "(sup ?a ?b = Lo) = (?a = Lo & ?b = Lo)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Concrete.compatAtmSyntactic",
     "exprSec ?expr = Lo | sec ?v = Hi ==>
      Example_PL.compatAtm (Assign ?v ?expr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 5, template_var 0)),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Concrete.exprSec_Lo_eval_eq",
     "[| exprSec ?expr = Lo; Example_PL.indisAbbrev ?s ?t |]
      ==> eval ?expr ?s = eval ?expr ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ConcreteMoreTemplates"
### 0.439s elapsed time, 0.722s cpu time, 0.056s GC time
val it = (): unit
