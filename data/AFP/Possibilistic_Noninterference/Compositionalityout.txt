Loading theory "Draft.MyTactics" (required by "Draft.CompositionalityMoreTemplates" via "Draft.Compositionality" via "Draft.During_Execution" via "Draft.Bisim" via "Draft.Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
val impI = "(?P ==> ?Q) ==> ?P --> ?Q": thm
val allI = "(!!x. ?P x) ==> ALL x. ?P x": thm
val ballI = "(!!x. x : ?A ==> ?P x) ==> ALL x:?A. ?P x": thm
val conjE = "[| ?P & ?Q; [| ?P; ?Q |] ==> ?R |] ==> ?R": thm
val conjI = "[| ?P; ?Q |] ==> ?P & ?Q": thm
val exE = "[| EX x. ?P x; !!x. ?P x ==> ?Q |] ==> ?Q": thm
val disjE = "[| ?P | ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R": thm
val mclarTacs = fn: Proof.context -> int -> tactic list
val mclarify_all_tac = fn: Proof.context -> tactic
val mclarsimp_all_tac = fn: Proof.context -> tactic
val mautoTacs = fn: Proof.context -> int -> tactic list
val mauto_no_simp_tac = fn: Proof.context -> tactic
val clarify_all_tac = fn: Proof.context -> tactic
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.MyTactics"
### 0.048s elapsed time, 0.210s cpu time, 0.000s GC time
Loading theory "Draft.Interface" (required by "Draft.CompositionalityMoreTemplates" via "Draft.Compositionality" via "Draft.During_Execution" via "Draft.Bisim")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Interface"
### 0.032s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.Bisim" (required by "Draft.CompositionalityMoreTemplates" via "Draft.Compositionality" via "Draft.During_Execution")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.551s cpu time, 0.052s GC time
Loading theory "Draft.Language_Semantics" (required by "Draft.CompositionalityMoreTemplates" via "Draft.Compositionality" via "Draft.During_Execution")
### theory "Draft.Bisim"
### 0.112s elapsed time, 0.435s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.893s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.334s cpu time, 0.153s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.988s elapsed time, 3.752s cpu time, 0.951s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.124s elapsed time, 4.077s cpu time, 0.954s GC time
Found termination order: "size <*mlex*> {}"
locale PL
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
locale PL
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
Proofs for inductive predicate(s) "transT"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "transC", "MtransC"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "MtransT"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. numSt (while v do va) = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "mayDiverge"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.036s elapsed time, 6.279s cpu time, 1.202s GC time
Loading theory "Draft.Templates" (required by "Draft.CompositionalityMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Language_Semantics"
### 2.107s elapsed time, 6.530s cpu time, 1.202s GC time
Loading theory "Draft.During_Execution" (required by "Draft.CompositionalityMoreTemplates" via "Draft.Compositionality")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.117s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CompositionalityMoreTemplates")
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
Proofs for coinductive predicate(s) "discr"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "discr0"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "siso"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "siso0"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.131s cpu time, 0.102s GC time
### theory "Draft.During_Execution"
### 1.122s elapsed time, 1.790s cpu time, 0.171s GC time
Loading theory "Draft.Compositionality" (required by "Draft.CompositionalityMoreTemplates")
locale PL_Indis
  fixes tval :: "'test => 'state => bool"
    and aval :: "'atom => 'state => 'state"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis indis"
### theory "Draft.Compositionality"
### 0.822s elapsed time, 0.907s cpu time, 0.120s GC time
Loading theory "Draft.CompositionalityMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CompositionalityMoreTemplates"
### 0.325s elapsed time, 0.453s cpu time, 0.025s GC time
val it = (): unit
