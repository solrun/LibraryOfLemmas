   [("Bisim.sym_bis", "Bisim.mono ?Retr ==> sym (bis ?Retr)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.bisim_bis", "Bisim.mono ?Retr ==> bisim ?Retr (bis ?Retr)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.simul_bis", "Bisim.mono ?Retr ==> simul ?Retr (bis ?Retr)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.bis_prefix",
     "Bisim.mono ?Retr ==> bis ?Retr <= ?Retr (bis ?Retr)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 0))))),
    ("Bisim.mono_Union",
     "Bisim.mono ?Retr ==>
      \<Union> (?Retr ` ?Theta) <= ?Retr (\<Union> ?Theta)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Bisim.sym_Un",
     "[| sym ?theta1.0; sym ?theta2.0 |] ==> sym (?theta1.0 Un ?theta2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bisim.mono_Un",
     "Bisim.mono ?Retr ==>
      ?Retr ?theta Un ?Retr ?theta' <= ?Retr (?theta Un ?theta')",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bisim.sym_Union",
     "(!!theta. theta : ?Theta ==> sym theta) ==> sym (\<Union> ?Theta)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.bis_raw_coind",
     "[| Bisim.mono ?Retr; sym ?theta; ?theta <= ?Retr ?theta |]
      ==> ?theta <= bis ?Retr",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Bisim.simul_Un",
     "[| Bisim.mono ?Retr; simul ?Retr ?theta1.0; simul ?Retr ?theta2.0 |]
      ==> simul ?Retr (?theta1.0 Un ?theta2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bisim.bisim_Un",
     "[| Bisim.mono ?Retr; bisim ?Retr ?theta1.0; bisim ?Retr ?theta2.0 |]
      ==> bisim ?Retr (?theta1.0 Un ?theta2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bisim.simul_Union",
     "[| Bisim.mono ?Retr; !!theta. theta : ?Theta ==> simul ?Retr theta |]
      ==> simul ?Retr (\<Union> ?Theta)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.bisim_Union",
     "[| Bisim.mono ?Retr; !!theta. theta : ?Theta ==> bisim ?Retr theta |]
      ==> bisim ?Retr (\<Union> ?Theta)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Bisim.bis_coind",
     "[| Bisim.mono ?Retr; sym ?theta;
         ?theta <= ?Retr (?theta Un bis ?Retr) |]
      ==> ?theta <= bis ?Retr",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_var 1,
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Bisim.bis_raw_coind2",
     "[| Bisim.mono ?Retr; ?theta <= ?Retr ?theta;
         ?theta^-1 <= ?Retr (?theta^-1) |]
      ==> ?theta <= bis ?Retr",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_var 1, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_app
           (template_var 1,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Bisim.mono_bis",
     "[| Bisim.mono ?Retr1.0; Bisim.mono ?Retr2.0;
         !!theta. ?Retr1.0 theta <= ?Retr2.0 theta |]
      ==> bis ?Retr1.0 <= bis ?Retr2.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bisim.bis_coind2",
     "[| Bisim.mono ?Retr; ?theta <= ?Retr (?theta Un bis ?Retr);
         ?theta^-1 <= ?Retr (?theta^-1 Un bis ?Retr) |]
      ==> ?theta <= bis ?Retr",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_var 1,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1)))),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app
           (template_var 1,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 0, template_var 0)),
              template_app (template_hole 1, template_var 1))))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 1, template_var 1))))]
