   [("Paths.reparam_weak_eq_refl", "reparam_weak ?\<gamma>1.0 ?\<gamma>1.0",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Paths.degenerate_path_is_valid_path", "valid_path (%x. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Smooth_Paths.valid_path_linepath", "valid_path (linepath ?a ?b)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Smooth_Paths.valid_path_rectpath", "valid_path (rectpath ?a ?b)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Smooth_Paths.valid_path_reversepath",
     "valid_path (reversepath ?g) = valid_path ?g",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Smooth_Paths.valid_path_imp_path", "valid_path ?g ==> path ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Paths.common_boundary_sudivision_commutative",
     "common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 =
      common_boundary_sudivision_exists ?one_chain2.0 ?one_chain1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Paths.common_sudiv_exists_comm",
     "common_sudiv_exists ?C1.0 ?C2.0 = common_sudiv_exists ?C2.0 ?C1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Smooth_Paths.valid_path_uminus_comp",
     "valid_path (uminus o ?g) = valid_path ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Paths.chain_subdiv_path_singleton",
     "chain_subdiv_path ?\<gamma> {(1, ?\<gamma>)}",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_hole 0))
         )),
    ("Paths.chain_subdiv_chain_refl",
     "boundary_chain ?C ==> chain_subdiv_chain ?C ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Smooth_Paths.bounded_valid_path_image",
     "valid_path ?g ==> bounded (path_image ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smooth_Paths.valid_path_imp_reverse",
     "valid_path ?g ==> valid_path (reversepath ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smooth_Paths.closed_valid_path_image",
     "valid_path ?g ==> closed (path_image ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smooth_Paths.compact_valid_path_image",
     "valid_path ?g ==> compact (path_image ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Smooth_Paths.connected_valid_path_image",
     "valid_path ?g ==> connected (path_image ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Paths.boundary_chain_diff",
     "boundary_chain ?one_chain ==> boundary_chain (?one_chain - ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Paths.common_subdiv_imp_gen_common_subdiv",
     "common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 ==>
      common_sudiv_exists ?one_chain1.0 ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Paths.common_sudiv_exists_refl",
     "common_sudiv_exists ?C1.0 ?C2.0 ==> common_sudiv_exists ?C2.0 ?C1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Smooth_Paths.valid_path_join_D1",
     "valid_path (?g1.0 +++ ?g2.0) ==> valid_path ?g1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("Smooth_Paths.valid_path_offset",
     "valid_path (%t. ?g t - ?z) = valid_path ?g",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Paths.chain_subdiv_path_singleton_reverse",
     "chain_subdiv_path (reversepath ?\<gamma>) {(- 1, ?\<gamma>)}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_var 0)),
             template_hole 0))
         )),
    ("Paths.line_integral_exists_on_degenerate_path",
     "finite ?basis ==> line_integral_exists ?F ?basis (%x. ?c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             t_empty)
           ))),
    ("Smooth_Paths.inside_arc_empty",
     "arc ?\<gamma> ==> inside (path_image ?\<gamma>) = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Paths.pathstart_rec_join_1",
     "pathstart (rec_join ((1, ?\<gamma>) # ?l)) = pathstart ?\<gamma>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0))),
       template_app (template_hole 4, template_var 1))),
    ("Paths.reparam_path_image",
     "reparam ?\<gamma>1.0 ?\<gamma>2.0 ==>
      path_image ?\<gamma>1.0 = path_image ?\<gamma>2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Smooth_Paths.vector_derivative_linepath_at",
     "vector_derivative (linepath ?a ?b) (at ?x) = ?b - ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Paths.content_box_cbox", "content (box ?a ?b) = content (cbox ?a ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Paths.line_integral_degenerate_path",
     "finite ?basis ==> line_integral ?F ?basis (%x. ?c) = 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           t_empty),
         template_hole 0))),
    ("Paths.chain_reparam_chain'_imp_finite_subdiv",
     "[| finite ?one_chain1.0; chain_reparam_chain' ?one_chain1.0 ?subdiv |]
      ==> finite ?subdiv",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Paths.chain_subdiv_chain_imp_finite_subdiv",
     "[| finite ?one_chain1.0; chain_subdiv_chain ?one_chain1.0 ?subdiv |]
      ==> finite ?subdiv",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Paths.pathstart_rec_join_2",
     "pathstart (rec_join ((- 1, ?\<gamma>) # ?l)) =
      pathstart (reversepath ?\<gamma>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_hole 6, template_app (template_hole 0, template_var 1)))),
    ("Paths.line_integral_exists_point_path",
     "[| finite ?basis; point_path ?\<gamma> |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Paths.smooth_path_imp_reverse",
     "?g C1_differentiable_on {0..1} ==>
      reversepath ?g C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Paths.piecewise_smooth_path_imp_reverse",
     "?g piecewise_C1_differentiable_on {0..1} ==>
      reversepath ?g piecewise_C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Smooth_Paths.piecewise_C1_differentiable_D1",
     "?g1.0 +++ ?g2.0 piecewise_C1_differentiable_on {0..1} ==>
      ?g1.0 piecewise_C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Smooth_Paths.piecewise_differentiable_D1",
     "?g1.0 +++ ?g2.0 piecewise_differentiable_on {0..1} ==>
      ?g1.0 piecewise_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Smooth_Paths.continuous_on_joinpaths_D1",
     "continuous_on {0..1} (?g1.0 +++ ?g2.0) ==>
      continuous_on {0..1} ?g1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 1)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1)),
             template_var 1)
           ))),
    ("Paths.line_integral_point_path",
     "[| point_path ?\<gamma>; finite ?basis |]
      ==> line_integral ?F ?basis ?\<gamma> = 0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_hole 0))),
    ("Paths.chain_reparam_weak_path_pathimg_subset",
     "chain_reparam_weak_path ?\<gamma> ?subdiv ==>
      ALL (k', \<gamma>'):?subdiv.
         path_image \<gamma>' <= path_image ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, t_empty))
           ))),
    ("Paths.chain_subdiv_path_pathimg_subset",
     "chain_subdiv_path ?\<gamma> ?subdiv ==>
      ALL (k', \<gamma>'):?subdiv.
         path_image \<gamma>' <= path_image ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, t_empty))
           ))),
    ("Paths.has_integral_null",
     "content (box ?a ?b) = 0 ==> (?f has_integral (0::?'b)) (box ?a ?b)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("Paths.line_integral_on_reverse_path",
     "[| valid_path ?\<gamma>; line_integral_exists ?F ?basis ?\<gamma> |]
      ==> line_integral_exists ?F ?basis (reversepath ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Smooth_Paths.valid_path_join_D2",
     "[| valid_path (?g1.0 +++ ?g2.0); pathfinish ?g1.0 = pathstart ?g2.0 |]
      ==> valid_path ?g2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Paths.content_lt_nz",
     "(0 < content (box ?a ?b)) = (content (box ?a ?b) ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 5)
           ))),
    ("Smooth_Paths.path_connected_arc_complement",
     "[| arc ?\<gamma>; 2 <= DIM(?'a) |]
      ==> path_connected (- path_image ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_app (template_hole 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Smooth_Paths.connected_arc_complement",
     "[| arc ?\<gamma>; 2 <= DIM(?'a) |]
      ==> connected (- path_image ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_app (template_hole 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Smooth_Paths.inside_simple_curve_imp_closed",
     "[| simple_path ?\<gamma>; ?x : inside (path_image ?\<gamma>) |]
      ==> pathfinish ?\<gamma> = pathstart ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Paths.line_integral_exists_joinD1",
     "[| line_integral_exists ?f ?basis (?g1.0 +++ ?g2.0);
         valid_path ?g1.0 |]
      ==> line_integral_exists ?f ?basis ?g1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Paths.line_integral_exists_joinD2",
     "[| line_integral_exists ?f ?basis (?g1.0 +++ ?g2.0);
         valid_path ?g2.0 |]
      ==> line_integral_exists ?f ?basis ?g2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Smooth_Paths.valid_path_join_eq",
     "pathfinish ?g1.0 = pathstart ?g2.0 ==>
      valid_path (?g1.0 +++ ?g2.0) = (valid_path ?g1.0 & valid_path ?g2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Paths.content_eq_0",
     "(content (box ?a ?b) = 0) =
      (EX i:Basis. ?b \<bullet> i <= ?a \<bullet> i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2), t_empty))),
    ("Paths.content_pos_lt_eq",
     "(0 < content (cbox ?a ?b)) =
      (ALL i:Basis. ?a \<bullet> i < ?b \<bullet> i)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Paths.path_image_rec_join",
     "[| (?k, ?\<gamma>) : set ?l; valid_chain_list ?l |]
      ==> path_image ?\<gamma> <= path_image (rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Paths.line_integral_sum_basis",
     "[| finite ?basis;
         ALL b:?basis. line_integral_exists ?F {b} ?\<gamma> |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Paths.line_integral_degenerate_chain",
     "[| ALL (k, \<gamma>):?chain. point_path \<gamma>; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?chain = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_hole 0))),
    ("Smooth_Paths.valid_path_join",
     "[| valid_path ?g1.0; valid_path ?g2.0;
         pathfinish ?g1.0 = pathstart ?g2.0 |]
      ==> valid_path (?g1.0 +++ ?g2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Paths.reverse_subpaths_join",
     "subpath 1 (1 / 2) ?p +++ subpath (1 / 2) 0 ?p = reversepath ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_hole 6),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 5, template_hole 6),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Smooth_Paths.vector_derivative_linepath_within",
     "?x : {0..1} ==>
      vector_derivative (linepath ?a ?b) (at ?x within {0..1}) = ?b - ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Paths.content_subset",
     "cbox ?a ?b <= box ?c ?d ==>
      content (cbox ?a ?b) <= content (box ?c ?d)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Paths.valid_path_equiv_valid_chain_list",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma> |]
      ==> valid_path ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Paths.line_integral_on_reverse_path",
     "[| valid_path ?\<gamma>; line_integral_exists ?F ?basis ?\<gamma> |]
      ==> line_integral ?F ?basis ?\<gamma> =
          - line_integral ?F ?basis (reversepath ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Smooth_Paths.piecewise_C1_differentiable_D2",
     "[| ?g1.0 +++ ?g2.0 piecewise_C1_differentiable_on {0..1};
         pathfinish ?g1.0 = pathstart ?g2.0 |]
      ==> ?g2.0 piecewise_C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3))
           ))),
    ("Smooth_Paths.piecewise_differentiable_D2",
     "[| ?g1.0 +++ ?g2.0 piecewise_differentiable_on {0..1};
         pathfinish ?g1.0 = pathstart ?g2.0 |]
      ==> ?g2.0 piecewise_differentiable_on {0..1}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3))
           ))),
    ("Smooth_Paths.continuous_on_joinpaths_D2",
     "[| continuous_on {0..1} (?g1.0 +++ ?g2.0);
         pathfinish ?g1.0 = pathstart ?g2.0 |]
      ==> continuous_on {0..1} ?g2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_hole 4)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             template_var 0)
           ))),
    ("Smooth_Paths.valid_path_shiftpath",
     "[| valid_path ?g; pathfinish ?g = pathstart ?g; ?a : {0..1} |]
      ==> valid_path (shiftpath ?a ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Paths.path_image_rec_join_2",
     "[| ?l ~= []; valid_chain_list ?l |]
      ==> path_image (rec_join ?l)
          <= (UN (k, \<gamma>):set ?l. path_image \<gamma>)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_hole 0, template_var 0)))))),
    ("Paths.line_integral_exists_smooth_one_base",
     "[| ?\<gamma> C1_differentiable_on {0..1};
         continuous_on (path_image ?\<gamma>) (%x. ?F x \<bullet> ?b) |]
      ==> line_integral_exists ?F {?b} ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 2)
           ))),
    ("Smooth_Paths.valid_path_subpath",
     "[| valid_path ?g; ?u : {0..1}; ?v : {0..1} |]
      ==> valid_path (subpath ?u ?v ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Paths.subcube_valid_path",
     "[| valid_path (snd ?cube); ?a : {0..1}; ?b : {0..1} |]
      ==> valid_path (snd (subcube ?a ?b ?cube))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("Paths.line_integral_distrib",
     "[| line_integral_exists ?f ?basis ?g1.0;
         line_integral_exists ?f ?basis ?g2.0; valid_path ?g1.0;
         valid_path ?g2.0 |]
      ==> line_integral_exists ?f ?basis (?g1.0 +++ ?g2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Paths.chain_reparam_chain'_pathimg_subset'",
     "[| chain_reparam_chain' ?one_chain ?subdiv;
         (?k, ?\<gamma>) : ?subdiv |]
      ==> EX k' \<gamma>'.
             (k', \<gamma>') : ?one_chain &
             path_image ?\<gamma> <= path_image \<gamma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Paths.chain_subdiv_chain_pathimg_subset'",
     "[| chain_subdiv_chain ?one_chain ?subdiv; (?k, ?\<gamma>) : ?subdiv |]
      ==> EX k' \<gamma>'.
             (k', \<gamma>') : ?one_chain &
             path_image ?\<gamma> <= path_image \<gamma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Paths.content_box_cases",
     "content (box ?a ?b) =
      (if ALL i:Basis. ?a \<bullet> i <= ?b \<bullet> i
       then PROD i:Basis. ?b \<bullet> i - ?a \<bullet> i else 0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5), t_empty)),
           template_app
            (template_app (template_hole 2, t_empty), template_hole 5)),
         template_hole 0))),
    ("Paths.line_integral_on_pair_straight_path",
     "[| ALL x. ?\<gamma> x \<bullet> ?i = ?a;
         ALL x:{0..1}. ?\<gamma> differentiable at x |]
      ==> line_integral_exists ?F {?i} ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_hole 6)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_var 3)
           ))),
    ("Paths.one_chain_line_integral_point_paths",
     "[| finite ?one_chain; finite ?basis;
         ALL (k, \<gamma>):?ps. point_path \<gamma> |]
      ==> one_chain_line_integral ?F ?basis (?one_chain - ?ps) =
          one_chain_line_integral ?F ?basis ?one_chain",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 3)))),
    ("Paths.joined_is_valid",
     "[| boundary_chain (set ?l);
         !!k \<gamma>. (k, \<gamma>) : set ?l ==> valid_path \<gamma>;
         valid_chain_list ?l |]
      ==> valid_path (rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Paths.reparam_weak_eq_line_integrals",
     "[| reparam_weak ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 C1_differentiable_on {0..1};
         continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> ?b) |]
      ==> line_integral_exists ?F {?b} ?\<gamma>1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3)
           ))),
    ("Paths.line_integral_exists_smooth",
     "[| ?\<gamma> C1_differentiable_on {0..1};
         ALL b:?basis.
            continuous_on (path_image ?\<gamma>) (%x. ?F x \<bullet> b);
         finite ?basis |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("Paths.line_integral_sum_basis",
     "[| finite ?basis;
         ALL b:?basis. line_integral_exists ?F {b} ?\<gamma> |]
      ==> line_integral ?F ?basis ?\<gamma> =
          (SUM b:?basis. line_integral ?F {b} ?\<gamma>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Paths.sum_content_null",
     "[| content (box ?a ?b) = 0; ?p tagged_division_of box ?a ?b |]
      ==> (SUM (x, k):?p. content k *\<^sub>R ?f x) = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 1),
         template_hole 0))),
    ("Paths.valid_subdiv_imp_valid_one_chain",
     "[| chain_subdiv_chain ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma> |]
      ==> ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, t_empty))
           ))),
    ("Paths.chain_subdiv_chain_pathimg_subset",
     "chain_subdiv_chain ?one_chain ?subdiv ==>
      \<Union> (path_image ` {\<gamma>. EX k. (k, \<gamma>) : ?subdiv})
      <= \<Union>
          (path_image ` {\<gamma>. EX k. (k, \<gamma>) : ?one_chain})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, t_empty))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, t_empty)))))),
    ("Paths.line_integral_on_pair_straight_path",
     "[| ALL x. ?\<gamma> x \<bullet> ?i = ?a;
         ALL x:{0..1}. ?\<gamma> differentiable at x |]
      ==> line_integral ?F {?i} ?\<gamma> = 0",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_hole 6)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_var 3),
         template_hole 7))),
    ("Smooth_Paths.valid_path_compose",
     "[| valid_path ?g;
         !!x. x : path_image ?g ==> ?f field_differentiable at x;
         continuous_on (path_image ?g) (deriv ?f) |]
      ==> valid_path (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Paths.gen_common_subdiv_imp_common_subdiv",
     "common_sudiv_exists ?one_chain1.0 ?one_chain2.0 =
      (EX ps1 ps2.
          common_boundary_sudivision_exists (?one_chain1.0 - ps1)
           (?one_chain2.0 - ps2) &
          (ALL (k, \<gamma>):ps1. point_path \<gamma>) &
          (ALL (k, \<gamma>):ps2. point_path \<gamma>))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Paths.continuous_on_closed_UN",
     "[| finite ?S; !!s. s : ?S ==> closed s;
         !!s. s : ?S ==> continuous_on s ?f |]
      ==> continuous_on (\<Union> ?S) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Paths.reparam_weak_eq_line_integrals_basis",
     "[| reparam_weak ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 C1_differentiable_on {0..1};
         ALL b:?basis.
            continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> b);
         finite ?basis |]
      ==> line_integral_exists ?F ?basis ?\<gamma>1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 3)
           ))),
    ("Paths.line_integral_sum_gen",
     "[| finite ?basis; line_integral_exists ?F ?basis1.0 ?\<gamma>;
         line_integral_exists ?F ?basis2.0 ?\<gamma>;
         ?basis1.0 Un ?basis2.0 = ?basis; ?basis1.0 Int ?basis2.0 = {} |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 0),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 0),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 4),
             template_var 1)
           ))),
    ("Paths.reparam_weak_eq_line_integrals",
     "[| reparam_weak ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 C1_differentiable_on {0..1};
         continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> ?b) |]
      ==> line_integral ?F {?b} ?\<gamma>1.0 =
          line_integral ?F {?b} ?\<gamma>2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 2)))),
    ("Paths.line_integral_on_path_eq_line_integral_on_equiv_chain",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         ALL (k, \<gamma>):?one_chain.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> valid_path ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 1, template_var 3)))),
    ("Paths.reparam_eq_line_integrals",
     "[| reparam ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 piecewise_C1_differentiable_on {0..1};
         continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> ?b);
         line_integral_exists ?F {?b} ?\<gamma>2.0 |]
      ==> line_integral_exists ?F {?b} ?\<gamma>1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3)
           ))),
    ("Paths.line_integral_distrib",
     "[| line_integral_exists ?f ?basis ?g1.0;
         line_integral_exists ?f ?basis ?g2.0; valid_path ?g1.0;
         valid_path ?g2.0 |]
      ==> line_integral ?f ?basis (?g1.0 +++ ?g2.0) =
          line_integral ?f ?basis ?g1.0 + line_integral ?f ?basis ?g2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Paths.line_integral_exists_subpath",
     "[| line_integral_exists ?f ?basis ?g; valid_path ?g; ?u : {0..1};
         ?v : {0..1}; ?u <= ?v |]
      ==> line_integral_exists ?f ?basis (subpath ?u ?v ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Paths.line_integral_on_path_eq_line_integral_on_equiv_chain'",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         line_integral_exists ?F ?basis ?\<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain =
          line_integral ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("Paths.line_integral_on_path_eq_line_integral_on_equiv_chain'",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         line_integral_exists ?F ?basis ?\<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> ALL (k, \<gamma>):?one_chain.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, t_empty))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, t_empty))
           ))),
    ("Paths.line_integral_on_path_eq_line_integral_on_equiv_chain",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         ALL (k, \<gamma>):?one_chain.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Paths.reparam_weak_eq_line_integrals_basis",
     "[| reparam_weak ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 C1_differentiable_on {0..1};
         ALL b:?basis.
            continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> b);
         finite ?basis |]
      ==> line_integral ?F ?basis ?\<gamma>1.0 =
          line_integral ?F ?basis ?\<gamma>2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.line_integral_exists_rec_join_cons",
     "[| line_integral_exists ?F ?basis (rec_join ((1, ?\<gamma>) # ?l));
         !!k' \<gamma>'.
            (k', \<gamma>') : set ((1, ?\<gamma>) # ?l) ==>
            valid_path \<gamma>';
         finite ?basis |]
      ==> line_integral_exists ?F ?basis (?\<gamma> +++ rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 10, template_var 0)))
           ))),
    ("Paths.line_integral_exists_on_rec_join",
     "[| boundary_chain (set ?l); valid_chain_list ?l;
         !!k \<gamma>. (k, \<gamma>) : set ?l ==> valid_path \<gamma>;
         ALL (k, \<gamma>):set ?l.
            line_integral_exists ?F ?basis \<gamma> |]
      ==> line_integral_exists ?F ?basis (rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Paths.line_integral_on_path_eq_line_integral_on_equiv_chain",
     "[| chain_subdiv_path ?\<gamma> ?one_chain; boundary_chain ?one_chain;
         ALL (k, \<gamma>):?one_chain.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain =
          line_integral ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("Paths.reparam_eq_line_integrals",
     "[| reparam ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 piecewise_C1_differentiable_on {0..1};
         continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> ?b);
         line_integral_exists ?F {?b} ?\<gamma>2.0 |]
      ==> line_integral ?F {?b} ?\<gamma>1.0 =
          line_integral ?F {?b} ?\<gamma>2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_var 2)))),
    ("Paths.line_integral_exists_rec_join_cons_2",
     "[| line_integral_exists ?F ?basis (rec_join ((- 1, ?\<gamma>) # ?l));
         !!k' \<gamma>'.
            (k', \<gamma>') : set ((1, ?\<gamma>) # ?l) ==>
            valid_path \<gamma>';
         finite ?basis |]
      ==> line_integral_exists ?F ?basis
           (reversepath ?\<gamma> +++ rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_hole 8)),
                      template_var 1)),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 12, template_var 0)))
           ))),
    ("Paths.line_integral_sum_gen",
     "[| finite ?basis; line_integral_exists ?F ?basis1.0 ?\<gamma>;
         line_integral_exists ?F ?basis2.0 ?\<gamma>;
         ?basis1.0 Un ?basis2.0 = ?basis; ?basis1.0 Int ?basis2.0 = {} |]
      ==> line_integral ?F ?basis ?\<gamma> =
          line_integral ?F ?basis1.0 ?\<gamma> +
          line_integral ?F ?basis2.0 ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 0),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 4),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1))))),
    ("Paths.reparam_eq_line_integrals_basis",
     "[| reparam ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 piecewise_C1_differentiable_on {0..1};
         ALL b:?basis.
            continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> b);
         finite ?basis;
         ALL b:?basis. line_integral_exists ?F {b} ?\<gamma>2.0 |]
      ==> line_integral_exists ?F ?basis ?\<gamma>1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1),
             template_var 3)
           ))),
    ("Paths.common_subdivision_imp_eq_line_integral",
     "[| common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         finite ?one_chain1.0; finite ?one_chain2.0; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Paths.common_subdivision_imp_eq_line_integral",
     "[| common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         finite ?one_chain1.0; finite ?one_chain2.0; finite ?basis |]
      ==> ALL (k, \<gamma>):?one_chain2.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, t_empty))
           ))),
    ("Paths.gen_common_subdivision_imp_eq_line_integral",
     "[| common_sudiv_exists ?one_chain1.0 ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         finite ?one_chain1.0; finite ?one_chain2.0; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Paths.gen_common_subdivision_imp_eq_line_integral",
     "[| common_sudiv_exists ?one_chain1.0 ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         finite ?one_chain1.0; finite ?one_chain2.0; finite ?basis |]
      ==> ALL (k, \<gamma>):?one_chain2.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, t_empty))
           ))),
    ("Paths.line_integral_exists_on_rec_join'",
     "[| boundary_chain (set ?l); valid_chain_list ?l;
         !!k \<gamma>. (k, \<gamma>) : set ?l ==> valid_path \<gamma>;
         line_integral_exists ?F ?basis (rec_join ?l); finite ?basis |]
      ==> ALL (k, \<gamma>):set ?l.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 11, template_var 2)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Paths.reparam_eq_line_integrals_basis",
     "[| reparam ?\<gamma>1.0 ?\<gamma>2.0;
         ?\<gamma>2.0 piecewise_C1_differentiable_on {0..1};
         ALL b:?basis.
            continuous_on (path_image ?\<gamma>2.0) (%x. ?F x \<bullet> b);
         finite ?basis;
         ALL b:?basis. line_integral_exists ?F {b} ?\<gamma>2.0 |]
      ==> line_integral ?F ?basis ?\<gamma>1.0 =
          line_integral ?F ?basis ?\<gamma>2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_hole 10))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.one_chain_line_integral_eq_line_integral_on_sudivision'",
     "[| chain_subdiv_chain ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?subdiv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Paths.one_chain_line_integral_eq_line_integral_on_sudivision'",
     "[| chain_subdiv_chain ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL (k, \<gamma>):?one_chain1.0.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis |]
      ==> ALL (k, \<gamma>):?subdiv.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, t_empty))
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 4, t_empty))
           ))),
    ("Paths.one_chain_line_integral_eq_line_integral_on_sudivision",
     "[| chain_subdiv_chain ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL (k, \<gamma>):?subdiv. line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?subdiv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Paths.one_chain_line_integral_eq_line_integral_on_sudivision",
     "[| chain_subdiv_chain ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL (k, \<gamma>):?subdiv. line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, t_empty))
            ),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app (template_hole 4, t_empty))
           ))),
    ("Paths.one_chain_line_integral_rec_join",
     "[| set ?l = ?one_chain; distinct ?l; valid_chain_list ?l;
         boundary_chain ?one_chain;
         ALL (k, \<gamma>):?one_chain.
            line_integral_exists ?F ?basis \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis |]
      ==> line_integral ?F ?basis (rec_join ?l) =
          one_chain_line_integral ?F ?basis ?one_chain",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3), template_var 2),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Paths.line_integral_rec_join_cons",
     "[| line_integral_exists ?F ?basis ?\<gamma>;
         line_integral_exists ?F ?basis (rec_join ?l);
         !!k' \<gamma>'.
            (k', \<gamma>') : set ((1, ?\<gamma>) # ?l) ==>
            valid_path \<gamma>';
         finite ?basis |]
      ==> line_integral ?F ?basis (rec_join ((1, ?\<gamma>) # ?l)) =
          line_integral ?F ?basis (?\<gamma> +++ rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_app (template_hole 12, template_var 0))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 8, template_hole 5),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 12, template_var 0)))))),
    ("Paths.chain_reparam_weak_chain_line_integral",
     "[| chain_reparam_weak_chain ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 C1_differentiable_on {0..1};
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0 |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.chain_reparam_weak_chain_line_integral",
     "[| chain_reparam_weak_chain ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 C1_differentiable_on {0..1};
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0 |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 3),
             template_app (template_hole 11, t_empty))
           ))),
    ("Paths.has_line_integral_on_reverse_path",
     "[| valid_path ?g;
         ((%x. SUM b:?basis.
                  ?F (?g x) \<bullet> b *
                  (vector_derivative ?g (at x within {0..1}) \<bullet>
                   b)) has_integral
          ?c)
          {0..1} |]
      ==> ((%x. SUM b:?basis.
                   ?F (reversepath ?g x) \<bullet> b *
                   (vector_derivative (reversepath ?g)
                     (at x within {0..1}) \<bullet>
                    b)) has_integral
           - ?c)
           {0..1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Paths.line_integral_rec_join_cons_2",
     "[| line_integral_exists ?F ?basis ?\<gamma>;
         line_integral_exists ?F ?basis (rec_join ?l);
         !!k' \<gamma>'.
            (k', \<gamma>') : set ((- 1, ?\<gamma>) # ?l) ==>
            valid_path \<gamma>';
         finite ?basis |]
      ==> line_integral ?F ?basis (rec_join ((- 1, ?\<gamma>) # ?l)) =
          line_integral ?F ?basis (reversepath ?\<gamma> +++ rec_join ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2),
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 7, template_hole 6)),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 14, template_var 0)))))),
    ("Paths.chain_subdiv_chain_character",
     "chain_subdiv_chain ?one_chain1.0 ?subdiv =
      (EX f. \<Union> (f ` ?one_chain1.0) = ?subdiv &
             (ALL (k, \<gamma>):?one_chain1.0.
                 if k = 1 then chain_subdiv_path \<gamma> (f (k, \<gamma>))
                 else chain_subdiv_path (reversepath \<gamma>)
                       (f (k, \<gamma>))) &
             (ALL p:?one_chain1.0.
                 ALL p':?one_chain1.0. p ~= p' --> f p Int f p' = {}) &
             (ALL x:?one_chain1.0. finite (f x)))",
     template_equation
      (template_app
        (template_app (template_hole 19, template_var 1), template_var 0),
       template_app (template_hole 18, t_empty))),
    ("Paths.chain_reparam_weak_path_line_integral",
     "[| chain_reparam_weak_path ?\<gamma> ?one_chain;
         boundary_chain ?one_chain;
         ALL b:?basis.
            ALL (k, \<gamma>):?one_chain.
               line_integral_exists ?F {b} \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis;
         ALL b:?basis.
            ALL (k, \<gamma>2):?one_chain.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?one_chain |]
      ==> line_integral_exists ?F ?basis ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, t_empty))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1),
             template_var 3)
           ))),
    ("Paths.contour_integral_primitive_lemma",
     "[| ?a <= ?b;
         !!x. x : ?s ==> (?f has_field_derivative ?f' x) (at x within ?s);
         ?g piecewise_differentiable_on {?a..?b};
         !!x. x : {?a..?b} ==> ?g x : ?s |]
      ==> ((%x. ?f' (?g x) *
                vector_derivative ?g (at x within {?a..?b})) has_integral
           ?f (?g ?b) - ?f (?g ?a))
           {?a..?b}",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_var 2,
                     template_app (template_var 0, template_var 4))),
                 template_app
                  (template_var 2,
                   template_app (template_var 0, template_var 5)))),
             template_app
              (template_app (template_hole 7, template_var 5),
               template_var 4))
           ))),
    ("Paths.chain_reparam_weak_path_line_integral",
     "[| chain_reparam_weak_path ?\<gamma> ?one_chain;
         boundary_chain ?one_chain;
         ALL b:?basis.
            ALL (k, \<gamma>):?one_chain.
               line_integral_exists ?F {b} \<gamma>;
         ALL (k, \<gamma>):?one_chain. valid_path \<gamma>; finite ?basis;
         ALL b:?basis.
            ALL (k, \<gamma>2):?one_chain.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?one_chain |]
      ==> line_integral ?F ?basis ?\<gamma> =
          one_chain_line_integral ?F ?basis ?one_chain",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, t_empty))
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.chain_reparam_chain'_line_integral_smooth_cubes",
     "[| chain_reparam_chain' ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 C1_differentiable_on {0..1};
         ALL b:?basis.
            ALL (k2, \<gamma>2):?one_chain2.0.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; finite ?one_chain1.0; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma> |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app (template_hole 14, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app (template_hole 14, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.chain_reparam_chain'_line_integral_smooth_cubes",
     "[| chain_reparam_chain' ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 C1_differentiable_on {0..1};
         ALL b:?basis.
            ALL (k2, \<gamma>2):?one_chain2.0.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; finite ?one_chain1.0; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma> |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app (template_hole 13, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 14, template_var 3),
             template_app (template_hole 13, t_empty))
           ))),
    ("Paths.common_reparam_exists_imp_eq_line_integral",
     "[| finite ?basis; finite ?one_chain1.0; finite ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         common_reparam_exists ?one_chain1.0 ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma>;
         ALL (k, \<gamma>):?one_chain2.0. valid_path \<gamma> |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Paths.common_reparam_exists_imp_eq_line_integral",
     "[| finite ?basis; finite ?one_chain1.0; finite ?one_chain2.0;
         boundary_chain ?one_chain1.0; boundary_chain ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         common_reparam_exists ?one_chain1.0 ?one_chain2.0;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma>;
         ALL (k, \<gamma>):?one_chain2.0. valid_path \<gamma> |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app (template_hole 7, t_empty))
           ))),
    ("Paths.line_integral_primitive_lemma",
     "[| !!a. a : ?s ==> (?f has_field_derivative ?f' a) (at a within ?s);
         ?g piecewise_differentiable_on {0..1};
         !!x. x : {0..1} ==> ?g x : ?s; ?base_vec : Basis |]
      ==> ((%x. (?f' (?g x) *
                 vector_derivative ?g (at x within {0..1})) \<bullet>
                ?base_vec) has_integral
           ?f (?g 1) \<bullet> ?base_vec - ?f (?g 0) \<bullet> ?base_vec)
           {0..1}",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_var 3,
                         template_app (template_var 1, template_hole 9))),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_var 3,
                       template_app (template_var 1, template_hole 10))),
                   template_var 0))),
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_hole 9))
           ))),
    ("Paths.chain_reparam_chain_line_integral",
     "[| chain_reparam_chain ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 piecewise_C1_differentiable_on {0..1};
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis. line_integral_exists ?F {b} \<gamma>2 |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?one_chain2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app (template_hole 15, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app (template_hole 15, t_empty))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app (template_hole 15, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.chain_reparam_chain_line_integral",
     "[| chain_reparam_chain ?one_chain1.0 ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            \<gamma>2 piecewise_C1_differentiable_on {0..1};
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis.
               continuous_on (path_image \<gamma>2) (%x. ?F x \<bullet> b);
         finite ?basis; boundary_chain ?one_chain1.0;
         boundary_chain ?one_chain2.0;
         ALL (k2, \<gamma>2):?one_chain2.0.
            ALL b:?basis. line_integral_exists ?F {b} \<gamma>2 |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app (template_hole 13, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app (template_hole 13, t_empty))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 14, template_var 3),
             template_app (template_hole 13, t_empty))
           ))),
    ("Paths.line_integral_on_pair_path_strong",
     "[| norm ?i = 1; ALL x. ?g x \<bullet> ?i = 0;
         ?\<gamma> = (%x. ?f x *\<^sub>R ?i + ?g (?f x));
         ?\<gamma> piecewise_C1_differentiable_on {0..1};
         continuous_on (?f ` {0..1}) ?g;
         pathstart ?\<gamma> \<bullet> ?i
         <= pathfinish ?\<gamma> \<bullet> ?i;
         continuous_on (path_image ?\<gamma>) (%x. ?F x \<bullet> ?i) |]
      ==> line_integral_exists ?F {?i} ?\<gamma>",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 4),
          template_hole 18),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_equation (template_var 2, t_empty),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_hole 15),
                template_hole 18))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_app (template_hole 10, template_hole 15),
                    template_hole 18))),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 6, template_var 2)),
            template_var 4),
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 5, template_var 2)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_hole 0)),
             template_var 2)
           ))),
    ("Paths.chain_reparam_chain'_line_integral",
     "[| chain_reparam_chain' ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL b:?basis.
            ALL (k, \<gamma>):?subdiv. line_integral_exists ?F {b} \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis;
         ALL b:?basis.
            ALL (k, \<gamma>2):?subdiv.
               continuous_on (path_image \<gamma>2)
                (%x. ?F x \<bullet> b) |]
      ==> one_chain_line_integral ?F ?basis ?one_chain1.0 =
          one_chain_line_integral ?F ?basis ?subdiv",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2)))),
    ("Paths.chain_reparam_chain'_line_integral",
     "[| chain_reparam_chain' ?one_chain1.0 ?subdiv;
         boundary_chain ?one_chain1.0; boundary_chain ?subdiv;
         ALL b:?basis.
            ALL (k, \<gamma>):?subdiv. line_integral_exists ?F {b} \<gamma>;
         ALL (k, \<gamma>):?subdiv. valid_path \<gamma>;
         ALL (k, \<gamma>):?one_chain1.0. valid_path \<gamma>;
         finite ?one_chain1.0; finite ?basis;
         ALL b:?basis.
            ALL (k, \<gamma>2):?subdiv.
               continuous_on (path_image \<gamma>2)
                (%x. ?F x \<bullet> b) |]
      ==> ALL (k, \<gamma>):?one_chain1.0.
             line_integral_exists ?F ?basis \<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app (template_hole 9, t_empty))
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 3),
             template_app (template_hole 9, t_empty))
           ))),
    ("Paths.line_integral_on_pair_path",
     "[| norm ?i = 1; ALL x. ?g x \<bullet> ?i = 0;
         ?\<gamma> = (%x. ?f x *\<^sub>R ?i + ?g (?f x));
         ?\<gamma> C1_differentiable_on {0..1};
         continuous_on (?f ` {0..1}) ?g;
         pathstart ?\<gamma> \<bullet> ?i
         <= pathfinish ?\<gamma> \<bullet> ?i;
         continuous_on (path_image ?\<gamma>) (%x. ?F x \<bullet> ?i) |]
      ==> line_integral ?F {?i} ?\<gamma> =
          integral
           (cbox (pathstart ?\<gamma> \<bullet> ?i)
             (pathfinish ?\<gamma> \<bullet> ?i))
           (%f_var. ?F (f_var *\<^sub>R ?i + ?g f_var) \<bullet> ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 21, template_var 4),
          template_hole 20),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_equation (template_var 2, t_empty),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_hole 17),
                template_hole 20))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_app
                   (template_app (template_hole 12, template_hole 17),
                    template_hole 20))),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 8, template_var 2)),
            template_var 4),
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 7, template_var 2)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_hole 2)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app (template_hole 8, template_var 2)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 7, template_var 2)),
                 template_var 4))),
           t_empty)))),
    ("Paths.line_integral_on_pair_path_strong",
     "[| norm ?i = 1; ALL x. ?g x \<bullet> ?i = 0;
         ?\<gamma> = (%x. ?f x *\<^sub>R ?i + ?g (?f x));
         ?\<gamma> piecewise_C1_differentiable_on {0..1};
         continuous_on (?f ` {0..1}) ?g;
         pathstart ?\<gamma> \<bullet> ?i
         <= pathfinish ?\<gamma> \<bullet> ?i;
         continuous_on (path_image ?\<gamma>) (%x. ?F x \<bullet> ?i) |]
      ==> line_integral ?F {?i} ?\<gamma> =
          integral
           (cbox (pathstart ?\<gamma> \<bullet> ?i)
             (pathfinish ?\<gamma> \<bullet> ?i))
           (%f_var. ?F (f_var *\<^sub>R ?i + ?g f_var) \<bullet> ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 21, template_var 4),
          template_hole 20),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_equation (template_var 2, t_empty),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_hole 17),
                template_hole 20))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_app
                   (template_app (template_hole 12, template_hole 17),
                    template_hole 20))),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 8, template_var 2)),
            template_var 4),
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 7, template_var 2)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_hole 2)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app (template_hole 8, template_var 2)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 7, template_var 2)),
                 template_var 4))),
           t_empty))))]
