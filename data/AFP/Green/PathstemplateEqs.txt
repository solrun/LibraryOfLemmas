   [("Smooth_Paths.valid_path_reversepath",
     "valid_path (reversepath ?g) = valid_path ?g",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Paths.common_boundary_sudivision_commutative",
     "common_boundary_sudivision_exists ?one_chain1.0 ?one_chain2.0 =
      common_boundary_sudivision_exists ?one_chain2.0 ?one_chain1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Paths.common_sudiv_exists_comm",
     "common_sudiv_exists ?C1.0 ?C2.0 = common_sudiv_exists ?C2.0 ?C1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Smooth_Paths.valid_path_uminus_comp",
     "valid_path (uminus o ?g) = valid_path ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Smooth_Paths.valid_path_offset",
     "valid_path (%t. ?g t - ?z) = valid_path ?g",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Paths.pathstart_rec_join_1",
     "pathstart (rec_join ((1, ?\<gamma>) # ?l)) = pathstart ?\<gamma>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0))),
       template_app (template_hole 4, template_var 1))),
    ("Smooth_Paths.vector_derivative_linepath_at",
     "vector_derivative (linepath ?a ?b) (at ?x) = ?b - ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Paths.content_box_cbox", "content (box ?a ?b) = content (cbox ?a ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Paths.pathstart_rec_join_2",
     "pathstart (rec_join ((- 1, ?\<gamma>) # ?l)) =
      pathstart (reversepath ?\<gamma>)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_hole 6, template_app (template_hole 0, template_var 1)))),
    ("Paths.content_lt_nz",
     "(0 < content (box ?a ?b)) = (content (box ?a ?b) ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 5)
           ))),
    ("Paths.content_eq_0",
     "(content (box ?a ?b) = 0) =
      (EX i:Basis. ?b \<bullet> i <= ?a \<bullet> i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2), t_empty))),
    ("Paths.content_pos_lt_eq",
     "(0 < content (cbox ?a ?b)) =
      (ALL i:Basis. ?a \<bullet> i < ?b \<bullet> i)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Paths.reverse_subpaths_join",
     "subpath 1 (1 / 2) ?p +++ subpath (1 / 2) 0 ?p = reversepath ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_hole 6),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 5, template_hole 6),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Paths.content_box_cases",
     "content (box ?a ?b) =
      (if ALL i:Basis. ?a \<bullet> i <= ?b \<bullet> i
       then PROD i:Basis. ?b \<bullet> i - ?a \<bullet> i else 0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5), t_empty)),
           template_app
            (template_app (template_hole 2, t_empty), template_hole 5)),
         template_hole 0))),
    ("Paths.gen_common_subdiv_imp_common_subdiv",
     "common_sudiv_exists ?one_chain1.0 ?one_chain2.0 =
      (EX ps1 ps2.
          common_boundary_sudivision_exists (?one_chain1.0 - ps1)
           (?one_chain2.0 - ps2) &
          (ALL (k, \<gamma>):ps1. point_path \<gamma>) &
          (ALL (k, \<gamma>):ps2. point_path \<gamma>))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Paths.chain_subdiv_chain_character",
     "chain_subdiv_chain ?one_chain1.0 ?subdiv =
      (EX f. \<Union> (f ` ?one_chain1.0) = ?subdiv &
             (ALL (k, \<gamma>):?one_chain1.0.
                 if k = 1 then chain_subdiv_path \<gamma> (f (k, \<gamma>))
                 else chain_subdiv_path (reversepath \<gamma>)
                       (f (k, \<gamma>))) &
             (ALL p:?one_chain1.0.
                 ALL p':?one_chain1.0. p ~= p' --> f p Int f p' = {}) &
             (ALL x:?one_chain1.0. finite (f x)))",
     template_equation
      (template_app
        (template_app (template_hole 19, template_var 1), template_var 0),
       template_app (template_hole 18, t_empty)))]
