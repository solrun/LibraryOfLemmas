   [("Green.two_cube_boundary_is_boundary", "boundary_chain (boundary ?C)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Green.two_chain_boundary_is_boundary_chain",
     "boundary_chain (two_chain_boundary ?twoChain)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Green.two_chain_horizontal_boundary_is_boundary_chain",
     "boundary_chain (two_chain_horizontal_boundary ?twoChain)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Green.two_chain_vertical_boundary_is_boundary_chain",
     "boundary_chain (two_chain_vertical_boundary ?twoChain)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Green.finite_two_chain_horizontal_boundary",
     "finite ?two_chain ==>
      finite (two_chain_horizontal_boundary ?two_chain)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Green.finite_two_chain_vertical_boundary",
     "finite ?two_chain ==>
      finite (two_chain_vertical_boundary ?two_chain)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Green.frontier_Un_subset_Un_frontier",
     "frontier (?s Un ?t) <= frontier ?s Un frontier ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Green.analytically_valid_imp_part_deriv_integrable_on",
     "analytically_valid ?s ?f ?i ==>
      partial_vector_derivative ?f ?i integrable_on ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Green.partial_vector_derivative_works",
     "partially_vector_differentiable ?F ?base_vec ?a ==>
      has_partial_vector_derivative ?F ?base_vec
       (partial_vector_derivative ?F ?base_vec ?a) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Green.typeII_edges_are_valid_paths",
     "[| typeII_twoCube ?twoC; (?k, ?\<gamma>) : boundary ?twoC |]
      ==> valid_path ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Green.typeI_edges_are_valid_paths",
     "[| typeI_twoCube ?twoC; (?k, ?\<gamma>) : boundary ?twoC |]
      ==> valid_path ?\<gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Green.common_boundary_subdiv_exists_refl",
     "ALL (k, \<gamma>):boundary ?twoC. valid_path \<gamma> ==>
      common_boundary_sudivision_exists (boundary ?twoC) (boundary ?twoC)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Green.common_boundary_subdiv_exists_refl'",
     "[| ALL (k, \<gamma>):?C. valid_path \<gamma>; boundary_chain ?C |]
      ==> common_boundary_sudivision_exists ?C ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Green.gen_common_boundary_subdiv_exists_refl_twochain_boundary",
     "[| ALL (k, \<gamma>):?C. valid_path \<gamma>; boundary_chain ?C |]
      ==> common_sudiv_exists ?C ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Green.typeII_twoCube_smooth_edges",
     "[| typeII_twoCube ?twoC; (?k, ?\<gamma>) : boundary ?twoC |]
      ==> ?\<gamma> piecewise_C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Green.typeI_twoCube_smooth_edges",
     "[| typeI_twoCube ?twoC; (?k, ?\<gamma>) : boundary ?twoC |]
      ==> ?\<gamma> piecewise_C1_differentiable_on {0..1}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Green.add_scale_img",
     "?a < ?b ==> (%x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Green.add_scale_img'",
     "?a <= ?b ==> (%x. ?a + (?b - ?a) * x) ` {0..1} = {?a..?b}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Green.field_cont_on_typeII_region_cont_on_edges",
     "[| typeII_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;
         (?k, ?\<gamma>) : boundary ?twoC |]
      ==> continuous_on (?\<gamma> ` {0..1}) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_var 2)
           ))),
    ("Green.field_cont_on_typeI_region_cont_on_edges",
     "[| typeI_twoCube ?twoC; continuous_on (cubeImage ?twoC) ?F;
         (?k, ?\<gamma>) : boundary ?twoC |]
      ==> continuous_on (?\<gamma> ` {0..1}) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_var 2)
           ))),
    ("Green.sum_zero_set",
     "[| ALL x:?s. ?f x = (0::?'b); finite ?s; finite ?t |]
      ==> sum ?f (?s Un ?t) = sum ?f ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Green.two_chain_integral_eq_integral_divisable",
     "[| ALL twoCube:?twoChain. ?F integrable_on cubeImage twoCube;
         gen_division ?s (cubeImage ` ?twoChain);
         valid_two_chain ?twoChain |]
      ==> integral ?s ?F = two_chain_integral ?twoChain ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 6),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Green.fundamental_theorem_of_calculus_partial_vector_gen",
     "[| ?k1.0 <= ?k2.0; ?i \<bullet> ?i = 1; ?c \<bullet> ?i = 0;
         ALL p:?D. has_partial_vector_derivative ?F ?i (?F_i p) p;
         {v. EX x>=?k1.0. x <= ?k2.0 & v = x *\<^sub>R ?i + ?c} <= ?D |]
      ==> ((%x. ?F_i (x *\<^sub>R ?i + ?c)) has_integral
           ?F (?k2.0 *\<^sub>R ?i + ?c) - ?F (?k1.0 *\<^sub>R ?i + ?c))
           (cbox ?k1.0 ?k2.0)",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_var 4),
          template_hole 13),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_var 4),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, t_empty),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_var 1,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 5),
                           template_var 4)),
                       template_var 3))),
                 template_app
                  (template_var 1,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 6),
                         template_var 4)),
                     template_var 3)))),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 5))
           ))),
    ("Green.fundamental_theorem_of_calculus_partial_vector",
     "[| ?a <= ?b; ?i : Basis; ?j : Basis; ?c \<bullet> ?i = 0;
         ALL p:?D.
            has_partial_vector_derivative (%x. ?F x \<bullet> ?j) ?i
             (?F_j_i p) p;
         {x *\<^sub>R ?i + ?c |x. ?a <= x & x <= ?b} <= ?D |]
      ==> ((%x. ?F_j_i (x *\<^sub>R ?i + ?c)) has_integral
           ?F (?b *\<^sub>R ?i + ?c) \<bullet> ?j -
           ?F (?a *\<^sub>R ?i + ?c) \<bullet> ?j)
           (cbox ?a ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 7, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_hole 18)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_var 5),
          template_hole 13),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, t_empty),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_var 1,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_var 6),
                               template_var 5)),
                           template_var 3))),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_var 1,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 7),
                             template_var 5)),
                         template_var 3))),
                   template_var 4))),
             template_app
              (template_app (template_hole 0, template_var 7),
               template_var 6))
           ))),
    ("Green.typeII_twoCubeImg",
     "typeII_twoCube ?twoC ==>
      EX a b g1 g2.
         a < b &
         (ALL x:{a..b}. g2 x <= g1 x) &
         cubeImage ?twoC = {(y, x). x : {a..b} & y : {g2 x..g1 x}} &
         ?twoC =
         (%(y, x).
             ((1 - y) * g2 ((1 - x) * a + x * b) +
              y * g1 ((1 - x) * a + x * b),
              (1 - x) * a + x * b)) &
         g1 piecewise_C1_differentiable_on {a..b} &
         g2 piecewise_C1_differentiable_on {a..b}",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 0))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("Green.typeI_twoCubeImg",
     "typeI_twoCube ?twoC ==>
      EX a b g1 g2.
         a < b &
         (ALL x:{a..b}. g2 x <= g1 x) &
         cubeImage ?twoC = {(x, y). x : {a..b} & y : {g2 x..g1 x}} &
         ?twoC =
         (%(x, y).
             ((1 - x) * a + x * b,
              (1 - y) * g2 ((1 - x) * a + x * b) +
              y * g1 ((1 - x) * a + x * b))) &
         g1 piecewise_C1_differentiable_on {a..b} &
         g2 piecewise_C1_differentiable_on {a..b}",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 0))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("Green.typeII_cube_explicit_spec",
     "typeII_twoCube ?twoC ==>
      EX a b g1 g2.
         a < b &
         (ALL x:{a..b}. g2 x <= g1 x) &
         cubeImage ?twoC = {(y, x). x : {a..b} & y : {g2 x..g1 x}} &
         ?twoC =
         (%(y, x).
             ((1 - y) * g2 ((1 - x) * a + x * b) +
              y * g1 ((1 - x) * a + x * b),
              (1 - x) * a + x * b)) &
         g1 piecewise_C1_differentiable_on {a..b} &
         g2 piecewise_C1_differentiable_on {a..b} &
         (%x. ?twoC (0, x)) =
         (%x. (g2 (a + (b - a) * x), a + (b - a) * x)) &
         (%y. ?twoC (y, 1)) = (%x. (g2 b + x *\<^sub>R (g1 b - g2 b), b)) &
         (%x. ?twoC (1, x)) =
         (%x. (g1 (a + (b - a) * x), a + (b - a) * x)) &
         (%y. ?twoC (y, 0)) = (%x. (g2 a + x *\<^sub>R (g1 a - g2 a), a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 0))],
       template_predicate (template_app (template_hole 22, t_empty)))),
    ("Green.typeI_cube_explicit_spec",
     "typeI_twoCube ?twoC ==>
      EX a b g1 g2.
         a < b &
         (ALL x:{a..b}. g2 x <= g1 x) &
         cubeImage ?twoC = {(x, y). x : {a..b} & y : {g2 x..g1 x}} &
         ?twoC =
         (%(x, y).
             ((1 - x) * a + x * b,
              (1 - y) * g2 ((1 - x) * a + x * b) +
              y * g1 ((1 - x) * a + x * b))) &
         g1 piecewise_C1_differentiable_on {a..b} &
         g2 piecewise_C1_differentiable_on {a..b} &
         (%x. ?twoC (x, 0)) =
         (%x. (a + (b - a) * x, g2 (a + (b - a) * x))) &
         (%y. ?twoC (1, y)) = (%x. (b, g2 b + x *\<^sub>R (g1 b - g2 b))) &
         (%x. ?twoC (x, 1)) =
         (%x. (a + (b - a) * x, g1 (a + (b - a) * x))) &
         (%y. ?twoC (0, y)) = (%x. (a, g2 a + x *\<^sub>R (g1 a - g2 a)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 0))],
       template_predicate (template_app (template_hole 22, t_empty))))]
