Loading theory "Draft.Pointwise" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap" via "Draft.HOLCF-Utils")
Loading theory "Draft.AList-Utils" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate rewrite rule:
### (PROP ?P ==> True) == True
### Ignoring duplicate rewrite rule:
### (False ==> ?P) == True
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Pointwise"
### 0.034s elapsed time, 0.166s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.542s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.AList-Utils"
### 0.169s elapsed time, 0.685s cpu time, 0.044s GC time
Loading theory "Draft.HOLCF-Join" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap" via "Draft.Env" via "Draft.HOLCF-Join-Classes")
class cpo = po +
  assumes "cpo": "!!S. chain S ==> EX x. range S <<| x"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.851s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs")
class pcpo = cpo +
  assumes "least": "EX x. ALL y. x << y"
### theory "Draft.HOLCF-Join"
### 0.161s elapsed time, 0.627s cpu time, 0.090s GC time
Loading theory "Draft.HOLCF-Join-Classes" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap" via "Draft.Env")
consts
  shift :: "'a list => 'a stream => 'a stream"
class Finite_Join_cpo = cpo +
  assumes "all_compatible": "!!x y. compatible x y"
Proofs for coinductive predicate(s) "streamsp"
instantiation
  fun :: (type, Finite_Join_cpo) Finite_Join_cpo
  Proving monotonicity ...
instantiation
  cfun :: (cpo, Finite_Join_cpo) Finite_Join_cpo
consts
  snth :: "'a stream => nat => 'a"
class is_unit = type +
  fixes unit :: "'a"
  assumes "is_unit": "!!x. x = unit"
instantiation
  unit :: is_unit
  unit_unit == unit :: unit
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class Join_cpo = cpo +
  assumes "exists_lub": "!!S. EX u. S <<| u"
class Join_cpo = cpo +
  assumes "exists_lub": "!!S. EX u. S <<| u"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.903s elapsed time, 3.559s cpu time, 0.338s GC time
Loading theory "Draft.HOLCF-Utils" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF-Join-Classes"
### 0.672s elapsed time, 2.646s cpu time, 0.204s GC time
Loading theory "Draft.Env" (required by "Draft.EvalHeapTemplates" via "Draft.EvalHeap")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.007s elapsed time, 3.833s cpu time, 0.830s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Env"
### 0.410s elapsed time, 1.358s cpu time, 0.577s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF-Utils"
### 0.555s elapsed time, 1.853s cpu time, 0.577s GC time
Loading theory "Draft.EvalHeap" (required by "Draft.EvalHeapTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 6.308s cpu time, 1.009s GC time
Loading theory "Draft.Templates" (required by "Draft.EvalHeapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EvalHeapTemplates")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.EvalHeap"
### 0.954s elapsed time, 2.020s cpu time, 0.190s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.527s elapsed time, 0.835s cpu time, 0.115s GC time
Loading theory "Draft.EvalHeapTemplates"
val templateLemmas =
   [("EvalHeap.edom_evalHeap_subset", "edom (evalHeap ?h ?eval) <= domA ?h",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("EvalHeap.env_restr_evalHeap_same",
     "evalHeap ?h ?eval f|` domA ?h = evalHeap ?h ?eval",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("EvalHeap.evalHeap_delete",
     "evalHeap (delete ?x ?\<Gamma>) ?eval =
      env_delete ?x (evalHeap ?\<Gamma> ?eval)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("EvalHeap.evalHeap_eqvt",
     "?\<pi> \<bullet> evalHeap ?h ?eval =
      evalHeap (?\<pi> \<bullet> ?h) (?\<pi> \<bullet> ?eval)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("EvalHeap.lookupEvalHeap_other",
     "?v ~: domA ?\<Gamma> ==> evalHeap ?\<Gamma> ?f ?v = \<bottom>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 0))),
    ("EvalHeap.evalHeap_reorder",
     "map_of ?\<Gamma> = map_of ?\<Delta> ==>
      evalHeap ?\<Gamma> ?h = evalHeap ?\<Delta> ?h",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("EvalHeap.env_restr_evalHeap_noop",
     "domA ?h <= ?S ==> evalHeap ?h ?eval f|` ?S = evalHeap ?h ?eval",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("EvalHeap.lookupEvalHeap'",
     "map_of ?\<Gamma> ?v = Some ?e ==> evalHeap ?\<Gamma> ?f ?v = ?f ?e",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("EvalHeap.lookupEvalHeap",
     "?v : domA ?h ==> evalHeap ?h ?f ?v = ?f (the (map_of ?h ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("EvalHeap.lookupEvalHeapNotAppend",
     "?x ~: domA ?\<Gamma> ==>
      evalHeap (?\<Gamma> @ ?h) ?f ?x = evalHeap ?h ?f ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 3)))),
    ("EvalHeap.evalHeap_mono",
     "?x ~: domA ?\<Gamma> ==>
      evalHeap ?\<Gamma> ?eval << evalHeap ((?x, ?e) # ?\<Gamma>) ?eval",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0)),
                   template_var 2)),
               template_var 1))
           ))),
    ("EvalHeap.evalHeap_subst_exp",
     "?eval ?e = ?eval ?e' ==>
      evalHeap ((?x, ?e) # ?\<Gamma>) ?eval =
      evalHeap ((?x, ?e') # ?\<Gamma>) ?eval",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3)),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 4)))),
    ("EvalHeap.cont2cont_evalHeap",
     "(!!e. e : snd ` set ?h ==> cont (%\<rho>. ?eval \<rho> e)) ==>
      cont (%\<rho>. evalHeap ?h (?eval \<rho>))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("EvalHeap.evalHeap_reorder_head_append",
     "?x ~: domA ?\<Gamma> ==>
      evalHeap ((?x, ?e) # ?\<Gamma> @ ?\<Delta>) ?eval =
      evalHeap (?\<Gamma> @ (?x, ?e) # ?\<Delta>) ?eval",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2)),
                 template_var 1))),
           template_var 0)))),
    ("EvalHeap.evalHeap_cong'",
     "(!!x. x : domA ?heap ==>
            ?eval1.0 (the (map_of ?heap x)) =
            ?eval2.0 (the (map_of ?heap x))) ==>
      evalHeap ?heap ?eval1.0 = evalHeap ?heap ?eval2.0",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("EvalHeap.evalHeap_reorder_head",
     "?x ~= ?y ==>
      evalHeap ((?x, ?e1.0) # (?y, ?e2.0) # ?\<Gamma>) ?eval =
      evalHeap ((?y, ?e2.0) # (?x, ?e1.0) # ?\<Gamma>) ?eval",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 3)),
                 template_var 1))),
           template_var 0)))),
    ("EvalHeap.evalHeap_cong",
     "[| ?heap1.0 = ?heap2.0;
         !!e. e : snd ` set ?heap2.0 ==> ?eval1.0 e = ?eval2.0 e |]
      ==> evalHeap ?heap1.0 ?eval1.0 = evalHeap ?heap2.0 ?eval2.0",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.EvalHeapTemplates"
### 0.591s elapsed time, 0.760s cpu time, 0.068s GC time
val it = (): unit
