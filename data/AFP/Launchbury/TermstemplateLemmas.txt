   [("Terms.isVal_Bool", "isVal (Bool ?b)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Terms.isLam_Lam", "isLam (Lam [?x]. ?e)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.isVal_Lam", "isVal (Lam [?x]. ?e)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.exp_assn_size_eqvt", "?p \<bullet> size = size",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Terms.fv_Bool", "fv (Bool ?b) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Terms.asToHeap_heapToAssn", "asToHeap (heapToAssn ?as) = ?as",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms.heapToAssn_asToHeap", "heapToAssn (asToHeap ?as) = ?as",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms.thunks_domA", "thunks ?\<Gamma> <= domA ?\<Gamma>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Terms.fv_asToHeap", "fv (asToHeap ?\<Gamma>) = fv ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.fv_heapToAssn", "fv (heapToAssn ?\<Gamma>) = fv ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.supp_asToHeap", "supp (asToHeap ?as) = supp ?as",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.supp_heapToAssn",
     "supp (heapToAssn ?\<Gamma>) = supp ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.Let_distinct", "Bool ?b ~= Terms.Let ?\<Gamma> ?e",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct", "Var ?v ~= Terms.Let ?\<Gamma> ?e",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct", "Terms.Let ?\<Gamma> ?e ~= Bool ?b",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Terms.Let_distinct", "Terms.Let ?\<Gamma> ?e ~= Var ?v",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Terms.fv_Var", "fv (Var ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Terms.fv_supp_heap", "supp ?\<Gamma> = atom ` fv ?\<Gamma>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_supp_exp", "supp ?e = atom ` fv ?e",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_supp_as", "supp ?as = atom ` fv ?as",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.Let_distinct", "App ?e ?v ~= Terms.Let ?\<Gamma> ?e'",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct", "Lam [?v]. ?e' ~= Terms.Let ?\<Gamma> ?e",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct", "Terms.Let ?\<Gamma> ?e ~= Lam [?v]. ?e'",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct", "Terms.Let ?\<Gamma> ?e' ~= App ?e ?v",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.nonrec_eqvt",
     "nonrec ?\<Gamma> ==> nonrec (?\<pi> \<bullet> ?\<Gamma>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Terms.Let_distinct",
     "Terms.Let ?\<Gamma> ?e ~= (?scrut ? ?e1.0 : ?e2.0)",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Terms.Let_distinct",
     "(?scrut ? ?e1.0 : ?e2.0) ~= Terms.Let ?\<Gamma> ?e",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Terms.fv_App", "fv (App ?e ?x) = insert ?x (fv ?e)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 2, template_var 1)))),
    ("Terms.thunks_eqvt",
     "?\<pi> \<bullet> thunks ?\<Gamma> =
      thunks (?\<pi> \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Terms.set_bn_to_atom_domA",
     "set (bn ?as) = atom ` domA (asToHeap ?as)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Terms.heapToAssn_inject",
     "(heapToAssn ?x = heapToAssn ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Terms.alpha_test", "Lam [?x]. Var ?x = Lam [?y]. Var ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.heapToAssn_eqvt",
     "?p \<bullet> heapToAssn ?\<Gamma> =
      heapToAssn (?p \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Terms.bn_heapToAssn",
     "bn (heapToAssn ?\<Gamma>) = map (%x. atom (fst x)) ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Terms.fv_Lam", "fv (Lam [?x]. ?e) = fv ?e - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Terms.thunks_delete",
     "thunks (delete ?x ?\<Gamma>) = thunks ?\<Gamma> - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Terms.Lam_eq_same_var", "(Lam [?y]. ?e = Lam [?y]. ?e') = (?e = ?e')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Terms.AConsToHeap",
     "asToHeap (ACons ?v ?e ?as) = (?v, ?e) # asToHeap ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Terms.thunks_cong",
     "map_of ?\<Gamma> = map_of ?\<Delta> ==>
      thunks ?\<Gamma> = thunks ?\<Delta>",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_Let",
     "fv (Terms.Let ?\<Gamma> ?e) = fv ?\<Gamma> Un fv ?e - domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Terms.fv_SmartLet",
     "fv (SmartLet ?\<Gamma> ?e) = fv ?\<Gamma> Un fv ?e - domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Terms.thunks_append",
     "thunks (?\<Delta> @ ?\<Gamma>) =
      thunks ?\<Delta> Un (thunks ?\<Gamma> - domA ?\<Delta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.SmartLet_eqvt",
     "?\<pi> \<bullet> SmartLet ?\<Gamma> ?e =
      SmartLet (?\<pi> \<bullet> ?\<Gamma>) (?\<pi> \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Terms.Let_perm_simps",
     "?p \<bullet> Terms.Let ?\<Gamma> ?e =
      Terms.Let (?p \<bullet> ?\<Gamma>) (?p \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Terms.fv_IfThenElse",
     "fv (?scrut ? ?e1.0 : ?e2.0) = fv ?scrut Un fv ?e1.0 Un fv ?e2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 2, template_var 0)))),
    ("Terms.Let_supp",
     "supp (Terms.Let ?\<Gamma> ?e) =
      supp ?e Un supp ?\<Gamma> - atom ` domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.SmartLet_supp",
     "supp (SmartLet ?\<Gamma> ?e) =
      supp ?e Un supp ?\<Gamma> - atom ` domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.size_Let",
     "size (Terms.Let ?\<Gamma> ?e) =
      size_list (%p. size (snd p)) ?\<Gamma> + size ?e + Suc 0",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 1)),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("Terms.thunksE",
     "[| ?x : thunks ?\<Gamma>; map_of ?\<Gamma> ?x = Some ?e |]
      ==> ~ isVal ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Terms.thunksI",
     "[| map_of ?\<Gamma> ?x = Some ?e; ~ isVal ?e |]
      ==> ?x : thunks ?\<Gamma>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Terms.alpha_test2",
     "let ?x be Var ?x in Var ?x  = let ?y be Var ?y in Var ?y ",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Terms.thunks_Cons",
     "thunks ((?x, ?e) # ?\<Gamma>) =
      (if isVal ?e then thunks ?\<Gamma> - {?x}
       else insert ?x (thunks ?\<Gamma>))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 7, template_var 0))))),
    ("Terms.Let_fresh",
     "?a \<sharp> Terms.Let ?\<Gamma> ?e =
      (?a \<sharp> ?e & ?a \<sharp> ?\<Gamma> |
       ?a : atom ` domA ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1)))))),
    ("Terms.fv_delete_heap",
     "map_of ?\<Gamma> ?x = Some ?e ==>
      fv (delete ?x ?\<Gamma>, ?e) Un {?x} <= fv (?\<Gamma>, Var ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1),
          template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 2)),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)))))),
    ("Terms.change_Lam_Variable",
     "(?y' ~= ?y ==> atom ?y' \<sharp> (?e, ?y)) ==>
      Lam [?y]. ?e = Lam [?y']. ((?y \<leftrightarrow> ?y') \<bullet> ?e)",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 2, template_var 1))],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1))
              ))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("Terms.isLam_obtain_fresh",
     "[| isLam ?z;
         !!y e'. [| ?z = Lam [y]. e'; atom y \<sharp> ?c |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Terms.nonrecE",
     "[| nonrec ?\<Gamma>;
         !!x e. [| ?\<Gamma> = [(x, e)]; x ~: fv e |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Terms.Let_eq_iff",
     "(Terms.Let ?\<Gamma> ?e = Terms.Let ?\<Gamma>' ?e') =
      ([map (%x. atom (fst x)) ?\<Gamma>]lst. (?e, ?\<Gamma>) =
       [map (%x. atom (fst x)) ?\<Gamma>']lst. (?e', ?\<Gamma>'))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Terms.alpha_test3",
     "Terms.Let [(?x, Var ?y), (?y, Var ?x)] (Var ?x) =
      Terms.Let [(?y, Var ?x), (?x, Var ?y)] (Var ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 1))),
               template_hole 0))),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_hole 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Terms.Abs_eq_cong",
     "[| !!p. (p \<bullet> ?x = ?x') = (p \<bullet> ?y = ?y');
         supp ?y = supp ?x; supp ?y' = supp ?x' |]
      ==> ([?a]lst. ?x = [?a']lst. ?x') = ([?a]lst. ?y = [?a']lst. ?y')",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 5)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 5),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 4)),
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Terms.eqvt_lam_case",
     "[| Lam [?x]. ?e = Lam [?x']. ?e';
         !!\<pi>.
            [| supp (- \<pi>) \<sharp>* fv (Lam [?x]. ?e);
               supp \<pi> \<sharp>* Lam [?x]. ?e |]
            ==> ?F (\<pi> \<bullet> ?e) (\<pi> \<bullet> ?x)
                 (Lam [?x]. ?e) =
                ?F ?e ?x (Lam [?x]. ?e) |]
      ==> ?F ?e ?x (Lam [?x]. ?e) = ?F ?e' ?x' (Lam [?x']. ?e')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 0, template_var 3), template_var 4),
           template_app
            (template_app (template_hole 9, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_var 0, template_var 1), template_var 2),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1))))),
    ("Terms.eqvt_let_case",
     "[| Terms.Let ?as ?body = Terms.Let ?as' ?body';
         !!\<pi>.
            [| supp (- \<pi>) \<sharp>* fv (Terms.Let ?as ?body);
               supp \<pi> \<sharp>* Terms.Let ?as ?body |]
            ==> ?F (\<pi> \<bullet> ?as) (\<pi> \<bullet> ?body)
                 (Terms.Let ?as ?body) =
                ?F ?as ?body (Terms.Let ?as ?body) |]
      ==> ?F ?as ?body (Terms.Let ?as ?body) =
          ?F ?as' ?body' (Terms.Let ?as' ?body')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 0, template_var 4), template_var 3),
           template_app
            (template_app (template_hole 9, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_var 0, template_var 2), template_var 1),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1))))),
    ("Terms.exp_induct",
     "[| !!var. ?P (Var var); !!exp var. ?P exp ==> ?P (App exp var);
         !!\<Gamma> exp.
            [| !!x. x : domA \<Gamma> ==> ?P (the (map_of \<Gamma> x));
               ?P exp |]
            ==> ?P (Terms.Let \<Gamma> exp);
         !!var exp. ?P exp ==> ?P (Lam [var]. exp); !!b. ?P (Bool b);
         !!scrut e1 e2.
            [| ?P scrut; ?P e1; ?P e2 |] ==> ?P (scrut ? e1 : e2) |]
      ==> ?P ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Terms.exp_strong_exhaust",
     "[| !!var. ?y = Var var ==> ?P; !!exp var. ?y = App exp var ==> ?P;
         !!\<Gamma> exp.
            [| atom ` domA \<Gamma> \<sharp>* ?c;
               ?y = Terms.Let \<Gamma> exp |]
            ==> ?P;
         !!var exp.
            [| {atom var} \<sharp>* ?c; ?y = Lam [var]. exp |] ==> ?P;
         !!b. ?y = Bool b ==> ?P;
         !!scrut e1 e2. ?y = (scrut ? e1 : e2) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 1))),
    ("Terms.exp_heap_induct",
     "[| !!b var. ?P1.0 (Var var);
         !!exp var. ?P1.0 exp ==> ?P1.0 (App exp var);
         !!\<Gamma> exp.
            [| ?P2.0 \<Gamma>; ?P1.0 exp |]
            ==> ?P1.0 (Terms.Let \<Gamma> exp);
         !!var exp. ?P1.0 exp ==> ?P1.0 (Lam [var]. exp);
         !!b. ?P1.0 (Bool b);
         !!scrut e1 e2.
            [| ?P1.0 scrut; ?P1.0 e1; ?P1.0 e2 |]
            ==> ?P1.0 (scrut ? e1 : e2);
         ?P2.0 [];
         !!var exp \<Gamma>.
            [| ?P1.0 exp; ?P2.0 \<Gamma> |]
            ==> ?P2.0 ((var, exp) # \<Gamma>) |]
      ==> ?P1.0 ?e",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Terms.exp_heap_induct",
     "[| !!b var. ?P1.0 (Var var);
         !!exp var. ?P1.0 exp ==> ?P1.0 (App exp var);
         !!\<Gamma> exp.
            [| ?P2.0 \<Gamma>; ?P1.0 exp |]
            ==> ?P1.0 (Terms.Let \<Gamma> exp);
         !!var exp. ?P1.0 exp ==> ?P1.0 (Lam [var]. exp);
         !!b. ?P1.0 (Bool b);
         !!scrut e1 e2.
            [| ?P1.0 scrut; ?P1.0 e1; ?P1.0 e2 |]
            ==> ?P1.0 (scrut ? e1 : e2);
         ?P2.0 [];
         !!var exp \<Gamma>.
            [| ?P1.0 exp; ?P2.0 \<Gamma> |]
            ==> ?P2.0 ((var, exp) # \<Gamma>) |]
      ==> ?P2.0 ?\<Gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Terms.exp_induct_rec",
     "[| !!var. ?P (Var var); !!exp var. ?P exp ==> ?P (App exp var);
         !!\<Gamma> exp.
            [| ~ nonrec \<Gamma>;
               !!x. x : domA \<Gamma> ==> ?P (the (map_of \<Gamma> x));
               ?P exp |]
            ==> ?P (Terms.Let \<Gamma> exp);
         !!x e exp.
            [| x ~: fv e; ?P e; ?P exp |] ==> ?P (let x be e in exp );
         !!var exp. ?P exp ==> ?P (Lam [var]. exp); !!b. ?P (Bool b);
         !!scrut e1 e2.
            [| ?P scrut; ?P e1; ?P e2 |] ==> ?P (scrut ? e1 : e2) |]
      ==> ?P ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Terms.exp_strong_induct",
     "[| !!var c. ?P c (Var var);
         !!exp var c. (!!c. ?P c exp) ==> ?P c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c;
               !!c x. x : domA \<Gamma> ==> ?P c (the (map_of \<Gamma> x));
               !!c. ?P c exp |]
            ==> ?P c (Terms.Let \<Gamma> exp);
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P c exp |]
            ==> ?P c (Lam [var]. exp);
         !!b c. ?P c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P c scrut; !!c. ?P c e1; !!c. ?P c e2 |]
            ==> ?P c (scrut ? e1 : e2) |]
      ==> ?P ?c ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Terms.exp_strong_induct_set",
     "[| !!var c. ?P c (Var var);
         !!exp var c. (!!c. ?P c exp) ==> ?P c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c;
               !!c x e. (x, e) : set \<Gamma> ==> ?P c e; !!c. ?P c exp |]
            ==> ?P c (Terms.Let \<Gamma> exp);
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P c exp |]
            ==> ?P c (Lam [var]. exp);
         !!b c. ?P c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P c scrut; !!c. ?P c e1; !!c. ?P c e2 |]
            ==> ?P c (scrut ? e1 : e2) |]
      ==> ?P ?c ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Terms.exp_heap_strong_induct",
     "[| !!var c. ?P1.0 c (Var var);
         !!exp var c. (!!c. ?P1.0 c exp) ==> ?P1.0 c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c; !!c. ?P2.0 c \<Gamma>;
               !!c. ?P1.0 c exp |]
            ==> ?P1.0 c (Terms.Let \<Gamma> exp);
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P1.0 c exp |]
            ==> ?P1.0 c (Lam [var]. exp);
         !!b c. ?P1.0 c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P1.0 c scrut; !!c. ?P1.0 c e1; !!c. ?P1.0 c e2 |]
            ==> ?P1.0 c (scrut ? e1 : e2);
         !!c. ?P2.0 c [];
         !!var exp \<Gamma> c.
            [| !!c. ?P1.0 c exp; !!c. ?P2.0 c \<Gamma> |]
            ==> ?P2.0 c ((var, exp) # \<Gamma>) |]
      ==> ?P1.0 ?c ?e",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Terms.exp_heap_strong_induct",
     "[| !!var c. ?P1.0 c (Var var);
         !!exp var c. (!!c. ?P1.0 c exp) ==> ?P1.0 c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c; !!c. ?P2.0 c \<Gamma>;
               !!c. ?P1.0 c exp |]
            ==> ?P1.0 c (Terms.Let \<Gamma> exp);
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P1.0 c exp |]
            ==> ?P1.0 c (Lam [var]. exp);
         !!b c. ?P1.0 c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P1.0 c scrut; !!c. ?P1.0 c e1; !!c. ?P1.0 c e2 |]
            ==> ?P1.0 c (scrut ? e1 : e2);
         !!c. ?P2.0 c [];
         !!var exp \<Gamma> c.
            [| !!c. ?P1.0 c exp; !!c. ?P2.0 c \<Gamma> |]
            ==> ?P2.0 c ((var, exp) # \<Gamma>) |]
      ==> ?P2.0 ?c ?\<Gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Terms.exp_strong_induct_rec",
     "[| !!var c. ?P c (Var var);
         !!exp var c. (!!c. ?P c exp) ==> ?P c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c; ~ nonrec \<Gamma>;
               !!c x. x : domA \<Gamma> ==> ?P c (the (map_of \<Gamma> x));
               !!c. ?P c exp |]
            ==> ?P c (Terms.Let \<Gamma> exp);
         !!x e exp c.
            [| {atom x} \<sharp>* c; x ~: fv e; !!c. ?P c e;
               !!c. ?P c exp |]
            ==> ?P c (let x be e in exp );
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P c exp |]
            ==> ?P c (Lam [var]. exp);
         !!b c. ?P c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P c scrut; !!c. ?P c e1; !!c. ?P c e2 |]
            ==> ?P c (scrut ? e1 : e2) |]
      ==> ?P ?c ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Terms.exp_strong_induct_rec_set",
     "[| !!var c. ?P c (Var var);
         !!exp var c. (!!c. ?P c exp) ==> ?P c (App exp var);
         !!\<Gamma> exp c.
            [| atom ` domA \<Gamma> \<sharp>* c; ~ nonrec \<Gamma>;
               !!c x e. (x, e) : set \<Gamma> ==> ?P c e; !!c. ?P c exp |]
            ==> ?P c (Terms.Let \<Gamma> exp);
         !!x e exp c.
            [| {atom x} \<sharp>* c; x ~: fv e; !!c. ?P c e;
               !!c. ?P c exp |]
            ==> ?P c (let x be e in exp );
         !!var exp c.
            [| {atom var} \<sharp>* c; !!c. ?P c exp |]
            ==> ?P c (Lam [var]. exp);
         !!b c. ?P c (Bool b);
         !!scrut e1 e2 c.
            [| !!c. ?P c scrut; !!c. ?P c e1; !!c. ?P c e2 |]
            ==> ?P c (scrut ? e1 : e2) |]
      ==> ?P ?c ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]
