   [("Terms.exp_assn_size_eqvt", "?p \<bullet> size = size",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Terms.fv_Bool", "fv (Bool ?b) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Terms.asToHeap_heapToAssn", "asToHeap (heapToAssn ?as) = ?as",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms.heapToAssn_asToHeap", "heapToAssn (asToHeap ?as) = ?as",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms.fv_asToHeap", "fv (asToHeap ?\<Gamma>) = fv ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.fv_heapToAssn", "fv (heapToAssn ?\<Gamma>) = fv ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.supp_asToHeap", "supp (asToHeap ?as) = supp ?as",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.supp_heapToAssn",
     "supp (heapToAssn ?\<Gamma>) = supp ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms.fv_Var", "fv (Var ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Terms.fv_supp_heap", "supp ?\<Gamma> = atom ` fv ?\<Gamma>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_supp_exp", "supp ?e = atom ` fv ?e",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_supp_as", "supp ?as = atom ` fv ?as",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.fv_App", "fv (App ?e ?x) = insert ?x (fv ?e)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 2, template_var 1)))),
    ("Terms.thunks_eqvt",
     "?\<pi> \<bullet> thunks ?\<Gamma> =
      thunks (?\<pi> \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Terms.set_bn_to_atom_domA",
     "set (bn ?as) = atom ` domA (asToHeap ?as)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Terms.heapToAssn_inject",
     "(heapToAssn ?x = heapToAssn ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Terms.alpha_test", "Lam [?x]. Var ?x = Lam [?y]. Var ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Terms.heapToAssn_eqvt",
     "?p \<bullet> heapToAssn ?\<Gamma> =
      heapToAssn (?p \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Terms.bn_heapToAssn",
     "bn (heapToAssn ?\<Gamma>) = map (%x. atom (fst x)) ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Terms.fv_Lam", "fv (Lam [?x]. ?e) = fv ?e - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Terms.thunks_delete",
     "thunks (delete ?x ?\<Gamma>) = thunks ?\<Gamma> - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Terms.Lam_eq_same_var", "(Lam [?y]. ?e = Lam [?y]. ?e') = (?e = ?e')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Terms.AConsToHeap",
     "asToHeap (ACons ?v ?e ?as) = (?v, ?e) # asToHeap ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Terms.fv_Let",
     "fv (Terms.Let ?\<Gamma> ?e) = fv ?\<Gamma> Un fv ?e - domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Terms.fv_SmartLet",
     "fv (SmartLet ?\<Gamma> ?e) = fv ?\<Gamma> Un fv ?e - domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Terms.thunks_append",
     "thunks (?\<Delta> @ ?\<Gamma>) =
      thunks ?\<Delta> Un (thunks ?\<Gamma> - domA ?\<Delta>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.SmartLet_eqvt",
     "?\<pi> \<bullet> SmartLet ?\<Gamma> ?e =
      SmartLet (?\<pi> \<bullet> ?\<Gamma>) (?\<pi> \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Terms.Let_perm_simps",
     "?p \<bullet> Terms.Let ?\<Gamma> ?e =
      Terms.Let (?p \<bullet> ?\<Gamma>) (?p \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Terms.fv_IfThenElse",
     "fv (?scrut ? ?e1.0 : ?e2.0) = fv ?scrut Un fv ?e1.0 Un fv ?e2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 2, template_var 0)))),
    ("Terms.Let_supp",
     "supp (Terms.Let ?\<Gamma> ?e) =
      supp ?e Un supp ?\<Gamma> - atom ` domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.SmartLet_supp",
     "supp (SmartLet ?\<Gamma> ?e) =
      supp ?e Un supp ?\<Gamma> - atom ` domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0)),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Terms.size_Let",
     "size (Terms.Let ?\<Gamma> ?e) =
      size_list (%p. size (snd p)) ?\<Gamma> + size ?e + Suc 0",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 1)),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("Terms.alpha_test2",
     "let ?x be Var ?x in Var ?x  = let ?y be Var ?y in Var ?y ",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Terms.thunks_Cons",
     "thunks ((?x, ?e) # ?\<Gamma>) =
      (if isVal ?e then thunks ?\<Gamma> - {?x}
       else insert ?x (thunks ?\<Gamma>))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 7, template_var 0))))),
    ("Terms.Let_fresh",
     "?a \<sharp> Terms.Let ?\<Gamma> ?e =
      (?a \<sharp> ?e & ?a \<sharp> ?\<Gamma> |
       ?a : atom ` domA ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1)))))),
    ("Terms.Let_eq_iff",
     "(Terms.Let ?\<Gamma> ?e = Terms.Let ?\<Gamma>' ?e') =
      ([map (%x. atom (fst x)) ?\<Gamma>]lst. (?e, ?\<Gamma>) =
       [map (%x. atom (fst x)) ?\<Gamma>']lst. (?e', ?\<Gamma>'))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Terms.alpha_test3",
     "Terms.Let [(?x, Var ?y), (?y, Var ?x)] (Var ?x) =
      Terms.Let [(?y, Var ?x), (?x, Var ?y)] (Var ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 1))),
               template_hole 0))),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_hole 0))),
         template_app (template_hole 1, template_var 0))))]
