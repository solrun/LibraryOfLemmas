Loading theory "Draft.AList-Utils" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury" via "Draft.Terms" via "Draft.AList-Utils-Nominal")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate rewrite rule:
### (PROP ?P ==> True) == True
### Ignoring duplicate rewrite rule:
### (False ==> ?P) == True
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.529s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.AList-Utils"
### 0.169s elapsed time, 0.686s cpu time, 0.052s GC time
Loading theory "Draft.Nominal-Utils" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury" via "Draft.Terms")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.872s cpu time, 0.052s GC time
Loading theory "Draft.Vars" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury" via "Draft.Terms")
### theory "Draft.Vars"
### 0.092s elapsed time, 0.351s cpu time, 0.087s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Nominal-Utils"
### 0.414s elapsed time, 1.622s cpu time, 0.144s GC time
Loading theory "Draft.AList-Utils-Nominal" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury" via "Draft.Terms")
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.831s elapsed time, 3.287s cpu time, 0.319s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.AList-Utils-Nominal"
### 0.602s elapsed time, 2.069s cpu time, 0.625s GC time
Loading theory "Draft.Terms" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury")
### theory "HOL-Library.BigO"
### 0.892s elapsed time, 3.199s cpu time, 0.726s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.868s elapsed time, 5.585s cpu time, 0.971s GC time
Loading theory "Draft.Templates" (required by "Draft.LaunchburyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.187s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LaunchburyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.748s elapsed time, 1.806s cpu time, 0.780s GC time
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Terms"
### 4.527s elapsed time, 6.656s cpu time, 1.131s GC time
Loading theory "Draft.Substitution" (required by "Draft.LaunchburyTemplates" via "Draft.Launchbury")
Found termination order: "{}"
### theory "Draft.Substitution"
### 0.543s elapsed time, 0.619s cpu time, 0.058s GC time
Loading theory "Draft.Launchbury" (required by "Draft.LaunchburyTemplates")
Proofs for inductive predicate(s) "reds"
  Proving monotonicity ...
### theory "Draft.Launchbury"
### 1.240s elapsed time, 1.796s cpu time, 0.788s GC time
Loading theory "Draft.LaunchburyTemplates"
val templateLemmas =
   [("Launchbury.reds_isValI",
     "isVal ?z ==> ?\<Gamma> : ?z \<Down>\<^bsub>?L\<^esub> ?\<Gamma> : ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("Launchbury.result_evaluated",
     "?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z ==> isVal ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Launchbury.reds_doesnt_forget",
     "?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z ==>
      domA ?\<Gamma> <= domA ?\<Delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 1)))),
    ("Launchbury.reds_avoids_live'",
     "?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z ==>
      (domA ?\<Delta> - domA ?\<Gamma>) Int set ?L = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 2, template_var 4))),
           template_app (template_hole 1, template_var 2)),
         template_hole 0))),
    ("Launchbury.reds_smaller_L",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         set ?L' <= set ?L |]
      ==> ?\<Gamma> : ?e \<Down>\<^bsub>?L'\<^esub> ?\<Delta> : ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Launchbury.new_free_vars_on_heap",
     "?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z ==>
      fv (?\<Delta>, ?z) - domA ?\<Delta>
      <= fv (?\<Gamma>, ?e) - domA ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3))),
           template_app (template_hole 0, template_var 4))))),
    ("Launchbury.eval_test",
     "[] : let ?x be Lam [?y]. Var ?y in Var
    ?x  \<Down>\<^bsub>[]\<^esub> [(?x,
                                    Lam [?y]. Var ?y)] : Lam [?y]. Var ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_app
                            (template_app (template_hole 2, template_var 0),
                             template_app
                              (template_hole 1, template_var 0)))),
                       template_hole 6)),
                   template_app (template_hole 1, template_var 1))),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 1, template_var 0)))),
               template_hole 6)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Launchbury.reds_avoids_live",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         ?x : set ?L; ?x ~: domA ?\<Gamma> |]
      ==> ?x ~: domA ?\<Delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 0, template_var 5))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Launchbury.reds_SmartLet",
     "[| atom ` domA ?\<Delta> \<sharp>* (?\<Gamma>, ?L);
         ?\<Delta> @
         ?\<Gamma> : ?body \<Down>\<^bsub>?L\<^esub> ?\<Theta> : ?z |]
      ==> ?\<Gamma> : SmartLet ?\<Delta>
                       ?body \<Down>\<^bsub>?L\<^esub> ?\<Theta> : ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 5))),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 5),
                        template_var 4)),
                    template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Launchbury.reds_ApplicationI",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : Lam [?y]. ?e';
         ?\<Delta> : ?e'[?y::=?x] \<Down>\<^bsub>?L\<^esub> ?\<Theta> : ?z |]
      ==> ?\<Gamma> : App ?e ?x \<Down>\<^bsub>?L\<^esub> ?\<Theta> : ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 4),
                      template_var 2)),
                  template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 2)),
                 template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("Launchbury.reds_fresh",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         atom ?x \<sharp> (?\<Gamma>, ?e) |]
      ==> atom ?x \<sharp> (?\<Delta>, ?z) | ?x : domA ?\<Delta> - set ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_app (template_hole 0, template_var 3))))
           ))),
    ("Launchbury.reds_pres_closed",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         fv (?\<Gamma>, ?e) <= set ?L Un domA ?\<Gamma> |]
      ==> fv (?\<Delta>, ?z) <= set ?L Un domA ?\<Delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_app (template_hole 0, template_var 4)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("Launchbury.reds_fresh_fv",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         ?x : fv (?\<Delta>, ?z) & (?x ~: domA ?\<Delta> | ?x : set ?L) |]
      ==> ?x : fv (?\<Gamma>, ?e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_app (template_hole 1, template_var 2)))),
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 0, template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4)))
           ))),
    ("Launchbury.result_evaluated_fresh",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         !!y e'. [| ?z = Lam [y]. e'; atom y \<sharp> ?c |] ==> ?thesis;
         !!b. ?z = Bool b ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Launchbury.eval_test2",
     "[| ?y ~= ?x; ?n ~= ?y; ?n ~= ?x |]
      ==> [] : let ?x be Lam [?y]. Var ?y in App (Var ?x)
        ?x  \<Down>\<^bsub>[]\<^esub> [(?x,
  Lam [?y]. Var ?y)] : Lam [?y]. Var ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 2)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_app
                              (template_app
                                (template_hole 3, template_var 2),
                               template_app
                                (template_hole 2, template_var 2)))),
                         template_hole 7)),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 2, template_var 1)),
                       template_var 1))),
                 template_hole 0),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app (template_hole 2, template_var 2)))),
                 template_hole 7)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.LaunchburyTemplates"
### 0.566s elapsed time, 0.731s cpu time, 0.060s GC time
val it = (): unit
