   [("Cont.cont_discrete_cpo", "cont ?f",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Complete_Partial_Order.chain_empty",
     "Complete_Partial_Order.chain ?ord {}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Cont.cont_const", "cont (%x. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("ConvexPD.convex_le_refl", "?t \<le>\<natural> ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Compact_Basis.finite_Rep_pd_basis", "finite (Rep_pd_basis ?u)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Countable.inj_on_to_nat", "inj_on to_nat ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("C.below_Cinf", "?r << C\<^sup>\<infinity>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Transitive_Closure.reflp_rtranclp", "reflp ?R^**",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.symp_symclp", "symp (symclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.trans_rtrancl", "trans (?r^*)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.trans_trancl", "trans (?r^+)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.transp_rtranclp", "transp ?R^**",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex.continuous_on_of_real_id", "continuous_on ?S of_real",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Fun_Cpo.cont_fun", "cont (%f. f ?x)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("ConvexPD.upper_le_minimal", "PDUnit compact_bot \<le>\<natural> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("List.inj_on_Cons1", "inj_on ((#) ?x) ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Fun_Cpo.app_strict", "\<bottom> ?x = \<bottom>",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Transitive_Closure.symclp_greater", "?r <= symclp ?r",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("GCD.Gcd_int_greater_eq_0", "0 <= Gcd ?K",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("GCD.Lcm_int_greater_eq_0", "0 <= Lcm ?K",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Fun_Cpo.minimal_fun", "(%x. \<bottom>) << ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Transitive_Closure.refl_rtrancl", "refl (?r^*)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Transitive_Closure.symp_rtranclp_symclp", "symp (symclp ?r)^**",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("GCD.coprime_Suc_right_nat", "coprime ?n (Suc ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("GCD.coprime_Suc_left_nat", "coprime (Suc ?n) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Complete_Partial_Order.admissible_True",
     "ccpo.admissible ?lub ?ord (%x. True)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           t_empty)
         )),
    ("Complete_Partial_Order.admissible_const",
     "ccpo.admissible ?lub ?ord (%x. ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           t_empty)
         )),
    ("Cfun.cont_Rep_cfun2", "cont (Rep_cfun ?f)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Product_Cpo.cont_pair1", "cont (%x. (x, ?y))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Product_Cpo.cont_pair2", "cont (Pair ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Cfun.cont_Rep_cfun1", "cont (%f. f$?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Cfun.monofun_Rep_cfun2", "monofun (Rep_cfun ?f)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Product_Cpo.monofun_pair1", "monofun (%x. (x, ?y))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Product_Cpo.monofun_pair2", "monofun (Pair ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Cfun.monofun_Rep_cfun1", "monofun (%f. f$?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Compact_Basis.Rep_pd_basis_nonempty", "Rep_pd_basis ?u ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Complex.complex_i_not_numeral", "\<i> ~= numeral ?w",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex.cis_neq_zero", "cis ?a ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Cfun.ID1", "ID$?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Cfun.Rep_cfun_strict1", "\<bottom>$?x = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable.from_nat_to_nat", "from_nat (to_nat ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cSup_lessThan", "Sup {..<?x} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cInf_greaterThan", "Inf {?x<..} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.relpowp_1", "?P ^^ 1 = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_int", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_left_nat", "gcd 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_nat", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_nat", "gcd ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("GCD.gcd_idem_nat", "gcd ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Complete_Lattices.Union_Pow_eq", "\<Union> (Pow ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.Domain_rtrancl", "Domain (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transitive_Closure.Range_rtrancl", "Range (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transitive_Closure.relpow_1", "?R ^^ 1 = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.ntrancl_Zero", "ntrancl 0 ?R = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Conditionally_Complete_Lattices.bdd_above_nat",
     "bdd_above ?X = finite ?X",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Real_Vector_Spaces.Cauchy_convergent_iff",
     "Cauchy ?X = convergent ?X",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complete_Lattices.mem_simps", "(?c : {}) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex.complex_Im_fact", "Im (fact ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Complex.complex_Im_of_int", "Im (of_int ?z) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Complex.complex_Im_of_nat", "Im (of_nat ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Complex.complex_Im_numeral", "Im (numeral ?v) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Complex.Im_complex_of_real", "Im (complex_of_real ?z) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Complex.Re_complex_of_real", "Re (complex_of_real ?z) = ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex.norm_cis", "cmod (cis ?a) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Map.map_of_Cons_code", "map_of [] ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex.complex_cnj_cnj", "cnj (cnj ?z) = ?z",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex.rcis_zero_mod", "rcis 0 ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Compact_Basis.PDPlus_absorb", "PDPlus ?t ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.relpowp_0_I", "(?P ^^ 0) ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("GCD.gcd_ge_0_int", "0 <= gcd ?x ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.lcm_ge_0_int", "0 <= lcm ?x ?y",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complete_Lattices.subset_Pow_Union", "?A <= Pow (\<Union> ?A)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.Re_csqrt", "0 <= Re (csqrt ?z)",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.complex_Re_le_cmod", "Re ?x <= cmod ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("C.below_C", "?x << C$?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("C.C_case_below", "C_case$?f << ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("Product_Cpo.minimal_prod", "(\<bottom>, \<bottom>) << ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)
         )),
    ("ConvexPD.convex_pd_minimal",
     "convex_principal (PDUnit compact_bot) << ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)
         )),
    ("Transitive_Closure.refl_reflcl", "refl (?r^=)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Complex.Complex_in_Reals", "Complex ?x 0 : \<real>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_cos", "isCont cos ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_cosh", "isCont cosh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_exp", "isCont exp ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_sin", "isCont sin ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_sinh", "isCont sinh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("NthRoot.isCont_real_sqrt", "isCont sqrt ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_arctan", "isCont arctan ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Transcendental.isCont_arsinh", "isCont arsinh ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Topological_Spaces.isCont_swap", "isCont prod.swap ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Cfun.adm_chfindom", "adm (%u. ?P (u$?s))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Finite_Set.finite_Collect_less_nat", "finite {n. n < ?k}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Finite_Set.finite_Collect_le_nat", "finite {n. n <= ?k}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("List.not_Cons_self", "?xs ~= ?x # ?xs",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("List.not_Cons_self2", "?x # ?xs ~= ?xs",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Complex.complex_i_not_neg_numeral", "\<i> ~= - numeral ?w",
     template_negation
      (
         template_equation
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Transitive_Closure.rtranclp_idemp", "?r^**^** = ?r^**",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.tranclp_rtranclp_absorb", "?R^++^** = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_conversep", "symclp ?r^--1 = symclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_idem", "symclp (symclp ?r) = symclp ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_tranclp_absorb", "?R^**^++ = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_left_int", "gcd 0 ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_int", "gcd ?x 0 = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_idem_int", "gcd ?x ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Gcd_eq", "\<bar>Gcd ?K\<bar> = Gcd ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Lcm_eq", "\<bar>Lcm ?K\<bar> = Lcm ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set.Compl_eq_Diff_UNIV", "- ?A = UNIV - ?A",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Transitive_Closure.trancl_domain", "Domain (?r^+) = Domain ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.trancl_range", "Range (?r^+) = Range ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Set.Compl_disjoint", "?A Int - ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Set.Compl_disjoint2", "- ?A Int ?A = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Set.Compl_partition", "?A Un - ?A = UNIV",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Set.Compl_partition2", "- ?A Un ?A = UNIV",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Set_Interval.Compl_atLeast", "- {?k..} = {..<?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_atMost", "- {..?k} = {?k<..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_greaterThan", "- {?k<..} = {..?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_lessThan", "- {..<?k} = {?k..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_idemp", "(?r^*)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.trancl_rtrancl_absorb", "(?R^+)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.rtrancl_trancl_absorb", "(?R^*)^+ = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Meson.skolem_COMBK_iff", "?P = Meson.skolem (Meson.COMBK ?P ?i)",
     template_equation
      (template_var 1,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.acyclic_irrefl", "acyclic ?r = irrefl (?r^+)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.finite_trancl", "finite (?r^+) = finite ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.acyclic_converse", "acyclic (?r^-1) = acyclic ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex.complex_Re_fact", "Re (fact ?n) = fact ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_Re_of_int", "Re (of_int ?z) = real_of_int ?z",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_Re_of_nat", "Re (of_nat ?n) = real ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_Re_numeral", "Re (numeral ?v) = numeral ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_mod_cnj", "cmod (cnj ?z) = cmod ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex.cis_rcis_eq", "cis ?a = rcis 1 ?a",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Complex.legacy_Complex_simps", "complex_of_real ?r = Complex ?r 0",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex.complex_cnj_fact", "cnj (fact ?n) = fact ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_cnj_of_int", "cnj (of_int ?z) = of_int ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_cnj_of_nat", "cnj (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_cnj_numeral", "cnj (numeral ?w) = numeral ?w",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_cnj_complex_of_real",
     "cnj (complex_of_real ?x) = complex_of_real ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.rcis_zero_arg", "rcis ?r 0 = complex_of_real ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex.sgn_cis", "sgn (cis ?a) = cis ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.abs_Im_le_cmod", "\<bar>Im ?x\<bar> <= cmod ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.abs_Re_le_cmod", "\<bar>Re ?x\<bar> <= cmod ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_mod_minus_le_complex_mod", "- cmod ?x <= cmod ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("NthRoot.isCont_real_root", "isCont (root ?n) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Cont.cont2mono", "cont ?f ==> monofun ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Cont.chfindom_monofun2cont", "monofun ?f ==> cont ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Real_Vector_Spaces.real_Cauchy_convergent",
     "Cauchy ?X ==> convergent ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Product_Cpo.split_strict",
     "(case \<bottom> of (x, xa) => ?f x xa) = ?f \<bottom> \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Hilbert_Choice.some_eq_trivial", "(SOME y. y = ?x) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Hilbert_Choice.some_sym_eq_trivial", "(SOME y. ?x = y) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("List.nth_Cons_0", "(?x # ?xs) ! 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Cprod.unit_when", "(LAM (). ?a)$?u = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_var 1)),
    ("Cfun.strictify1", "strictify$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Cfun.seq_simps", "seq$?x$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Transitive_Closure.symclp_pointfree", "symclp ?r = sup ?r ?r^--1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_conversep", "?r^--1^** = ?r^**^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.tranclp_converse", "?r^--1^++ = ?r^++^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtranclp_reflclp_absorb", "?R^**^== = ?R^**",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflclp_tranclp", "?r^++^== = ?r^**",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_reflclp", "?R^==^** = ?R^**",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("List.fold_Cons_rev", "fold (#) ?xs = (@) (rev ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_Suc_0", "gcd ?m (Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Complete_Lattices.UN_empty2", "(UN x:?A. {}) = {}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_hole 0)),
    ("Set.Collect_mem_eq", "{x. x : ?A} = ?A",
     template_equation
      (template_app (template_hole 1, t_empty), template_var 0)),
    ("Enum.Collect_code", "Collect ?P = set (filter ?P enum_class.enum)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Transitive_Closure.rtrancl_trancl_reflcl", "?r^* = (?r^+)^=",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Transitive_Closure.trancl_unfold_left", "?r^+ = ?r O ?r^*",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.trancl_unfold_right", "?r^+ = ?r^* O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transitive_Closure.rtrancl_converse", "(?r^-1)^* = (?r^*)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.trancl_converse", "(?r^-1)^+ = (?r^+)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtrancl_reflcl_absorb", "(?R^*)^= = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflcl_trancl", "(?r^+)^= = ?r^*",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_r_diff_Id", "(?r - Id)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.rtrancl_reflcl", "(?R^=)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.trancl_reflcl", "(?r^=)^+ = ?r^*",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Compact_Basis.Rep_PDUnit", "Rep_pd_basis (PDUnit ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Transitive_Closure.symp_conv_conversep_eq", "symp ?r = (?r^--1 = ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("HOL.NO_MATCH_cong", "NO_MATCH ?pat ?val = NO_MATCH ?pat ?val",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.compact_convex_unit_iff",
     "Adm.compact {?x}\<natural> = Adm.compact ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Conditionally_Complete_Lattices.bdd_above_uminus",
     "bdd_above (uminus ` ?X) = bdd_below ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Conditionally_Complete_Lattices.bdd_below_uminus",
     "bdd_below (uminus ` ?X) = bdd_above ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.antisym_reflcl", "antisym (?r^=) = antisym ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Set.mem_Collect_eq", "(?a : Collect ?P) = ?P ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 0, template_var 1))),
    ("Cfun.eta_cfun", "(LAM x. ?f$x) = ?f",
     template_equation
      (template_app (template_hole 1, t_empty), template_var 0)),
    ("Cfun.ID2", "?f oo ID = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Cfun.ID3", "ID oo ?f = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Cfun.cfcomp_strict", "\<bottom> oo ?f = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("ConvexPD.convex_bind_principal",
     "convex_bind$(convex_principal ?t) = convex_bind_basis ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.norm_exp_eq_Re", "cmod (exp ?z) = exp (Re ?z)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.Im_i_times", "Im (\<i> * ?z) = Re ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_mod_rcis", "cmod (rcis ?r ?a) = \<bar>?r\<bar>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Complex.complex_In_mult_cnj_zero", "Im (?z * cnj ?z) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Complex.cis_cnj", "cnj (cis ?t) = cis (- ?t)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.complex_cnj_inverse", "cnj (inverse ?x) = inverse (cnj ?x)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Complex.complex_cnj_minus", "cnj (- ?x) = - cnj ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Complex.cis_inverse", "inverse (cis ?a) = cis (- ?a)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.complex_surj", "Complex (Re ?z) (Im ?z) = ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex.rcis_cmod_Arg", "rcis (cmod ?z) (Arg ?z) = ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ConvexPD.convex_to_lower_principal",
     "convex_to_lower$(convex_principal ?t) = lower_principal ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ConvexPD.convex_to_upper_principal",
     "convex_to_upper$(convex_principal ?t) = upper_principal ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.bezw_0", "bezw ?x 0 = (1, 0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("ConvexPD.convex_plus_absorb", "?a \<union>\<natural> ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 0),
       template_var 0)),
    ("ConvexPD.convex_join_unit", "convex_join${?xs}\<natural> = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Compact_Basis.PDPlus_commute", "PDPlus ?t ?u = PDPlus ?u ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List.set_subset_Cons", "set ?xs <= set (?x # ?xs)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Transitive_Closure.relpow_0_I", "(?x, ?x) : ?R ^^ 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Meson.skolem_COMBK_I", "?Q ==> Meson.skolem (Meson.COMBK ?Q ?i)",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Product_Cpo.compact_fst", "Adm.compact ?x ==> Adm.compact (fst ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Product_Cpo.compact_snd", "Adm.compact ?x ==> Adm.compact (snd ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hilbert_Choice.someI", "?P ?x ==> ?P (Eps ?P)",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.sym_rtrancl", "sym ?r ==> sym (?r^*)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.sym_trancl", "sym ?r ==> sym (?r^+)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.symp_rtranclp", "symp ?r ==> symp ?r^**",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limits.Cauchy_Bseq", "Cauchy ?X ==> Bseq ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Transitive_Closure.acyclic_impl_antisym_rtrancl",
     "acyclic ?r ==> antisym (?r^*)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("List.inj_split_Cons", "inj_on (%(xs, n). n # xs) ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0)
         )),
    ("Old_Datatype.Case_In0", "Old_Datatype.Case ?c ?d (In0 ?M) = ?c ?M",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 2, template_var 0))),
    ("Old_Datatype.Case_In1", "Old_Datatype.Case ?c ?d (In1 ?N) = ?d ?N",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("GCD.Gcd_int_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_int_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.gcd_abs2_int", "gcd ?x \<bar>?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg2_int", "gcd ?x (- ?y) = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_abs1_int", "gcd \<bar>?x\<bar> ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg1_int", "gcd (- ?x) ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs2_int", "lcm ?x \<bar>?y\<bar> = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg2_int", "lcm ?x (- ?y) = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs1_int", "lcm \<bar>?x\<bar> ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg1_int", "lcm (- ?x) ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.abs_gcd_int", "\<bar>gcd ?x ?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.abs_lcm_int", "\<bar>lcm ?i ?j\<bar> = lcm ?i ?j",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.Gcd_nat_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_nat_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Finite_Set.card_Collect_less_nat", "card {i. i < ?n} = ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, t_empty)),
       template_var 0)),
    ("Set.Collect_const", "{s. ?P} = (if ?P then UNIV else {})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Complete_Lattices.bind_UNION", "Set.bind ?A ?f = \<Union> (?f ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set.Diff_Compl", "?A - - ?B = ?A Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complete_Lattices.INT_empty", "\<Inter> (?B ` {}) = UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_hole 0)),
    ("Complete_Lattices.UN_empty", "\<Union> (?B ` {}) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_hole 0)),
    ("Transitive_Closure.rtrancl_idemp_self_comp", "?R^* O ?R^* = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.complex_is_Real_iff", "(?z : \<real>) = (Im ?z = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex.Reals_cnj_iff", "(?z : \<real>) = (cnj ?z = ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Filter.Collect_empty_eq_bot", "(Collect ?P = {}) = (?P = bot)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex.complex_cnj_one_iff", "(cnj ?z = 1) = (?z = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Complex.complex_cnj_zero_iff", "(cnj ?z = 0) = (?z = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Complex.csqrt_eq_1", "(csqrt ?z = 1) = (?z = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Complex.csqrt_eq_0", "(csqrt ?z = 0) = (?z = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Set.subset_Compl_self_eq", "(?A <= - ?A) = (?A = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Complex.cnj_in_Ints_iff", "(cnj ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex.summable_complex_of_real",
     "summable (%n. complex_of_real (?f n)) = summable ?f",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Complex.Re_i_times", "Re (\<i> * ?z) = - Im ?z",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.norm_cos_sin", "cmod (Complex (cos ?t) (sin ?t)) = 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Complex.cis_conv_exp", "cis ?b = exp (\<i> * complex_of_real ?b)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex.sgn_eq", "sgn ?z = ?z / complex_of_real (cmod ?z)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.divide_i", "?x / \<i> = - \<i> * ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 2)),
         template_var 0))),
    ("Complex.complex_cnj_neg_numeral", "cnj (- numeral ?w) = - numeral ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex.i_complex_of_real",
     "\<i> * complex_of_real ?r = Complex 0 ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Complex.complex_of_real_i",
     "complex_of_real ?r * \<i> = Complex 0 ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Complex.complex_i_mult_minus", "\<i> * (\<i> * ?x) = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex.power2_csqrt", "(csqrt ?z)\<^sup>2 = ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 0)),
    ("ConvexPD.convex_unit_Rep_compact_basis",
     "{Rep_compact_basis ?a}\<natural> = convex_principal (PDUnit ?a)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transcendental.isCont_pochhammer", "isCont (%z. pochhammer z ?n) ?z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)
         )),
    ("ConvexPD.compact_convex_unit",
     "Adm.compact ?x ==> Adm.compact {?x}\<natural>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("ConvexPD.deflation_convex_map",
     "deflation ?d ==> deflation (convex_map$?d)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Transitive_Closure.single_valued_relpow",
     "single_valued ?R ==> single_valued (?R ^^ ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Transitive_Closure.symp_symclp_eq", "symp ?r ==> symclp ?r = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Transitive_Closure.trancl_id", "trans ?r ==> ?r^+ = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Transitive_Closure.trans_reflclI", "trans ?r ==> trans (?r^=)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("ConvexPD.convex_le_imp_lower_le",
     "?t \<le>\<natural> ?u ==> ?t \<le>\<flat> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("ConvexPD.convex_le_imp_upper_le",
     "?t \<le>\<natural> ?u ==> ?t \<le>\<sharp> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Predicate_Compile.containsI",
     "?x : ?A ==> Predicate_Compile.contains ?A ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Cont.flatdom_strict2cont", "?f \<bottom> = \<bottom> ==> cont ?f",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 2), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Cont.flatdom_strict2mono", "?f \<bottom> = \<bottom> ==> monofun ?f",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 2), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List.distinct_adj_ConsD",
     "distinct_adj (?x # ?xs) ==> distinct_adj ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Complex.rcis_Ex", "EX r a. ?z = rcis r a",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Fun.Cantors_paradox", "\<nexists>f. f ` ?A = Pow ?A",
     template_negation
      (template_predicate (template_app (template_hole 3, t_empty)))),
    ("C.C_eq_Cinf", "C\<^bsup>?i\<^esup> ~= C\<^sup>\<infinity>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("C.C_case_Cinf",
     "C_case$?f$C\<^sup>\<infinity> = ?f$C\<^sup>\<infinity>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Transitive_Closure.reflclp_idemp", "?P^==^== = ?P^==",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_hole 0)
           ),
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("GCD.gcd_red_int", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_abs_eq", "Gcd (abs ` ?K) = Gcd ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.Lcm_abs_eq", "Lcm (abs ` ?K) = Lcm ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.gcd_red_nat", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Lcm_nat_insert", "Lcm (insert ?n ?M) = lcm ?n (Lcm ?M)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Finite_Set.card_Collect_le_nat", "card {i. i <= ?n} = Suc ?n",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Set.Compl_eq", "- ?A = {x. x ~: ?A}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.Inter_insert",
     "\<Inter> (insert ?a ?B) = ?a Int \<Inter> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_insert",
     "\<Union> (insert ?a ?B) = ?a Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Diff_eq", "- (?A - ?B) = - ?A Un ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Set.vimage_Compl", "?f -` (- ?A) = - ?f -` ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complete_Lattices.UN_singleton", "(UN x:?A. {x}) = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_var 0)),
    ("Transitive_Closure.rtrancl_unfold", "?r^* = Id Un ?r^* O ?r",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.trancl_unfold", "?r^+ = ?r Un ?r^+ O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.r_comp_rtrancl_eq", "?r O ?r^* = ?r^* O ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Set.Compl_iff", "(?c : - ?A) = (?c ~: ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_le_PDUnit_PDUnit_iff",
     "(PDUnit ?a \<le>\<natural> PDUnit ?b) = (?a << ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("C.Cinf_eq_C",
     "(C\<^sup>\<infinity> = C$?r) = (C\<^sup>\<infinity> = ?r)",
     template_bimplication
      (template_equation
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_equation (template_hole 2, template_var 0))),
    ("Countable.to_nat_split", "(to_nat ?x = to_nat ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("GCD.lcm_proj1_iff_nat", "(lcm ?m ?n = ?m) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_nat", "(lcm ?m ?n = ?n) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set.Compl_eq_Compl_iff", "(- ?A = - ?B) = (?A = ?B)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Complex.complex_cnj_cancel_iff", "(cnj ?x = cnj ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Complex.rcis_eq_zero_iff", "(rcis ?r ?a = 0) = (?r = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("ConvexPD.convex_unit_bottom_iff",
     "({?x}\<natural> = \<bottom>) = (?x = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compact_Basis.PDUnit_inject", "(PDUnit ?a = PDUnit ?b) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Set.Compl_subset_Compl_iff", "(- ?A <= - ?B) = (?B <= ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("Complete_Lattices.True_in_image_Bex", "(True : ?P ` ?A) = Bex ?A ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex.complex_mod_sqrt_Re_mult_cnj",
     "cmod ?z = sqrt (Re (?z * cnj ?z))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Im_sgn", "Im (sgn ?z) = Im ?z / cmod ?z",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Re_sgn", "Re (sgn ?z) = Re ?z / cmod ?z",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Im_rcis", "Im (rcis ?r ?a) = ?r * sin ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Re_rcis", "Re (rcis ?r ?a) = ?r * cos ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.rcis_cnj", "cnj ?a = rcis (cmod ?a) (- Arg ?a)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.complex_cnj", "cnj (Complex ?a ?b) = Complex ?a (- ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.complex_cnj_pochhammer",
     "cnj (pochhammer ?z ?n) = pochhammer (cnj ?z) ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Complex.complex_cnj_power", "cnj (?x ^ ?n) = cnj ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Complex.complex_cnj_scaleR",
     "cnj (?r *\<^sub>R ?x) = ?r *\<^sub>R cnj ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("ConvexPD.convex_to_lower_unit",
     "convex_to_lower${?x}\<natural> = {?x}\<flat>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ConvexPD.convex_to_upper_unit",
     "convex_to_upper${?x}\<natural> = {?x}\<sharp>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ConvexPD.convex_bind_strict",
     "convex_bind$\<bottom>$?f = ?f$\<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ConvexPD.convex_map_ident", "convex_map$(LAM x. x)$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, t_empty))),
         template_var 0),
       template_var 0)),
    ("ConvexPD.convex_join_map_unit",
     "convex_join$(convex_map$convex_unit$?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("Transitive_Closure.trancl_subset_Field2",
     "?r^+ <= Field ?r \<times> Field ?r",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("C.case_of_C_below", "(case ?r of C$y => ?x) << ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, t_empty))),
               template_var 0)),
           template_var 1)
         )),
    ("Cfun.Abs_cfun_inverse2", "cont ?f ==> Rep_cfun (Abs_cfun ?f) = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Fun_Cpo.cont2cont_fun", "cont ?f ==> cont (%x. ?f x ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Fun_Cpo.mono2mono_fun", "monofun ?f ==> monofun (%x. ?f x ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complete_Partial_Order.lfp_eq_fixp",
     "mono ?f ==> lfp ?f = ccpo_class.fixp ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Fun_Cpo.ch2ch_fun", "chain ?S ==> chain (%i. ?S i ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Product_Cpo.ch2ch_snd", "chain ?Y ==> chain (%i. snd (?Y i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Product_Cpo.ch2ch_fst", "chain ?Y ==> chain (%i. fst (?Y i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex.summable_Im", "summable ?f ==> summable (%x. Im (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex.summable_Re", "summable ?f ==> summable (%x. Re (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex.Cauchy_Im", "Cauchy ?X ==> Cauchy (%n. Im (?X n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex.Cauchy_Re", "Cauchy ?X ==> Cauchy (%n. Re (?X n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("GCD.Lcm_nat_infinite", "infinite ?M ==> Lcm ?M = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Predicate_Compile.pred_of_setI",
     "Predicate_Compile.contains ?A ?x ==> pred.eval (pred_of_set ?A) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("GCD.Gcd_dvd_int", "?a : ?A ==> Gcd ?A dvd ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("GCD.dvd_Lcm_int", "?m : ?M ==> ?m dvd Lcm ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("GCD.Gcd_nat_eq_one", "1 : ?N ==> Gcd ?N = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("GCD.Lcm_eq_0_I_nat", "0 : ?A ==> Lcm ?A = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("GCD.Gcd_dvd_nat", "?a : ?A ==> Gcd ?A dvd ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("GCD.dvd_Lcm_nat", "?m : ?M ==> ?m dvd Lcm ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complete_Lattices.Union_upper", "?B : ?A ==> ?B <= \<Union> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_lower", "?B : ?A ==> \<Inter> ?A <= ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Complex.Ints_cnj", "?x : \<int> ==> cnj ?x : \<int>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Transitive_Closure.r_into_rtrancl", "?p : ?r ==> ?p : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.r_into_trancl'", "?p : ?r ==> ?p : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.r_into_rtranclp", "?r ?x ?y ==> ?r^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Transitive_Closure.symclpI1", "?r ?x ?y ==> symclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Transitive_Closure.symclpI2", "?r ?y ?x ==> symclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Complex.Arg_bounded", "- pi < Arg ?z & Arg ?z <= pi",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)),
             template_hole 2))
         )),
    ("List.nth_Cons_Suc", "(?x # ?xs) ! Suc ?n = ?xs ! ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Complete_Lattices.Inf_apply", "Inf ?A ?x = (INF f\<in>?A. f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Sup_apply", "Sup ?A ?x = (SUP f\<in>?A. f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Transitive_Closure.rtranclp_is_Sup_relpowp",
     "?P^** = Sup (range ((^^) ?P))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("GCD.gcd_neg_numeral_2_int",
     "gcd ?x (- numeral ?n) = gcd ?x (numeral ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_int_int_eq", "gcd (int ?m) (int ?n) = int (gcd ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_1_int",
     "gcd (- numeral ?n) ?x = gcd (numeral ?n) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GCD.lcm_int_int_eq", "lcm (int ?m) (int ?n) = int (lcm ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_int_eq", "Gcd (int ` ?N) = int (Gcd ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_int_eq", "Lcm (int ` ?N) = int (Lcm ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_Un_distrib",
     "\<Inter> (?A Un ?B) = \<Inter> ?A Int \<Inter> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_Un_distrib",
     "\<Union> (?A Un ?B) = \<Union> ?A Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Int", "- (?A Int ?B) = - ?A Un - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Un", "- (?A Un ?B) = - ?A Int - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.vimage_Collect_eq", "?f -` Collect ?P = {y. ?P (?f y)}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Transitive_Closure.rtrancl_is_UN_relpow",
     "?R^* = \<Union> (range ((^^) ?R))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Product_Type.Collect_const_case_prod",
     "{(a, b). ?P} = (if ?P then UNIV else {})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Compact_Basis.Rep_PDPlus",
     "Rep_pd_basis (PDPlus ?u ?v) = Rep_pd_basis ?u Un Rep_pd_basis ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Fun_Cpo.fun_chain_iff", "chain ?S = (ALL x. chain (%i. ?S i x))",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Product_Cpo.compact_Pair_iff",
     "Adm.compact (?x, ?y) = (Adm.compact ?x & Adm.compact ?y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Set.empty_Collect_eq", "({} = Collect ?P) = (ALL x. ~ ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Set.Collect_empty_eq", "(Collect ?P = {}) = (ALL x. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("Set.disjoint_eq_subset_Compl", "(?A Int ?B = {}) = (?A <= - ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hilbert_Choice.some_eq_ex", "?P (SOME x. ?P x) = (EX x. ?P x)",
     template_equation
      (template_app
        (template_var 0, template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.not_False_in_image_Ball",
     "(False ~: ?P ` ?A) = Ball ?A ?P",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj1_iff_int", "(lcm ?m ?n = \<bar>?m\<bar>) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_int", "(lcm ?m ?n = \<bar>?n\<bar>) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex.continuous_on_of_real_o_iff",
     "continuous_on ?S (%x. complex_of_real (?g x)) = continuous_on ?S ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Cfun.seq_conv_if",
     "seq$?x = (if ?x = \<bottom> then \<bottom> else ID)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("ConvexPD.convex_bind_basis_simps",
     "convex_bind_basis (PDUnit ?a) = (LAM f. f$(Rep_compact_basis ?a))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("List.drop_Suc_Cons", "drop (Suc ?n) (?x # ?xs) = drop ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("Complex.Im_divide_of_real",
     "Im (?z / complex_of_real ?r) = Im ?z / ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Complex.Re_divide_of_real",
     "Re (?z / complex_of_real ?r) = Re ?z / ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Complex.complex_cnj_diff", "cnj (?x - ?y) = cnj ?x - cnj ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex.complex_cnj_add", "cnj (?x + ?y) = cnj ?x + cnj ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex.complex_cnj_mult", "cnj (?x * ?y) = cnj ?x * cnj ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex.complex_cnj_divide", "cnj (?x / ?y) = cnj ?x / cnj ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex.complex_minus", "- Complex ?a ?b = Complex (- ?a) (- ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.DeMoivre", "cis ?a ^ ?n = cis (real ?n * ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Complex.i_mult_Complex", "\<i> * Complex ?a ?b = Complex (- ?b) ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Complex.cis_mult", "cis ?a * cis ?b = cis (?a + ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex.Complex_mult_i", "Complex ?a ?b * \<i> = Complex (- ?b) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Complex.cis_divide", "cis ?a / cis ?b = cis (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complete_Lattices.Union_Int_subset",
     "\<Union> (?A Int ?B) <= \<Union> ?A Int \<Union> ?B",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Inter_Un_subset",
     "\<Inter> ?A Un \<Inter> ?B <= \<Inter> (?A Int ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set.Collect_subset", "{x: ?A. ?P x} <= ?A",
     template_inequation
      (less_equals, template_app (template_hole 2, t_empty),
       template_var 1)),
    ("Transitive_Closure.rtrancl_Un_subset", "?R^* Un ?S^* <= (?R Un ?S)^*",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex.cmod_le", "cmod ?z <= \<bar>Re ?z\<bar> + \<bar>Im ?z\<bar>",
     template_inequation
      (less_equals, template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.complex_mod_triangle_ineq2",
     "cmod (?b + ?a) - cmod ?b <= cmod ?a",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 1)),
       template_app (template_hole 1, template_var 0))),
    ("ConvexPD.approx_chain_convex_map",
     "approx_chain ?a ==> approx_chain (%i. convex_map$(?a i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Countable.nth_item_covers",
     "Countable.finite_item ?x ==> EX n. Countable.nth_item n = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Finite_Set.finite_Collect_subsets",
     "finite ?A ==> finite {B. B <= ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Set.CollectI", "?P ?a ==> ?a : {x. ?P x}",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, t_empty))
           ))),
    ("Cfun.chain_monofun", "chain ?Y ==> chain (%i. ?f$(?Y i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.ch2ch_Rep_cfunL", "chain ?F ==> chain (%i. ?F i$?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_bind_basis_mono",
     "?t \<le>\<natural> ?u ==>
      convex_bind_basis ?t << convex_bind_basis ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("GCD.gcd_le1_int", "0 < ?a ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_int", "0 < ?b ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Transitive_Closure.relpowp_bot", "0 < ?n ==> bot ^^ ?n = bot",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Transitive_Closure.relpow_empty", "0 < ?n ==> {} ^^ ?n = {}",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("GCD.coprime_diff_one_right_nat", "0 < ?n ==> coprime ?n (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("GCD.coprime_diff_one_left_nat", "0 < ?n ==> coprime (?n - 1) ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Transcendental.isCont_arcosh", "1 < ?x ==> isCont arcosh ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transitive_Closure.rtranclp_mono", "?r <= ?s ==> ?r^** <= ?s^**",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Countable.le_sum_encode_Inl",
     "?x <= ?y ==> ?x <= sum_encode (Inl ?y)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Countable.le_sum_encode_Inr",
     "?x <= ?y ==> ?x <= sum_encode (Inr ?y)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Set.Compl_anti_mono", "?A <= ?B ==> - ?B <= - ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Complete_Lattices.Union_mono",
     "?A <= ?B ==> \<Union> ?A <= \<Union> ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_anti_mono",
     "?B <= ?A ==> \<Inter> ?A <= \<Inter> ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Zorn.mono_Chains", "?r <= ?s ==> Chains ?r <= Chains ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtrancl_mono", "?r <= ?s ==> ?r^* <= ?s^*",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Fun_Cpo.fun_belowD", "?f << ?g ==> ?f ?x << ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           ))),
    ("Product_Cpo.fst_monofun", "?x << ?y ==> fst ?x << fst ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Product_Cpo.snd_monofun", "?x << ?y ==> snd ?x << snd ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ConvexPD.PDUnit_convex_mono",
     "?x << ?y ==> PDUnit ?x \<le>\<natural> PDUnit ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Predicate_Compile.contains_predI",
     "Predicate_Compile.contains ?A ?x ==>
      pred.eval (Predicate_Compile.contains_pred ?A ?x) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("GCD.dvd_lcm_I1_int", "?i dvd ?m ==> ?i dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("GCD.dvd_lcm_I2_int", "?i dvd ?n ==> ?i dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("GCD.dvd_lcm_I1_nat", "?k dvd ?m ==> ?k dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("GCD.dvd_lcm_I2_nat", "?k dvd ?n ==> ?k dvd lcm ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("GCD.gcd_proj1_if_dvd_nat", "?x dvd ?y ==> gcd ?x ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.lcm_proj2_if_dvd_nat", "?x dvd ?y ==> lcm ?x ?y = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("GCD.lcm_proj1_if_dvd_nat", "?x dvd ?y ==> lcm ?y ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("GCD.gcd_proj2_if_dvd_nat", "?y dvd ?x ==> gcd ?x ?y = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Complex.of_real_Re", "?z : \<real> ==> complex_of_real (Re ?z) = ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Limits.isUCont_isCont", "isUCont ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 2)),
             template_var 1)
           ))),
    ("Complete_Lattices.inj_on_image",
     "inj_on ?f (\<Union> ?A) ==> inj_on ((`) ?f) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Set.ComplD", "?c : - ?A ==> ?c ~: ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)
               )
           ))),
    ("Transitive_Closure.tranclp_into_rtranclp",
     "?r^++ ?a ?b ==> ?r^** ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HOL.disjCI", "(~ ?Q ==> ?P) ==> ?P | ?Q",
     template_implication
      ([template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_predicate (template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Set.CollectD", "?a : {x. ?P x} ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, t_empty))
            )],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Complex.complex_exp_exists", "EX a r. ?z = complex_of_real r * exp a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Cprod.csplit1", "csplit$?f$\<bottom> = ?f$\<bottom>$\<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Transitive_Closure.relpowp_commute",
     "?P OO ?P ^^ ?n = ?P ^^ ?n OO ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtranclp_sup_rtranclp",
     "(sup ?R^** ?S^**)^** = (sup ?R ?S)^**",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_nat", "?m * ?n = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_nat_abs_right_eq",
     "gcd ?n (nat \<bar>?k\<bar>) = nat (gcd (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.gcd_nat_abs_left_eq",
     "gcd (nat \<bar>?k\<bar>) ?n = nat (gcd ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.lcm_nat_abs_right_eq",
     "lcm ?n (nat \<bar>?k\<bar>) = nat (lcm (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.lcm_nat_abs_left_eq",
     "lcm (nat \<bar>?k\<bar>) ?n = nat (lcm ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.Gcd_nat_abs_eq",
     "(GCD k\<in>?K. nat \<bar>k\<bar>) = nat (Gcd ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_nat_abs_eq",
     "(LCM k\<in>?K. nat \<bar>k\<bar>) = nat (Lcm ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_eq", "\<Inter> ?A = {x. ALL B:?A. x : B}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.Union_eq", "\<Union> ?A = {x. EX B:?A. x : B}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Set.Compl_insert", "- insert ?x ?A = - ?A - {?x}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 0)))),
    ("Set.Collect_neg_eq", "{x. ~ ?P x} = - {x. ?P x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 2, t_empty)))),
    ("Transitive_Closure.relpow_commute", "?R O ?R ^^ ?n = ?R ^^ ?n O ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtrancl_Un_rtrancl",
     "(?R^* Un ?S^*)^* = (?R Un ?S)^*",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.Compl_Times_UNIV2",
     "- (?A \<times> UNIV) = (- ?A) \<times> UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Product_Type.Compl_Times_UNIV1",
     "- (UNIV \<times> ?A) = UNIV \<times> - ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1), t_empty)),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Hilbert_Choice.inj_iff", "inj ?f = (inv ?f o ?f = id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Fun_Cpo.fun_below_iff", "(?f << ?g) = (ALL x. ?f x << ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.empty_Union_conv",
     "({} = \<Union> ?A) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Inter_UNIV_conv",
     "(UNIV = \<Inter> ?A) = (ALL x:?A. x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Inter_UNIV_conv",
     "(\<Inter> ?A = UNIV) = (ALL x:?A. x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Union_empty_conv",
     "(\<Union> ?A = {}) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Product_Cpo.fst_below_iff", "(fst ?x << ?y) = (?x << (?y, snd ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Product_Cpo.snd_below_iff", "(snd ?x << ?y) = (?x << (fst ?x, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complete_Lattices.disjnt_Union2",
     "disjnt ?B (\<Union> ?\<A>) = (ALL A:?\<A>. disjnt ?B A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.disjnt_Union1",
     "disjnt (\<Union> ?\<A>) ?B = (ALL A:?\<A>. disjnt A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.Inter_iff",
     "(?A : \<Inter> ?C) = (ALL X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Union_iff",
     "(?A : \<Union> ?C) = (EX X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Set.subset_Compl_singleton", "(?A <= - {?b}) = (?b ~: ?A)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ConvexPD.convex_unit_eq_iff",
     "({?x}\<natural> = {?y}\<natural>) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<flat> << {?y}\<flat>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<sharp> << {?y}\<sharp>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_unit_below_iff",
     "({?x}\<natural> << {?y}\<natural>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex.sums_cnj", "(%x. cnj (?f x)) sums cnj ?l = ?f sums ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Complex.Im_exp", "Im (exp ?z) = exp (Re ?z) * sin (Im ?z)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 0))))),
    ("Complex.Re_exp", "Re (exp ?z) = exp (Re ?z) * cos (Im ?z)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.Im_sum", "Im (sum ?f ?s) = (SUM x:?s. Im (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex.Re_sum", "Re (sum ?f ?s) = (SUM x:?s. Re (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex.Im_divide_of_nat", "Im (?z / of_nat ?n) = Im ?z / real ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Im_divide_numeral",
     "Im (?z / numeral ?w) = Im ?z / numeral ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Re_divide_of_nat", "Re (?z / of_nat ?n) = Re ?z / real ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.Re_divide_numeral",
     "Re (?z / numeral ?w) = Re ?z / numeral ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex.cos_n_Re_cis_pow_n", "cos (real ?n * ?a) = Re (cis ?a ^ ?n)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Complex.sin_n_Im_cis_pow_n", "sin (real ?n * ?a) = Im (cis ?a ^ ?n)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Complex.complex_eq",
     "?a = complex_of_real (Re ?a) + \<i> * complex_of_real (Im ?a)",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.exp_eq_polar",
     "exp ?z = complex_of_real (exp (Re ?z)) * cis (Im ?z)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.Complex_eq",
     "Complex ?a ?b = complex_of_real ?a + \<i> * complex_of_real ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0))))),
    ("Complex.cnj_sum", "cnj (sum ?f ?s) = (SUM x:?s. cnj (?f x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex.cnj_prod", "cnj (prod ?f ?s) = (PROD x:?s. cnj (?f x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex.rcis_inverse", "inverse (rcis ?r ?a) = rcis (1 / ?r) (- ?a)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Hilbert_Choice.Eps_case_prod",
     "(SOME (x, y). ?P x y) = (SOME xy. ?P (fst xy) (snd xy))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("ConvexPD.convex_plus_commute",
     "?a \<union>\<natural> ?b = ?b \<union>\<natural> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 1))),
    ("ConvexPD.convex_map_bottom",
     "convex_map$?f$\<bottom> = {?f$\<bottom>}\<natural>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ConvexPD.convex_bind_unit", "convex_bind${?x}\<natural>$?f = ?f$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Compact_Basis.PDPlus_assoc",
     "PDPlus (PDPlus ?t ?u) ?v = PDPlus ?t (PDPlus ?u ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Hilbert_Choice.strict_mono_inv_on_range",
     "strict_mono ?f ==> strict_mono_on (inv ?f) (range ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 1))
           ))),
    ("List.last_ConsL", "?xs = [] ==> last (?x # ?xs) = ?x",
     template_implication
      ([template_equation (template_var 1, template_hole 3)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Conditionally_Complete_Lattices.cInf_greaterThanAtMost",
     "?y < ?x ==> Inf {?y<..?x} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Conditionally_Complete_Lattices.cInf_greaterThanLessThan",
     "?y < ?x ==> Inf {?y<..<?x} = ?y",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Conditionally_Complete_Lattices.cSup_atLeastLessThan",
     "?y < ?x ==> Sup {?y..<?x} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Conditionally_Complete_Lattices.cSup_greaterThanLessThan",
     "?y < ?x ==> Sup {?y<..<?x} = ?x",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("GCD.finite_divisors_nat", "0 < ?m ==> finite {d. d dvd ?m}",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("GCD.gcd_proj1_if_dvd_int", "?x dvd ?y ==> gcd ?x ?y = \<bar>?x\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("GCD.lcm_proj2_if_dvd_int", "?x dvd ?y ==> lcm ?x ?y = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.lcm_proj1_if_dvd_int", "?x dvd ?y ==> lcm ?y ?x = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_proj2_if_dvd_int", "?y dvd ?x ==> gcd ?x ?y = \<bar>?y\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Complex.in_Reals_norm",
     "?z : \<real> ==> cmod ?z = \<bar>Re ?z\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.continuous_Im",
     "continuous ?F ?g ==> continuous ?F (%x. Im (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_Re",
     "continuous ?F ?g ==> continuous ?F (%x. Re (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_cnj",
     "continuous ?F ?g ==> continuous ?F (%x. cnj (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_on_cis",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. cis (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_on_Im",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. Im (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_on_Re",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. Re (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex.continuous_on_cnj",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. cnj (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Cfun.monofun_Rep_cfun", "cont ?f ==> monofun (%x. Rep_cfun (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Product_Cpo.cont2cont_snd", "cont ?f ==> cont (%x. snd (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Product_Cpo.cont2cont_fst", "cont ?f ==> cont (%x. fst (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Hilbert_Choice.someI_ex", "EX x. ?P x ==> ?P (SOME x. ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("Cfun.seq_simps", "?x ~= \<bottom> ==> seq$?x = ID",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.gcd_le1_nat", "?a ~= 0 ==> gcd ?a ?b <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("GCD.gcd_le2_nat", "?b ~= 0 ==> gcd ?a ?b <= ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Transcendental.isCont_ln", "?x ~= 0 ==> isCont ln ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transitive_Closure.rtrancl_subset_rtrancl",
     "?r <= ?s^* ==> ?r^* <= ?s^*",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_converseI",
     "?r^** ?y ?x ==> ?r^--1^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("Transitive_Closure.relpowp_imp_rtranclp",
     "(?P ^^ ?n) ?x ?y ==> ?P^** ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Transitive_Closure.relpow_imp_rtrancl", "?p : ?R ^^ ?n ==> ?p : ?R^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Transitive_Closure.rtranclp_converseD",
     "?r^--1^** ?x ?y ==> ?r^** ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Zorn.Chains_relation_of",
     "?C : Chains (relation_of ?P ?A) ==> ?C <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Fun_Cpo.cont2cont_lambda", "(!!y. cont (%x. ?f x y)) ==> cont ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Fun_Cpo.mono2mono_lambda",
     "(!!y. monofun (%x. ?f x y)) ==> monofun ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Fun_Cpo.ch2ch_lambda", "(!!x. chain (%i. ?S i x)) ==> chain ?S",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.acyclic_subset",
     "[| acyclic ?s; ?r <= ?s |] ==> acyclic ?r",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("List.set_Cons_transfer",
     "rel_fun (rel_set ?A)
       (rel_fun (rel_set (list_all2 ?A)) (rel_set (list_all2 ?A))) set_Cons
       set_Cons",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Transitive_Closure.rtranclp_r_diff_Id", "(inf ?r (~=))^** = ?r^**",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app (template_hole 3, template_var 0))),
    ("Complete_Lattices.Un_eq_UN",
     "?A Un ?B = (UN b. if b then ?A else ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Complete_Lattices.Int_Union",
     "?A Int \<Union> ?B = \<Union> ((Int) ?A ` ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Int_Union2",
     "\<Union> ?B Int ?A = (UN C:?B. C Int ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Un_Inter",
     "?A Un \<Inter> ?B = \<Inter> ((Un) ?A ` ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.image_Union",
     "?f ` \<Union> ?S = \<Union> ((`) ?f ` ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_Union",
     "?f -` \<Union> ?A = \<Union> ((-`) ?f ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_constant",
     "(INT y:?A. ?c) = (if ?A = {} then UNIV else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Complete_Lattices.UN_constant",
     "(UN y:?A. ?c) = (if ?A = {} then {} else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Complete_Lattices.INT_bool_eq",
     "\<Inter> (range ?A) = ?A True Int ?A False",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_var 0, template_hole 0)))),
    ("Complete_Lattices.UN_bool_eq",
     "\<Union> (range ?A) = ?A True Un ?A False",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_var 0, template_hole 0)))),
    ("Complete_Lattices.UNION_singleton_eq_range",
     "(UN x:?A. {?f x}) = ?f ` ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set.full_SetCompr_eq", "{u. EX x. u = ?f x} = range ?f",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("List.set_Cons_sing_Nil", "set_Cons ?A {[]} = (%x. [x]) ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Transitive_Closure.ntrancl_Suc",
     "ntrancl (Suc ?n) ?R = ntrancl ?n ?R O (Id Un ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ConvexPD.convex_le_PDUnit_lemma2",
     "(?t \<le>\<natural> PDUnit ?b) = (ALL a:Rep_pd_basis ?t. a << ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("ConvexPD.convex_le_PDUnit_lemma1",
     "(PDUnit ?a \<le>\<natural> ?t) = (ALL b:Rep_pd_basis ?t. ?a << b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Transitive_Closure.rtrancl_power",
     "(?p : ?R^*) = (EX n. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Transitive_Closure.rtranclp_power",
     "?P^** ?x ?y = (EX n. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complex.i_times_eq_iff", "(\<i> * ?w = ?z) = (?w = - (\<i> * ?z))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_equation
        (template_var 1,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Complete_Lattices.member_bind",
     "(?x : Set.bind ?A ?f) = (?x : \<Union> (?f ` ?A))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Hilbert_Choice.some_in_eq", "((SOME x. x : ?A) : ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4, template_app (template_hole 3, t_empty)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("List.take_Suc_Cons", "take (Suc ?n) (?x # ?xs) = ?x # take ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List.remdups_adj_Cons_alt",
     "?x # tl (remdups_adj (?x # ?xs)) = remdups_adj (?x # ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex.complex_mod_mult_cnj",
     "cmod (?z * cnj ?z) = (cmod ?z)\<^sup>2",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Complex.cmod_unit_one",
     "cmod (complex_of_real (cos ?a) + \<i> * complex_of_real (sin ?a)) =
      1",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 5,
               template_app (template_hole 1, template_var 0))))),
       template_hole 0)),
    ("Complex.complex_add_cnj", "?z + cnj ?z = complex_of_real (2 * Re ?z)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Complex.complex_of_real_add_Complex",
     "complex_of_real ?r + Complex ?x ?y = Complex (?r + ?x) ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex.Complex_add_complex_of_real",
     "Complex ?x ?y + complex_of_real ?r = Complex (?x + ?r) ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Complex.i_even_power", "\<i> ^ (?n * 2) = (- 1) ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app
          (template_hole 7,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Complex.complex_norm_square",
     "complex_of_real ((cmod ?z)\<^sup>2) = ?z * cnj ?z",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("ConvexPD.convex_plus_principal",
     "convex_principal ?t \<union>\<natural> convex_principal ?u =
      convex_principal (PDPlus ?t ?u)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List.Cons_shuffles_subset1",
     "(#) ?x ` shuffles ?xs ?ys <= shuffles (?x # ?xs) ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("List.Cons_shuffles_subset2",
     "(#) ?y ` shuffles ?xs ?ys <= shuffles ?xs (?y # ?ys)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("GCD.Lcm_0_iff_nat", "finite ?A ==> (Lcm ?A = 0) = (0 : ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("Compact_Basis.fold_pd_PDUnit",
     "semilattice ?f ==> fold_pd ?g ?f (PDUnit ?x) = ?g ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Lifting_Set.Collect_transfer",
     "bi_total ?A ==>
      rel_fun (rel_fun ?A (=)) (rel_set ?A) Collect Collect",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("ConvexPD.ep_pair_convex_map",
     "ep_pair ?e ?p ==> ep_pair (convex_map$?e) (convex_map$?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Hilbert_Choice.inv_f_f", "inj ?f ==> inv ?f (?f ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 1),
           template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Hilbert_Choice.inv_o_cancel", "inj ?f ==> inv ?f o ?f = id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Hilbert_Choice.inj_imp_surj_inv", "inj ?f ==> surj (inv ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 0)),
           template_hole 0),
         template_hole 4))),
    ("Cfun.cfun_arg_cong", "?x = ?y ==> ?f$?x = ?f$?y",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Cfun.cfun_fun_cong", "?f = ?g ==> ?f$?x = ?g$?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.Collect_case_prod_mono",
     "?A <= ?B ==> {(x, y). ?A x y} <= {(x, y). ?B x y}",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.of_real_sqrt",
     "0 <= ?x ==> complex_of_real (sqrt ?x) = csqrt (complex_of_real ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Cfun.monofun_cfun_arg", "?x << ?y ==> ?f$?x << ?f$?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Cfun.monofun_cfun_fun", "?f << ?g ==> ?f$?x << ?g$?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex.exp_Reals_eq",
     "?z : \<real> ==> exp ?z = complex_of_real (exp (Re ?z))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Hilbert_Choice.bij_betw_inv_into",
     "bij_betw ?f ?A ?B ==> bij_betw (inv_into ?A ?f) ?B ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("Hilbert_Choice.bij_imp_bij_inv", "bij ?f ==> bij (inv ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 3),
                   template_var 0)),
               template_hole 2),
             template_hole 3)
           ))),
    ("GCD.finite_divisors_int", "?i ~= 0 ==> finite {d. d dvd ?i}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Complex.cis_Arg", "?z ~= 0 ==> cis (Arg ?z) = sgn ?z",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Predicate_Compile.contains_pred_notI",
     "~ Predicate_Compile.contains ?A ?x ==>
      pred.eval (Predicate.not_pred (Predicate_Compile.contains_pred ?A ?x))
       ()",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Complex.Im_power_real", "Im ?x = 0 ==> Im (?x ^ ?n) = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Complex.cmod_eq_Re", "Im ?z = 0 ==> cmod ?z = \<bar>Re ?z\<bar>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex.cmod_eq_Im", "Re ?z = 0 ==> cmod ?z = \<bar>Im ?z\<bar>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Transcendental.isCont_tan", "cos ?x ~= (0::?'a) ==> isCont tan ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_tanh", "cosh ?x ~= (0::?'a) ==> isCont tanh ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_cot", "sin ?x ~= (0::?'a) ==> isCont cot ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Cfun.strictI", "?f$?x = \<bottom> ==> ?f$\<bottom> = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 0),
         template_hole 1))),
    ("Hilbert_Choice.surj_imp_inj_inv", "surj ?f ==> inj (inv ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 3),
                 template_var 0)),
             template_hole 2)
           ))),
    ("Hilbert_Choice.inj_on_inv_into",
     "?B <= ?f ` ?A ==> inj_on (inv_into ?A ?f) ?B",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Transitive_Closure.tranclp_converseI",
     "?r^++^--1 ?x ?y ==> ?r^--1^++ ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Product_Type.Collect_case_prodD",
     "?x : {(x, y). ?A x y} ==> ?A (fst ?x) (snd ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 0,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtranclp_symclp_sym",
     "(symclp ?r)^** ?x ?y ==> (symclp ?r)^** ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("Transitive_Closure.tranclp_converseD",
     "?r^--1^++ ?x ?y ==> ?r^++^--1 ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Complex.Im_eq_0", "\<bar>Re ?z\<bar> = cmod ?z ==> Im ?z = 0",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("GCD.Lcm_dvd_nat", "ALL m:?M. m dvd ?n ==> Lcm ?M dvd ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Set.ComplI", "(?c : ?A ==> False) ==> ?c : - ?A",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)
               )],
          template_predicate (template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Fun_Cpo.fun_belowI", "(!!x. ?f x << ?g x) ==> ?f << ?g",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Product_Cpo.compact_Pair",
     "[| Adm.compact ?x; Adm.compact ?y |] ==> Adm.compact (?x, ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transitive_Closure.finite_relcomp",
     "[| finite ?R; finite ?S |] ==> finite (?R O ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Conditionally_Complete_Lattices.bdd_below_image_antimono",
     "[| antimono ?f; bdd_above ?A |] ==> bdd_below (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Conditionally_Complete_Lattices.bdd_above_image_antimono",
     "[| antimono ?f; bdd_below ?A |] ==> bdd_above (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Conditionally_Complete_Lattices.bdd_above_image_mono",
     "[| mono ?f; bdd_above ?A |] ==> bdd_above (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Conditionally_Complete_Lattices.bdd_below_image_mono",
     "[| mono ?f; bdd_below ?A |] ==> bdd_below (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complete_Lattices.Inf1_D", "[| Inf ?A ?a; ?P : ?A |] ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Complete_Lattices.Sup1_I", "[| ?P : ?A; ?P ?a |] ==> Sup ?A ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Hilbert_Choice.some_eq_imp", "[| Eps ?P = ?a; ?P ?b |] ==> ?P ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 0, template_var 2), template_var 1),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate (template_app (template_var 2, template_var 1)))),
    ("Cpodef.typedef_finite_UNIV",
     "[| type_definition ?Rep ?Abs ?A; finite ?A |] ==> finite UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("List.nth_Cons_numeral",
     "(?x # ?xs) ! numeral ?v = ?xs ! (numeral ?v - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Cfun.cfcomp2", "(?f oo ?g)$?x = ?f$(?g$?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cprod.csplit_Pair", "csplit$?f$(?x, ?y) = ?f$?x$?y",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Transitive_Closure.relpowp_add",
     "?P ^^ (?m + ?n) = ?P ^^ ?m OO ?P ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GCD.lcm_altdef_int",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_int",
     "\<bar>?m\<bar> * \<bar>?n\<bar> = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_mult_distrib_nat", "?k * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Complete_Lattices.vimage_eq_UN", "?f -` ?B = (UN y:?B. ?f -` {y})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Transitive_Closure.relpow_add",
     "?R ^^ (?m + ?n) = ?R ^^ ?m O ?R ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complete_Partial_Order.chain_equality",
     "Complete_Partial_Order.chain (=) ?A = (ALL x:?A. ALL y:?A. x = y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Cfun.cfun_eq_iff", "(?f = ?g) = (ALL x. ?f$x = ?g$x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Cfun.cfun_below_iff", "(?f << ?g) = (ALL x. ?f$x << ?g$x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("GCD.lcm_0_iff_int", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("GCD.lcm_0_iff_nat", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Hilbert_Choice.surj_iff", "surj ?f = (?f o inv ?f = id)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_hole 4),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_var 0)),
         template_hole 0))),
    ("Complex.Complex_eq_1", "(Complex ?a ?b = 1) = (?a = 1 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Complex.Complex_eq_0", "(Complex ?a ?b = 0) = (?a = 0 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Complex.Complex_eq_i", "(Complex ?x ?y = \<i>) = (?x = 0 & ?y = 1)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Product_Cpo.Pair_bottom_iff",
     "((?x, ?y) = \<bottom>) = (?x = \<bottom> & ?y = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Set.Collect_mono_iff",
     "(Collect ?P <= Collect ?Q) = (ALL x. ?P x --> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.mem_simps",
     "(?a : insert ?b ?A) = (?a = ?b | ?a : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Complete_Lattices.mem_simps",
     "(?c : ?A Int ?B) = (?c : ?A & ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complete_Lattices.mem_simps", "(?c : ?A Un ?B) = (?c : ?A | ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Cfun.cfcomp1", "?f oo ?g = (LAM x. ?f$(?g$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("List.drop_Cons_numeral",
     "drop (numeral ?v) (?x # ?xs) = drop (numeral ?v - 1) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_hole 0)),
         template_var 0))),
    ("Stream.cycle_Cons", "cycle (?x # ?xs) = ?x ## cycle (?xs @ [?x])",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 0)))))),
    ("Complex.Complex_sum",
     "Complex (sum ?f ?s) 0 = (SUM x:?s. Complex (?f x) 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex.complex_scaleR",
     "?r *\<^sub>R Complex ?a ?b = Complex (?r * ?a) (?r * ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex.Complex_sum'",
     "(SUM x:?s. Complex (?f x) 0) = Complex (sum ?f ?s) 0",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("ConvexPD.convex_to_lower_join",
     "convex_to_lower$(convex_join$?xss) =
      lower_bind$(convex_to_lower$?xss)$convex_to_lower",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 7))),
    ("ConvexPD.convex_to_upper_join",
     "convex_to_upper$(convex_join$?xss) =
      upper_bind$(convex_to_upper$?xss)$convex_to_upper",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 7))),
    ("Hilbert_Choice.split_paired_Eps",
     "(SOME x. ?P x) = (SOME (a, b). ?P (a, b))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_map_unit",
     "convex_map$?f${?x}\<natural> = {?f$?x}\<natural>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_join_map_join",
     "convex_join$(convex_map$convex_join$?xsss) =
      convex_join$(convex_join$?xsss)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 4)),
           template_var 0)),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("GCD.lcm_code_integer",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cfun.beta_cfun", "cont ?f ==> (LAM x. ?f x)$?u = ?f ?u",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("GCD.Gcd_remove0_nat", "finite ?M ==> Gcd ?M = Gcd (?M - {0})",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))))),
    ("Transitive_Closure.finite_trancl_ntranl",
     "finite ?R ==> ?R^+ = ntrancl (card ?R - 1) ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)),
           template_var 0)))),
    ("Hilbert_Choice.inj_imp_bij_betw_inv",
     "inj ?f ==> bij_betw (inv ?f) (?f ` ?M) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Complex.finite_nth_roots", "0 < ?n ==> finite {z. z ^ ?n = ?c}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Complete_Lattices.bij_betw_Pow",
     "bij_betw ?f ?A ?B ==> bij_betw ((`) ?f) (Pow ?A) (Pow ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hilbert_Choice.inv_inv_eq", "bij ?f ==> inv (inv ?f) = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 3),
           template_app
            (template_app (template_hole 0, template_hole 4),
             template_var 0)),
         template_var 0))),
    ("List.last_ConsR", "?xs ~= [] ==> last (?x # ?xs) = last ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("List.hd_Cons_tl", "?xs ~= [] ==> hd ?xs # tl ?xs = ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transitive_Closure.rtrancl_imp_relpow",
     "?p : ?R^* ==> EX n. ?p : ?R ^^ n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.rtranclp_imp_relpowp",
     "?P^** ?x ?y ==> EX n. (?P ^^ n) ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.Image_closed_trancl",
     "?r `` ?X <= ?X ==> ?r^* `` ?X = ?X",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0))),
    ("Hilbert_Choice.inv_into_into",
     "?x : ?f ` ?A ==> inv_into ?A ?f ?x : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Deriv.DERIV_isCont",
     "(?f has_field_derivative ?D) (at ?x) ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_var 2)
           ))),
    ("Boolean_Algebras.sup1CI", "(~ ?B ?x ==> ?A ?x) ==> sup ?A ?B ?x",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 2, template_var 1))
               )],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Transitive_Closure.acyclicI", "ALL x. (x, x) ~: ?r^+ ==> acyclic ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Cont.ch2ch_cont", "[| cont ?f; chain ?Y |] ==> chain (%i. ?f (?Y i))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Cont.cont_finch2finch",
     "[| cont ?f; finite_chain ?Y |] ==> finite_chain (%n. ?f (?Y n))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Cont.ch2ch_monofun",
     "[| monofun ?f; chain ?Y |] ==> chain (%i. ?f (?Y i))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Cont.monofun_finch2finch",
     "[| monofun ?f; finite_chain ?Y |] ==> finite_chain (%n. ?f (?Y n))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Transitive_Closure.finite_rtrancl_Image",
     "[| finite ?R; finite ?A |] ==> finite (?R^* `` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Transitive_Closure.finite_relpow",
     "[| finite ?R; 0 < ?n |] ==> finite (?R ^^ ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complete_Partial_Order.chain_subset",
     "[| Complete_Partial_Order.chain ?ord ?A; ?B <= ?A |]
      ==> Complete_Partial_Order.chain ?ord ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("ConvexPD.convex_le_trans",
     "[| ?t \<le>\<natural> ?u; ?u \<le>\<natural> ?v |]
      ==> ?t \<le>\<natural> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Porder.HOLCF_trans_rules", "[| ?a = ?b; ?b << ?c |] ==> ?a << ?c",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("GCD.dvd_pos_nat", "[| 0 < ?n; ?m dvd ?n |] ==> 0 < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_hole 1, template_var 0))),
    ("Porder.HOLCF_trans_rules", "[| ?x << ?y; ?y << ?x |] ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Porder.HOLCF_trans_rules", "[| ?x << ?y; ?y << ?z |] ==> ?x << ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Porder.HOLCF_trans_rules", "[| ?a << ?b; ?b = ?c |] ==> ?a << ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Ctr_Sugar.iff_contradict", "[| ~ ?P; ?P = ?Q; ?Q |] ==> ?R",
     template_implication
      ([template_negation (template_predicate (template_var 2)),
        template_equation (template_var 2, template_var 1),
        template_predicate (template_var 1)],
       template_predicate (template_var 0))),
    ("Ctr_Sugar.iff_contradict", "[| ~ ?Q; ?P = ?Q; ?P |] ==> ?R",
     template_implication
      ([template_negation (template_predicate (template_var 2)),
        template_equation (template_var 1, template_var 2),
        template_predicate (template_var 1)],
       template_predicate (template_var 0))),
    ("Cfun.strictify_conv_if",
     "strictify$?f$?x = (if ?x = \<bottom> then \<bottom> else ?f$?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("Complex.fun_complex_eq",
     "?f =
      (%x. complex_of_real (Re (?f x)) +
           \<i> * complex_of_real (Im (?f x)))",
     template_equation (template_var 0, t_empty)),
    ("GCD.gcd_mult_distrib_int",
     "\<bar>?k\<bar> * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set.insert_Collect", "insert ?a (Collect ?P) = {u. u ~= ?a --> ?P u}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Complex.summable_complex_iff",
     "summable ?f = (summable (%x. Re (?f x)) & summable (%x. Im (?f x)))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complete_Lattices.mem_simps", "(?c : ?A - ?B) = (?c : ?A & ?c ~: ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Complex.Im_complex_div_eq_0",
     "(Im (?a / ?b) = 0) = (Im (?a * cnj ?b) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_hole 2))),
    ("Complex.Re_complex_div_eq_0",
     "(Re (?a / ?b) = 0) = (Re (?a * cnj ?b) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_hole 2))),
    ("Complex.complex_eq_cancel_iff2",
     "(Complex ?x ?y = complex_of_real ?xa) = (?x = ?xa & ?y = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Complex.Im_complex_div_gt_0",
     "(0 < Im (?a / ?b)) = (0 < Im (?a * cnj ?b))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Re_complex_div_gt_0",
     "(0 < Re (?a / ?b)) = (0 < Re (?a * cnj ?b))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Im_complex_div_lt_0",
     "(Im (?a / ?b) < 0) = (Im (?a * cnj ?b) < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 2))),
    ("Complex.Re_complex_div_lt_0",
     "(Re (?a / ?b) < 0) = (Re (?a * cnj ?b) < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 2))),
    ("Complex.Im_complex_div_ge_0",
     "(0 <= Im (?a / ?b)) = (0 <= Im (?a * cnj ?b))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Re_complex_div_ge_0",
     "(0 <= Re (?a / ?b)) = (0 <= Re (?a * cnj ?b))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Im_complex_div_le_0",
     "(Im (?a / ?b) <= 0) = (Im (?a * cnj ?b) <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 2))),
    ("Complex.Re_complex_div_le_0",
     "(Re (?a / ?b) <= 0) = (Re (?a * cnj ?b) <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 2))),
    ("Complex.cmod_plus_Re_le_0_iff",
     "(cmod ?z + Re ?z <= 0) = (Re ?z = - cmod ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  template_app (template_hole 3, template_var 0))),
              template_hole 2)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 4, template_var 0))))),
    ("Complex.differentiable_cnj_iff",
     "((%z. cnj (?f z)) differentiable at ?x within ?A) =
      (?f differentiable at ?x within ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List.remdups_adj_Cons'",
     "remdups_adj (?x # ?xs) =
      ?x # remdups_adj (dropWhile (%y. y = ?x) ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complex.complex_diff_cnj",
     "?z - cnj ?z = complex_of_real (2 * Im ?z) * \<i>",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 0)))),
         template_hole 0))),
    ("Complex.DeMoivre2", "rcis ?r ?a ^ ?n = rcis (?r ^ ?n) (real ?n * ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Complex.complex_of_real_mult_Complex",
     "complex_of_real ?r * Complex ?x ?y = Complex (?r * ?x) (?r * ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex.Complex_mult_complex_of_real",
     "Complex ?x ?y * complex_of_real ?r = Complex (?x * ?r) (?y * ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex.divide_numeral_i",
     "?z / (numeral ?n * \<i>) = - (\<i> * ?z) / numeral ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 1))),
         template_app (template_hole 2, template_var 0)))),
    ("Hilbert_Choice.o_inv_o_cancel", "inj ?f ==> ?g o inv ?f o ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_hole 4),
                 template_var 1))),
           template_var 1),
         template_var 0))),
    ("Hilbert_Choice.image_inv_f_f", "inj ?f ==> inv ?f ` ?f ` ?A = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Fun.inj_image_Compl_subset", "inj ?f ==> ?f ` (- ?A) <= - ?f ` ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("GCD.gcd_non_0_int", "0 < ?y ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("GCD.gcd_diff2_nat", "?m <= ?n ==> gcd (?n - ?m) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GCD.gcd_diff1_nat", "?n <= ?m ==> gcd (?m - ?n) ?n = gcd ?m ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Complete_Lattices.UN_upper",
     "?a : ?A ==> ?B ?a <= \<Union> (?B ` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Complete_Lattices.INT_lower",
     "?a : ?A ==> \<Inter> (?B ` ?A) <= ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)),
         template_app (template_var 0, template_var 2)))),
    ("Complex.has_field_derivative_Im",
     "(?f has_vector_derivative ?D) ?F ==>
      ((%x. Im (?f x)) has_real_derivative Im ?D) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Complex.has_field_derivative_Re",
     "(?f has_vector_derivative ?D) ?F ==>
      ((%x. Re (?f x)) has_real_derivative Re ?D) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("GCD.Max_divisors_self_nat", "?n ~= 0 ==> Max {d. d dvd ?n} = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Hilbert_Choice.surj_f_inv_f", "surj ?f ==> ?f (inv ?f ?y) = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("List.impossible_Cons",
     "length ?xs <= length ?ys ==> (?xs = ?x # ?ys) = False",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Complex.sums_Im", "?X sums ?a ==> (%n. Im (?X n)) sums Im ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex.sums_Re", "?X sums ?a ==> (%n. Re (?X n)) sums Re ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hilbert_Choice.f_inv_into_f",
     "?y : ?f ` ?A ==> ?f (inv_into ?A ?f ?y) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)),
         template_var 2))),
    ("Transitive_Closure.trancl_into_rtrancl",
     "(?a, ?b) : ?r^+ ==> (?a, ?b) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("List.Cons_in_subseqsD",
     "?y # ?ys : set (subseqs ?xs) ==> ?ys : set (subseqs ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Hilbert_Choice.Eps_cong", "(!!x. ?P x = ?Q x) ==> Eps ?P = Eps ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Set.Collect_eqI", "(!!x. ?P x = ?Q x) ==> Collect ?P = Collect ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Set.Collect_mono",
     "(!!x. ?P x --> ?Q x) ==> Collect ?P <= Collect ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Cfun.cfun_eqI", "(!!x. ?f$x = ?g$x) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Cfun.cfun_belowI", "(!!x. ?f$x << ?g$x) ==> ?f << ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Lattices.Inf1_I", "(!!P. P : ?A ==> P ?a) ==> Inf ?A ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("ConvexPD.compact_convex_plus",
     "[| Adm.compact ?xs; Adm.compact ?ys |]
      ==> Adm.compact (?xs \<union>\<natural> ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("Cont.cont2monofunE", "[| cont ?f; ?x << ?y |] ==> ?f ?x << ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Cont.monofunE", "[| monofun ?f; ?x << ?y |] ==> ?f ?x << ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Hilbert_Choice.mono_inv", "[| mono ?f; bij ?f |] ==> mono (inv ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 0))
           ))),
    ("Cfun.flat_eqI", "[| ?x << ?y; ?x ~= \<bottom> |] ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complete_Lattices.Sup2_I", "[| ?r : ?A; ?r ?a ?b |] ==> Sup ?A ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Complete_Lattices.UnionI",
     "[| ?X : ?C; ?A : ?X |] ==> ?A : \<Union> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Limits.isUCont_Cauchy",
     "[| isUCont ?f; Cauchy ?X |] ==> Cauchy (%n. ?f (?X n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complete_Lattices.Inf2_D", "[| Inf ?A ?a ?b; ?r : ?A |] ==> ?r ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Complete_Lattices.InterD",
     "[| ?A : \<Inter> ?C; ?X : ?C |] ==> ?A : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Set.ComplE", "[| ?c : - ?A; ?c ~: ?A ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Set.CollectE", "[| ?a : {x. ?P x}; ?P ?a ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, t_empty))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("GCD.bezout_int", "EX u v. u * ?x + v * ?y = gcd ?x ?y",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Complete_Lattices.INF_apply",
     "Inf (?f ` ?A) ?x = (INF y\<in>?A. ?f y ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.SUP_apply",
     "Sup (?f ` ?A) ?x = (SUP y\<in>?A. ?f y ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.image_UN",
     "?f ` \<Union> (?B ` ?A) = (UN x:?A. ?f ` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Compl_INT",
     "- \<Inter> (?B ` ?A) = (UN x:?A. - ?B x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.Compl_UN",
     "- \<Union> (?B ` ?A) = (INT x:?A. - ?B x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.Pow_INT_eq",
     "Pow (\<Inter> (?B ` ?A)) = (INT x:?A. Pow (?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Hilbert_Choice.infinite_iff_countable_subset",
     "infinite ?S = (EX f. inj f & range f <= ?S)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Complex.complex_eq_iff",
     "(?x = ?y) = (Re ?x = Re ?y & Im ?x = Im ?y)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Hilbert_Choice.surj_iff_all", "surj ?f = (ALL x. ?f (inv ?f x) = x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("GCD.gcd_pos_int", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("GCD.gcd_pos_nat", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 4))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 4)))
           ))),
    ("Complete_Lattices.Union_disjoint",
     "(\<Union> ?C Int ?A = {}) = (ALL B:?C. B Int ?A = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.rev_eq_Cons_iff",
     "(rev ?xs = ?y # ?ys) = (?xs = rev ?ys @ [?y])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0))))),
    ("Complex.Complex_eq_neg_1",
     "(Complex ?a ?b = - 1) = (?a = - 1 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 1), template_var 0),
         template_app (template_hole 6, template_hole 5)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 0))
           ))),
    ("Complex.Complex_eq_numeral",
     "(Complex ?a ?b = numeral ?w) = (?a = numeral ?w & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))
           ))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(ALL x:\<Union> ?A. ?P x) = (ALL y:?A. ALL x:y. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(EX x:\<Union> ?A. ?P x) = (EX y:?A. EX x:y. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.Cons_in_lists_iff",
     "(?x # ?xs : lists ?A) = (?x : ?A & ?xs : lists ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs \<union>\<flat> ?ys << ?zs) = (?xs << ?zs & ?ys << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs << ?ys \<union>\<sharp> ?zs) = (?xs << ?ys & ?xs << ?zs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Product_Cpo.Pair_below_iff",
     "((?a, ?b) << (?c, ?d)) = (?a << ?c & ?b << ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set.Int_Collect", "(?x : ?A Int {x. ?P x}) = (?x : ?A & ?P ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, t_empty))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_var 0, template_var 2)))),
    ("Complex.lim_cnj",
     "((%x. cnj (?f x)) \<longlongrightarrow> cnj ?l) ?F =
      (?f \<longlongrightarrow> ?l) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("List.take_Cons_numeral",
     "take (numeral ?v) (?x # ?xs) = ?x # take (numeral ?v - 1) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               template_hole 0)),
           template_var 0)))),
    ("List.replicate_app_Cons_same",
     "replicate ?n ?x @ ?x # ?xs = ?x # replicate ?n ?x @ ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("List.zip_Cons_Cons",
     "zip (?x # ?xs) (?y # ?ys) = (?x, ?y) # zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Stream.sdrop_while_SCons",
     "sdrop_while ?P (?a ## ?s) =
      (if ?P ?a then sdrop_while ?P ?s else ?a ## ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex.complex_diff",
     "Complex ?a ?b - Complex ?c ?d = Complex (?a - ?c) (?b - ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex.complex_add",
     "Complex ?a ?b + Complex ?c ?d = Complex (?a + ?c) (?b + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex.rcis_mult",
     "rcis ?r1.0 ?a * rcis ?r2.0 ?b = rcis (?r1.0 * ?r2.0) (?a + ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex.rcis_divide",
     "rcis ?r1.0 ?a / rcis ?r2.0 ?b = rcis (?r1.0 / ?r2.0) (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ConvexPD.convex_to_lower_map",
     "convex_to_lower$(convex_map$?f$?xs) =
      lower_map$?f$(convex_to_lower$?xs)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_map",
     "convex_to_upper$(convex_map$?f$?xs) =
      upper_map$?f$(convex_to_upper$?xs)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Hilbert_Choice.Eps_case_prod_eq",
     "(SOME (x', y'). ?x = x' & ?y = y') = (?x, ?y)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_plus_left_absorb",
     "?a \<union>\<natural> (?a \<union>\<natural> ?b) =
      ?a \<union>\<natural> ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("Zorn.Chains_subset",
     "Chains ?r <= {C. pred_on.chain UNIV (%x y. (x, y) : ?r) C}",
     template_inequation
      (less_equals, template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Complete_Lattices.UN_Pow_subset",
     "(UN x:?A. Pow (?B x)) <= Pow (\<Union> (?B ` ?A))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Complex.complex_abs_le_norm",
     "\<bar>Re ?z\<bar> + \<bar>Im ?z\<bar> <= sqrt 2 * cmod ?z",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 8,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("Transcendental.isCont_polynom",
     "isCont (%w. SUM i<=?n. ?c i * w ^ i) ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 4)),
           t_empty)
         )),
    ("Complete_Partial_Order.chain_compr",
     "Complete_Partial_Order.chain ?ord ?A ==>
      Complete_Partial_Order.chain ?ord {x: ?A. ?P x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, t_empty))
           ))),
    ("Hilbert_Choice.infinite_imp_bij_betw",
     "infinite ?A ==> EX h. bij_betw h ?A (?A - {?a})",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Hilbert_Choice.infinite_imp_bij_betw2",
     "infinite ?A ==> EX h. bij_betw h ?A (?A Un {?a})",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Complex.card_roots_unity_eq", "0 < ?n ==> card {z. z ^ ?n = 1} = ?n",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_var 0))),
    ("List.upt_conv_Cons", "?i < ?j ==> [?i..<?j] = ?i # [Suc ?i..<?j]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Complex.cis_multiple_2pi", "?n : \<int> ==> cis (2 * pi * ?n) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_hole 1)),
             template_var 0)),
         template_hole 0))),
    ("Complex.Im_divide_Reals",
     "?r : \<real> ==> Im (?z / ?r) = Im ?z / Re ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Complex.Re_divide_Reals",
     "?r : \<real> ==> Re (?z / ?r) = Re ?z / Re ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Hilbert_Choice.bij_vimage_eq_inv_image",
     "bij ?f ==> ?f -` ?A = inv ?f ` ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 5),
               template_var 1)),
           template_var 0)))),
    ("Fun.bij_image_Compl_eq", "bij ?f ==> ?f ` (- ?A) = - ?f ` ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Cfun.strictify2", "?x ~= \<bottom> ==> strictify$?f$?x = ?f$?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("GCD.Max_divisors_self_int",
     "?n ~= 0 ==> Max {d. d dvd ?n} = \<bar>?n\<bar>",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_non_0_nat", "?y ~= 0 ==> gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Complex.Re_power_real", "Im ?x = 0 ==> Re (?x ^ ?n) = Re ?x ^ ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Transitive_Closure.rtrancl_imp_UN_relpow",
     "?p : ?R^* ==> ?p : \<Union> (range ((^^) ?R))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty), template_hole 0)))
           ))),
    ("Transitive_Closure.rtranclp_imp_Sup_relpowp",
     "?P^** ?x ?y ==> Sup (range ((^^) ?P)) ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_hole 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Transcendental.isCont_cos'",
     "isCont ?f ?a ==> isCont (%x. cos (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Transcendental.isCont_sin'",
     "isCont ?f ?a ==> isCont (%x. sin (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Topological_Spaces.isContD",
     "isCont ?f ?x ==> ?f \<midarrow>?x\<rightarrow> ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2))
           ))),
    ("Limits.isCont_minus", "isCont ?f ?a ==> isCont (%x. - ?f x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_norm", "isCont ?f ?a ==> isCont (%x. norm (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Limits.isCont_rabs",
     "isCont ?f ?a ==> isCont (%x. \<bar>?f x\<bar>) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_fst",
     "isCont ?f ?a ==> isCont (%x. fst (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_snd",
     "isCont ?f ?a ==> isCont (%x. snd (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Transcendental.isCont_exp'",
     "isCont ?f ?a ==> isCont (%x. exp (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_of_real",
     "isCont ?g ?a ==> isCont (%x. of_real (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex.isCont_Im", "isCont ?g ?a ==> isCont (%x. Im (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex.isCont_Re", "isCont ?g ?a ==> isCont (%x. Re (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex.isCont_cnj", "isCont ?g ?a ==> isCont (%x. cnj (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Transitive_Closure.trancl_subset_Sigma",
     "?r <= ?A \<times> ?A ==> ?r^+ <= ?A \<times> ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0), t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Transitive_Closure.rtrancl_converseI",
     "(?y, ?x) : ?r^* ==> (?x, ?y) : (?r^-1)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Transitive_Closure.rtrancl_converseD",
     "(?x, ?y) : (?r^-1)^* ==> (?y, ?x) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("HOL.exCI", "(ALL x. ~ ?P x ==> ?P ?a) ==> EX x. ?P x",
     template_implication
      ([template_implication
         ([template_predicate (template_app (template_hole 2, t_empty))],
          template_predicate
           (template_app (template_var 1, template_var 0)))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Cont.cont_compose", "[| cont ?c; cont ?f |] ==> cont (%x. ?c (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Conditionally_Complete_Lattices.cInf_eq_Min",
     "[| finite ?X; ?X ~= {} |] ==> Inf ?X = Min ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Conditionally_Complete_Lattices.cSup_eq_Max",
     "[| finite ?X; ?X ~= {} |] ==> Sup ?X = Max ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Product_Cpo.ch2ch_Pair",
     "[| chain ?X; chain ?Y |] ==> chain (%i. (?X i, ?Y i))",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.ch2ch_Rep_cfun",
     "[| chain ?F; chain ?Y |] ==> chain (%i. ?F i$(?Y i))",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Lifting_Set.Compl_transfer",
     "[| bi_unique ?A; bi_total ?A |]
      ==> rel_fun (rel_set ?A) (rel_set ?A) uminus uminus",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("GCD.lcm_pos_nat", "[| 0 < ?m; 0 < ?n |] ==> 0 < lcm ?m ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.converse_rtranclp_into_rtranclp",
     "[| ?r ?a ?b; ?r^** ?b ?c |] ==> ?r^** ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_into_tranclp2",
     "[| ?r ?a ?b; ?r^** ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_into_tranclp2",
     "[| ?r ?a ?b; ?r^++ ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Predicate_Compile.pred_of_setE",
     "[| pred.eval (pred_of_set ?A) ?x;
         Predicate_Compile.contains ?A ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.trancl_mono",
     "[| ?p : ?r^+; ?r <= ?s |] ==> ?p : ?s^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Transitive_Closure.transitive_closurep_trans'",
     "[| ?r^** ?a ?b; ?r ?b ?c |] ==> ?r^** ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_into_tranclp1",
     "[| ?r^** ?a ?b; ?r ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.transitive_closurep_trans'",
     "[| ?r^++ ?a ?b; ?r ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("List.nth_Cons'",
     "(?x # ?xs) ! ?n = (if ?n = 0 then ?x else ?xs ! (?n - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Complete_Lattices.INTER_eq",
     "\<Inter> (?B ` ?A) = {y. ALL x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.UNION_eq",
     "\<Union> (?B ` ?A) = {y. EX x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.INT_insert",
     "\<Inter> (?B ` insert ?a ?A) = ?B ?a Int \<Inter> (?B ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Complete_Lattices.UN_insert",
     "\<Union> (?B ` insert ?a ?A) = ?B ?a Un \<Union> (?B ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Relation.Domain_Collect_case_prod",
     "Domain {(x, y). ?P x y} = {x. EX y. ?P x y}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app (template_hole 1, t_empty))),
    ("Relation.Range_Collect_case_prod",
     "Range {(x, y). ?P x y} = {y. EX x. ?P x y}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app (template_hole 1, t_empty))),
    ("Set.Collect_conv_if",
     "{x. x = ?a & ?P x} = (if ?P ?a then {?a} else {})",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("Set.Collect_conv_if2",
     "{x. ?a = x & ?P x} = (if ?P ?a then {?a} else {})",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT a:?A. ?B (?f a)) = \<Inter> (?B ` ?f ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN a:?A. ?B (?f a)) = \<Union> (?B ` ?f ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` ?f ` ?A) = (INT a:?A. ?B (?f a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?B ` ?f ` ?A) = (UN a:?A. ?B (?f a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.Collect_case_prod",
     "{(a, b). ?P a & ?Q b} = Collect ?P \<times> Collect ?Q",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Hilbert_Choice.wf_iff_no_infinite_down_chain",
     "wf ?r = (\<nexists>f. ALL i. (f (Suc i), f i) : ?r)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Complex.complex_is_Int_iff",
     "(?z : \<int>) = (Im ?z = 0 & (EX i. Re ?z = real_of_int i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Complex.complex_is_Nat_iff",
     "(?z : \<nat>) = (Im ?z = 0 & (EX i. Re ?z = real i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Transitive_Closure.trancl_power",
     "(?p : ?R^+) = (EX n>0. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Transitive_Closure.tranclp_power",
     "?P^++ ?x ?y = (EX n>0. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("ConvexPD.convex_le_PDUnit_PDPlus_iff",
     "(PDUnit ?a \<le>\<natural> PDPlus ?t ?u) =
      (PDUnit ?a \<le>\<natural> ?t & PDUnit ?a \<le>\<natural> ?u)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_le_PDPlus_PDUnit_iff",
     "(PDPlus ?t ?u \<le>\<natural> PDUnit ?a) =
      (?t \<le>\<natural> PDUnit ?a & ?u \<le>\<natural> PDUnit ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("GCD.lcm_1_iff_nat", "(lcm ?m ?n = Suc 0) = (?m = Suc 0 & ?n = Suc 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 2, template_hole 1)))
           ))),
    ("List.distinct_adj_Cons_Cons",
     "distinct_adj (?x # ?y # ?xs) = (?x ~= ?y & distinct_adj (?y # ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("Hilbert_Choice.choice_iff",
     "(ALL x. EX y. ?Q x y) = (EX f. ALL x. ?Q x (f x))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.UNION_empty_conv",
     "({} = \<Union> (?B ` ?A)) = (ALL x:?A. ?B x = {})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(UNIV = \<Inter> (?B ` ?A)) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(\<Inter> (?B ` ?A) = UNIV) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UNION_empty_conv",
     "(\<Union> (?B ` ?A) = {}) = (ALL x:?A. ?B x = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_subset_iff",
     "(?B <= \<Inter> (?A ` ?I)) = (ALL i:?I. ?B <= ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UN_subset_iff",
     "(\<Union> (?A ` ?I) <= ?B) = (ALL i:?I. ?A i <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.disjoint_UN_iff",
     "disjnt ?A (\<Union> (?B ` ?I)) = (ALL i:?I. disjnt ?A (?B i))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_iff",
     "(?b : \<Inter> (?B ` ?A)) = (ALL x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UN_iff",
     "(?b : \<Union> (?B ` ?A)) = (EX x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complex.Im_power2", "Im (?x\<^sup>2) = 2 * Re ?x * Im ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 4, template_hole 3))),
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 7, template_var 0)))),
    ("Complex.cmod_complex_polar",
     "cmod
       (complex_of_real ?r *
        (complex_of_real (cos ?a) + \<i> * complex_of_real (sin ?a))) =
      \<bar>?r\<bar>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 5,
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app (template_hole 6, template_hole 2),
               template_app
                (template_hole 5,
                 template_app (template_hole 1, template_var 0)))))),
       template_app (template_hole 0, template_var 1))),
    ("Complex.complex_div_cnj",
     "?a / ?b = ?a * cnj ?b / complex_of_real ((cmod ?b)\<^sup>2)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Fun_Cpo.is_lub_fun", "chain ?S ==> range ?S <<| (%x. LUB i. ?S i x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             t_empty)
           ))),
    ("Hilbert_Choice.infinite_countable_subset",
     "infinite ?S ==> EX f. inj f & range f <= ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("List.nth_Cons_pos", "0 < ?n ==> (?x # ?xs) ! ?n = ?xs ! (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Complex.has_derivative_Im",
     "(?g has_derivative ?g') ?F ==>
      ((%x. Im (?g x)) has_derivative (%x. Im (?g' x))) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 0)
           ))),
    ("Complex.has_derivative_Re",
     "(?g has_derivative ?g') ?F ==>
      ((%x. Re (?g x)) has_derivative (%x. Re (?g' x))) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 0)
           ))),
    ("Complex.has_derivative_cnj",
     "(?g has_derivative ?g') ?F ==>
      ((%x. cnj (?g x)) has_derivative (%x. cnj (?g' x))) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclpD",
     "?R^++ ?x ?y ==> EX z. ?R ?x z & ?R^** z ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Complex.tendsto_Im",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. Im (?g x)) \<longlongrightarrow> Im ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Complex.tendsto_Re",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. Re (?g x)) \<longlongrightarrow> Re ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Complex.tendsto_cnj",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. cnj (?g x)) \<longlongrightarrow> cnj ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Finite_Set.finite_Collect_not",
     "finite {x. ?P x} ==> finite {x. ~ ?P x} = finite UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 4, template_hole 0)))),
    ("Hilbert_Choice.image_f_inv_f", "surj ?f ==> ?f ` inv ?f ` ?A = ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 3),
                 template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Fun.surj_Compl_image_subset", "surj ?f ==> - ?f ` ?A <= ?f ` (- ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("List.Cons_in_shuffles_rightI",
     "?zs : shuffles ?xs ?ys ==> ?z # ?zs : shuffles ?xs (?z # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("List.Cons_in_shuffles_leftI",
     "?zs : shuffles ?xs ?ys ==> ?z # ?zs : shuffles (?z # ?xs) ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Limits.isCont_power", "isCont ?f ?a ==> isCont (%x. ?f x ^ ?n) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("List.set_ConsD", "?y : set (?x # ?xs) ==> ?y = ?x | ?y : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 0)))
           ))),
    ("Cfun.cont2cont_LAM'",
     "cont (%p. ?f (fst p) (snd p)) ==> cont (%x. LAM y. ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.irrefl_tranclI",
     "?r^-1 Int ?r^* = {} ==> (?x, ?x) ~: ?r^+",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Transitive_Closure.trancl_converseI",
     "(?x, ?y) : (?r^+)^-1 ==> (?x, ?y) : (?r^-1)^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Transitive_Closure.trancl_converseD",
     "(?x, ?y) : (?r^-1)^+ ==> (?x, ?y) : (?r^+)^-1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Cont.cont2cont",
     "(!!y. cont (%x. ?f x y)) ==> cont (%x. LAM (Def y). ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.cont2cont_LAM_discrete",
     "(!!y. cont (%x. ?f x y)) ==> cont (%x. LAM y. ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.retraction_strict",
     "ALL x. ?f$(?g$x) = x ==> ?f$\<bottom> = \<bottom>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 1),
         template_hole 0))),
    ("Boolean_Algebras.sup2CI",
     "(~ ?B ?x ?y ==> ?A ?x ?y) ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_var 3, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Set.insertCI", "(?a ~: ?B ==> ?a = ?b) ==> ?a : insert ?b ?B",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)
                   )
               )],
          template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set.UnCI", "(?c ~: ?B ==> ?c : ?A) ==> ?c : ?A Un ?B",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complete_Lattices.Inf2_I",
     "(!!r. r : ?A ==> r ?a ?b) ==> Inf ?A ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("GCD.Lcm_least_int", "(!!b. b : ?A ==> b dvd ?a) ==> Lcm ?A dvd ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("GCD.Gcd_greatest_int", "(!!b. b : ?A ==> ?a dvd b) ==> ?a dvd Gcd ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("GCD.Gcd_greatest_nat", "(!!b. b : ?A ==> ?a dvd b) ==> ?a dvd Gcd ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complete_Lattices.Union_least",
     "(!!X. X : ?A ==> X <= ?C) ==> \<Union> ?A <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complete_Lattices.Inter_greatest",
     "(!!X. X : ?A ==> ?C <= X) ==> ?C <= \<Inter> ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Complete_Lattices.InterI",
     "(!!X. X : ?C ==> ?A : X) ==> ?A : \<Inter> ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Cont.cont_if",
     "[| cont ?f; cont ?g |] ==> cont (%x. if ?b then ?f x else ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.cont_APP_app",
     "[| cont ?f; cont ?g |] ==> cont (%x. (?f x$(?g x)) ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.rtranclp_subset",
     "[| ?R <= ?S; ?S <= ?R^** |] ==> ?S^** = ?R^**",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Transitive_Closure.rtrancl_subset",
     "[| ?R <= ?S; ?S <= ?R^* |] ==> ?S^* = ?R^*",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Complete_Partial_Order.monotoneD",
     "[| monotone ?orda ?ordb ?f; ?orda ?x ?y |] ==> ?ordb (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Hilbert_Choice.some1_equality",
     "[| EX! x. ?P x; ?P ?a |] ==> (SOME x. ?P x) = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Transcendental.isCont_arccos",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont arccos ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_arcsin",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont arcsin ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transcendental.isCont_artanh",
     "[| - 1 < ?x; ?x < 1 |] ==> isCont artanh ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Transitive_Closure.rtranclp_trans",
     "[| ?r^** ?x ?y; ?r^** ?y ?z |] ==> ?r^** ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_tranclp_tranclp",
     "[| ?r^** ?x ?y; ?r^++ ?y ?z |] ==> ?r^++ ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_rtranclp_tranclp",
     "[| ?r^++ ?a ?b; ?r^** ?b ?c |] ==> ?r^++ ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Transitive_Closure.tranclp_trans",
     "[| ?r^++ ?x ?y; ?r^++ ?y ?z |] ==> ?r^++ ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Completion.is_lub_thelub_ex",
     "[| EX u. ?S <<| u; ?S <| ?x |] ==> lub ?S << ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Completion.is_ub_thelub_ex",
     "[| EX u. ?S <<| u; ?x : ?S |] ==> ?x << lub ?S",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.relpowp_0_E",
     "[| (?P ^^ 0) ?x ?y; ?x = ?y ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Predicate_Compile.contains_predE",
     "[| pred.eval (Predicate_Compile.contains_pred ?A ?x) ?y;
         Predicate_Compile.contains ?A ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complex.csqrt_principal",
     "0 < Re (csqrt ?z) | Re (csqrt ?z) = 0 & 0 <= Im (csqrt ?z)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0))),
                 template_hole 6)),
             template_app
              (template_app (template_hole 1, template_hole 6),
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0)))))
         )),
    ("Transitive_Closure.rtranclp_rtrancl_eq",
     "(%x xa. (x, xa) : ?r)^** = (%x xa. (x, xa) : ?r^*)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Transitive_Closure.tranclp_trancl_eq",
     "(%x xa. (x, xa) : ?r)^++ = (%x xa. (x, xa) : ?r^+)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Map.map_upds_Cons",
     "?m(?a # ?as [|->] ?b # ?bs) = ?m(?a |-> ?b, ?as [|->] ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 1))),
           template_var 2),
         template_var 0))),
    ("Product_Type.split_eta_SetCompr2",
     "(%u. EX x y. u = (x, y) & ?P x y) = (%(x, y). ?P x y)",
     template_equation
      (t_empty, template_app (template_hole 0, template_var 0))),
    ("Product_Type.split_eta_SetCompr",
     "(%u. EX x y. u = (x, y) & ?P (x, y)) = ?P",
     template_equation (t_empty, template_var 0)),
    ("GCD.gcd_code_int",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Complete_Lattices.Int_Inter_eq",
     "?A Int \<Inter> ?\<B> =
      (if ?\<B> = {} then ?A else \<Inter> ((Int) ?A ` ?\<B>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)))
           ))),
    ("Complete_Lattices.Int_Inter_eq",
     "\<Inter> ?\<B> Int ?A =
      (if ?\<B> = {} then ?A else INT B:?\<B>. B Int ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Complete_Lattices.Collect_all_eq",
     "{x. ALL y. ?P x y} = (INT y. {x. ?P x y})",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Complete_Lattices.Collect_ex_eq",
     "{x. EX y. ?P x y} = (UN y. {x. ?P x y})",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Set.Collect_conj_eq", "{x. ?P x & ?Q x} = {x. ?P x} Int {x. ?Q x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Set.Collect_disj_eq", "{x. ?P x | ?Q x} = {x. ?P x} Un {x. ?Q x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complete_Lattices.Int_UN_distrib",
     "?B Int \<Union> (?A ` ?I) = (UN i:?I. ?B Int ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Un_INT_distrib",
     "?B Un \<Inter> (?A ` ?I) = (INT i:?I. ?B Un ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_INT",
     "?f -` \<Inter> (?B ` ?A) = (INT x:?A. ?f -` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_UN",
     "?f -` \<Union> (?B ` ?A) = (UN x:?A. ?f -` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x Int ?B) = \<Union> (?A ` ?C) Int ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) Int ?B = (UN x:?C. ?A x Int ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. insert ?a (?B x)) = insert ?a (\<Inter> (?B ` ?C))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A Int ?B x) = ?A Int \<Union> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "?A Int \<Union> (?B ` ?C) = (UN x:?C. ?A Int ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "insert ?a (\<Inter> (?B ` ?C)) = (INT x:?C. insert ?a (?B x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Un ?B) = \<Inter> (?A ` ?C) Un ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x - ?B) = \<Union> (?A ` ?C) - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) - ?B = (UN x:?C. ?A x - ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Un ?B = (INT x:?C. ?A x Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Un ?B x) = ?A Un \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A - ?B x) = ?A - \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "?A - \<Inter> (?B ` ?C) = (UN x:?C. ?A - ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "?A Un \<Inter> (?B ` ?C) = (INT x:?C. ?A Un ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set.Pow_Compl", "Pow (- ?A) = {- B |B. ?A : Pow B}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Complex.continuous_complex_iff",
     "continuous ?F ?f =
      (continuous ?F (%x. Re (?f x)) & continuous ?F (%x. Im (?f x)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("List.distinct_adj_Cons",
     "distinct_adj (?x # ?xs) =
      (?xs = [] | ?x ~= hd ?xs & distinct_adj ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_var 0)))),
               template_app (template_hole 8, template_var 0)))
           ))),
    ("Transitive_Closure.acyclic_insert",
     "acyclic (insert (?y, ?x) ?r) = (acyclic ?r & (?x, ?y) ~: ?r^*)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.Complex_eq_neg_numeral",
     "(Complex ?a ?b = - numeral ?w) = (?a = - numeral ?w & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 0))
           ))),
    ("List.list_all2_Cons",
     "list_all2 ?P (?x # ?xs) (?y # ?ys) =
      (?P ?x ?y & list_all2 ?P ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_var 0)))),
    ("C.C_eq_C", "(C\<^bsup>?i\<^esup> = C\<^bsup>?j\<^esup>) = (?i = ?j)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 2)),
           template_hole 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_hole 1)),
       template_equation (template_var 1, template_var 0))),
    ("C.C_below_C",
     "(C\<^bsup>?i\<^esup> << C\<^bsup>?j\<^esup>) = (?i <= ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex.complex_norm",
     "cmod (Complex ?x ?y) = sqrt (?x\<^sup>2 + ?y\<^sup>2)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Map.map_of_Cons_code",
     "map_of ((?l, ?v) # ?ps) ?k =
      (if ?l = ?k then Some ?v else map_of ?ps ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("ConvexPD.convex_to_lower_plus",
     "convex_to_lower$(?xs \<union>\<natural> ?ys) =
      convex_to_lower$?xs \<union>\<flat> convex_to_lower$?ys",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_plus",
     "convex_to_upper$(?xs \<union>\<natural> ?ys) =
      convex_to_upper$?xs \<union>\<sharp> convex_to_upper$?ys",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_join_plus",
     "convex_join$(?xss \<union>\<natural> ?yss) =
      convex_join$?xss \<union>\<natural> convex_join$?yss",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_join_map_map",
     "convex_join$(convex_map$(convex_map$?f)$?xss) =
      convex_map$?f$(convex_join$?xss)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("GCD.gcd_code_integer",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 1)),
                 template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Complex.sum_roots_unity", "1 < ?n ==> \<Sum> {z. z ^ ?n = 1} = 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("Complex.sum_nth_roots", "1 < ?n ==> \<Sum> {z. z ^ ?n = ?c} = 0",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 2, t_empty)),
         template_hole 0))),
    ("Hilbert_Choice.inv_fn", "bij ?f ==> inv (?f ^^ ?n) = inv ?f ^^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 1))))),
    ("Hilbert_Choice.bij_inv_eq_iff",
     "bij ?p ==> (?x = inv ?p ?y) = (?p ?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 4)
            )],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 2),
             template_var 0)),
         template_equation
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.Not_Domain_rtrancl",
     "?x ~: Domain ?R ==> ((?x, ?y) : ?R^*) = (?x = ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0)),
                template_app (template_hole 1, template_var 1))
              )],
         template_equation (template_var 2, template_var 0)))),
    ("Hilbert_Choice.choice",
     "ALL x. EX y. ?Q x y ==> EX f. ALL x. ?Q x (f x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Cfun.cont2cont_Let_simple",
     "(!!y. cont (%x. ?g x y)) ==> cont (%x. Let ?t (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Set.vimage_Collect",
     "(!!x. ?P (?f x) = ?Q x) ==> ?f -` Collect ?P = Collect ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.in_rtrancl_UnI",
     "?x : ?R^* | ?x : ?S^* ==> ?x : (?R Un ?S)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Countable.countable_classI",
     "(!!x y. ?f x = ?f y ==> x = y) ==> OFCLASS(?'a, countable_class)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("Cfun.cont_APP_app_app",
     "[| cont ?f; cont ?g |] ==> cont (%x. (?f x$(?g x)) ?s ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConvexPD.PDPlus_convex_mono",
     "[| ?s \<le>\<natural> ?t; ?u \<le>\<natural> ?v |]
      ==> PDPlus ?s ?u \<le>\<natural> PDPlus ?t ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Hilbert_Choice.inv_into_f_f",
     "[| inj_on ?f ?A; ?x : ?A |] ==> inv_into ?A ?f (?f ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_app (template_var 2, template_var 0)),
         template_var 0))),
    ("Hilbert_Choice.inv_f_eq",
     "[| inj ?f; ?f ?x = ?y |] ==> inv ?f ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app (template_var 2, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Cfun.cfun_cong", "[| ?f = ?g; ?x = ?y |] ==> ?f$?x = ?g$?y",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Product_Cpo.monofun_pair",
     "[| ?x1.0 << ?x2.0; ?y1.0 << ?y2.0 |]
      ==> (?x1.0, ?y1.0) << (?x2.0, ?y2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Cfun.monofun_cfun", "[| ?f << ?g; ?x << ?y |] ==> ?f$?x << ?g$?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complete_Lattices.SUP1_I",
     "[| ?a : ?A; ?B ?a ?b |] ==> Sup (?B ` ?A) ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 1, template_var 3), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)),
             template_var 0)
           ))),
    ("GCD.lcm_pos_int", "[| ?m ~= 0; ?n ~= 0 |] ==> 0 < lcm ?m ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex.cos_Arg_i_mult_zero",
     "[| ?y ~= 0; Re ?y = 0 |] ==> cos (Arg ?y) = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 2))),
    ("Zorn.Chains_init_seg_of_Union",
     "[| ?R : Chains init_seg_of; ?r : ?R |]
      ==> ?r initial_segment_of \<Union> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_hole 4)
           ))),
    ("Complex.complex_eqI",
     "[| Re ?x = Re ?y; Im ?x = Im ?y |] ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Product_Cpo.prod_belowI",
     "[| fst ?p << fst ?q; snd ?p << snd ?q |] ==> ?p << ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complete_Lattices.INF1_D",
     "[| Inf (?B ` ?A) ?b; ?a : ?A |] ==> ?B ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, t_empty), template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 0), template_var 1)
           ))),
    ("Complex.complex_split_polar",
     "EX r a.
         ?z =
         complex_of_real r *
         (complex_of_real (cos a) + \<i> * complex_of_real (sin a))",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Set.image_Collect", "?f ` {x. ?P x} = {?f x |x. ?P x}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("Set.Collect_imp_eq", "{x. ?P x --> ?Q x} = - {x. ?P x} Un {x. ?Q x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0, template_app (template_hole 3, t_empty))),
         template_app (template_hole 3, t_empty)))),
    ("Complete_Lattices.Collect_ball_eq",
     "{x. ALL y:?A. ?P x y} = (INT y:?A. {x. ?P x y})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Collect_bex_eq",
     "{x. EX y:?A. ?P x y} = (UN y:?A. {x. ?P x y})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Relation.Image_Collect_case_prod",
     "{(x, y). ?P x y} `` ?A = {y. EX x:?A. ?P x y}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` \<Union> ?A) = (INT y:?A. \<Inter> (?B ` y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?B ` \<Union> ?A) = (UN y:?A. \<Union> (?B ` y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT y:?A. \<Inter> (?B ` y)) = \<Inter> (?B ` \<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN y:?A. \<Union> (?B ` y)) = \<Union> (?B ` \<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Product_Type.Collect_case_prod_Sigma",
     "{(x, y). ?P x & ?Q x y} = (SIGMA x:Collect ?P. Collect (?Q x))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("List.successively_Cons",
     "successively ?P (?x # ?xs) =
      (?xs = [] | ?P ?x (hd ?xs) & successively ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_var 2, template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 0)))
           ))),
    ("Limits.isCont_iff",
     "isCont ?f ?x =
      (%h. ?f (?x + h)) \<midarrow>0::?'a\<rightarrow> ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_var 0, template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 0),
           template_hole 4)))),
    ("Hilbert_Choice.bchoice_iff",
     "(ALL x:?S. EX y. ?Q x y) = (EX f. ALL x:?S. ?Q x (f x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.ball_UN",
     "(ALL z:\<Union> (?B ` ?A). ?P z) = (ALL x:?A. ALL z:?B x. ?P z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(ALL x:\<Union> (?B ` ?A). ?P x) = (ALL a:?A. ALL x:?B a. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.bex_UN",
     "(EX z:\<Union> (?B ` ?A). ?P z) = (EX x:?A. EX z:?B x. ?P z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(EX x:\<Union> (?B ` ?A). ?P x) = (EX a:?A. EX x:?B a. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.upt_conv_Cons_Cons",
     "(?m # ?n # ?ns = [?m..<?q]) = (?n # ?ns = [Suc ?m..<?q])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3), template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 0)))),
    ("Transitive_Closure.acyclicP_converse",
     "acyclicP ?r^--1 = acyclicP ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("ConvexPD.convex_bind_basis_simps",
     "convex_bind_basis (PDPlus ?t ?u) =
      (LAM f.
          convex_bind_basis ?t$f \<union>\<natural>
          convex_bind_basis ?u$f)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.drop_Cons'",
     "drop ?n (?x # ?xs) =
      (if ?n = 0 then ?x # ?xs else drop (?n - 1) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0))
           ))),
    ("List.take_Cons'",
     "take ?n (?x # ?xs) = (if ?n = 0 then [] else ?x # take (?n - 1) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 0)))
           ))),
    ("List.zip_Cons1",
     "zip (?x # ?xs) ?ys =
      (case ?ys of [] => [] | y # ys => (?x, y) # zip ?xs ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_var 0))),
    ("Stream.flat_Cons",
     "flat ((?x # ?xs) ## ?ws) =
      ?x ## flat (if ?xs = [] then ?ws else ?xs ## ?ws)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))))
           ))),
    ("Conditionally_Complete_Lattices.Inf_insert_finite",
     "finite ?S ==>
      Inf (insert ?x ?S) = (if ?S = {} then ?x else min ?x (Inf ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_var 0),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 5, template_var 1)))
             )))),
    ("Conditionally_Complete_Lattices.Sup_insert_finite",
     "finite ?S ==>
      Sup (insert ?x ?S) = (if ?S = {} then ?x else max ?x (Sup ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_var 0),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 5, template_var 1)))
             )))),
    ("Hilbert_Choice.fn_o_inv_fn_is_id",
     "bij ?f ==> ?f ^^ ?n o inv ?f ^^ ?n = (%x. x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_hole 4),
               template_var 1))),
         t_empty))),
    ("Hilbert_Choice.inv_fn_o_fn_is_id",
     "bij ?f ==> inv ?f ^^ ?n o ?f ^^ ?n = (%x. x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_hole 4),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         t_empty))),
    ("Hilbert_Choice.bij_image_Collect_eq",
     "bij ?f ==> ?f ` Collect ?P = {y. ?P (inv ?f y)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("List.Cons_nth_drop_Suc",
     "?i < length ?xs ==> ?xs ! ?i # drop (Suc ?i) ?xs = drop ?i ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex.has_vector_derivative_cnj",
     "(?f has_vector_derivative ?f') (at ?z within ?A) ==>
      ((%z. cnj (?f z)) has_vector_derivative cnj ?f') (at ?z within ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Set.Collect_cong", "(!!x. ?P x = ?Q x) ==> {x. ?P x} = {x. ?Q x}",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("Fun_Cpo.is_lub_lambda",
     "(!!x. range (%i. ?Y i x) <<| ?f x) ==> range ?Y <<| ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 2)),
             template_var 0)
           ))),
    ("Cont.monofunI", "(!!x y. x << y ==> ?f x << ?f y) ==> monofun ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Hilbert_Choice.mono_bij_Inf",
     "[| mono ?f; bij ?f |] ==> ?f (Inf ?A) = Inf (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Transitive_Closure.relpowp_Suc_I2",
     "[| ?P ?x ?y; (?P ^^ ?n) ?y ?z |] ==> (?P ^^ Suc ?n) ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("Topological_Spaces.closed_Collect_eq",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> closed {x. ?f x = ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Topological_Spaces.open_Collect_less",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> open {x. ?f x < ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Topological_Spaces.closed_Collect_le",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> closed {x. ?f x <= ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Hilbert_Choice.bij_betw_inv_into_left",
     "[| bij_betw ?f ?A ?A'; ?a : ?A |] ==> inv_into ?A ?f (?f ?a) = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_app (template_var 3, template_var 0)),
         template_var 0))),
    ("Hilbert_Choice.bij_betw_inv_into_right",
     "[| bij_betw ?f ?A ?A'; ?a' : ?A' |]
      ==> ?f (inv_into ?A ?f ?a') = ?a'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0)),
         template_var 0))),
    ("Transitive_Closure.relpowp_Suc_I",
     "[| (?P ^^ ?n) ?x ?y; ?P ?y ?z |] ==> (?P ^^ Suc ?n) ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Countable.countable_datatype",
     "[| type_definition ?Rep ?Abs (Collect ?rep_set);
         !!x. ?rep_set x ==> Countable.finite_item x |]
      ==> OFCLASS(?'b, countable_class)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("Ctr_Sugar.iffI_np", "[| ?x ==> ~ ?y; ~ ?x ==> ?y |] ==> (~ ?x) = ?y",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_negation (template_predicate (template_var 0))),
        template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_predicate (template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Transitive_Closure.relpow_0_E",
     "[| (?x, ?y) : ?R ^^ 0; ?x = ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.reflcl_set_eq",
     "(%x y. (x, y) : ?r)^== = (%x y. (x, y) : ?r^=)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 2),
       t_empty)),
    ("Transitive_Closure.relpowp_relpow_eq",
     "(%x y. (x, y) : ?R) ^^ ?n = (%x y. (x, y) : ?R ^^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       t_empty)),
    ("Complete_Lattices.Int_Inter_image",
     "(INT x:?C. ?A x Int ?B x) =
      \<Inter> (?A ` ?C) Int \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.Un_Union_image",
     "(UN x:?C. ?A x Un ?B x) = \<Union> (?A ` ?C) Un \<Union> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Complex.complex_eq_0",
     "(?z = 0) = ((Re ?z)\<^sup>2 + (Im ?z)\<^sup>2 = 0)",
     template_bimplication
      (template_equation (template_var 0, template_hole 9),
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_hole 0))),
    ("ConvexPD.convex_pd_below_iff",
     "(?xs << ?ys) =
      (convex_to_upper$?xs << convex_to_upper$?ys &
       convex_to_lower$?xs << convex_to_lower$?ys)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Complex.sums_complex_iff",
     "?f sums ?x =
      ((%x. Re (?f x)) sums Re ?x & (%x. Im (?f x)) sums Im ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Cfun.assoc_oo", "?f oo ?g oo ?h = (?f oo ?g) oo ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0))),
    ("Complex.complex_mult_cnj",
     "?z * cnj ?z = complex_of_real ((Re ?z)\<^sup>2 + (Im ?z)\<^sup>2)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("ConvexPD.convex_to_lower_bind",
     "convex_to_lower$(convex_bind$?xs$?f) =
      lower_bind$(convex_to_lower$?xs)$(convex_to_lower oo ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 11)),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_bind",
     "convex_to_upper$(convex_bind$?xs$?f) =
      upper_bind$(convex_to_upper$?xs)$(convex_to_upper oo ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 11)),
           template_var 0)))),
    ("ConvexPD.convex_plus_left_commute",
     "?b \<union>\<natural> (?a \<union>\<natural> ?c) =
      ?a \<union>\<natural> (?b \<union>\<natural> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_plus_assoc",
     "?a \<union>\<natural> ?b \<union>\<natural> ?c =
      ?a \<union>\<natural> (?b \<union>\<natural> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Cfun.cfcomp_LAM",
     "cont ?g ==> ?f oo (LAM x. ?g x) = (LAM x. ?f$(?g x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_app (template_hole 2, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.rtrancl_finite_eq_relpow",
     "finite ?R ==> ?R^* = \<Union> ((^^) ?R ` {n. n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("Fun_Cpo.lub_fun", "chain ?S ==> (LUB i. ?S i) = (%x. LUB i. ?S i x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 2)),
         t_empty))),
    ("GCD.gcd_is_Max_divisors_nat",
     "0 < ?n ==> gcd ?m ?n = Max {d. d dvd ?m & d dvd ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Transitive_Closure.rtranclpD",
     "?R^** ?a ?b ==> ?a = ?b | ?a ~= ?b & ?R^++ ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Transitive_Closure.relpowp_Suc_D2",
     "(?P ^^ Suc ?n) ?x ?z ==> EX y. ?P ?x y & (?P ^^ ?n) y ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Hilbert_Choice.bchoice",
     "ALL x:?S. EX y. ?Q x y ==> EX f. ALL x:?S. ?Q x (f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complete_Lattices.INF1_I",
     "(!!x. x : ?A ==> ?B x ?b) ==> Inf (?B ` ?A) ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)),
             template_var 0)
           ))),
    ("Hilbert_Choice.someI2",
     "[| ?P ?a; !!x. ?P x ==> ?Q x |] ==> ?Q (SOME x. ?P x)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("Hilbert_Choice.inv_into_image_cancel",
     "[| inj_on ?f ?A; ?S <= ?A |] ==> inv_into ?A ?f ` ?f ` ?S = ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 0))),
    ("Hilbert_Choice.inj_imp_inv_eq",
     "[| inj ?f; ALL x. ?f (?g x) = x |] ==> inv ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 4), template_var 1),
         template_var 0))),
    ("Transitive_Closure.rtrancl_Int_subset",
     "[| Id <= ?s; (?r^* Int ?s) O ?r <= ?s |] ==> ?r^* <= ?s",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 0)),
                template_var 1)),
            template_var 0),
          template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Transitive_Closure.trancl_Int_subset",
     "[| ?r <= ?s; (?r^+ Int ?s) O ?r <= ?s |] ==> ?r^+ <= ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                template_var 0)),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complete_Lattices.SUP2_I",
     "[| ?a : ?A; ?B ?a ?b ?c |] ==> Sup (?B ` ?A) ?b ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 2, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("Complete_Lattices.UN_I",
     "[| ?a : ?A; ?b : ?B ?a |] ==> ?b : \<Union> (?B ` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_var 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Topological_Spaces.open_Collect_neq",
     "[| continuous_on UNIV ?f; continuous_on UNIV ?g |]
      ==> open {x. ?f x ~= ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Product_Cpo.cont2cont_Pair",
     "[| cont ?f; cont ?g |] ==> cont (%x. (?f x, ?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.cont2cont_APP",
     "[| cont ?f; cont ?t |] ==> cont (%x. ?f x$(?t x))",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex.csqrt_of_real_nonneg",
     "[| Im ?x = 0; 0 <= Re ?x |]
      ==> csqrt ?x = complex_of_real (sqrt (Re ?x))",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6),
        template_inequation
         (less_equals, template_hole 6,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Hilbert_Choice.inv_unique_comp",
     "[| ?f o ?g = id; ?g o ?f = id |] ==> inv ?f = ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Complete_Lattices.INF2_D",
     "[| Inf (?B ` ?A) ?b ?c; ?a : ?A |] ==> ?B ?a ?b ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 4, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Complete_Lattices.INT_D",
     "[| ?b : \<Inter> (?B ` ?A); ?a : ?A |] ==> ?b : ?B ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, t_empty), template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_var 2, template_var 0))
           ))),
    ("HOL.impCE'", "[| ?P --> ?Q; ?Q ==> ?R; ~ ?P ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("HOL.impCE", "[| ?P --> ?Q; ~ ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("GCD.bezw_aux",
     "int (gcd ?x ?y) =
      fst (bezw ?x ?y) * int ?x + snd (bezw ?x ?y) * int ?y",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app (template_hole 6, template_var 0))))),
    ("Product_Cpo.prod_cont_iff",
     "cont ?f =
      ((ALL y. cont (%x. ?f (x, y))) & (ALL x. cont (%y. ?f (x, y))))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Complex.complex_neq_0",
     "(?z ~= 0) = (0 < (Re ?z)\<^sup>2 + (Im ?z)\<^sup>2)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_var 0),
           template_hole 9)),
       template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Finite_Set.finite_Collect_disjI",
     "finite {x. ?P x | ?Q x} = (finite {x. ?P x} & finite {x. ?Q x})",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Complex.Re_power2",
     "Re (?x\<^sup>2) = (Re ?x)\<^sup>2 - (Im ?x)\<^sup>2",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))))),
    ("Complex.cmod_power2",
     "(cmod ?z)\<^sup>2 = (Re ?z)\<^sup>2 + (Im ?z)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))))),
    ("String.ascii_of_Char",
     "String.ascii_of
       (Char ?b0.0 ?b1.0 ?b2.0 ?b3.0 ?b4.0 ?b5.0 ?b6.0 ?b7.0) =
      Char ?b0.0 ?b1.0 ?b2.0 ?b3.0 ?b4.0 ?b5.0 ?b6.0 False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Complex.cnj_add_mult_eq_Re",
     "?z * cnj ?w + cnj ?z * ?w = complex_of_real (2 * Re (?z * cnj ?w))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 6, template_var 0))))))),
    ("Transitive_Closure.relpow_finite_bounded",
     "finite ?R ==> ?R ^^ ?k <= \<Union> ((^^) ?R ` {n. n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("Compact_Basis.fold_pd_PDPlus",
     "semilattice ?f ==>
      fold_pd ?g ?f (PDPlus ?t ?u) =
      ?f (fold_pd ?g ?f ?t) (fold_pd ?g ?f ?u)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_var 0))))),
    ("Lifting_Set.right_total_Collect_transfer",
     "right_total ?A ==>
      rel_fun (rel_fun ?A (=)) (rel_set ?A) (%P. {x. P x & Domainp ?A x})
       Collect",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app (template_hole 4, template_var 0)),
               t_empty),
             template_hole 0)
           ))),
    ("Zorn.Chains_subset'",
     "refl ?r ==>
      {C. pred_on.chain UNIV (%x y. (x, y) : ?r) C} <= Chains ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_is_Max_divisors_int",
     "?n ~= 0 ==> gcd ?m ?n = Max {d. d dvd ?m & d dvd ?n}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Cfun.flat_codom",
     "?f$?x = ?c ==> ?f$\<bottom> = \<bottom> | (ALL z. ?f$z = ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 2)),
                 template_hole 1)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Complex.cmod_Re_le_iff",
     "Im ?x = Im ?y ==>
      (cmod ?x <= cmod ?y) = (\<bar>Re ?x\<bar> <= \<bar>Re ?y\<bar>)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Complex.cmod_Im_le_iff",
     "Re ?x = Re ?y ==>
      (cmod ?x <= cmod ?y) = (\<bar>Im ?x\<bar> <= \<bar>Im ?y\<bar>)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("List.rtrancl_listrel1_ConsI1",
     "(?xs, ?ys) : (listrel1 ?r)^* ==>
      (?x # ?xs, ?x # ?ys) : (listrel1 ?r)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Complete_Partial_Order.admissible_all",
     "(!!y. ccpo.admissible ?lub ?ord (%x. ?P x y)) ==>
      ccpo.admissible ?lub ?ord (%x. ALL y. ?P x y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Complete_Partial_Order.monotoneI",
     "(!!x y. ?orda x y ==> ?ordb (?f x) (?f y)) ==>
      monotone ?orda ?ordb ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Cont.ub2ub_monofun",
     "[| monofun ?f; range ?Y <| ?u |] ==> range (%i. ?f (?Y i)) <| ?f ?u",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_hole 2)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Complete_Lattices.Sup1_E",
     "[| Sup ?A ?a; !!P. [| P : ?A; P ?a |] ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.inv_into_inv_into_eq",
     "[| bij_betw ?f ?A ?A'; ?a : ?A |]
      ==> inv_into ?A' (inv_into ?A ?f) ?a = ?f ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_var 0),
         template_app (template_var 3, template_var 0)))),
    ("List.Cons_acc_listrel1I",
     "[| ?x : Wellfounded.acc ?r; ?xs : Wellfounded.acc (listrel1 ?r) |]
      ==> ?x # ?xs : Wellfounded.acc (listrel1 ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Transitive_Closure.r_r_into_trancl",
     "[| (?a, ?b) : ?R; (?b, ?c) : ?R |] ==> (?a, ?c) : ?R^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?C ` \<Union> (?B ` ?A)) =
      (INT x:?A. \<Inter> (?C ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?C ` \<Union> (?B ` ?A)) = (UN x:?A. \<Union> (?C ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT x:?A. \<Inter> (?C ` ?B x)) =
      \<Inter> (?C ` \<Union> (?B ` ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN x:?A. \<Union> (?C ` ?B x)) = \<Union> (?C ` \<Union> (?B ` ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("List.listrel_Cons",
     "listrel ?r `` {?x # ?xs} =
      set_Cons (?r `` {?x}) (listrel ?r `` {?xs})",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 4))))),
    ("Hilbert_Choice.subset_image_inj",
     "(?S <= ?f ` ?T) = (EX U<=?T. inj_on ?f U & ?S = ?f ` U)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.dropWhile_eq_Cons_conv",
     "(dropWhile ?P ?xs = ?y # ?ys) =
      (?xs = takeWhile ?P ?xs @ ?y # ?ys & ~ ?P ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 1)))
           ))),
    ("Limits.LIM_isCont_iff",
     "?f \<midarrow>?a\<rightarrow> ?f ?a =
      (%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?f ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_var 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 4,
             template_app (template_var 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 2)))),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<flat> << ?ys \<union>\<flat> ?zs) =
      ({?x}\<flat> << ?ys | {?x}\<flat> << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs \<union>\<sharp> ?ys << {?z}\<sharp>) =
      (?xs << {?z}\<sharp> | ?ys << {?z}\<sharp>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("ConvexPD.convex_unit_below_plus_iff",
     "({?x}\<natural> << ?ys \<union>\<natural> ?zs) =
      ({?x}\<natural> << ?ys & {?x}\<natural> << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_plus_below_unit_iff",
     "(?xs \<union>\<natural> ?ys << {?z}\<natural>) =
      (?xs << {?z}\<natural> & ?ys << {?z}\<natural>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("ConvexPD.convex_bind_map",
     "convex_bind$(convex_map$?f$?xs)$?g =
      (\<Union>\<natural>x\<in>?xs. ?g$(?f$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("ConvexPD.convex_map_map",
     "convex_map$?f$(convex_map$?g$?xs) =
      convex_map$(LAM x. ?f$(?g$x))$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, t_empty))),
         template_var 0))),
    ("Cfun.contlub_cfun_arg",
     "chain ?Y ==> ?f$(LUB i. ?Y i) = (LUB i. ?f$(?Y i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Cfun.contlub_cfun_fun",
     "chain ?F ==> (LUB i. ?F i)$?x = (LUB i. ?F i$?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_hole 2))),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Cfun.lub_cfun", "chain ?F ==> (LUB i. ?F i) = (LAM x. LUB i. ?F i$x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty), template_hole 4)),
         template_app (template_hole 3, t_empty)))),
    ("Cfun.chfin_Rep_cfunR",
     "chain ?Y ==> ALL s. EX n. (LUB i. ?Y i)$s = ?Y n$s",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complete_Lattices.INT_absorb",
     "?k : ?I ==> ?A ?k Int \<Inter> (?A ` ?I) = \<Inter> (?A ` ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Complete_Lattices.UN_absorb",
     "?k : ?I ==> ?A ?k Un \<Union> (?A ` ?I) = \<Union> (?A ` ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Complete_Lattices.bij_image_INT",
     "bij ?f ==> ?f ` \<Inter> (?B ` ?A) = (INT x:?A. ?f ` ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("GCD.bezout_nat", "?a ~= 0 ==> EX x y. ?a * x = ?b * y + gcd ?a ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Finite_Set.finite_Collect_conjI",
     "finite {x. ?P x} | finite {x. ?Q x} ==> finite {x. ?P x & ?Q x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, t_empty))),
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Complete_Lattices.INF2_I",
     "(!!x. x : ?A ==> ?B x ?b ?c) ==> Inf (?B ` ?A) ?b ?c",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("Complete_Lattices.INT_greatest",
     "(!!x. x : ?A ==> ?C <= ?B x) ==> ?C <= \<Inter> (?B ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Complete_Lattices.UN_least",
     "(!!x. x : ?A ==> ?B x <= ?C) ==> \<Union> (?B ` ?A) <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_var 0))),
    ("Complete_Lattices.INT_I",
     "(!!x. x : ?A ==> ?b : ?B x) ==> ?b : \<Inter> (?B ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Conditionally_Complete_Lattices.finite_less_Inf_iff",
     "[| finite ?X; ?X ~= {} |] ==> (?a < Inf ?X) = (ALL x:?X. ?a < x)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Conditionally_Complete_Lattices.finite_Sup_less_iff",
     "[| finite ?X; ?X ~= {} |] ==> (Sup ?X < ?a) = (ALL x:?X. x < ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Hilbert_Choice.some_equality",
     "[| ?P ?a; !!x. ?P x ==> x = ?a |] ==> (SOME x. ?P x) = ?a",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Lifting_Set.right_total_Compl_transfer",
     "[| bi_unique ?A; right_total ?A |]
      ==> rel_fun (rel_set ?A) (rel_set ?A)
           (%S. - S Int Collect (Domainp ?A)) uminus",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app (template_hole 5, template_var 0)),
               t_empty),
             template_hole 0)
           ))),
    ("Hilbert_Choice.wf_no_infinite_down_chainE",
     "[| wf ?r; !!k. (?f (Suc k), ?f k) ~: ?r ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.someI2_ex",
     "[| EX a. ?P a; !!x. ?P x ==> ?Q x |] ==> ?Q (SOME x. ?P x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("Complex.card_nth_roots",
     "[| ?c ~= 0; 0 < ?n |] ==> card {z. z ^ ?n = ?c} = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Hilbert_Choice.image_inv_into_cancel",
     "[| ?f ` ?A = ?A'; ?B' <= ?A' |] ==> ?f ` inv_into ?A ?f ` ?B' = ?B'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 0)),
         template_var 0))),
    ("Hilbert_Choice.surj_imp_inv_eq",
     "[| surj ?f; !!x. ?g (?f x) = x |] ==> inv ?f = ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1),
            template_hole 5),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 5), template_var 1),
         template_var 0))),
    ("List.Cons_eq_appendI",
     "[| ?x # ?xs1.0 = ?ys; ?xs = ?xs1.0 @ ?zs |] ==> ?x # ?xs = ?ys @ ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Transitive_Closure.converse_rtrancl_into_rtrancl",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_into_trancl2",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_into_trancl2",
     "[| (?a, ?b) : ?r; (?b, ?c) : ?r^+ |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.transitive_closure_trans",
     "[| (?a, ?b) : ?r^*; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_into_trancl1",
     "[| (?a, ?b) : ?r^*; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_into_trancl",
     "[| (?a, ?b) : ?r^+; (?b, ?c) : ?r |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Limits.uniformly_continuous_imp_Cauchy_continuous",
     "[| uniformly_continuous_on ?S ?f; Cauchy ?\<sigma>;
         !!n. ?\<sigma> n : ?S |]
      ==> Cauchy (?f o ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complete_Lattices.INT_Un",
     "\<Inter> (?M ` (?A Un ?B)) =
      \<Inter> (?M ` ?A) Int \<Inter> (?M ` ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_Un",
     "\<Union> (?M ` (?A Un ?B)) =
      \<Union> (?M ` ?A) Un \<Union> (?M ` ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. insert ?a (?B x)) =
      (if ?C = {} then {} else insert ?a (\<Union> (?B ` ?C)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))))
           ))),
    ("Set.Compr_image_eq", "{x: ?f ` ?A. ?P x} = ?f ` {x: ?A. ?P (?f x)}",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 1, t_empty)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Int ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 0))),
               template_var 1))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Int ?B =
      (if ?C = {} then ?B else INT x:?C. ?A x Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 1)))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Int ?B x) =
      (if ?C = {} then UNIV else ?A Int \<Inter> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "?A Int \<Inter> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A Int ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 0)))
           ))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x Un ?B) =
      (if ?C = {} then {} else \<Union> (?A ` ?C) Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 0))),
               template_var 1))
           ))),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) Un ?B =
      (if ?C = {} then ?B else UN x:?C. ?A x Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 1)))
           ))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A Un ?B x) =
      (if ?C = {} then {} else ?A Un \<Union> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))))
           ))),
    ("Complete_Lattices.UN_extend_simps",
     "?A Un \<Union> (?B ` ?C) =
      (if ?C = {} then ?A else UN x:?C. ?A Un ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_var 0)))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x - ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 0))),
               template_var 1))
           ))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A - ?B x) =
      (if ?C = {} then UNIV else ?A - \<Union> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 0))))
           ))),
    ("Complete_Lattices.INT_extend_simps",
     "?A - \<Union> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A - ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, t_empty), template_var 0)))
           ))),
    ("Complex.has_vector_derivative_complex_iff",
     "(?f has_vector_derivative ?x) ?F =
      (((%x. Re (?f x)) has_real_derivative Re ?x) ?F &
       ((%x. Im (?f x)) has_real_derivative Im ?x) ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Transitive_Closure.rtrancl_eq_or_trancl",
     "((?x, ?y) : ?R^*) = (?x = ?y | ?x ~= ?y & (?x, ?y) : ?R^+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Hilbert_Choice.choice_iff'",
     "(ALL x. ?P x --> (EX y. ?Q x y)) =
      (EX f. ALL x. ?P x --> ?Q x (f x))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.INT_insert_distrib",
     "?u : ?A ==>
      (INT x:?A. insert ?a (?B x)) = insert ?a (\<Inter> (?B ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 2)))))),
    ("Complete_Lattices.UN_insert_distrib",
     "?u : ?A ==>
      (UN x:?A. insert ?a (?B x)) = insert ?a (\<Union> (?B ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 2)))))),
    ("Complex.Re_Reals_divide",
     "?r : \<real> ==> Re (?r / ?z) = Re ?r * Re ?z / (cmod ?z)\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 8, template_var 1)),
               template_app (template_hole 8, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Zorn.Chains_inits_DiffI",
     "?R : Chains init_seg_of ==> {r - ?s |r. r : ?R} : Chains init_seg_of",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_hole 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 5, t_empty)),
             template_app (template_hole 7, template_hole 6))
           ))),
    ("Transitive_Closure.tranclD",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R & (z, ?y) : ?R^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transitive_Closure.tranclD2",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R^* & (z, ?y) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Topological_Spaces.isCont_cong",
     "\<forall>\<^sub>F x in nhds ?x. ?f x = ?g x ==>
      isCont ?f ?x = isCont ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 1)))),
    ("Cfun.injection_eq",
     "ALL x. ?f$(?g$x) = x ==> (?g$?x = ?g$?y) = (?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Cfun.injection_below",
     "ALL x. ?f$(?g$x) = x ==> (?g$?x << ?g$?y) = (?x << ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Limits.isCont_sum",
     "ALL i:?A. isCont (?f i) ?a ==> isCont (%x. SUM i:?A. ?f i x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Product_Cpo.cont2cont_split_simple",
     "(!!a b. cont (%x. ?f x a b)) ==>
      cont (%x. case ?p of (a, b) => ?f x a b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.mono_rtranclp",
     "(!!a b. ?x a b --> ?y a b) ==> ?x^** ?a ?b --> ?y^** ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Cont.contE",
     "[| cont ?f; chain ?Y |]
      ==> range (%i. ?f (?Y i)) <<| ?f (LUB i. ?Y i)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty), template_hole 2)),
             template_app
              (template_var 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_hole 2))))
           ))),
    ("Cont.binchain_cont",
     "[| cont ?f; ?x << ?y |]
      ==> range (%i. ?f (if i = 0 then ?x else ?y)) <<| ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_hole 0)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Complete_Lattices.Sup2_E",
     "[| Sup ?A ?a ?b; !!r. [| r : ?A; r ?a ?b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Cfun.cont2cont_if_bottom",
     "[| cont ?f; cont ?g |]
      ==> cont (%x. if ?f x = \<bottom> then \<bottom> else ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Complete_Lattices.inj_on_Inter",
     "[| ?S ~= {}; !!A. A : ?S ==> inj_on ?f A |]
      ==> inj_on ?f (\<Inter> ?S)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex.csqrt_of_real_nonpos",
     "[| Im ?x = 0; Re ?x <= 0 |]
      ==> csqrt ?x = \<i> * complex_of_real (sqrt \<bar>Re ?x\<bar>)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0), template_hole 9),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_hole 9)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 7, template_var 0)))))))),
    ("Complete_Lattices.UnionE",
     "[| ?A : \<Union> ?C; !!X. [| ?A : X; X : ?C |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.isCont_sgn",
     "[| isCont ?f ?a; ?f ?a ~= (0::?'b) |] ==> isCont (%x. sgn (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             t_empty)
           ))),
    ("Transcendental.isCont_ln'",
     "[| isCont ?f ?x; ?f ?x ~= 0 |] ==> isCont (%x. ln (?f x)) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             t_empty)
           ))),
    ("Transitive_Closure.trancl_rtrancl_trancl",
     "[| (?a, ?b) : ?r^+; (?b, ?c) : ?r^* |] ==> (?a, ?c) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_trans",
     "[| (?x, ?y) : ?r^*; (?y, ?z) : ?r^* |] ==> (?x, ?z) : ?r^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_trancl_trancl",
     "[| (?x, ?y) : ?r^*; (?y, ?z) : ?r^+ |] ==> (?x, ?z) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Transitive_Closure.trancl_trans",
     "[| (?x, ?y) : ?r^+; (?y, ?z) : ?r^+ |] ==> (?x, ?z) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Product_Cpo.prod_contI",
     "[| !!y. cont (%x. ?f (x, y)); !!x. cont (%y. ?f (x, y)) |]
      ==> cont ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.irrefl_trancl_rD",
     "[| ALL x. (x, x) ~: ?r^+; (?x, ?y) : ?r |] ==> ?x ~= ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Complete_Lattices.Inter_subset",
     "[| !!X. X : ?A ==> X <= ?B; ?A ~= {} |] ==> \<Inter> ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Set.bexCI",
     "[| ALL x:?A. ~ ?P x ==> ?P ?a; ?a : ?A |] ==> EX x:?A. ?P x",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2), t_empty)
               )],
          template_predicate
           (template_app (template_var 1, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Real_Vector_Spaces.Cauchy_converges_subseq",
     "[| Cauchy ?u; strict_mono ?r;
         (?u o ?r) \<longlonglongrightarrow> ?l |]
      ==> ?u \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1)),
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complete_Lattices.Inf1_E",
     "[| Inf ?A ?a; ?P ?a ==> ?thesis; ?P ~: ?A ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_var 2))],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Partial_Order.chainD",
     "[| Complete_Partial_Order.chain ?ord ?S; ?x : ?S; ?y : ?S |]
      ==> ?ord ?x ?y | ?ord ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 3, template_var 0),
               template_var 1))
           ))),
    ("Hilbert_Choice.inv_into_f_eq",
     "[| inj_on ?f ?A; ?x : ?A; ?f ?x = ?y |] ==> inv_into ?A ?f ?y = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0),
         template_var 1))),
    ("Limits.uniformly_continuous_on_Cauchy",
     "[| uniformly_continuous_on ?S ?f; Cauchy ?X; !!n. ?X n : ?S |]
      ==> Cauchy (%n. ?f (?X n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex.cis_Arg_unique",
     "[| sgn ?z = cis ?x; - pi < ?x; ?x <= pi |] ==> Arg ?z = ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complete_Lattices.SUP_UNION",
     "Sup (?f ` \<Union> (?g ` ?A)) = (SUP y\<in>?A. Sup (?f ` ?g y))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UNION_fun_upd",
     "\<Union> (?A(?i := ?B) ` ?J) =
      \<Union> (?A ` (?J - {?i})) Un (if ?i : ?J then ?B else {})",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3))))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("Complete_Lattices.INT_Int_distrib",
     "(INT i:?I. ?A i Int ?B i) =
      \<Inter> (?A ` ?I) Int \<Inter> (?B ` ?I)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_Un_distrib",
     "(UN i:?I. ?A i Un ?B i) = \<Union> (?A ` ?I) Un \<Union> (?B ` ?I)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_UN_flatten",
     "\<Union> (?C ` \<Union> (?B ` ?A)) = (UN y:?A. \<Union> (?C ` ?B y))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("GCD.lcm_1_iff_int",
     "(lcm ?m ?n = 1) = ((?m = 1 | ?m = - 1) & (?n = 1 | ?n = - 1))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 0, template_hole 3)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 3)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 0, template_hole 3))))
           ))),
    ("List.Cons_replicate_eq",
     "(?x # ?xs = replicate ?n ?y) =
      (?x = ?y & 0 < ?n & ?xs = replicate (?n - 1) ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0)),
                   template_var 3))))
           ))),
    ("List.upt_eq_Cons_conv",
     "([?i..<?j] = ?x # ?xs) = (?i < ?j & ?i = ?x & [?i + 1..<?j] = ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("List.nths_Cons",
     "nths (?x # ?l) ?A =
      (if 0 : ?A then [?x] else []) @ nths ?l {j. Suc j : ?A}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 2)),
             template_hole 2)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app (template_hole 1, t_empty))))),
    ("Complex.complex_mult",
     "Complex ?a ?b * Complex ?c ?d =
      Complex (?a * ?c - ?b * ?d) (?a * ?d + ?b * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("ConvexPD.convex_bind_bind",
     "convex_bind$(convex_bind$?xs$?f)$?g =
      (\<Union>\<natural>x\<in>?xs. convex_bind$(?f$x)$?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_bind_plus",
     "convex_bind$(?xs \<union>\<natural> ?ys)$?f =
      convex_bind$?xs$?f \<union>\<natural> convex_bind$?ys$?f",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)))),
    ("ConvexPD.convex_map_bind",
     "convex_map$?f$(convex_bind$?xs$?g) =
      (\<Union>\<natural>x\<in>?xs. convex_map$?f$(?g$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_map_plus",
     "convex_map$?f$(?xs \<union>\<natural> ?ys) =
      convex_map$?f$?xs \<union>\<natural> convex_map$?f$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_var 0)))),
    ("Finite_Set.finite_Collect_bex",
     "finite ?A ==>
      finite {x. EX y:?A. ?Q x y} = (ALL y:?A. finite {x. ?Q x y})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Transitive_Closure.trancl_finite_eq_relpow",
     "finite ?R ==> ?R^+ = \<Union> ((^^) ?R ` {n. 0 < n & n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 5, t_empty)))))),
    ("Product_Cpo.is_lub_prod",
     "chain ?S ==> range ?S <<| (LUB i. fst (?S i), LUB i. snd (?S i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_hole 7))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_hole 7))))
           ))),
    ("Complex.Im_Reals_divide",
     "?r : \<real> ==> Im (?r / ?z) = - Re ?r * Im ?z / (cmod ?z)\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_hole 12)
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1))),
               template_app (template_hole 10, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Complex.Arg_correct",
     "?z ~= 0 ==> sgn ?z = cis (Arg ?z) & - pi < Arg ?z & Arg ?z <= pi",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 6, template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 1)))
           ))),
    ("Transitive_Closure.rtranclD",
     "(?a, ?b) : ?R^* ==> ?a = ?b | ?a ~= ?b & (?a, ?b) : ?R^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Product_Cpo.adm_case_prod",
     "adm (%x. ?P x (fst (?f x)) (snd (?f x))) ==>
      adm (%x. case ?f x of (a, b) => ?P x a b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complete_Lattices.Union_subsetI",
     "(!!x. x : ?A ==> EX y. y : ?B & x <= y) ==>
      \<Union> ?A <= \<Union> ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Cont.cont2contlubE",
     "[| cont ?f; chain ?Y |] ==> ?f (LUB i. ?Y i) = (LUB i. ?f (?Y i))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Hilbert_Choice.inj_transfer",
     "[| inj ?f; !!y. y : range ?f ==> ?P (inv ?f y) |] ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Complex.real_eq_imaginary_iff",
     "[| ?y : \<real>; ?x : \<real> |]
      ==> (?x = \<i> * ?y) = (?x = 0 & ?y = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_var 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0))
             )))),
    ("Complex.imaginary_eq_real_iff",
     "[| ?y : \<real>; ?x : \<real> |]
      ==> (\<i> * ?y = ?x) = (?x = 0 & ?y = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0))
             )))),
    ("Transcendental.isCont_tan'",
     "[| isCont ?f ?a; cos (?f ?a) ~= (0::?'a) |]
      ==> isCont (%x. tan (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             t_empty)
           ))),
    ("Transcendental.isCont_cot'",
     "[| isCont ?f ?a; sin (?f ?a) ~= (0::?'a) |]
      ==> isCont (%x. cot (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_o2",
     "[| isCont ?f ?a; isCont ?g (?f ?a) |] ==> isCont (%x. ?g (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_var 1, template_var 2)),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_tendsto_compose",
     "[| isCont ?g ?l; (?f \<longlongrightarrow> ?l) ?F |]
      ==> ((%x. ?g (?f x)) \<longlongrightarrow> ?g ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_hole 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 3))),
             template_var 0)
           ))),
    ("Transitive_Closure.trancl_subset_Sigma_aux",
     "[| (?a, ?b) : ?r^*; ?r <= ?A \<times> ?A |] ==> ?a = ?b | ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0), t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Hilbert_Choice.inv_equality",
     "[| !!x. ?g (?f x) = x; !!y. ?f (?g y) = y |] ==> inv ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 1))),
    ("Set.subsetCE",
     "[| ?A <= ?B; ?c ~: ?A ==> ?P; ?c : ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.symclpE",
     "[| symclp ?r ?x ?y; ?r ?x ?y ==> ?thesis; ?r ?y ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.UN_extend_simps",
     "insert ?a (\<Union> (?B ` ?C)) =
      (if ?C = {} then {?a} else UN x:?C. insert ?a (?B x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 0)))
           ))),
    ("Complete_Lattices.Union_SetCompr_eq",
     "\<Union> {?f x |x. ?P x} = {a. EX x. ?P x & a : ?f x}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) - ?B =
      (if ?C = {} then UNIV - ?B else INT x:?C. ?A x - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_hole 0),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 1)))
           ))),
    ("Hilbert_Choice.bchoice_iff'",
     "(ALL x:?S. ?P x --> (EX y. ?Q x y)) =
      (EX f. ALL x:?S. ?P x --> ?Q x (f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app (template_hole 0, t_empty))),
    ("Limits.open_Collect_positive",
     "continuous_on ?s ?f ==> EX A. open A & A Int ?s = {x: ?s. 0 < ?f x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("ConvexPD.convex_le_PDPlus_lemma",
     "PDPlus ?t ?u \<le>\<natural> ?z ==>
      EX v w.
         ?z = PDPlus v w & ?t \<le>\<natural> v & ?u \<le>\<natural> w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Complex.Re_prod_Reals",
     "(!!x. x : ?A ==> ?f x : \<real>) ==>
      Re (prod ?f ?A) = (PROD x:?A. Re (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complex.csqrt_square",
     "0 < Re ?b | Re ?b = 0 & 0 <= Im ?b ==> csqrt (?b\<^sup>2) = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_app (template_hole 10, template_var 0))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 10, template_var 0)),
                    template_hole 11)),
                template_app
                 (template_app (template_hole 7, template_hole 11),
                  template_app (template_hole 6, template_var 0))))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_var 0))),
    ("Complex.csqrt_minus",
     "Im ?x < 0 | Im ?x = 0 & 0 <= Re ?x ==>
      csqrt (- ?x) = \<i> * csqrt ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 0)),
                  template_hole 9)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 10, template_var 0)),
                    template_hole 9)),
                template_app
                 (template_app (template_hole 6, template_hole 9),
                  template_app (template_hole 5, template_var 0))))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Complex.abs_sqrt_wlog",
     "(!!x. (0::?'a) <= x ==> ?P x (x\<^sup>2)) ==>
      ?P \<bar>?x\<bar> (?x\<^sup>2)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))))
           ))),
    ("Cont.contI",
     "(!!Y. chain Y ==> range (%i. ?f (Y i)) <<| ?f (LUB i. Y i)) ==>
      cont ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Cfun.cont2cont_Let'",
     "[| cont ?f; cont (%p. ?g (fst p) (snd p)) |]
      ==> cont (%x. Let (?f x) (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Conditionally_Complete_Lattices.cSup_abs_le",
     "[| ?S ~= {}; !!x. x : ?S ==> \<bar>x\<bar> <= ?a |]
      ==> \<bar>Sup ?S\<bar> <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Transitive_Closure.relpow_Suc_I2",
     "[| (?x, ?y) : ?R; (?y, ?z) : ?R ^^ ?n |] ==> (?x, ?z) : ?R ^^ Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("Limits.isCont_add",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x + ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Topological_Spaces.isCont_Pair",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. (?f x, ?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)),
             t_empty)
           ))),
    ("Limits.isCont_diff",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x - ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_mult",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x * ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_scaleR",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. ?f x *\<^sub>R ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Compact_Basis.pd_basis_induct1",
     "[| !!a. ?P (PDUnit a); !!a t. ?P t ==> ?P (PDPlus (PDUnit a) t) |]
      ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Transitive_Closure.relpow_Suc_I",
     "[| (?x, ?y) : ?R ^^ ?n; (?y, ?z) : ?R |] ==> (?x, ?z) : ?R ^^ Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1))
           ))),
    ("C.C_cases",
     "[| !!n. ?r = C\<^bsup>n\<^esup> ==> ?thesis;
         ?r = C\<^sup>\<infinity> ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.Inf2_E",
     "[| Inf ?A ?a ?b; ?r ?a ?b ==> ?thesis; ?r ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 1, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.bij_betw_inv_into_subset",
     "[| bij_betw ?f ?A ?A'; ?B <= ?A; ?f ` ?B = ?B' |]
      ==> bij_betw (inv_into ?A ?f) ?B' ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4)),
               template_var 0),
             template_var 1)
           ))),
    ("Complete_Lattices.InterE",
     "[| ?A : \<Inter> ?C; ?X ~: ?C ==> ?R; ?A : ?X ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Hilbert_Choice.Ex_inj_on_UNION_Sigma",
     "EX f. inj_on f (\<Union> (?A ` ?I)) &
            f ` \<Union> (?A ` ?I) <= Sigma ?I ?A",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Complex.tendsto_complex_iff",
     "(?f \<longlongrightarrow> ?x) ?F =
      (((%x. Re (?f x)) \<longlongrightarrow> Re ?x) ?F &
       ((%x. Im (?f x)) \<longlongrightarrow> Im ?x) ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 1))),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("List.list_all2_Cons2",
     "list_all2 ?P ?xs (?y # ?ys) =
      (EX z zs. ?xs = z # zs & ?P z ?y & list_all2 ?P zs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.list_all2_Cons1",
     "list_all2 ?P (?x # ?xs) ?ys =
      (EX z zs. ?ys = z # zs & ?P ?x z & list_all2 ?P ?xs zs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("List.remdups_adj_Cons",
     "remdups_adj (?x # ?xs) =
      (case remdups_adj ?xs of [] => [?x]
       | y # xs => if ?x = y then y # xs else ?x # y # xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 2)),
           t_empty),
         template_app (template_hole 5, template_var 0)))),
    ("Hilbert_Choice.inj_on_iff_surj",
     "?A ~= {} ==>
      (EX f. inj_on f ?A & f ` ?A <= ?A') = (EX g. g ` ?A' = ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.relpow_Suc_D2",
     "(?x, ?z) : ?R ^^ Suc ?n ==> EX y. (?x, y) : ?R & (y, ?z) : ?R ^^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transcendental.isCont_powser_converges_everywhere",
     "(!!y. summable (%n. ?c n * y ^ n)) ==>
      isCont (%x. \<Sum>n. ?c n * x ^ n) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             t_empty)
           ))),
    ("GCD.coprime_crossproduct_nat",
     "[| coprime ?a ?d; coprime ?b ?c |]
      ==> (?a * ?c = ?b * ?d) = (?a = ?b & ?c = ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))
             )))),
    ("Hilbert_Choice.o_inv_distrib",
     "[| bij ?f; bij ?g |] ==> inv (?f o ?g) = inv ?g o inv ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_hole 9),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_hole 6),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 6),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 6),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_hole 9),
             template_var 1))))),
    ("Complete_Partial_Order.admissible_conj",
     "[| ccpo.admissible ?lub ?ord ?P; ccpo.admissible ?lub ?ord ?Q |]
      ==> ccpo.admissible ?lub ?ord (%x. ?P x & ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("Complete_Lattices.SUP1_E",
     "[| Sup (?B ` ?A) ?b; !!x. [| x : ?A; ?B x ?b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Cfun.cont2cont_LAM",
     "[| !!x. cont (?f x); !!y. cont (%x. ?f x y) |]
      ==> cont (%x. LAM y. ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.ch2ch_LAM",
     "[| !!x. chain (%i. ?S i x); !!i. cont (?S i) |]
      ==> chain (%i. LAM x. ?S i x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.cont2mono_LAM",
     "[| !!x. cont (?f x); !!y. monofun (%x. ?f x y) |]
      ==> monofun (%x. LAM y. ?f x y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Conditionally_Complete_Lattices.finite_imp_Sup_less",
     "[| finite ?X; ?x : ?X; !!x. x : ?X ==> x < ?a |] ==> Sup ?X < ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 2),
         template_var 0))),
    ("Conditionally_Complete_Lattices.finite_imp_less_Inf",
     "[| finite ?X; ?x : ?X; !!x. x : ?X ==> ?a < x |] ==> ?a < Inf ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 2)))),
    ("String.literal_of_asciis_Cons",
     "String.literal_of_asciis (?k # ?ks) =
      (case char_of ?k of
       Char b0 b1 b2 b3 b4 b5 b6 b7 =>
         String.Literal b0 b1 b2 b3 b4 b5 b6
          (String.literal_of_asciis ?ks))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Product_Cpo.lub_prod",
     "chain ?S ==> (LUB i. ?S i) = (LUB i. fst (?S i), LUB i. snd (?S i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty), template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_hole 7))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_hole 7)))))),
    ("Fun_Cpo.contlub_lambda",
     "(!!x. chain (%i. ?S i x)) ==> (%x. LUB i. ?S i x) = (LUB i. ?S i)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (t_empty,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Complete_Partial_Order.admissible_ball",
     "(!!y. y : ?A ==> ccpo.admissible ?lub ?ord (%x. ?P x y)) ==>
      ccpo.admissible ?lub ?ord (%x. ALL y:?A. ?P x y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Complete_Partial_Order.chainI",
     "(!!x y. [| x : ?S; y : ?S |] ==> ?ord x y | ?ord y x) ==>
      Complete_Partial_Order.chain ?ord ?S",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Complex.tendsto_Complex",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. Complex (?f x) (?g x)) \<longlongrightarrow> Complex ?a ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Product_Cpo.is_lub_Pair",
     "[| range ?A <<| ?x; range ?B <<| ?y |]
      ==> range (%i. (?A i, ?B i)) <<| (?x, ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_hole 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transitive_Closure.relpowp_Suc_E2",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| ?P ?x y; (?P ^^ ?n) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_Suc_E",
     "[| (?P ^^ Suc ?n) ?x ?z; !!y. [| (?P ^^ ?n) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Product_Cpo.cont2cont_case_prod'",
     "[| cont (%p. ?f (fst p) (fst (snd p)) (snd (snd p))); cont ?g |]
      ==> cont (%x. case ?g x of (xa, xb) => ?f x xa xb)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Cfun.monofun_LAM",
     "[| cont ?f; cont ?g; !!x. ?f x << ?g x |]
      ==> (LAM x. ?f x) << (LAM x. ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("HOL.iffCE",
     "[| ?P = ?Q; [| ?P; ?Q |] ==> ?R; [| ~ ?P; ~ ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation (template_predicate (template_var 2))],
          template_implication
           ([template_negation (template_predicate (template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_Suc_D2'",
     "ALL x y z.
         (?P ^^ ?n) x y & ?P y z --> (EX w. ?P x w & (?P ^^ ?n) w z)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Complete_Lattices.Int_UN_distrib2",
     "\<Union> (?A ` ?I) Int \<Union> (?B ` ?J) =
      (UN i:?I. UN j:?J. ?A i Int ?B j)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("Complete_Lattices.Un_INT_distrib2",
     "\<Inter> (?A ` ?I) Un \<Inter> (?B ` ?J) =
      (INT i:?I. INT j:?J. ?A i Un ?B j)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("Transitive_Closure.rtrancl_insert",
     "(insert (?a, ?b) ?r)^* =
      ?r^* Un {(x, y). (x, ?a) : ?r^* & (?b, y) : ?r^*}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Transitive_Closure.trancl_insert",
     "(insert (?y, ?x) ?r)^+ =
      ?r^+ Un {(a, b). (a, ?y) : ?r^* & (?x, b) : ?r^*}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Series.summable_Cauchy",
     "summable ?f =
      (ALL e>0. EX N. ALL m>=N. ALL n. norm (sum ?f {m..<n}) < e)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("GCD.lcm_unique_nat",
     "(?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 1)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GCD.gcd_unique_nat",
     "(?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 0)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex.complex_unit_circle",
     "?z ~= 0 ==>
      (Re ?z / cmod ?z)\<^sup>2 + (Im ?z / cmod ?z)\<^sup>2 = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_hole 0))),
    ("Complete_Lattices.inj_on_INTER",
     "[| ?I ~= {}; !!i. i : ?I ==> inj_on ?f (?A i) |]
      ==> inj_on ?f (\<Inter> (?A ` ?I))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Series.summable_Cauchy_product",
     "[| summable (%k. norm (?a k)); summable (%k. norm (?b k)) |]
      ==> summable (%k. SUM i<=k. ?a i * ?b (k - i))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Compact_Basis.pd_basis_induct",
     "[| !!a. ?P (PDUnit a); !!t u. [| ?P t; ?P u |] ==> ?P (PDPlus t u) |]
      ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Cont.cont2cont_lub",
     "[| !!x. chain (%i. ?F i x); !!i. cont (?F i) |]
      ==> cont (%x. LUB i. ?F i x)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complete_Lattices.SUP2_E",
     "[| Sup (?B ` ?A) ?b ?c; !!x. [| x : ?A; ?B x ?b ?c |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.UN_E",
     "[| ?b : \<Union> (?B ` ?A); !!x. [| x : ?A; ?b : ?B x |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.disjnt_inj_on_iff",
     "[| inj_on ?f (\<Union> ?\<A>); ?X : ?\<A>; ?Y : ?\<A> |]
      ==> disjnt (?f ` ?X) (?f ` ?Y) = disjnt ?X ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complete_Lattices.INF1_E",
     "[| Inf (?B ` ?A) ?b; ?B ?a ?b ==> ?thesis; ?a ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 3)),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("List.Cons_eq_map_conv",
     "(?x # ?xs = map ?f ?ys) =
      (EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("List.map_eq_Cons_conv",
     "(map ?f ?xs = ?y # ?ys) =
      (EX z zs. ?xs = z # zs & ?f z = ?y & map ?f zs = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Complex.bij_betw_roots_unity",
     "0 < ?n ==>
      bij_betw (%k. cis (2 * pi * real k / real ?n)) {..<?n}
       {z. z ^ ?n = 1}",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_app (template_hole 3, t_empty))
           ))),
    ("Set.Int_Collect_mono",
     "[| ?A <= ?B; !!x. x : ?A ==> ?P x --> ?Q x |]
      ==> ?A Int Collect ?P <= ?B Int Collect ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Predicate_Compile.containsE",
     "[| Predicate_Compile.contains ?A ?x;
         !!A' x'. [| ?A = A'; ?x = x'; ?x : ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("List.rtrancl_listrel1_ConsI2",
     "[| (?x, ?y) : ?r^*; (?xs, ?ys) : (listrel1 ?r)^* |]
      ==> (?x # ?xs, ?y # ?ys) : (listrel1 ?r)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Hilbert_Choice.inv_into_injective",
     "[| inv_into ?A ?f ?x = inv_into ?A ?f ?y; ?x : ?f ` ?A;
         ?y : ?f ` ?A |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex.complex_div_gt_0",
     "(0 < Re (?a / ?b)) = (0 < Re (?a * cnj ?b)) &
      (0 < Im (?a / ?b)) = (0 < Im (?a * cnj ?b))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, template_var 0)))))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))))))
         )),
    ("GCD.bezout_add_strong_nat",
     "?a ~= 0 ==> EX d x y. d dvd ?a & d dvd ?b & ?a * x = ?b * y + d",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("List.Cons_eq_map_D",
     "?x # ?xs = map ?f ?ys ==>
      EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("List.map_eq_Cons_D",
     "map ?f ?xs = ?y # ?ys ==>
      EX z zs. ?xs = z # zs & ?f z = ?y & map ?f zs = ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("C.C_case_cong",
     "(!!r'. ?r = C$r' ==> ?f$r' = ?g$r') ==> C_case$?f$?r = C_case$?g$?r",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 2)))),
    ("Transitive_Closure.relpow_finite_bounded1",
     "[| finite ?R; 0 < ?k |]
      ==> ?R ^^ ?k <= \<Union> ((^^) ?R ` {n. 0 < n & n <= card ?R})",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Complex.csqrt_unique",
     "[| ?w\<^sup>2 = ?z; 0 < Re ?w | Re ?w = 0 & 0 <= Im ?w |]
      ==> csqrt ?z = ?w",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 1),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9))),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 5, template_var 1)),
                    template_hole 6)),
                template_app
                 (template_app (template_hole 2, template_hole 6),
                  template_app (template_hole 1, template_var 1))))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Series.summable_Cauchy'",
     "[| \<forall>\<^sub>F m in sequentially.
            ALL n>=m. norm (sum ?f {m..<n}) <= ?g m;
         ?g \<longlonglongrightarrow> 0 |]
      ==> summable ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, t_empty), template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)),
              template_hole 4)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("GCD.Gcd_eq_Max",
     "[| finite ?M; ?M ~= {}; 0 ~: ?M |]
      ==> Gcd ?M = Max (INT m:?M. {d. d dvd m})",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 0)))))),
    ("Topological_Spaces.tendsto_within_open_NO_MATCH",
     "[| ?a : ?S; NO_MATCH UNIV ?S; open ?S |]
      ==> (?f \<longlongrightarrow> ?l) (at ?a within ?S) =
          ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("Complete_Lattices.INF2_E",
     "[| Inf (?B ` ?A) ?b ?c; ?B ?a ?b ?c ==> ?thesis;
         ?a ~: ?A ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_var 5, template_var 1),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.INT_E",
     "[| ?b : \<Inter> (?B ` ?A); ?b : ?B ?a ==> ?R; ?a ~: ?A ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Real_Vector_Spaces.Cauchy_iff2",
     "Cauchy ?X =
      (ALL j.
          EX M. ALL m>=M.
                   ALL n>=M.
                      \<bar>?X m - ?X n\<bar> < inverse (real (Suc j)))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Transitive_Closure.relpowp_fun_conv",
     "(?P ^^ ?n) ?x ?y =
      (EX f. f 0 = ?x & f ?n = ?y & (ALL i<?n. ?P (f i) (f (Suc i))))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Complex.Im_divide",
     "Im (?x / ?y) =
      (Im ?x * Re ?y - Re ?x * Im ?y) /
      ((Re ?y)\<^sup>2 + (Im ?y)\<^sup>2)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 10, template_var 1)),
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app (template_hole 10, template_var 0)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Complex.Re_divide",
     "Re (?x / ?y) =
      (Re ?x * Re ?y + Im ?x * Im ?y) /
      ((Re ?y)\<^sup>2 + (Im ?y)\<^sup>2)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 9, template_var 1)),
                 template_app (template_hole 9, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Finite_Set.finite_Collect_bounded_ex",
     "finite {y. ?P y} ==>
      finite {x. EX y. ?P y & ?Q x y} =
      (ALL y. ?P y --> finite {x. ?Q x y})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Product_Cpo.prod_chain_cases",
     "[| chain ?Y;
         !!A B. [| chain A; chain B; ?Y = (%i. (A i, B i)) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.open_Collect_less_Int",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> EX A. open A & A Int ?s = {x: ?s. ?f x < ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Hilbert_Choice.someI2_bex",
     "[| EX a:?A. ?P a; !!x. x : ?A & ?P x ==> ?Q x |]
      ==> ?Q (SOME x. x : ?A & ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("Transcendental.isCont_powser",
     "[| summable (%n. ?c n * ?K ^ n); norm ?x < norm ?K |]
      ==> isCont (%x. \<Sum>n. ?c n * x ^ n) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             t_empty)
           ))),
    ("Cont.cont_apply",
     "[| cont ?t; !!x. cont (?f x); !!y. cont (%x. ?f x y) |]
      ==> cont (%x. ?f x (?t x))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Limits.Cauchy_iff",
     "Cauchy ?X =
      (ALL e>0. EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < e)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("List.append_eq_Cons_conv",
     "(?ys @ ?zs = ?x # ?xs) =
      (?ys = [] & ?zs = ?x # ?xs |
       (EX ys'. ?ys = ?x # ys' & ys' @ ?zs = ?xs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_app (template_hole 0, t_empty))
           ))),
    ("List.Cons_eq_append_conv",
     "(?x # ?xs = ?ys @ ?zs) =
      (?ys = [] & ?x # ?xs = ?zs |
       (EX ys'. ?x # ys' = ?ys & ?xs = ys' @ ?zs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2)),
                   template_var 0))),
             template_app (template_hole 0, t_empty))
           ))),
    ("List.Cons_listrel1_Cons",
     "((?x # ?xs, ?y # ?ys) : listrel1 ?r) =
      ((?x, ?y) : ?r & ?xs = ?ys | ?x = ?y & (?xs, ?ys) : listrel1 ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1))),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 4),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_var 1)),
                 template_app (template_hole 6, template_var 0))))
           ))),
    ("GCD.lcm_unique_int",
     "(0 <= ?d &
       ?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_var 2)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_unique_int",
     "(0 <= ?d &
       ?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Cpo.lub_Pair",
     "[| chain ?A; chain ?B |]
      ==> (LUB i. (?A i, ?B i)) = (LUB i. ?A i, LUB i. ?B i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 4)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_hole 4))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_hole 4)))))),
    ("Cfun.lub_APP",
     "[| chain ?F; chain ?Y |]
      ==> (LUB i. ?F i$(?Y i)) = (LUB i. ?F i)$(LUB i. ?Y i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 4)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_hole 4))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_hole 4)))))),
    ("Limits.CauchyD",
     "[| Cauchy ?X; 0 < ?e |]
      ==> EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < ?e",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("GCD.gcd_nat_induct",
     "[| !!m. ?P m 0; !!m n. [| 0 < n; ?P n (m mod n) |] ==> ?P m n |]
      ==> ?P ?m ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("GCD.Gcd_in",
     "[| !!a b. [| a : ?A; b : ?A |] ==> gcd a b : ?A; ?A ~= {} |]
      ==> Gcd ?A : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Hilbert_Choice.finite_subset_Union",
     "[| finite ?A; ?A <= \<Union> ?\<B>;
         !!\<F>.
            [| finite \<F>; \<F> <= ?\<B>; ?A <= \<Union> \<F> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclpE",
     "[| ?r^** ?x ?z; ?x = ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^** y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclpE",
     "[| ?r^++ ?x ?z; ?r ?x ?z ==> ?P;
         !!y. [| ?r ?x y; ?r^++ y ?z |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.isCont_divide",
     "[| isCont ?f ?a; isCont ?g ?a; ?g ?a ~= (0::?'b) |]
      ==> isCont (%x. ?f x / ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Transcendental.isCont_powr",
     "[| isCont ?f ?a; isCont ?g ?a; ?f ?a ~= 0 |]
      ==> isCont (%x. ?f x powr ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Complete_Lattices.INT_anti_mono",
     "[| ?A <= ?B; !!x. x : ?A ==> ?f x <= ?g x |]
      ==> \<Inter> (?f ` ?B) <= \<Inter> (?g ` ?A)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 3))))),
    ("Complete_Lattices.UN_mono",
     "[| ?A <= ?B; !!x. x : ?A ==> ?f x <= ?g x |]
      ==> \<Union> (?f ` ?A) <= \<Union> (?g ` ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Deriv.isCont_If_ge",
     "[| continuous (at_left ?a) ?g;
         (?f \<longlongrightarrow> ?g ?a) (at_right ?a) |]
      ==> isCont (%x. if x <= ?a then ?g x else ?f x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_var 1, template_var 2))),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 3, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Transitive_Closure.relpow_Suc_E2",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R; (y, ?z) : ?R ^^ ?n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_Suc_E",
     "[| (?x, ?z) : ?R ^^ Suc ?n;
         !!y. [| (?x, y) : ?R ^^ ?n; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Partial_Order.chainE",
     "[| Complete_Partial_Order.chain ?ord ?S; ?x : ?S; ?y : ?S;
         ?ord ?x ?y ==> ?thesis; ?ord ?y ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("GCD.bezout_add_nat",
     "EX d x y.
         d dvd ?a & d dvd ?b & (?a * x = ?b * y + d | ?b * x = ?a * y + d)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("GCD.bezout1_nat",
     "EX d x y.
         d dvd ?a & d dvd ?b & (?a * x - ?b * y = d | ?b * x - ?a * y = d)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("List.Cons_in_lex",
     "((?x # ?xs, ?y # ?ys) : lex ?r) =
      ((?x, ?y) : ?r & length ?xs = length ?ys |
       ?x = ?y & (?xs, ?ys) : lex ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)),
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 1)),
                 template_app (template_hole 7, template_var 0))))
           ))),
    ("Complex.complex_inverse",
     "inverse (Complex ?a ?b) =
      Complex (?a / (?a\<^sup>2 + ?b\<^sup>2))
       (- ?b / (?a\<^sup>2 + ?b\<^sup>2))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))))),
    ("Limits.CauchyI",
     "(!!e. 0 < e ==> EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < e) ==>
      Cauchy ?X",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("GCD.coprime_crossproduct_int",
     "[| coprime ?a ?d; coprime ?b ?c |]
      ==> (\<bar>?a\<bar> * \<bar>?c\<bar> =
           \<bar>?b\<bar> * \<bar>?d\<bar>) =
          (\<bar>?a\<bar> = \<bar>?b\<bar> &
           \<bar>?c\<bar> = \<bar>?d\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 2))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 3)),
                   template_app (template_hole 1, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 1, template_var 2)))
             )))),
    ("List.append_Cons_eq_iff",
     "[| ?x ~: set ?xs; ?x ~: set ?ys |]
      ==> (?xs @ ?x # ?ys = ?xs' @ ?x # ?ys') = (?xs = ?xs' & ?ys = ?ys')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0))),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))
             )))),
    ("Transitive_Closure.single_valued_confluent",
     "[| single_valued ?r; (?x, ?y) : ?r^*; (?x, ?z) : ?r^* |]
      ==> (?y, ?z) : ?r^* | (?z, ?y) : ?r^*",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 3))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app (template_hole 1, template_var 3)))
           ))),
    ("Cfun.cont2cont_Let",
     "[| cont ?f; !!y. cont (%x. ?g x y); !!x. cont (?g x) |]
      ==> cont (%x. Let (?f x) (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Deriv.CARAT_DERIV",
     "(?f has_field_derivative ?l) (at ?x) =
      (EX g. (ALL z. ?f z - ?f ?x = g z * (z - ?x)) &
             isCont g ?x & g ?x = ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 7)),
       template_app (template_hole 6, t_empty))),
    ("Transitive_Closure.relpow_fun_conv",
     "((?a, ?b) : ?R ^^ ?n) =
      (EX f. f 0 = ?a & f ?n = ?b & (ALL i<?n. (f i, f (Suc i)) : ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("GCD.bezw_non_0",
     "0 < ?y ==>
      bezw ?x ?y =
      (snd (bezw ?y (?x mod ?y)),
       fst (bezw ?y (?x mod ?y)) -
       snd (bezw ?y (?x mod ?y)) * int (?x div ?y))",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 1)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))))))),
    ("ConvexPD.convex_pd_induct",
     "[| adm ?P; !!x. ?P {x}\<natural>;
         !!xs ys. [| ?P xs; ?P ys |] ==> ?P (xs \<union>\<natural> ys) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Complete_Lattices.image_INT",
     "[| inj_on ?f ?C; ALL x:?A. ?B x <= ?C; ?j : ?A |]
      ==> ?f ` \<Inter> (?B ` ?A) = (INT x:?A. ?f ` ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Set.equalityCE",
     "[| ?A = ?B; [| ?c : ?A; ?c : ?B |] ==> ?P;
         [| ?c ~: ?A; ?c ~: ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)
                   )
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)
                     )
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_Suc_D2'",
     "ALL x y z.
         (x, y) : ?R ^^ ?n & (y, z) : ?R -->
         (EX w. (x, w) : ?R & (w, z) : ?R ^^ ?n)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Transitive_Closure.trancl_insert2",
     "(insert (?a, ?b) ?r)^+ =
      ?r^+ Un
      {(x, y). ((x, ?a) : ?r^+ | x = ?a) & ((?b, y) : ?r^+ | y = ?b)}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Complex.complex_unimodular_polar",
     "[| cmod ?z = 1;
         !!t. [| 0 <= t; t < 2 * pi; ?z = Complex (cos t) (sin t) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Conditionally_Complete_Lattices.cSup_eq",
     "[| !!x. x : ?X ==> x <= ?a;
         !!y. (!!x. x : ?X ==> x <= y) ==> ?a <= y |]
      ==> Sup ?X = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Conditionally_Complete_Lattices.cInf_eq",
     "[| !!x. x : ?X ==> ?a <= x;
         !!y. (!!x. x : ?X ==> y <= x) ==> y <= ?a |]
      ==> Inf ?X = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.Lcm_in_lcm_closed_set_nat",
     "[| finite ?M; ?M ~= {};
         !!m n. [| m : ?M; n : ?M |] ==> lcm m n : ?M |]
      ==> Lcm ?M : ?M",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Transitive_Closure.rtranclp_induct",
     "[| ?r^** ?a ?b; ?P ?a;
         !!y z. [| ?r^** ?a y; ?r y z; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Transitive_Closure.converse_rtranclp_induct",
     "[| ?r^** ?a ?b; ?P ?b;
         !!y z. [| ?r y z; ?r^** z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("List.filter_eq_Cons_iff",
     "(filter ?P ?ys = ?x # ?xs) =
      (EX us vs.
          ?ys = us @ ?x # vs &
          (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("List.Cons_eq_filter_iff",
     "(?x # ?xs = filter ?P ?ys) =
      (EX us vs.
          ?ys = us @ ?x # vs &
          (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Cont.contI2",
     "[| monofun ?f;
         !!Y. [| chain Y; chain (%i. ?f (Y i)) |]
              ==> ?f (LUB i. Y i) << (LUB i. ?f (Y i)) |]
      ==> cont ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complete_Partial_Order.chain_imageI",
     "[| Complete_Partial_Order.chain ?le_a ?Y;
         !!x y. [| x : ?Y; y : ?Y; ?le_a x y |] ==> ?le_b (?f x) (?f y) |]
      ==> Complete_Partial_Order.chain ?le_b (?f ` ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Series.Cauchy_product_sums",
     "[| summable (%k. norm (?a k)); summable (%k. norm (?b k)) |]
      ==> (%k. SUM i<=k. ?a i * ?b (k - i)) sums
          ((\<Sum>k. ?a k) * (\<Sum>k. ?b k))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 0, t_empty)),
               template_app (template_hole 0, t_empty)))
           ))),
    ("List.extract_Cons_code",
     "List.extract ?P (?x # ?xs) =
      (if ?P ?x then Some ([], ?x, ?xs)
       else case List.extract ?P ?xs of None => None
            | Some (ys, y, zs) => Some (?x # ys, y, zs))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 0))))),
    ("List.filter_eq_ConsD",
     "filter ?P ?ys = ?x # ?xs ==>
      EX us vs.
         ?ys = us @ ?x # vs &
         (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("List.Cons_eq_filterD",
     "?x # ?xs = filter ?P ?ys ==>
      EX us vs.
         ?ys = us @ ?x # vs &
         (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Series.Cauchy_product",
     "[| summable (%k. norm (?a k)); summable (%k. norm (?b k)) |]
      ==> (\<Sum>k. ?a k) * (\<Sum>k. ?b k) =
          (\<Sum>k. SUM i<=k. ?a i * ?b (k - i))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty)),
         template_app (template_hole 3, t_empty)))),
    ("Cfun.lub_LAM",
     "[| !!x. chain (%i. ?F i x); !!i. cont (?F i) |]
      ==> (LUB i. LAM x. ?F i x) = (LAM x. LUB i. ?F i x)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_hole 2)),
         template_app (template_hole 3, t_empty)))),
    ("Hilbert_Choice.funpow_inj_finite",
     "[| inj ?p; finite {y. EX n. y = (?p ^^ n) ?x};
         !!n. [| 0 < n; (?p ^^ n) ?x = ?x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.rtranclE",
     "[| (?a, ?b) : ?r^*; ?a = ?b ==> ?thesis;
         !!y. [| (?a, y) : ?r^*; (y, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclE",
     "[| (?x, ?z) : ?r^*; ?x = ?z ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^* |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_var 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.isCont_bounded",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. ALL x. ?a <= x & x <= ?b --> ?f x <= M",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.rtrancl_Un_separatorE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (?a, x) : ?P^* --> (x, y) : ?Q --> x = y |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Transitive_Closure.rtrancl_Un_separator_converseE",
     "[| (?a, ?b) : (?P Un ?Q)^*;
         ALL x y. (x, ?b) : ?P^* --> (y, x) : ?Q --> y = x |]
      ==> (?a, ?b) : ?P^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("ConvexPD.convex_pd_induct1",
     "[| adm ?P; !!x. ?P {x}\<natural>;
         !!x ys.
            [| ?P {x}\<natural>; ?P ys |]
            ==> ?P ({x}\<natural> \<union>\<natural> ys) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Hilbert_Choice.inv_into_comp",
     "[| inj_on ?f (?g ` ?A); inj_on ?g ?A; ?x : ?f ` ?g ` ?A |]
      ==> inv_into ?A (?f o ?g) ?x =
          (inv_into ?A ?g o inv_into (?g ` ?A) ?f) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_var 1)),
               template_var 3)),
           template_var 0)))),
    ("GCD.Euclid_induct",
     "[| !!a b. ?P a b = ?P b a; !!a. ?P a 0;
         !!a b. ?P a b --> ?P a (a + b) |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("List.Cons_lenlex_iff",
     "((?m # ?ms, ?n # ?ns) : lenlex ?r) =
      (length ?ms < length ?ns |
       length ?ms = length ?ns & (?m, ?n) : ?r |
       ?m = ?n & (?ms, ?ns) : lenlex ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1))),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 3)),
                 template_app (template_hole 5, template_var 1))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 5, template_var 3)),
                       template_app (template_hole 5, template_var 1))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 2)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 3),
                       template_var 1)),
                   template_app (template_hole 8, template_var 0)))))
           ))),
    ("Transcendental.isCont_powser'",
     "[| isCont ?f ?a; summable (%n. ?c n * ?K ^ n);
         norm (?f ?a) < norm ?K |]
      ==> isCont (%x. \<Sum>n. ?c n * ?f x ^ n) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_than,
          template_app
           (template_hole 1, template_app (template_var 2, template_var 3)),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_hole 6)),
             t_empty)
           ))),
    ("Transitive_Closure.tranclE",
     "[| (?a, ?b) : ?r^+; (?a, ?b) : ?r ==> ?thesis;
         !!c. [| (?a, c) : ?r^+; (c, ?b) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_tranclE",
     "[| (?x, ?z) : ?r^+; (?x, ?z) : ?r ==> ?P;
         !!y. [| (?x, y) : ?r; (y, ?z) : ?r^+ |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Complex.series_comparison_complex",
     "[| summable ?g; !!n. ?g n : \<real>; !!n. 0 <= Re (?g n);
         !!n. ?N <= n ==> norm (?f n) <= cmod (?g n) |]
      ==> summable ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List.listrel_Cons2",
     "[| (?xs, ?y # ?ys) : listrel ?r;
         !!x xs.
            [| ?xs = x # xs; (x, ?y) : ?r; (xs, ?ys) : listrel ?r |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("List.listrel_Cons1",
     "[| (?y # ?ys, ?xs) : listrel ?r;
         !!y ys.
            [| ?xs = y # ys; (?y, y) : ?r; (?ys, ys) : listrel ?r |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("List.Cons_in_shuffles_iff",
     "(?z # ?zs : shuffles ?xs ?ys) =
      (?xs ~= [] & hd ?xs = ?z & ?zs : shuffles (tl ?xs) ?ys |
       ?ys ~= [] & hd ?ys = ?z & ?zs : shuffles ?xs (tl ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1)),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 0, template_var 1)),
                       template_var 0))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("Complex.bij_betw_nth_root_unity",
     "[| ?c ~= 0; 0 < ?n |]
      ==> bij_betw
           ((*) (complex_of_real (root ?n (cmod ?c)) *
                 cis (Arg ?c / real ?n)))
           {z. z ^ ?n = 1} {z. z ^ ?n = ?c}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 14)),
        template_inequation (less_than, template_hole 12, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty),
               template_app (template_hole 2, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Transitive_Closure.rtrancl_induct",
     "[| (?a, ?b) : ?r^*; ?P ?a;
         !!y z. [| (?a, y) : ?r^*; (y, z) : ?r; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 3)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.converse_rtrancl_induct",
     "[| (?a, ?b) : ?r^*; ?P ?b;
         !!y z. [| (y, z) : ?r; (z, ?b) : ?r^*; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Product_Type.Collect_split_mono_strong",
     "[| ?X = fst ` ?A; ?Y = snd ` ?A;
         ALL a:?X. ALL b:?Y. ?P a b --> ?Q a b; ?A <= {(x, y). ?P x y} |]
      ==> ?A <= {(x, y). ?Q x y}",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4), t_empty)
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 1)))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Conditionally_Complete_Lattices.cSUP_eq_cINF_D",
     "[| Sup (?f ` ?A) = Inf (?f ` ?A); bdd_above (?f ` ?A);
         bdd_below (?f ` ?A); ?a : ?A |]
      ==> ?f ?a = Inf (?f ` ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 4, t_empty), template_var 1))),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, t_empty), template_var 1))))),
    ("Transitive_Closure.converse_tranclp_induct",
     "[| ?r^++ ?a ?b; !!y. ?r y ?b ==> ?P y;
         !!y z. [| ?r y z; ?r^++ z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Transitive_Closure.tranclp_induct",
     "[| ?r^++ ?a ?b; !!y. ?r ?a y ==> ?P y;
         !!y z. [| ?r^++ ?a y; ?r y z; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("GCD.Lcm_eq_Max_nat",
     "[| finite ?M; ?M ~= {}; 0 ~: ?M;
         !!m n. [| m : ?M; n : ?M |] ==> lcm m n : ?M |]
      ==> Lcm ?M = Max ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)
                )
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.bezout_gcd_nat'",
     "EX x y.
         ?b * y <= ?a * x & ?a * x - ?b * y = gcd ?a ?b |
         ?a * y <= ?b * x & ?b * x - ?a * y = gcd ?a ?b",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("ConvexPD.convex_plus_below_plus_iff",
     "(?xs \<union>\<natural> ?ys << ?zs \<union>\<natural> ?ws) =
      (convex_to_upper$(?xs \<union>\<natural> ?ys) <<
       convex_to_upper$(?zs \<union>\<natural> ?ws) &
       convex_to_lower$(?xs \<union>\<natural> ?ys) <<
       convex_to_lower$(?zs \<union>\<natural> ?ws))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 1)),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 1)),
               template_var 0)))))),
    ("Transcendental.isCont_log",
     "[| isCont ?f ?a; isCont ?g ?a; 0 < ?f ?a; ?f ?a ~= 1; 0 < ?g ?a |]
      ==> isCont (%x. log (?f x) (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)),
              template_var 0)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 1, template_var 2)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 2),
              template_hole 1)
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 6)),
             t_empty)
           ))),
    ("GCD.mult_inj_if_coprime_nat",
     "[| inj_on ?f ?A; inj_on ?g ?B;
         !!a b. [| a : ?A; b : ?B |] ==> coprime (?f a) (?g b) |]
      ==> inj_on (%(a, b). ?f a * ?g b) (?A \<times> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 2), t_empty))
           ))),
    ("Hilbert_Choice.dependent_nat_choice",
     "[| EX x. ?P 0 x; !!x n. ?P n x ==> EX y. ?P (Suc n) y & ?Q n x y |]
      ==> EX f. ALL n. ?P n (f n) & ?Q n (f n) (f (Suc n))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.isCont_inverse_function",
     "[| 0 < ?d; !!z. \<bar>z - ?x\<bar> <= ?d ==> ?g (?f z) = z;
         !!z. \<bar>z - ?x\<bar> <= ?d ==> isCont ?f z |]
      ==> isCont ?g (?f ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Transitive_Closure.relpowp_E2",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; ?P ?x y; (?P ^^ m) y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpowp_E",
     "[| (?P ^^ ?n) ?x ?z; [| ?n = 0; ?x = ?z |] ==> ?Q;
         !!y m. [| ?n = Suc m; (?P ^^ m) ?x y; ?P y ?z |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 4)],
          template_implication
           ([template_equation (template_var 2, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.inj_on_UNION_chain",
     "[| !!i j. [| i : ?I; j : ?I |] ==> ?A i <= ?A j | ?A j <= ?A i;
         !!i. i : ?I ==> inj_on ?f (?A i) |]
      ==> inj_on ?f (\<Union> (?A ` ?I))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("List.zip_eq_ConsE",
     "[| zip ?xs ?ys = ?xy # ?xys;
         !!x xs' y ys'.
            [| ?xs = x # xs'; ?ys = y # ys'; ?xy = (x, y);
               ?xys = zip xs' ys' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_rtranclpE2",
     "[| ?r^** (?xa, ?xb) (?za, ?zb); (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ?r (?xa, ?xb) (a, b); ?r^** (a, b) (?za, ?zb) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.converse_trancl_induct",
     "[| (?a, ?b) : ?r^+; !!y. (y, ?b) : ?r ==> ?P y;
         !!y z. [| (y, z) : ?r; (z, ?b) : ?r^+; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Transitive_Closure.trancl_induct",
     "[| (?a, ?b) : ?r^+; !!y. (?a, y) : ?r ==> ?P y;
         !!y z. [| (?a, y) : ?r^+; (y, z) : ?r; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("List.Cons_listrel1E2",
     "[| (?xs, ?y # ?ys) : listrel1 ?r;
         !!x. [| ?xs = x # ?ys; (x, ?y) : ?r |] ==> ?R;
         !!zs. [| ?xs = ?y # zs; (zs, ?ys) : listrel1 ?r |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2))),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("List.Cons_listrel1E1",
     "[| (?x # ?xs, ?ys) : listrel1 ?r;
         !!y. [| ?ys = y # ?xs; (?x, y) : ?r |] ==> ?R;
         !!zs. [| ?ys = ?x # zs; (?xs, zs) : listrel1 ?r |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_E2",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R; (y, ?z) : ?R ^^ m |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Transitive_Closure.relpow_E",
     "[| (?x, ?z) : ?R ^^ ?n; [| ?n = 0; ?x = ?z |] ==> ?P;
         !!y m. [| ?n = Suc m; (?x, y) : ?R ^^ m; (y, ?z) : ?R |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.isCont_eq_Lb",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> M <= ?f x) &
                (EX x>=?a. x <= ?b & ?f x = M)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Limits.isCont_eq_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> ?f x <= M) &
                (EX x>=?a. x <= ?b & ?f x = M)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Product_Cpo.cont2cont_case_prod",
     "[| !!a b. cont (%x. ?f x a b); !!x b. cont (%a. ?f x a b);
         !!x a. cont (?f x a); cont ?g |]
      ==> cont (%x. case ?g x of (a, b) => ?f x a b)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Conditionally_Complete_Lattices.cSUP_UNION",
     "[| ?A ~= {}; !!x. x : ?A ==> ?B x ~= {};
         bdd_above (UN x:?A. ?f ` ?B x) |]
      ==> Sup (?f ` \<Union> (?B ` ?A)) = (SUP x\<in>?A. Sup (?f ` ?B x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_var 2)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Conditionally_Complete_Lattices.cINF_UNION",
     "[| ?A ~= {}; !!x. x : ?A ==> ?B x ~= {};
         bdd_below (UN x:?A. ?f ` ?B x) |]
      ==> Inf (?f ` \<Union> (?B ` ?A)) = (INF x\<in>?A. Inf (?f ` ?B x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_var 2)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Real_Vector_Spaces.metric_isCont_LIM_compose2",
     "[| isCont ?f ?a; ?g \<midarrow>?f ?a\<rightarrow> ?l;
         EX d>0. ALL x. x ~= ?a & dist x ?a < d --> ?f x ~= ?f ?a |]
      ==> (%x. ?g (?f x)) \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_hole 15)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 1),
                template_app (template_hole 13, template_var 0)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_var 2, template_var 3)),
                template_hole 11))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 13, template_var 0)),
             template_app
              (template_app (template_hole 16, template_var 3),
               template_hole 15))
           ))),
    ("Limits.isCont_inverse_function2",
     "[| ?a < ?x; ?x < ?b; !!z. [| ?a <= z; z <= ?b |] ==> ?g (?f z) = z;
         !!z. [| ?a <= z; z <= ?b |] ==> isCont ?f z |]
      ==> isCont ?g (?f ?x)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 3)),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Complex.Complex_divide",
     "?x / ?y =
      Complex
       ((Re ?x * Re ?y + Im ?x * Im ?y) /
        ((Re ?y)\<^sup>2 + (Im ?y)\<^sup>2))
       ((Im ?x * Re ?y - Re ?x * Im ?y) /
        ((Re ?y)\<^sup>2 + (Im ?y)\<^sup>2))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 1)),
                     template_app (template_hole 6, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 6, template_var 0))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_app (template_hole 5, template_var 0)))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 6, template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))))),
    ("Limits.isCont_LIM_compose2",
     "[| isCont ?f ?a; ?g \<midarrow>?f ?a\<rightarrow> ?l;
         EX d>0. ALL x. x ~= ?a & norm (x - ?a) < d --> ?f x ~= ?f ?a |]
      ==> (%x. ?g (?f x)) \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_hole 16)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 1),
                template_app (template_hole 14, template_var 0)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_var 2, template_var 3)),
                template_hole 12))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 14, template_var 0)),
             template_app
              (template_app (template_hole 17, template_var 3),
               template_hole 16))
           ))),
    ("Transitive_Closure.rtranclp_induct2",
     "[| ?r^** (?ax, ?ay) (?bx, ?by); ?P ?ax ?ay;
         !!a b aa ba.
            [| ?r^** (?ax, ?ay) (a, b); ?r (a, b) (aa, ba); ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 4), template_var 3)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Transitive_Closure.converse_rtranclp_induct2",
     "[| ?r^** (?ax, ?ay) (?bx, ?by); ?P ?bx ?by;
         !!a b aa ba.
            [| ?r (a, b) (aa, ba); ?r^** (aa, ba) (?bx, ?by); ?P aa ba |]
            ==> ?P a b |]
      ==> ?P ?ax ?ay",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Transitive_Closure.converse_rtranclE2",
     "[| ((?xa, ?xb), ?za, ?zb) : ?r^*; (?xa, ?xb) = (?za, ?zb) ==> ?P;
         !!a b.
            [| ((?xa, ?xb), a, b) : ?r; ((a, b), ?za, ?zb) : ?r^* |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.bij_betw_UNION_chain",
     "[| !!i j. [| i : ?I; j : ?I |] ==> ?A i <= ?A j | ?A j <= ?A i;
         !!i. i : ?I ==> bij_betw ?f (?A i) (?A' i) |]
      ==> bij_betw ?f (\<Union> (?A ` ?I)) (\<Union> (?A' ` ?I))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 3)))
           ))),
    ("Transitive_Closure.tranclp_trans_induct",
     "[| ?r^++ ?x ?y; !!x y. ?r x y ==> ?P x y;
         !!x y z. [| ?r^++ x y; ?P x y; ?r^++ y z; ?P y z |] ==> ?P x z |]
      ==> ?P ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Limits.isCont_has_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> ?f x <= M) &
                (ALL N<M. EX x>=?a. x <= ?b & N < ?f x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Hilbert_Choice.finite_mono_strict_prefix_implies_finite_fixpoint",
     "[| !!i. ?f i <= ?S; finite ?S;
         EX N. (ALL n<=N. ALL m<=N. m < n --> ?f m < ?f n) &
               (ALL n>=N. ?f N = ?f n) |]
      ==> ?f (card ?S) = \<Union> (range ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("Transitive_Closure.rtrancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^*; ?P ?ax ?ay;
         !!a b aa ba.
            [| ((?ax, ?ay), a, b) : ?r^*; ((a, b), aa, ba) : ?r; ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 5), template_var 4)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Transitive_Closure.converse_rtrancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^*; ?P ?bx ?by;
         !!a b aa ba.
            [| ((a, b), aa, ba) : ?r; ((aa, ba), ?bx, ?by) : ?r^*;
               ?P aa ba |]
            ==> ?P a b |]
      ==> ?P ?ax ?ay",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 3), template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 5), template_var 4)
           ))),
    ("Hilbert_Choice.finite_mono_remains_stable_implies_strict_prefix",
     "[| finite (range ?f); incseq ?f;
         ALL n. ?f n = ?f (Suc n) --> ?f (Suc n) = ?f (Suc (Suc n)) |]
      ==> EX N. (ALL n<=N. ALL m<=N. m < n --> ?f m < ?f n) &
                (ALL n>=N. ?f N = ?f n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Transitive_Closure.trancl_trans_induct",
     "[| (?x, ?y) : ?r^+; !!x y. (x, y) : ?r ==> ?P x y;
         !!x y z.
            [| (x, y) : ?r^+; ?P x y; (y, z) : ?r^+; ?P y z |] ==> ?P x z |]
      ==> ?P ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("GCD.bezout_lemma_nat",
     "[| ?d dvd ?a; ?d dvd ?b;
         ?a * ?x = ?b * ?y + ?d | ?b * ?x = ?a * ?y + ?d |]
      ==> EX x y.
             ?d dvd ?a &
             ?d dvd ?a + ?b &
             (?a * x = (?a + ?b) * y + ?d | (?a + ?b) * x = ?a * y + ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 0)),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 0)),
                  template_var 4)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transitive_Closure.tranclp_induct2",
     "[| ?r^++ (?ax, ?ay) (?bx, ?by);
         !!a b. ?r (?ax, ?ay) (a, b) ==> ?P a b;
         !!a b aa ba.
            [| ?r^++ (?ax, ?ay) (a, b); ?r (a, b) (aa, ba); ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Limits.isCont_Lb_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX L M.
             (ALL x. ?a <= x & x <= ?b --> L <= ?f x & ?f x <= M) &
             (ALL y. L <= y & y <= M --> (EX x>=?a. x <= ?b & ?f x = y))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Inequalities.Chebyshev_sum_upper_nat",
     "[| !!i j. [| i <= j; j < ?n |] ==> ?a i <= ?a j;
         !!i j. [| i <= j; j < ?n |] ==> ?b j <= ?b i |]
      ==> ?n * (SUM i = 0..<?n. ?a i * ?b i)
          <= sum ?a {0..<?n} * sum ?b {0..<?n}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)))))),
    ("Inequalities.Chebyshev_sum_upper",
     "[| !!i j. [| i <= j; j < ?n |] ==> ?a i <= ?a j;
         !!i j. [| i <= j; j < ?n |] ==> ?b j <= ?b i |]
      ==> of_nat ?n * (SUM k = 0..<?n. ?a k * ?b k)
          <= sum ?a {0..<?n} * sum ?b {0..<?n}",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)))))),
    ("ConvexPD.convex_le_induct",
     "[| ?t \<le>\<natural> ?u; !!t u v. [| ?P t u; ?P u v |] ==> ?P t v;
         !!a b. a << b ==> ?P (PDUnit a) (PDUnit b);
         !!t u v w. [| ?P t v; ?P u w |] ==> ?P (PDPlus t u) (PDPlus v w) |]
      ==> ?P ?t ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("GCD.gcd_cases_int",
     "[| [| 0 <= ?x; 0 <= ?y |] ==> ?P (gcd ?x ?y);
         [| 0 <= ?x; ?y <= 0 |] ==> ?P (gcd ?x (- ?y));
         [| ?x <= 0; 0 <= ?y |] ==> ?P (gcd (- ?x) ?y);
         [| ?x <= 0; ?y <= 0 |] ==> ?P (gcd (- ?x) (- ?y)) |]
      ==> ?P (gcd ?x ?y)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app (template_hole 0, template_var 1)))
                )))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("GCD.lcm_cases_int",
     "[| [| 0 <= ?x; 0 <= ?y |] ==> ?P (lcm ?x ?y);
         [| 0 <= ?x; ?y <= 0 |] ==> ?P (lcm ?x (- ?y));
         [| ?x <= 0; 0 <= ?y |] ==> ?P (lcm (- ?x) ?y);
         [| ?x <= 0; ?y <= 0 |] ==> ?P (lcm (- ?x) (- ?y)) |]
      ==> ?P (lcm ?x ?y)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_hole 2, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_hole 2, template_var 1)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 1))
                ))),
        template_implication
         ([template_inequation
            (less_equals, template_var 2, template_hole 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_hole 2)],
            template_predicate
             (
                template_app
                 (template_var 0,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app (template_hole 0, template_var 1)))
                )))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Transitive_Closure.trancl_induct2",
     "[| ((?ax, ?ay), ?bx, ?by) : ?r^+;
         !!a b. ((?ax, ?ay), a, b) : ?r ==> ?P a b;
         !!a b aa ba.
            [| ((?ax, ?ay), a, b) : ?r^+; ((a, b), aa, ba) : ?r; ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Conditionally_Complete_Lattices.interval_cases",
     "(!!a b x. [| a : ?S; b : ?S; a <= x; x <= b |] ==> x : ?S) ==>
      EX a b.
         ?S = {} |
         ?S = UNIV |
         ?S = {..<b} |
         ?S = {..b} |
         ?S = {a<..} |
         ?S = {a..} |
         ?S = {a<..<b} | ?S = {a<..b} | ?S = {a..<b} | ?S = {a..b}",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_hole 12, t_empty))))]
