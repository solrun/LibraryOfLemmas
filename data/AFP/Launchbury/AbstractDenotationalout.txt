Loading theory "Draft.Pointwise" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap" via "Draft.HOLCF-Utils")
Loading theory "Draft.AList-Utils" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap")
Loading theory "HOL-Library.Stream" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate rewrite rule:
### (PROP ?P ==> True) == True
### Ignoring duplicate rewrite rule:
### (False ==> ?P) == True
### theory "Draft.Pointwise"
### 0.033s elapsed time, 0.161s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.653s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.AList-Utils"
### 0.172s elapsed time, 0.700s cpu time, 0.049s GC time
Loading theory "Draft.Nominal-Utils" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.AList-Utils-Nominal")
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.021s cpu time, 0.049s GC time
Loading theory "Draft.Vars" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.Terms")
### theory "Draft.Vars"
### 0.083s elapsed time, 0.311s cpu time, 0.087s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Nominal-Utils"
### 0.409s elapsed time, 1.616s cpu time, 0.146s GC time
Loading theory "Draft.AList-Utils-Nominal" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.855s elapsed time, 3.383s cpu time, 0.318s GC time
Loading theory "Draft.HOLCF-Join" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap" via "Draft.Env" via "Draft.HOLCF-Join-Classes")
Found termination order: "size <*mlex*> {}"
class cpo = po +
  assumes "cpo": "!!S. chain S ==> EX x. range S <<| x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
class pcpo = cpo +
  assumes "least": "EX x. ALL y. x << y"
### theory "Draft.HOLCF-Join"
### 0.304s elapsed time, 1.089s cpu time, 0.558s GC time
Loading theory "Draft.HOLCF-Join-Classes" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap" via "Draft.Env")
### theory "Draft.AList-Utils-Nominal"
### 0.645s elapsed time, 2.414s cpu time, 0.718s GC time
Loading theory "Draft.Terms" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational")
Found termination order: "size <*mlex*> {}"
class Finite_Join_cpo = cpo +
  assumes "all_compatible": "!!x y. compatible x y"
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (type, Finite_Join_cpo) Finite_Join_cpo
### theory "HOL-Library.BigO"
### 0.920s elapsed time, 3.503s cpu time, 0.778s GC time
Loading theory "Draft.HOLCF-Utils" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap")
instantiation
  cfun :: (cpo, Finite_Join_cpo) Finite_Join_cpo
Found termination order: "size <*mlex*> {}"
class is_unit = type +
  fixes unit :: "'a"
  assumes "is_unit": "!!x. x = unit"
instantiation
  unit :: is_unit
  unit_unit == unit :: unit
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class Join_cpo = cpo +
  assumes "exists_lub": "!!S. EX u. S <<| u"
class Join_cpo = cpo +
  assumes "exists_lub": "!!S. EX u. S <<| u"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.HOLCF-Utils"
### 0.420s elapsed time, 1.653s cpu time, 0.159s GC time
Loading theory "Draft.Nominal-HOLCF" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.HasESem")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.HOLCF-Join-Classes"
### 0.695s elapsed time, 2.734s cpu time, 0.196s GC time
Loading theory "Draft.Env" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.EvalHeap")
### theory "Draft.Env"
### 0.259s elapsed time, 1.009s cpu time, 0.150s GC time
Loading theory "Draft.Env-HOLCF" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics" via "Draft.HasESem")
Found termination order: "size <*mlex*> {}"
class cont_pt = pt + cpo +
  assumes "perm_cont": "!!p. cont (permute p)"
### theory "HOL-Library.Tree"
### 2.150s elapsed time, 8.339s cpu time, 1.220s GC time
Loading theory "Draft.Templates" (required by "Draft.AbstractDenotationalTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate rewrite rule:
### cont ?f1 ==> cont (%x. ?f1 x f|` ?S1) == True
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AbstractDenotationalTemplates")
### theory "Draft.Env-HOLCF"
### 0.252s elapsed time, 0.996s cpu time, 0.046s GC time
Loading theory "Draft.Iterative" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics")
locale iterative
  fixes \<rho> :: "'a => 'b"
    and e1 :: "('a => 'b) -> 'a => 'b"
    and e2 :: "('a => 'b) -> 'b"
    and S :: "'a set"
    and x :: "'a"
  assumes "iterative S x"
### theory "Draft.Iterative"
### 0.122s elapsed time, 0.476s cpu time, 0.068s GC time
Loading theory "Draft.EvalHeap" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics")
instantiation
  cfun :: (cont_pt, cont_pt) pt
  permute_cfun == permute :: perm => ('a -> 'b) => 'a -> 'b
instantiation
  u :: (cont_pt) pt
  permute_u == permute :: perm => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  lift :: (pt) pt
  permute_lift == permute :: perm => 'a lift => 'a lift
### theory "Draft.Nominal-HOLCF"
### 1.337s elapsed time, 5.248s cpu time, 0.458s GC time
Loading theory "Draft.Env-Nominal" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.702s elapsed time, 2.759s cpu time, 0.261s GC time
Loading theory "Draft.HasESem" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational" via "Draft.HeapSemantics")
locale has_ESem
  fixes ESem :: "'exp => ('var => 'value) -> 'value"
locale has_ignore_fresh_ESem
  fixes ESem :: "'a => ('b => 'c) -> 'c"
  assumes "has_ignore_fresh_ESem ESem"
### theory "Draft.HasESem"
### 0.339s elapsed time, 1.335s cpu time, 0.097s GC time
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Env-Nominal"
### 0.513s elapsed time, 1.898s cpu time, 0.134s GC time
### theory "Draft.EvalHeap"
### 1.141s elapsed time, 4.256s cpu time, 0.360s GC time
Loading theory "Draft.HeapSemantics" (required by "Draft.AbstractDenotationalTemplates" via "Draft.AbstractDenotational")
locale has_ESem
  fixes ESem :: "'exp => ('var => 'value) -> 'value"
locale has_ignore_fresh_ESem
  fixes ESem :: "'a => ('b => 'c) -> 'c"
  assumes "has_ignore_fresh_ESem ESem"
### theory "Draft.HeapSemantics"
### 0.957s elapsed time, 1.940s cpu time, 0.095s GC time
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Terms"
### 4.932s elapsed time, 12.814s cpu time, 0.969s GC time
Loading theory "Draft.AbstractDenotational" (required by "Draft.AbstractDenotationalTemplates")
locale semantic_domain
  fixes Fn :: "('Value -> 'Value) -> 'Value"
    and Fn_project :: "'Value -> 'Value -> 'Value"
    and B :: "bool discr -> 'Value"
    and B_project :: "'Value -> 'Value -> 'Value -> 'Value"
    and tick :: "'Value -> 'Value"
### Additional type variable(s) in specification of "ESem_rel": 'Value
### Additional type variable(s) in specification of "ESem_dom": 'Value
### theory "Draft.AbstractDenotational"
### 0.586s elapsed time, 0.689s cpu time, 0.073s GC time
Loading theory "Draft.AbstractDenotationalTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.AbstractDenotationalTemplates"
### 0.642s elapsed time, 0.804s cpu time, 0.064s GC time
val it = (): unit
