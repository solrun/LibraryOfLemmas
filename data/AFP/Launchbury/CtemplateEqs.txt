   [("Fun_Cpo.app_strict", "\<bottom> ?x = \<bottom>",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Cfun.ID1", "ID$?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Cfun.Rep_cfun_strict1", "\<bottom>$?x = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Countable.from_nat_to_nat", "from_nat (to_nat ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cSup_lessThan", "Sup {..<?x} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Conditionally_Complete_Lattices.cInf_greaterThan", "Inf {?x<..} = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.relpowp_1", "?P ^^ 1 = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_int", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_left_nat", "gcd 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("GCD.gcd_1_nat", "gcd ?m 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("GCD.gcd_0_nat", "gcd ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("GCD.gcd_idem_nat", "gcd ?x ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Complete_Lattices.Union_Pow_eq", "\<Union> (Pow ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.Domain_rtrancl", "Domain (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transitive_Closure.Range_rtrancl", "Range (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Transitive_Closure.relpow_1", "?R ^^ 1 = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.ntrancl_Zero", "ntrancl 0 ?R = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Conditionally_Complete_Lattices.bdd_above_nat",
     "bdd_above ?X = finite ?X",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complete_Lattices.mem_simps", "(?c : {}) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Map.map_of_Cons_code", "map_of [] ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Compact_Basis.PDPlus_absorb", "PDPlus ?t ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Transitive_Closure.rtranclp_idemp", "?r^**^** = ?r^**",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.tranclp_rtranclp_absorb", "?R^++^** = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_conversep", "symclp ?r^--1 = symclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.symclp_idem", "symclp (symclp ?r) = symclp ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_tranclp_absorb", "?R^**^++ = ?R^**",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_left_int", "gcd 0 ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_0_int", "gcd ?x 0 = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("GCD.gcd_idem_int", "gcd ?x ?x = \<bar>?x\<bar>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Gcd_eq", "\<bar>Gcd ?K\<bar> = Gcd ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.abs_Lcm_eq", "\<bar>Lcm ?K\<bar> = Lcm ?K",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set.Compl_eq_Diff_UNIV", "- ?A = UNIV - ?A",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Transitive_Closure.trancl_domain", "Domain (?r^+) = Domain ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.trancl_range", "Range (?r^+) = Range ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Set.Compl_disjoint", "?A Int - ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Set.Compl_disjoint2", "- ?A Int ?A = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Set.Compl_partition", "?A Un - ?A = UNIV",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Set.Compl_partition2", "- ?A Un ?A = UNIV",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Set_Interval.Compl_atLeast", "- {?k..} = {..<?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_atMost", "- {..?k} = {?k<..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_greaterThan", "- {?k<..} = {..?k}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Set_Interval.Compl_lessThan", "- {..<?k} = {?k..}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_idemp", "(?r^*)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.trancl_rtrancl_absorb", "(?R^+)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.rtrancl_trancl_absorb", "(?R^*)^+ = ?R^*",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Meson.skolem_COMBK_iff", "?P = Meson.skolem (Meson.COMBK ?P ?i)",
     template_equation
      (template_var 1,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.acyclic_irrefl", "acyclic ?r = irrefl (?r^+)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.finite_trancl", "finite (?r^+) = finite ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.acyclic_converse", "acyclic (?r^-1) = acyclic ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Product_Cpo.split_strict",
     "(case \<bottom> of (x, xa) => ?f x xa) = ?f \<bottom> \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Hilbert_Choice.some_eq_trivial", "(SOME y. y = ?x) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Hilbert_Choice.some_sym_eq_trivial", "(SOME y. ?x = y) = ?x",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("List.nth_Cons_0", "(?x # ?xs) ! 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Cprod.unit_when", "(LAM (). ?a)$?u = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_var 1)),
    ("Cfun.strictify1", "strictify$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Cfun.seq_simps", "seq$?x$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Transitive_Closure.symclp_pointfree", "symclp ?r = sup ?r ?r^--1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.rtranclp_conversep", "?r^--1^** = ?r^**^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.tranclp_converse", "?r^--1^++ = ?r^++^--1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtranclp_reflclp_absorb", "?R^**^== = ?R^**",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflclp_tranclp", "?r^++^== = ?r^**",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtranclp_reflclp", "?R^==^** = ?R^**",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("List.fold_Cons_rev", "fold (#) ?xs = (@) (rev ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_Suc_0", "gcd ?m (Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Complete_Lattices.UN_empty2", "(UN x:?A. {}) = {}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_hole 0)),
    ("Set.Collect_mem_eq", "{x. x : ?A} = ?A",
     template_equation
      (template_app (template_hole 1, t_empty), template_var 0)),
    ("Enum.Collect_code", "Collect ?P = set (filter ?P enum_class.enum)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Transitive_Closure.rtrancl_trancl_reflcl", "?r^* = (?r^+)^=",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Transitive_Closure.trancl_unfold_left", "?r^+ = ?r O ?r^*",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Transitive_Closure.trancl_unfold_right", "?r^+ = ?r^* O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Transitive_Closure.rtrancl_converse", "(?r^-1)^* = (?r^*)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.trancl_converse", "(?r^-1)^+ = (?r^+)^-1",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Transitive_Closure.rtrancl_reflcl_absorb", "(?R^*)^= = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("Transitive_Closure.reflcl_trancl", "(?r^+)^= = ?r^*",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.rtrancl_r_diff_Id", "(?r - Id)^* = ?r^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.rtrancl_reflcl", "(?R^=)^* = ?R^*",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Transitive_Closure.trancl_reflcl", "(?r^=)^+ = ?r^*",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Compact_Basis.Rep_PDUnit", "Rep_pd_basis (PDUnit ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Transitive_Closure.symp_conv_conversep_eq", "symp ?r = (?r^--1 = ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("HOL.NO_MATCH_cong", "NO_MATCH ?pat ?val = NO_MATCH ?pat ?val",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.compact_convex_unit_iff",
     "compact {?x}\<natural> = compact ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Conditionally_Complete_Lattices.bdd_above_uminus",
     "bdd_above (uminus ` ?X) = bdd_below ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Conditionally_Complete_Lattices.bdd_below_uminus",
     "bdd_below (uminus ` ?X) = bdd_above ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Transitive_Closure.antisym_reflcl", "antisym (?r^=) = antisym ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Set.mem_Collect_eq", "(?a : Collect ?P) = ?P ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 0, template_var 1))),
    ("Cfun.eta_cfun", "(LAM x. ?f$x) = ?f",
     template_equation
      (template_app (template_hole 1, t_empty), template_var 0)),
    ("Cfun.ID2", "?f oo ID = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Cfun.ID3", "ID oo ?f = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Cfun.cfcomp_strict", "\<bottom> oo ?f = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("ConvexPD.convex_bind_principal",
     "convex_bind$(convex_principal ?t) = convex_bind_basis ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ConvexPD.convex_to_lower_principal",
     "convex_to_lower$(convex_principal ?t) = lower_principal ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ConvexPD.convex_to_upper_principal",
     "convex_to_upper$(convex_principal ?t) = upper_principal ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GCD.bezw_0", "bezw ?x 0 = (1, 0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("ConvexPD.convex_plus_absorb", "?a \<union>\<natural> ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 0),
       template_var 0)),
    ("ConvexPD.convex_join_unit", "convex_join${?xs}\<natural> = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Compact_Basis.PDPlus_commute", "PDPlus ?t ?u = PDPlus ?u ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Old_Datatype.Case_In0", "Old_Datatype.Case ?c ?d (In0 ?M) = ?c ?M",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 2, template_var 0))),
    ("Old_Datatype.Case_In1", "Old_Datatype.Case ?c ?d (In1 ?N) = ?d ?N",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("GCD.Gcd_int_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_int_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.gcd_abs2_int", "gcd ?x \<bar>?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg2_int", "gcd ?x (- ?y) = gcd ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_abs1_int", "gcd \<bar>?x\<bar> ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.gcd_neg1_int", "gcd (- ?x) ?y = gcd ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs2_int", "lcm ?x \<bar>?y\<bar> = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg2_int", "lcm ?x (- ?y) = lcm ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_abs1_int", "lcm \<bar>?x\<bar> ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.lcm_neg1_int", "lcm (- ?x) ?y = lcm ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GCD.abs_gcd_int", "\<bar>gcd ?x ?y\<bar> = gcd ?x ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.abs_lcm_int", "\<bar>lcm ?i ?j\<bar> = lcm ?i ?j",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GCD.Gcd_nat_set_eq_fold", "Gcd (set ?xs) = fold gcd ?xs 0",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("GCD.Lcm_nat_set_eq_fold", "Lcm (set ?xs) = fold lcm ?xs 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Finite_Set.card_Collect_less_nat", "card {i. i < ?n} = ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, t_empty)),
       template_var 0)),
    ("Set.Collect_const", "{s. ?P} = (if ?P then UNIV else {})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Complete_Lattices.bind_UNION", "Set.bind ?A ?f = \<Union> (?f ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set.Diff_Compl", "?A - - ?B = ?A Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complete_Lattices.INT_empty", "\<Inter> (?B ` {}) = UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_hole 0)),
    ("Complete_Lattices.UN_empty", "\<Union> (?B ` {}) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 1)),
       template_hole 0)),
    ("Transitive_Closure.rtrancl_idemp_self_comp", "?R^* O ?R^* = ?R^*",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Filter.Collect_empty_eq_bot", "(Collect ?P = {}) = (?P = bot)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Set.subset_Compl_self_eq", "(?A <= - ?A) = (?A = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("ConvexPD.convex_unit_Rep_compact_basis",
     "{Rep_compact_basis ?a}\<natural> = convex_principal (PDUnit ?a)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("C.C_case_Cinf",
     "C_case$?f$C\<^sup>\<infinity> = ?f$C\<^sup>\<infinity>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("Transitive_Closure.reflclp_idemp", "?P^==^== = ?P^==",
     template_bimplication (template_dunno, template_dunno)),
    ("GCD.gcd_red_int", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_abs_eq", "Gcd (abs ` ?K) = Gcd ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.Lcm_abs_eq", "Lcm (abs ` ?K) = Lcm ?K",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("GCD.gcd_red_nat", "gcd ?x ?y = gcd ?y (?x mod ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Lcm_nat_insert", "Lcm (insert ?n ?M) = lcm ?n (Lcm ?M)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Finite_Set.card_Collect_le_nat", "card {i. i <= ?n} = Suc ?n",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Set.Compl_eq", "- ?A = {x. x ~: ?A}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.Inter_insert",
     "\<Inter> (insert ?a ?B) = ?a Int \<Inter> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_insert",
     "\<Union> (insert ?a ?B) = ?a Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Diff_eq", "- (?A - ?B) = - ?A Un ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Set.vimage_Compl", "?f -` (- ?A) = - ?f -` ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complete_Lattices.UN_singleton", "(UN x:?A. {x}) = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_var 0)),
    ("Transitive_Closure.rtrancl_unfold", "?r^* = Id Un ?r^* O ?r",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.trancl_unfold", "?r^+ = ?r Un ?r^+ O ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 0)))),
    ("Transitive_Closure.r_comp_rtrancl_eq", "?r O ?r^* = ?r^* O ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Set.Compl_iff", "(?c : - ?A) = (?c ~: ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_le_PDUnit_PDUnit_iff",
     "(PDUnit ?a \<le>\<natural> PDUnit ?b) = (?a << ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("C.Cinf_eq_C",
     "(C\<^sup>\<infinity> = C$?r) = (C\<^sup>\<infinity> = ?r)",
     template_bimplication
      (template_equation
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_equation (template_hole 2, template_var 0))),
    ("Countable.to_nat_split", "(to_nat ?x = to_nat ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("GCD.lcm_proj1_iff_nat", "(lcm ?m ?n = ?m) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_nat", "(lcm ?m ?n = ?n) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set.Compl_eq_Compl_iff", "(- ?A = - ?B) = (?A = ?B)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("ConvexPD.convex_unit_bottom_iff",
     "({?x}\<natural> = \<bottom>) = (?x = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Compact_Basis.PDUnit_inject", "(PDUnit ?a = PDUnit ?b) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Set.Compl_subset_Compl_iff", "(- ?A <= - ?B) = (?B <= ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("Complete_Lattices.True_in_image_Bex", "(True : ?P ` ?A) = Bex ?A ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ConvexPD.convex_to_lower_unit",
     "convex_to_lower${?x}\<natural> = {?x}\<flat>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ConvexPD.convex_to_upper_unit",
     "convex_to_upper${?x}\<natural> = {?x}\<sharp>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ConvexPD.convex_bind_strict",
     "convex_bind$\<bottom>$?f = ?f$\<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ConvexPD.convex_map_ident", "convex_map$(LAM x. x)$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, t_empty))),
         template_var 0),
       template_var 0)),
    ("ConvexPD.convex_join_map_unit",
     "convex_join$(convex_map$convex_unit$?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("List.nth_Cons_Suc", "(?x # ?xs) ! Suc ?n = ?xs ! ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Complete_Lattices.Inf_apply", "Inf ?A ?x = (INF f\<in>?A. f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Sup_apply", "Sup ?A ?x = (SUP f\<in>?A. f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Transitive_Closure.rtranclp_is_Sup_relpowp",
     "?P^** = Sup (range ((^^) ?P))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("GCD.gcd_neg_numeral_2_int",
     "gcd ?x (- numeral ?n) = gcd ?x (numeral ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("GCD.gcd_int_int_eq", "gcd (int ?m) (int ?n) = int (gcd ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_neg_numeral_1_int",
     "gcd (- numeral ?n) ?x = gcd (numeral ?n) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GCD.lcm_int_int_eq", "lcm (int ?m) (int ?n) = int (lcm ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.Gcd_int_eq", "Gcd (int ` ?N) = int (Gcd ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_int_eq", "Lcm (int ` ?N) = int (Lcm ?N)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_Un_distrib",
     "\<Inter> (?A Un ?B) = \<Inter> ?A Int \<Inter> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_Un_distrib",
     "\<Union> (?A Un ?B) = \<Union> ?A Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Int", "- (?A Int ?B) = - ?A Un - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.Compl_Un", "- (?A Un ?B) = - ?A Int - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Set.vimage_Collect_eq", "?f -` Collect ?P = {y. ?P (?f y)}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Transitive_Closure.rtrancl_is_UN_relpow",
     "?R^* = \<Union> (range ((^^) ?R))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Product_Type.Collect_const_case_prod",
     "{(a, b). ?P} = (if ?P then UNIV else {})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Compact_Basis.Rep_PDPlus",
     "Rep_pd_basis (PDPlus ?u ?v) = Rep_pd_basis ?u Un Rep_pd_basis ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Fun_Cpo.fun_chain_iff", "chain ?S = (ALL x. chain (%i. ?S i x))",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Product_Cpo.compact_Pair_iff",
     "compact (?x, ?y) = (compact ?x & compact ?y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Set.empty_Collect_eq", "({} = Collect ?P) = (ALL x. ~ ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Set.Collect_empty_eq", "(Collect ?P = {}) = (ALL x. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("Set.disjoint_eq_subset_Compl", "(?A Int ?B = {}) = (?A <= - ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hilbert_Choice.some_eq_ex", "?P (SOME x. ?P x) = (EX x. ?P x)",
     template_equation
      (template_app
        (template_var 0, template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.not_False_in_image_Ball",
     "(False ~: ?P ` ?A) = Ball ?A ?P",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj1_iff_int", "(lcm ?m ?n = \<bar>?m\<bar>) = (?n dvd ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("GCD.lcm_proj2_iff_int", "(lcm ?m ?n = \<bar>?n\<bar>) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Cfun.seq_conv_if",
     "seq$?x = (if ?x = \<bottom> then \<bottom> else ID)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_dunno)),
    ("ConvexPD.convex_bind_basis_simps",
     "convex_bind_basis (PDUnit ?a) = (LAM f. f$(Rep_compact_basis ?a))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("List.drop_Suc_Cons", "drop (Suc ?n) (?x # ?xs) = drop ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("Cprod.csplit1", "csplit$?f$\<bottom> = ?f$\<bottom>$\<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Transitive_Closure.relpowp_commute",
     "?P OO ?P ^^ ?n = ?P ^^ ?n OO ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtranclp_sup_rtranclp",
     "(sup ?R^** ?S^**)^** = (sup ?R ?S)^**",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_nat", "?m * ?n = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_nat_abs_right_eq",
     "gcd ?n (nat \<bar>?k\<bar>) = nat (gcd (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.gcd_nat_abs_left_eq",
     "gcd (nat \<bar>?k\<bar>) ?n = nat (gcd ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.lcm_nat_abs_right_eq",
     "lcm ?n (nat \<bar>?k\<bar>) = nat (lcm (int ?n) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("GCD.lcm_nat_abs_left_eq",
     "lcm (nat \<bar>?k\<bar>) ?n = nat (lcm ?k (int ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("GCD.Gcd_nat_abs_eq",
     "(GCD k\<in>?K. nat \<bar>k\<bar>) = nat (Gcd ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("GCD.Lcm_nat_abs_eq",
     "(LCM k\<in>?K. nat \<bar>k\<bar>) = nat (Lcm ?K)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Complete_Lattices.Inter_eq", "\<Inter> ?A = {x. ALL B:?A. x : B}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.Union_eq", "\<Union> ?A = {x. EX B:?A. x : B}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Set.Compl_insert", "- insert ?x ?A = - ?A - {?x}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 0)))),
    ("Set.Collect_neg_eq", "{x. ~ ?P x} = - {x. ?P x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 2, t_empty)))),
    ("Transitive_Closure.relpow_commute", "?R O ?R ^^ ?n = ?R ^^ ?n O ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Transitive_Closure.rtrancl_Un_rtrancl",
     "(?R^* Un ?S^*)^* = (?R Un ?S)^*",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Product_Type.Compl_Times_UNIV2",
     "- (?A \<times> UNIV) = (- ?A) \<times> UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Product_Type.Compl_Times_UNIV1",
     "- (UNIV \<times> ?A) = UNIV \<times> - ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1), t_empty)),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Hilbert_Choice.inj_iff", "inj ?f = (inv ?f o ?f = id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 4),
               template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Fun_Cpo.fun_below_iff", "(?f << ?g) = (ALL x. ?f x << ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.empty_Union_conv",
     "({} = \<Union> ?A) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Inter_UNIV_conv",
     "(UNIV = \<Inter> ?A) = (ALL x:?A. x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Inter_UNIV_conv",
     "(\<Inter> ?A = UNIV) = (ALL x:?A. x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Union_empty_conv",
     "(\<Union> ?A = {}) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Product_Cpo.fst_below_iff", "(fst ?x << ?y) = (?x << (?y, snd ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Product_Cpo.snd_below_iff", "(snd ?x << ?y) = (?x << (fst ?x, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complete_Lattices.disjnt_Union2",
     "disjnt ?B (\<Union> ?\<A>) = (ALL A:?\<A>. disjnt ?B A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.disjnt_Union1",
     "disjnt (\<Union> ?\<A>) ?B = (ALL A:?\<A>. disjnt A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.Inter_iff",
     "(?A : \<Inter> ?C) = (ALL X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Union_iff",
     "(?A : \<Union> ?C) = (EX X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Set.subset_Compl_singleton", "(?A <= - {?b}) = (?b ~: ?A)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ConvexPD.convex_unit_eq_iff",
     "({?x}\<natural> = {?y}\<natural>) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<flat> << {?y}\<flat>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<sharp> << {?y}\<sharp>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_unit_below_iff",
     "({?x}\<natural> << {?y}\<natural>) = (?x << ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Hilbert_Choice.Eps_case_prod",
     "(SOME (x, y). ?P x y) = (SOME xy. ?P (fst xy) (snd xy))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("ConvexPD.convex_plus_commute",
     "?a \<union>\<natural> ?b = ?b \<union>\<natural> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_var 1))),
    ("ConvexPD.convex_map_bottom",
     "convex_map$?f$\<bottom> = {?f$\<bottom>}\<natural>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ConvexPD.convex_bind_unit", "convex_bind${?x}\<natural>$?f = ?f$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Compact_Basis.PDPlus_assoc",
     "PDPlus (PDPlus ?t ?u) ?v = PDPlus ?t (PDPlus ?u ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Transitive_Closure.rtranclp_r_diff_Id", "(inf ?r (~=))^** = ?r^**",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0), t_empty)),
       template_app (template_hole 3, template_var 0))),
    ("Complete_Lattices.Un_eq_UN",
     "?A Un ?B = (UN b. if b then ?A else ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Complete_Lattices.Int_Union",
     "?A Int \<Union> ?B = \<Union> ((Int) ?A ` ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Int_Union2",
     "\<Union> ?B Int ?A = (UN C:?B. C Int ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Un_Inter",
     "?A Un \<Inter> ?B = \<Inter> ((Un) ?A ` ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.image_Union",
     "?f ` \<Union> ?S = \<Union> ((`) ?f ` ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_Union",
     "?f -` \<Union> ?A = \<Union> ((-`) ?f ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_constant",
     "(INT y:?A. ?c) = (if ?A = {} then UNIV else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.UN_constant",
     "(UN y:?A. ?c) = (if ?A = {} then {} else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_bool_eq",
     "\<Inter> (range ?A) = ?A True Int ?A False",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_var 0, template_hole 0)))),
    ("Complete_Lattices.UN_bool_eq",
     "\<Union> (range ?A) = ?A True Un ?A False",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app (template_var 0, template_hole 0)))),
    ("Complete_Lattices.UNION_singleton_eq_range",
     "(UN x:?A. {?f x}) = ?f ` ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set.full_SetCompr_eq", "{u. EX x. u = ?f x} = range ?f",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("List.set_Cons_sing_Nil", "set_Cons ?A {[]} = (%x. [x]) ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Transitive_Closure.ntrancl_Suc",
     "ntrancl (Suc ?n) ?R = ntrancl ?n ?R O (Id Un ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ConvexPD.convex_le_PDUnit_lemma2",
     "(?t \<le>\<natural> PDUnit ?b) = (ALL a:Rep_pd_basis ?t. a << ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("ConvexPD.convex_le_PDUnit_lemma1",
     "(PDUnit ?a \<le>\<natural> ?t) = (ALL b:Rep_pd_basis ?t. ?a << b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Transitive_Closure.rtrancl_power",
     "(?p : ?R^*) = (EX n. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Transitive_Closure.rtranclp_power",
     "?P^** ?x ?y = (EX n. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.member_bind",
     "(?x : Set.bind ?A ?f) = (?x : \<Union> (?f ` ?A))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Hilbert_Choice.some_in_eq", "((SOME x. x : ?A) : ?A) = (?A ~= {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4, template_app (template_hole 3, t_empty)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("List.take_Suc_Cons", "take (Suc ?n) (?x # ?xs) = ?x # take ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List.remdups_adj_Cons_alt",
     "?x # tl (remdups_adj (?x # ?xs)) = remdups_adj (?x # ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_plus_principal",
     "convex_principal ?t \<union>\<natural> convex_principal ?u =
      convex_principal (PDPlus ?t ?u)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List.nth_Cons_numeral",
     "(?x # ?xs) ! numeral ?v = ?xs ! (numeral ?v - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Cfun.cfcomp2", "(?f oo ?g)$?x = ?f$(?g$?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cprod.csplit_Pair", "csplit$?f$(?x, ?y) = ?f$?x$?y",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Transitive_Closure.relpowp_add",
     "?P ^^ (?m + ?n) = ?P ^^ ?m OO ?P ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GCD.lcm_altdef_int",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.prod_gcd_lcm_int",
     "\<bar>?m\<bar> * \<bar>?n\<bar> = gcd ?m ?n * lcm ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_mult_distrib_nat", "?k * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Complete_Lattices.vimage_eq_UN", "?f -` ?B = (UN y:?B. ?f -` {y})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Transitive_Closure.relpow_add",
     "?R ^^ (?m + ?n) = ?R ^^ ?m O ?R ^^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complete_Partial_Order.chain_equality",
     "Complete_Partial_Order.chain (=) ?A = (ALL x:?A. ALL y:?A. x = y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Cfun.cfun_eq_iff", "(?f = ?g) = (ALL x. ?f$x = ?g$x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Cfun.cfun_below_iff", "(?f << ?g) = (ALL x. ?f$x << ?g$x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("GCD.lcm_0_iff_int", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("GCD.lcm_0_iff_nat", "(lcm ?m ?n = 0) = (?m = 0 | ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Hilbert_Choice.surj_iff", "surj ?f = (?f o inv ?f = id)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_hole 4),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_var 0)),
         template_hole 0))),
    ("Product_Cpo.Pair_bottom_iff",
     "((?x, ?y) = \<bottom>) = (?x = \<bottom> & ?y = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_dunno)),
    ("Set.Collect_mono_iff",
     "(Collect ?P <= Collect ?Q) = (ALL x. ?P x --> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.mem_simps",
     "(?a : insert ?b ?A) = (?a = ?b | ?a : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.mem_simps",
     "(?c : ?A Int ?B) = (?c : ?A & ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complete_Lattices.mem_simps", "(?c : ?A Un ?B) = (?c : ?A | ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Cfun.cfcomp1", "?f oo ?g = (LAM x. ?f$(?g$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("List.drop_Cons_numeral",
     "drop (numeral ?v) (?x # ?xs) = drop (numeral ?v - 1) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_hole 0)),
         template_var 0))),
    ("ConvexPD.convex_to_lower_join",
     "convex_to_lower$(convex_join$?xss) =
      lower_bind$(convex_to_lower$?xss)$convex_to_lower",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 7))),
    ("ConvexPD.convex_to_upper_join",
     "convex_to_upper$(convex_join$?xss) =
      upper_bind$(convex_to_upper$?xss)$convex_to_upper",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_hole 7))),
    ("Hilbert_Choice.split_paired_Eps",
     "(SOME x. ?P x) = (SOME (a, b). ?P (a, b))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_map_unit",
     "convex_map$?f${?x}\<natural> = {?f$?x}\<natural>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_join_map_join",
     "convex_join$(convex_map$convex_join$?xsss) =
      convex_join$(convex_join$?xsss)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 4)),
           template_var 0)),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("GCD.lcm_code_integer",
     "lcm ?a ?b = \<bar>?a\<bar> * \<bar>?b\<bar> div gcd ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Cfun.strictify_conv_if",
     "strictify$?f$?x = (if ?x = \<bottom> then \<bottom> else ?f$?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("GCD.gcd_mult_distrib_int",
     "\<bar>?k\<bar> * gcd ?m ?n = gcd (?k * ?m) (?k * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set.insert_Collect", "insert ?a (Collect ?P) = {u. u ~= ?a --> ?P u}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Complete_Lattices.mem_simps", "(?c : ?A - ?B) = (?c : ?A & ?c ~: ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("List.remdups_adj_Cons'",
     "remdups_adj (?x # ?xs) =
      ?x # remdups_adj (dropWhile (%y. y = ?x) ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.INF_apply",
     "Inf (?f ` ?A) ?x = (INF y\<in>?A. ?f y ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.SUP_apply",
     "Sup (?f ` ?A) ?x = (SUP y\<in>?A. ?f y ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.image_UN",
     "?f ` \<Union> (?B ` ?A) = (UN x:?A. ?f ` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Compl_INT",
     "- \<Inter> (?B ` ?A) = (UN x:?A. - ?B x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.Compl_UN",
     "- \<Union> (?B ` ?A) = (INT x:?A. - ?B x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.Pow_INT_eq",
     "Pow (\<Inter> (?B ` ?A)) = (INT x:?A. Pow (?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Hilbert_Choice.infinite_iff_countable_subset",
     "infinite ?S = (EX f. inj f & range f <= ?S)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Hilbert_Choice.surj_iff_all", "surj ?f = (ALL x. ?f (inv ?f x) = x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("GCD.gcd_pos_int", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("GCD.gcd_pos_nat", "(0 < gcd ?m ?n) = (?m ~= 0 | ?n ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.Union_disjoint",
     "(\<Union> ?C Int ?A = {}) = (ALL B:?C. B Int ?A = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.rev_eq_Cons_iff",
     "(rev ?xs = ?y # ?ys) = (?xs = rev ?ys @ [?y])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0))))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(ALL x:\<Union> ?A. ?P x) = (ALL y:?A. ALL x:y. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(EX x:\<Union> ?A. ?P x) = (EX y:?A. EX x:y. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.Cons_in_lists_iff",
     "(?x # ?xs : lists ?A) = (?x : ?A & ?xs : lists ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs \<union>\<flat> ?ys << ?zs) = (?xs << ?zs & ?ys << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs << ?ys \<union>\<sharp> ?zs) = (?xs << ?ys & ?xs << ?zs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Product_Cpo.Pair_below_iff",
     "((?a, ?b) << (?c, ?d)) = (?a << ?c & ?b << ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set.Int_Collect", "(?x : ?A Int {x. ?P x}) = (?x : ?A & ?P ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, t_empty))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_var 0, template_var 2)))),
    ("List.take_Cons_numeral",
     "take (numeral ?v) (?x # ?xs) = ?x # take (numeral ?v - 1) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               template_hole 0)),
           template_var 0)))),
    ("List.replicate_app_Cons_same",
     "replicate ?n ?x @ ?x # ?xs = ?x # replicate ?n ?x @ ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("List.zip_Cons_Cons",
     "zip (?x # ?xs) (?y # ?ys) = (?x, ?y) # zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("ConvexPD.convex_to_lower_map",
     "convex_to_lower$(convex_map$?f$?xs) =
      lower_map$?f$(convex_to_lower$?xs)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_map",
     "convex_to_upper$(convex_map$?f$?xs) =
      upper_map$?f$(convex_to_upper$?xs)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Hilbert_Choice.Eps_case_prod_eq",
     "(SOME (x', y'). ?x = x' & ?y = y') = (?x, ?y)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ConvexPD.convex_plus_left_absorb",
     "?a \<union>\<natural> (?a \<union>\<natural> ?b) =
      ?a \<union>\<natural> ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("List.nth_Cons'",
     "(?x # ?xs) ! ?n = (if ?n = 0 then ?x else ?xs ! (?n - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Complete_Lattices.INTER_eq",
     "\<Inter> (?B ` ?A) = {y. ALL x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.UNION_eq",
     "\<Union> (?B ` ?A) = {y. EX x:?A. y : ?B x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.INT_insert",
     "\<Inter> (?B ` insert ?a ?A) = ?B ?a Int \<Inter> (?B ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Complete_Lattices.UN_insert",
     "\<Union> (?B ` insert ?a ?A) = ?B ?a Un \<Union> (?B ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Relation.Domain_Collect_case_prod",
     "Domain {(x, y). ?P x y} = {x. EX y. ?P x y}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app (template_hole 1, t_empty))),
    ("Relation.Range_Collect_case_prod",
     "Range {(x, y). ?P x y} = {y. EX x. ?P x y}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app (template_hole 1, t_empty))),
    ("Set.Collect_conv_if",
     "{x. x = ?a & ?P x} = (if ?P ?a then {?a} else {})",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("Set.Collect_conv_if2",
     "{x. ?a = x & ?P x} = (if ?P ?a then {?a} else {})",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT a:?A. ?B (?f a)) = \<Inter> (?B ` ?f ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN a:?A. ?B (?f a)) = \<Union> (?B ` ?f ` ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` ?f ` ?A) = (INT a:?A. ?B (?f a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?B ` ?f ` ?A) = (UN a:?A. ?B (?f a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.Collect_case_prod",
     "{(a, b). ?P a & ?Q b} = Collect ?P \<times> Collect ?Q",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Hilbert_Choice.wf_iff_no_infinite_down_chain",
     "wf ?r = (\<nexists>f. ALL i. (f (Suc i), f i) : ?r)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Transitive_Closure.trancl_power",
     "(?p : ?R^+) = (EX n>0. ?p : ?R ^^ n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Transitive_Closure.tranclp_power",
     "?P^++ ?x ?y = (EX n>0. (?P ^^ n) ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("ConvexPD.convex_le_PDUnit_PDPlus_iff",
     "(PDUnit ?a \<le>\<natural> PDPlus ?t ?u) =
      (PDUnit ?a \<le>\<natural> ?t & PDUnit ?a \<le>\<natural> ?u)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_le_PDPlus_PDUnit_iff",
     "(PDPlus ?t ?u \<le>\<natural> PDUnit ?a) =
      (?t \<le>\<natural> PDUnit ?a & ?u \<le>\<natural> PDUnit ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("GCD.lcm_1_iff_nat", "(lcm ?m ?n = Suc 0) = (?m = Suc 0 & ?n = Suc 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_dunno)),
    ("List.distinct_adj_Cons_Cons",
     "distinct_adj (?x # ?y # ?xs) = (?x ~= ?y & distinct_adj (?y # ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_dunno)),
    ("Hilbert_Choice.choice_iff",
     "(ALL x. EX y. ?Q x y) = (EX f. ALL x. ?Q x (f x))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.UNION_empty_conv",
     "({} = \<Union> (?B ` ?A)) = (ALL x:?A. ?B x = {})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(UNIV = \<Inter> (?B ` ?A)) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INTER_UNIV_conv",
     "(\<Inter> (?B ` ?A) = UNIV) = (ALL x:?A. ?B x = UNIV)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UNION_empty_conv",
     "(\<Union> (?B ` ?A) = {}) = (ALL x:?A. ?B x = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_subset_iff",
     "(?B <= \<Inter> (?A ` ?I)) = (ALL i:?I. ?B <= ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UN_subset_iff",
     "(\<Union> (?A ` ?I) <= ?B) = (ALL i:?I. ?A i <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.disjoint_UN_iff",
     "disjnt ?A (\<Union> (?B ` ?I)) = (ALL i:?I. disjnt ?A (?B i))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.INT_iff",
     "(?b : \<Inter> (?B ` ?A)) = (ALL x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.UN_iff",
     "(?b : \<Union> (?B ` ?A)) = (EX x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Transitive_Closure.rtranclp_rtrancl_eq",
     "(%x xa. (x, xa) : ?r)^** = (%x xa. (x, xa) : ?r^*)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Transitive_Closure.tranclp_trancl_eq",
     "(%x xa. (x, xa) : ?r)^++ = (%x xa. (x, xa) : ?r^+)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Map.map_upds_Cons",
     "?m(?a # ?as [|->] ?b # ?bs) = ?m(?a |-> ?b, ?as [|->] ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 1))),
           template_var 2),
         template_var 0))),
    ("Product_Type.split_eta_SetCompr2",
     "(%u. EX x y. u = (x, y) & ?P x y) = (%(x, y). ?P x y)",
     template_equation
      (t_empty, template_app (template_hole 0, template_var 0))),
    ("Product_Type.split_eta_SetCompr",
     "(%u. EX x y. u = (x, y) & ?P (x, y)) = ?P",
     template_equation (t_empty, template_var 0)),
    ("GCD.gcd_code_int",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Complete_Lattices.Int_Inter_eq",
     "?A Int \<Inter> ?\<B> =
      (if ?\<B> = {} then ?A else \<Inter> ((Int) ?A ` ?\<B>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.Int_Inter_eq",
     "\<Inter> ?\<B> Int ?A =
      (if ?\<B> = {} then ?A else INT B:?\<B>. B Int ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Complete_Lattices.Collect_all_eq",
     "{x. ALL y. ?P x y} = (INT y. {x. ?P x y})",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Complete_Lattices.Collect_ex_eq",
     "{x. EX y. ?P x y} = (UN y. {x. ?P x y})",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Set.Collect_conj_eq", "{x. ?P x & ?Q x} = {x. ?P x} Int {x. ?Q x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Set.Collect_disj_eq", "{x. ?P x | ?Q x} = {x. ?P x} Un {x. ?Q x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complete_Lattices.Int_UN_distrib",
     "?B Int \<Union> (?A ` ?I) = (UN i:?I. ?B Int ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Un_INT_distrib",
     "?B Un \<Inter> (?A ` ?I) = (INT i:?I. ?B Un ?A i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_INT",
     "?f -` \<Inter> (?B ` ?A) = (INT x:?A. ?f -` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_UN",
     "?f -` \<Union> (?B ` ?A) = (UN x:?A. ?f -` ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x Int ?B) = \<Union> (?A ` ?C) Int ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) Int ?B = (UN x:?C. ?A x Int ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. insert ?a (?B x)) = insert ?a (\<Inter> (?B ` ?C))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A Int ?B x) = ?A Int \<Union> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "?A Int \<Union> (?B ` ?C) = (UN x:?C. ?A Int ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "insert ?a (\<Inter> (?B ` ?C)) = (INT x:?C. insert ?a (?B x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Un ?B) = \<Inter> (?A ` ?C) Un ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x - ?B) = \<Union> (?A ` ?C) - ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_var 1))),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) - ?B = (UN x:?C. ?A x - ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Un ?B = (INT x:?C. ?A x Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Un ?B x) = ?A Un \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A - ?B x) = ?A - \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "?A - \<Inter> (?B ` ?C) = (UN x:?C. ?A - ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "?A Un \<Inter> (?B ` ?C) = (INT x:?C. ?A Un ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set.Pow_Compl", "Pow (- ?A) = {- B |B. ?A : Pow B}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.distinct_adj_Cons",
     "distinct_adj (?x # ?xs) =
      (?xs = [] | ?x ~= hd ?xs & distinct_adj ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Transitive_Closure.acyclic_insert",
     "acyclic (insert (?y, ?x) ?r) = (acyclic ?r & (?x, ?y) ~: ?r^*)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0)))))),
    ("List.list_all2_Cons",
     "list_all2 ?P (?x # ?xs) (?y # ?ys) =
      (?P ?x ?y & list_all2 ?P ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_var 0)))),
    ("C.C_eq_C", "(C\<^bsup>?i\<^esup> = C\<^bsup>?j\<^esup>) = (?i = ?j)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 2)),
           template_hole 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_hole 1)),
       template_equation (template_var 1, template_var 0))),
    ("C.C_below_C",
     "(C\<^bsup>?i\<^esup> << C\<^bsup>?j\<^esup>) = (?i <= ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Map.map_of_Cons_code",
     "map_of ((?l, ?v) # ?ps) ?k =
      (if ?l = ?k then Some ?v else map_of ?ps ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("ConvexPD.convex_to_lower_plus",
     "convex_to_lower$(?xs \<union>\<natural> ?ys) =
      convex_to_lower$?xs \<union>\<flat> convex_to_lower$?ys",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_plus",
     "convex_to_upper$(?xs \<union>\<natural> ?ys) =
      convex_to_upper$?xs \<union>\<sharp> convex_to_upper$?ys",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_join_plus",
     "convex_join$(?xss \<union>\<natural> ?yss) =
      convex_join$?xss \<union>\<natural> convex_join$?yss",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("ConvexPD.convex_join_map_map",
     "convex_join$(convex_map$(convex_map$?f)$?xss) =
      convex_map$?f$(convex_join$?xss)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("GCD.gcd_code_integer",
     "gcd ?k ?l =
      \<bar>if ?l = 0 then ?k
            else gcd ?l (\<bar>?k\<bar> mod \<bar>?l\<bar>)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Set.image_Collect", "?f ` {x. ?P x} = {?f x |x. ?P x}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("Set.Collect_imp_eq", "{x. ?P x --> ?Q x} = - {x. ?P x} Un {x. ?Q x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0, template_app (template_hole 3, t_empty))),
         template_app (template_hole 3, t_empty)))),
    ("Complete_Lattices.Collect_ball_eq",
     "{x. ALL y:?A. ?P x y} = (INT y:?A. {x. ?P x y})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.Collect_bex_eq",
     "{x. EX y:?A. ?P x y} = (UN y:?A. {x. ?P x y})",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Relation.Image_Collect_case_prod",
     "{(x, y). ?P x y} `` ?A = {y. EX x:?A. ?P x y}",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?B ` \<Union> ?A) = (INT y:?A. \<Inter> (?B ` y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?B ` \<Union> ?A) = (UN y:?A. \<Union> (?B ` y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT y:?A. \<Inter> (?B ` y)) = \<Inter> (?B ` \<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN y:?A. \<Union> (?B ` y)) = \<Union> (?B ` \<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Product_Type.Collect_case_prod_Sigma",
     "{(x, y). ?P x & ?Q x y} = (SIGMA x:Collect ?P. Collect (?Q x))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("List.successively_Cons",
     "successively ?P (?x # ?xs) =
      (?xs = [] | ?P ?x (hd ?xs) & successively ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Hilbert_Choice.bchoice_iff",
     "(ALL x:?S. EX y. ?Q x y) = (EX f. ALL x:?S. ?Q x (f x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.ball_UN",
     "(ALL z:\<Union> (?B ` ?A). ?P z) = (ALL x:?A. ALL z:?B x. ?P z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(ALL x:\<Union> (?B ` ?A). ?P x) = (ALL a:?A. ALL x:?B a. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.bex_UN",
     "(EX z:\<Union> (?B ` ?A). ?P z) = (EX x:?A. EX z:?B x. ?P z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.UN_ball_bex_simps",
     "(EX x:\<Union> (?B ` ?A). ?P x) = (EX a:?A. EX x:?B a. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("List.upt_conv_Cons_Cons",
     "(?m # ?n # ?ns = [?m..<?q]) = (?n # ?ns = [Suc ?m..<?q])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3), template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 0)))),
    ("Transitive_Closure.acyclicP_converse",
     "acyclicP ?r^--1 = acyclicP ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("ConvexPD.convex_bind_basis_simps",
     "convex_bind_basis (PDPlus ?t ?u) =
      (LAM f.
          convex_bind_basis ?t$f \<union>\<natural>
          convex_bind_basis ?u$f)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.drop_Cons'",
     "drop ?n (?x # ?xs) =
      (if ?n = 0 then ?x # ?xs else drop (?n - 1) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("List.take_Cons'",
     "take ?n (?x # ?xs) = (if ?n = 0 then [] else ?x # take (?n - 1) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("List.zip_Cons1",
     "zip (?x # ?xs) ?ys =
      (case ?ys of [] => [] | y # ys => (?x, y) # zip ?xs ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_var 0))),
    ("Transitive_Closure.reflcl_set_eq",
     "(%x y. (x, y) : ?r)^== = (%x y. (x, y) : ?r^=)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 2),
       t_empty)),
    ("Transitive_Closure.relpowp_relpow_eq",
     "(%x y. (x, y) : ?R) ^^ ?n = (%x y. (x, y) : ?R ^^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       t_empty)),
    ("Complete_Lattices.Int_Inter_image",
     "(INT x:?C. ?A x Int ?B x) =
      \<Inter> (?A ` ?C) Int \<Inter> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Complete_Lattices.Un_Union_image",
     "(UN x:?C. ?A x Un ?B x) = \<Union> (?A ` ?C) Un \<Union> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("ConvexPD.convex_pd_below_iff",
     "(?xs << ?ys) =
      (convex_to_upper$?xs << convex_to_upper$?ys &
       convex_to_lower$?xs << convex_to_lower$?ys)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Cfun.assoc_oo", "?f oo ?g oo ?h = (?f oo ?g) oo ?h",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0))),
    ("ConvexPD.convex_to_lower_bind",
     "convex_to_lower$(convex_bind$?xs$?f) =
      lower_bind$(convex_to_lower$?xs)$(convex_to_lower oo ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 11)),
           template_var 0)))),
    ("ConvexPD.convex_to_upper_bind",
     "convex_to_upper$(convex_bind$?xs$?f) =
      upper_bind$(convex_to_upper$?xs)$(convex_to_upper oo ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 11)),
           template_var 0)))),
    ("ConvexPD.convex_plus_left_commute",
     "?b \<union>\<natural> (?a \<union>\<natural> ?c) =
      ?a \<union>\<natural> (?b \<union>\<natural> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_plus_assoc",
     "?a \<union>\<natural> ?b \<union>\<natural> ?c =
      ?a \<union>\<natural> (?b \<union>\<natural> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("GCD.bezw_aux",
     "int (gcd ?x ?y) =
      fst (bezw ?x ?y) * int ?x + snd (bezw ?x ?y) * int ?y",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app (template_hole 6, template_var 0))))),
    ("Product_Cpo.prod_cont_iff",
     "cont ?f =
      ((ALL y. cont (%x. ?f (x, y))) & (ALL x. cont (%y. ?f (x, y))))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Finite_Set.finite_Collect_disjI",
     "finite {x. ?P x | ?Q x} = (finite {x. ?P x} & finite {x. ?Q x})",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("String.ascii_of_Char",
     "String.ascii_of
       (Char ?b0.0 ?b1.0 ?b2.0 ?b3.0 ?b4.0 ?b5.0 ?b6.0 ?b7.0) =
      Char ?b0.0 ?b1.0 ?b2.0 ?b3.0 ?b4.0 ?b5.0 ?b6.0 False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Complete_Lattices.INT_simps",
     "\<Inter> (?C ` \<Union> (?B ` ?A)) =
      (INT x:?A. \<Inter> (?C ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UN_simps",
     "\<Union> (?C ` \<Union> (?B ` ?A)) = (UN x:?A. \<Union> (?C ` ?B x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.INT_extend_simps",
     "(INT x:?A. \<Inter> (?C ` ?B x)) =
      \<Inter> (?C ` \<Union> (?B ` ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Complete_Lattices.UN_extend_simps",
     "(UN x:?A. \<Union> (?C ` ?B x)) = \<Union> (?C ` \<Union> (?B ` ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("List.listrel_Cons",
     "listrel ?r `` {?x # ?xs} =
      set_Cons (?r `` {?x}) (listrel ?r `` {?xs})",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 4))))),
    ("Hilbert_Choice.subset_image_inj",
     "(?S <= ?f ` ?T) = (EX U<=?T. inj_on ?f U & ?S = ?f ` U)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.dropWhile_eq_Cons_conv",
     "(dropWhile ?P ?xs = ?y # ?ys) =
      (?xs = takeWhile ?P ?xs @ ?y # ?ys & ~ ?P ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_dunno)),
    ("ConvexPD.convex_pd_below_simps",
     "({?x}\<flat> << ?ys \<union>\<flat> ?zs) =
      ({?x}\<flat> << ?ys | {?x}\<flat> << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_pd_below_simps",
     "(?xs \<union>\<sharp> ?ys << {?z}\<sharp>) =
      (?xs << {?z}\<sharp> | ?ys << {?z}\<sharp>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("ConvexPD.convex_unit_below_plus_iff",
     "({?x}\<natural> << ?ys \<union>\<natural> ?zs) =
      ({?x}\<natural> << ?ys & {?x}\<natural> << ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)))),
    ("ConvexPD.convex_plus_below_unit_iff",
     "(?xs \<union>\<natural> ?ys << {?z}\<natural>) =
      (?xs << {?z}\<natural> & ?ys << {?z}\<natural>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("ConvexPD.convex_bind_map",
     "convex_bind$(convex_map$?f$?xs)$?g =
      (\<Union>\<natural>x\<in>?xs. ?g$(?f$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("ConvexPD.convex_map_map",
     "convex_map$?f$(convex_map$?g$?xs) =
      convex_map$(LAM x. ?f$(?g$x))$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, t_empty))),
         template_var 0))),
    ("Complete_Lattices.INT_Un",
     "\<Inter> (?M ` (?A Un ?B)) =
      \<Inter> (?M ` ?A) Int \<Inter> (?M ` ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_Un",
     "\<Union> (?M ` (?A Un ?B)) =
      \<Union> (?M ` ?A) Un \<Union> (?M ` ?B)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. insert ?a (?B x)) =
      (if ?C = {} then {} else insert ?a (\<Union> (?B ` ?C)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Set.Compr_image_eq", "{x: ?f ` ?A. ?P x} = ?f ` {x: ?A. ?P (?f x)}",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 1, t_empty)))),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x Int ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) Int ?B =
      (if ?C = {} then ?B else INT x:?C. ?A x Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_dunno)),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A Int ?B x) =
      (if ?C = {} then UNIV else ?A Int \<Inter> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_extend_simps",
     "?A Int \<Inter> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A Int ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_dunno)),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A x Un ?B) =
      (if ?C = {} then {} else \<Union> (?A ` ?C) Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.UN_extend_simps",
     "\<Union> (?A ` ?C) Un ?B =
      (if ?C = {} then ?B else UN x:?C. ?A x Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_dunno)),
    ("Complete_Lattices.UN_simps",
     "(UN x:?C. ?A Un ?B x) =
      (if ?C = {} then {} else ?A Un \<Union> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.UN_extend_simps",
     "?A Un \<Union> (?B ` ?C) =
      (if ?C = {} then ?A else UN x:?C. ?A Un ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, t_empty), template_var 0)))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A x - ?B) =
      (if ?C = {} then UNIV else \<Inter> (?A ` ?C) - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_simps",
     "(INT x:?C. ?A - ?B x) =
      (if ?C = {} then UNIV else ?A - \<Union> (?B ` ?C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty), template_var 0))
            )],
       template_dunno)),
    ("Complete_Lattices.INT_extend_simps",
     "?A - \<Union> (?B ` ?C) =
      (if ?C = {} then ?A else INT x:?C. ?A - ?B x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_dunno)),
    ("Transitive_Closure.rtrancl_eq_or_trancl",
     "((?x, ?y) : ?R^*) = (?x = ?y | ?x ~= ?y & (?x, ?y) : ?R^+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_dunno)),
    ("Hilbert_Choice.choice_iff'",
     "(ALL x. ?P x --> (EX y. ?Q x y)) =
      (EX f. ALL x. ?P x --> ?Q x (f x))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Complete_Lattices.SUP_UNION",
     "Sup (?f ` \<Union> (?g ` ?A)) = (SUP y\<in>?A. Sup (?f ` ?g y))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.UNION_fun_upd",
     "\<Union> (?A(?i := ?B) ` ?J) =
      \<Union> (?A ` (?J - {?i})) Un (if ?i : ?J then ?B else {})",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3))))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("Complete_Lattices.INT_Int_distrib",
     "(INT i:?I. ?A i Int ?B i) =
      \<Inter> (?A ` ?I) Int \<Inter> (?B ` ?I)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_Un_distrib",
     "(UN i:?I. ?A i Un ?B i) = \<Union> (?A ` ?I) Un \<Union> (?B ` ?I)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Complete_Lattices.UN_UN_flatten",
     "\<Union> (?C ` \<Union> (?B ` ?A)) = (UN y:?A. \<Union> (?C ` ?B y))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("GCD.lcm_1_iff_int",
     "(lcm ?m ?n = 1) = ((?m = 1 | ?m = - 1) & (?n = 1 | ?n = - 1))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_dunno)),
    ("List.Cons_replicate_eq",
     "(?x # ?xs = replicate ?n ?y) =
      (?x = ?y & 0 < ?n & ?xs = replicate (?n - 1) ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_dunno)),
    ("List.upt_eq_Cons_conv",
     "([?i..<?j] = ?x # ?xs) = (?i < ?j & ?i = ?x & [?i + 1..<?j] = ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_dunno)),
    ("List.nths_Cons",
     "nths (?x # ?l) ?A =
      (if 0 : ?A then [?x] else []) @ nths ?l {j. Suc j : ?A}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 2)),
             template_hole 2)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app (template_hole 1, t_empty))))),
    ("ConvexPD.convex_bind_bind",
     "convex_bind$(convex_bind$?xs$?f)$?g =
      (\<Union>\<natural>x\<in>?xs. convex_bind$(?f$x)$?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_bind_plus",
     "convex_bind$(?xs \<union>\<natural> ?ys)$?f =
      convex_bind$?xs$?f \<union>\<natural> convex_bind$?ys$?f",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)))),
    ("ConvexPD.convex_map_bind",
     "convex_map$?f$(convex_bind$?xs$?g) =
      (\<Union>\<natural>x\<in>?xs. convex_map$?f$(?g$x))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("ConvexPD.convex_map_plus",
     "convex_map$?f$(?xs \<union>\<natural> ?ys) =
      convex_map$?f$?xs \<union>\<natural> convex_map$?f$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_var 0)))),
    ("Complete_Lattices.UN_extend_simps",
     "insert ?a (\<Union> (?B ` ?C)) =
      (if ?C = {} then {?a} else UN x:?C. insert ?a (?B x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_dunno)),
    ("Complete_Lattices.Union_SetCompr_eq",
     "\<Union> {?f x |x. ?P x} = {a. EX x. ?P x & a : ?f x}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Complete_Lattices.INT_extend_simps",
     "\<Inter> (?A ` ?C) - ?B =
      (if ?C = {} then UNIV - ?B else INT x:?C. ?A x - ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 1))),
              template_var 0)
            )],
       template_dunno)),
    ("Hilbert_Choice.bchoice_iff'",
     "(ALL x:?S. ?P x --> (EX y. ?Q x y)) =
      (EX f. ALL x:?S. ?P x --> ?Q x (f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2), t_empty),
       template_app (template_hole 0, t_empty))),
    ("List.list_all2_Cons2",
     "list_all2 ?P ?xs (?y # ?ys) =
      (EX z zs. ?xs = z # zs & ?P z ?y & list_all2 ?P zs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("List.list_all2_Cons1",
     "list_all2 ?P (?x # ?xs) ?ys =
      (EX z zs. ?ys = z # zs & ?P ?x z & list_all2 ?P ?xs zs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("List.remdups_adj_Cons",
     "remdups_adj (?x # ?xs) =
      (case remdups_adj ?xs of [] => [?x]
       | y # xs => if ?x = y then y # xs else ?x # y # xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 2)),
           t_empty),
         template_app (template_hole 5, template_var 0)))),
    ("String.literal_of_asciis_Cons",
     "String.literal_of_asciis (?k # ?ks) =
      (case char_of ?k of
       Char b0 b1 b2 b3 b4 b5 b6 b7 =>
         String.Literal b0 b1 b2 b3 b4 b5 b6
          (String.literal_of_asciis ?ks))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Complete_Lattices.Int_UN_distrib2",
     "\<Union> (?A ` ?I) Int \<Union> (?B ` ?J) =
      (UN i:?I. UN j:?J. ?A i Int ?B j)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("Complete_Lattices.Un_INT_distrib2",
     "\<Inter> (?A ` ?I) Un \<Inter> (?B ` ?J) =
      (INT i:?I. INT j:?J. ?A i Un ?B j)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("Transitive_Closure.rtrancl_insert",
     "(insert (?a, ?b) ?r)^* =
      ?r^* Un {(x, y). (x, ?a) : ?r^* & (?b, y) : ?r^*}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Transitive_Closure.trancl_insert",
     "(insert (?y, ?x) ?r)^+ =
      ?r^+ Un {(a, b). (a, ?y) : ?r^* & (?x, b) : ?r^*}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("GCD.lcm_unique_nat",
     "(?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 1)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GCD.gcd_unique_nat",
     "(?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 0)),
                template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List.Cons_eq_map_conv",
     "(?x # ?xs = map ?f ?ys) =
      (EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("List.map_eq_Cons_conv",
     "(map ?f ?xs = ?y # ?ys) =
      (EX z zs. ?xs = z # zs & ?f z = ?y & map ?f zs = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Transitive_Closure.relpowp_fun_conv",
     "(?P ^^ ?n) ?x ?y =
      (EX f. f 0 = ?x & f ?n = ?y & (ALL i<?n. ?P (f i) (f (Suc i))))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("List.append_eq_Cons_conv",
     "(?ys @ ?zs = ?x # ?xs) =
      (?ys = [] & ?zs = ?x # ?xs |
       (EX ys'. ?ys = ?x # ys' & ys' @ ?zs = ?xs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_dunno)),
    ("List.Cons_eq_append_conv",
     "(?x # ?xs = ?ys @ ?zs) =
      (?ys = [] & ?x # ?xs = ?zs |
       (EX ys'. ?x # ys' = ?ys & ?xs = ys' @ ?zs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_dunno)),
    ("List.Cons_listrel1_Cons",
     "((?x # ?xs, ?y # ?ys) : listrel1 ?r) =
      ((?x, ?y) : ?r & ?xs = ?ys | ?x = ?y & (?xs, ?ys) : listrel1 ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1))),
              template_app (template_hole 6, template_var 0))
            )],
       template_dunno)),
    ("GCD.lcm_unique_int",
     "(0 <= ?d &
       ?a dvd ?d & ?b dvd ?d & (ALL e. ?a dvd e & ?b dvd e --> ?d dvd e)) =
      (?d = lcm ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_var 2)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GCD.gcd_unique_int",
     "(0 <= ?d &
       ?d dvd ?a & ?d dvd ?b & (ALL e. e dvd ?a & e dvd ?b --> e dvd ?d)) =
      (?d = gcd ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)),
                  template_app (template_hole 3, t_empty))))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List.Cons_in_lex",
     "((?x # ?xs, ?y # ?ys) : lex ?r) =
      ((?x, ?y) : ?r & length ?xs = length ?ys |
       ?x = ?y & (?xs, ?ys) : lex ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            )],
       template_dunno)),
    ("Transitive_Closure.relpow_fun_conv",
     "((?a, ?b) : ?R ^^ ?n) =
      (EX f. f 0 = ?a & f ?n = ?b & (ALL i<?n. (f i, f (Suc i)) : ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Transitive_Closure.trancl_insert2",
     "(insert (?a, ?b) ?r)^+ =
      ?r^+ Un
      {(x, y). ((x, ?a) : ?r^+ | x = ?a) & ((?b, y) : ?r^+ | y = ?b)}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("List.filter_eq_Cons_iff",
     "(filter ?P ?ys = ?x # ?xs) =
      (EX us vs.
          ?ys = us @ ?x # vs &
          (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("List.Cons_eq_filter_iff",
     "(?x # ?xs = filter ?P ?ys) =
      (EX us vs.
          ?ys = us @ ?x # vs &
          (ALL u:set us. ~ ?P u) & ?P ?x & ?xs = filter ?P vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("List.extract_Cons_code",
     "List.extract ?P (?x # ?xs) =
      (if ?P ?x then Some ([], ?x, ?xs)
       else case List.extract ?P ?xs of None => None
            | Some (ys, y, zs) => Some (?x # ys, y, zs))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 0))))),
    ("List.Cons_lenlex_iff",
     "((?m # ?ms, ?n # ?ns) : lenlex ?r) =
      (length ?ms < length ?ns |
       length ?ms = length ?ns & (?m, ?n) : ?r |
       ?m = ?n & (?ms, ?ns) : lenlex ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1))),
              template_app (template_hole 8, template_var 0))
            )],
       template_dunno)),
    ("List.Cons_in_shuffles_iff",
     "(?z # ?zs : shuffles ?xs ?ys) =
      (?xs ~= [] & hd ?xs = ?z & ?zs : shuffles (tl ?xs) ?ys |
       ?ys ~= [] & hd ?ys = ?z & ?zs : shuffles ?xs (tl ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("ConvexPD.convex_plus_below_plus_iff",
     "(?xs \<union>\<natural> ?ys << ?zs \<union>\<natural> ?ws) =
      (convex_to_upper$(?xs \<union>\<natural> ?ys) <<
       convex_to_upper$(?zs \<union>\<natural> ?ws) &
       convex_to_lower$(?xs \<union>\<natural> ?ys) <<
       convex_to_lower$(?zs \<union>\<natural> ?ws))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 1)),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 1)),
               template_var 0))))))]
