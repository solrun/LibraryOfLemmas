Loading theory "HOL-Library.FuncSet" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras" via "HOL-Library.Ramsey")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras" via "HOL-Library.Ramsey")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.500s cpu time, 0.042s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.321s elapsed time, 1.287s cpu time, 0.106s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.402s cpu time, 0.106s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.FuncSet"
### 0.411s elapsed time, 1.633s cpu time, 0.190s GC time
Loading theory "HOL-Library.Ramsey" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.404s elapsed time, 1.594s cpu time, 0.147s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.823s cpu time, 0.083s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras" via "HOL-Library.Countable_Set")
consts
  choice :: "('a => bool) => ('a * 'a) set => nat => 'a"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Ramsey"
### 0.448s elapsed time, 1.766s cpu time, 0.182s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.113s elapsed time, 4.239s cpu time, 0.951s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.529s cpu time, 0.849s GC time
### theory "HOL-Library.Countable"
### 1.372s elapsed time, 4.890s cpu time, 1.031s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams" via "Draft.Nash_Extras")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.397s elapsed time, 0.860s cpu time, 0.143s GC time
Loading theory "Draft.Nash_Extras" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.Nash_Williams")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Nash_Extras"
### 0.244s elapsed time, 0.514s cpu time, 0.053s GC time
Loading theory "Draft.Nash_Williams" (required by "Draft.Nash_WilliamsMoreTemplates")
### theory "HOL-Library.Tree"
### 2.036s elapsed time, 6.336s cpu time, 1.227s GC time
Loading theory "Draft.Templates" (required by "Draft.Nash_WilliamsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nash_WilliamsMoreTemplates")
### theory "Draft.Nash_Williams"
### 0.177s elapsed time, 0.408s cpu time, 0.084s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.497s elapsed time, 0.664s cpu time, 0.084s GC time
Loading theory "Draft.Nash_WilliamsMoreTemplates"
val templateLemmas =
   [("Nash_Williams.Nash_Williams_1", "Ramsey ?\<F> 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nash_Williams.init_segment_empty", "init_segment {} ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Nash_Williams.init_segment_refl", "init_segment ?S ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Nash_Williams.comparables_empty", "comparables {} ?M = Fpow ?M",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Nash_Williams.init_segment_empty2", "init_segment ?S {} = (?S = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Nash_Williams.finite_nat_Int_greaterThan_iff",
     "finite (?N Int {?n<..}) = finite ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 1))),
    ("Nash_Williams.comparables_subset",
     "\<Union> (comparables ?S ?M) <= ?S Un ?M",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nash_Williams.init_segment_subset", "init_segment ?S ?T ==> ?S <= ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Nash_Williams.Nash_Williams_2", "thin_set ?\<F> ==> Ramsey ?\<F> 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Nash_Williams.init_segment_Un",
     "?S \<lless> ?S' ==> init_segment ?S (?S Un ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nash_Williams.rejects_empty",
     "rejects ?\<F> {} ?M = (Fpow ?M Int ?\<F> = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Nash_Williams.comparables_mono",
     "?N <= ?M ==> comparables ?S ?N <= comparables ?S ?M",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Nash_Williams.Nash_Williams",
     "[| thin_set ?\<F>; 0 < ?r |] ==> Ramsey ?\<F> ?r",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Nash_Williams.decides_subsets_subset",
     "[| decides_subsets ?\<F> ?M; ?N <= ?M |]
      ==> decides_subsets ?\<F> ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Nash_Williams.init_segment_antisym",
     "[| init_segment ?S ?T; init_segment ?T ?S |] ==> ?S = ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Nash_Williams.init_segment_trans",
     "[| init_segment ?S ?T; init_segment ?T ?U |] ==> init_segment ?S ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Nash_Williams.decides_subset",
     "[| decides ?\<F> ?S ?M; ?N <= ?M |] ==> decides ?\<F> ?S ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Nash_Williams.rejects_subset",
     "[| rejects ?\<F> ?S ?M; ?N <= ?M |] ==> rejects ?\<F> ?S ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Nash_Williams.strongly_accepts_subset",
     "[| strongly_accepts ?\<F> ?S ?M; ?N <= ?M |]
      ==> strongly_accepts ?\<F> ?S ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Nash_Williams.sorted_wrt_subset",
     "[| ?X : set ?l; sorted_wrt (<=) ?l |] ==> hd ?l <= ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Nash_Williams.strongly_accepts_imp_accepts",
     "[| strongly_accepts ?\<F> ?S ?M; infinite ?M |]
      ==> accepts ?\<F> ?S ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Nash_Williams.init_segment_insert",
     "[| init_segment ?S ?T; ?T \<lless> {?n} |]
      ==> init_segment ?S (insert ?n ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Nash_Williams.strongly_accepts_empty",
     "strongly_accepts ?\<F> {} ?M =
      (ALL N<=?M. Fpow N Int ?\<F> = {} --> finite N)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 1), template_hole 8),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Nash_Williams.rejects_trivial",
     "[| rejects ?\<F> ?S ?M; thin_set ?\<F>; init_segment ?F ?S;
         ?F : ?\<F> |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate (template_hole 0))),
    ("Nash_Williams.init_segment_iff",
     "init_segment ?S ?T = (?S = ?T | (EX m:?T. ?S = {n: ?T. n < m}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0), t_empty))
           ))),
    ("Nash_Williams.comparables_iff",
     "(?T : comparables ?S ?M) =
      (finite ?T &
       (init_segment ?T ?S | init_segment ?S ?T & ?T <= ?S Un ?M))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Nash_Williams.ex_infinite_decides_1",
     "[| infinite ?M;
         !!N. [| N <= ?M; infinite N; decides ?\<F> ?S N |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Nash_Williams.ex_infinite_decides_subsets",
     "[| thin_set ?\<F>; infinite ?M;
         !!N. [| N <= ?M; infinite N; decides_subsets ?\<F> N |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Nash_Williams.init_segment_insert_iff",
     "[| ?S \<lless> {?n}; !!x. x : ?T - ?S ==> ?n <= x |]
      ==> init_segment (insert ?n ?S) ?T = (init_segment ?S ?T & ?n : ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Nash_Williams.ex_infinite_decides_finite",
     "[| infinite ?M; finite ?S;
         !!N. [| N <= ?M; infinite N; !!T. T <= ?S ==> decides ?\<F> T N |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Nash_Williams.Ramsey_eq",
     "Ramsey ?\<F> ?r =
      (ALL f:?\<F> \<rightarrow> {..<?r}.
          ALL M.
             infinite M -->
             (EX N i.
                 N <= M &
                 infinite N & i < ?r & ?\<F> Int Pow N <= f -` {i}))",
     template_equation
      (template_app
        (template_app (template_hole 18, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, template_var 1), t_empty)),
         t_empty))),
    ("Nash_Williams.strongly_accepts_1_19",
     "[| strongly_accepts ?\<F> ?S ?M; thin_set ?\<F>; infinite ?M;
         ?S <= ?M; finite ?S; decides_subsets ?\<F> ?M |]
      ==> finite {n: ?M. ~ strongly_accepts ?\<F> (insert n ?S) ?M}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 3, t_empty))
           ))),
    ("Nash_Williams.strongly_accepts_1_19_plus",
     "[| thin_set ?\<F>; infinite ?M; decides_subsets ?\<F> ?M;
         !!N. [| N <= ?M; infinite N;
                 !!S n.
                    [| S <= N; finite S; strongly_accepts ?\<F> S N; n : N;
                       S \<lless> {n} |]
                    ==> strongly_accepts ?\<F> (insert n S) N |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Nash_WilliamsMoreTemplates"
### 0.543s elapsed time, 1.200s cpu time, 0.782s GC time
val it = (): unit
