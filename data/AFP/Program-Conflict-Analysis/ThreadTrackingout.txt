Loading theory "Draft.LTS" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking")
Loading theory "HOL-Library.Cancellation" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "trclp"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.517s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.LTS"
### 0.216s elapsed time, 0.883s cpu time, 0.035s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking" via "Draft.Misc" via "HOL-Library.Subseq_Order")
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.826s cpu time, 0.068s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.391s cpu time, 0.104s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.472s elapsed time, 1.880s cpu time, 0.171s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking")
consts
  prefixes :: "'a list => 'a list list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.104s elapsed time, 4.194s cpu time, 0.896s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.678s elapsed time, 6.450s cpu time, 1.233s GC time
Loading theory "HOL-Library.Subseq_Order" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking" via "Draft.Misc")
instantiation
  list :: (type) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.Subseq_Order"
### 0.059s elapsed time, 0.227s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.BigO"
### 1.118s elapsed time, 3.936s cpu time, 1.299s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.452s elapsed time, 8.652s cpu time, 2.226s GC time
Loading theory "Draft.Templates" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.139s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ThreadTrackingMoreTemplates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.561s elapsed time, 1.200s cpu time, 0.185s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.588s elapsed time, 10.061s cpu time, 2.406s GC time
Loading theory "Draft.Misc" (required by "Draft.ThreadTrackingMoreTemplates" via "Draft.ThreadTracking")
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
### theory "Draft.Misc"
### 0.690s elapsed time, 1.589s cpu time, 1.041s GC time
Loading theory "Draft.ThreadTracking" (required by "Draft.ThreadTrackingMoreTemplates")
locale env_no_step
  fixes gtrs :: "(('s * 's multiset) * 'l * 's * 's multiset) set"
  assumes "env_no_step gtrs"
Proofs for inductive predicate(s) "gtrpp"
  Proving monotonicity ...
### theory "Draft.ThreadTracking"
### 0.769s elapsed time, 0.895s cpu time, 0.171s GC time
Loading theory "Draft.ThreadTrackingMoreTemplates"
val templateLemmas =
   [("ThreadTracking.le_rem_simps", "le_rem_s (ENV ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ThreadTracking.le_rem_simps", "le_rem_s (LOC ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ThreadTracking.env_map_loc", "env (map LOC ?w) = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("ThreadTracking.loc_map_env", "loc (map ENV ?w) = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("ThreadTracking.le_rem_id_map", "map le_rem_s (map ENV ?w) = ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("ThreadTracking.le_rem_id_map", "map le_rem_s (map LOC ?w) = ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("ThreadTracking.env_map_env", "env (map ENV ?w) = map ENV ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ThreadTracking.loc_map_loc", "loc (map LOC ?w) = map LOC ?w",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ThreadTracking.gtr_empty_conf_s", "({#}, ?w, ?c') ~: gtr ?S",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("ThreadTracking.gtr_empty_conf_s", "(?c, ?w, {#}) ~: gtr ?S",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("ThreadTracking.env_unconc", "env (?a @ ?b) = env ?a @ env ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("ThreadTracking.loc_unconc", "loc (?a @ ?b) = loc ?a @ loc ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("ThreadTracking.env_single",
     "env [?a] = (case ?a of LOC e => [] | ENV e => [?a])",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("ThreadTracking.loc_single",
     "loc [?a] = (case ?a of LOC e => [?a] | ENV e => [])",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("ThreadTracking.env_uncons",
     "env (?a # ?b) = (case ?a of LOC e => [] | ENV e => [?a]) @ env ?b",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)),
         template_app (template_hole 4, template_var 0)))),
    ("ThreadTracking.loc_uncons",
     "loc (?a # ?b) = (case ?a of LOC e => [?a] | ENV e => []) @ loc ?b",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)),
         template_app (template_hole 4, template_var 0)))),
    ("ThreadTracking.gtr_empty_conf1",
     "(({#}, ?w, ?c') : trcl (gtr ?S)) = (?w = [] & ?c' = {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 7))
           ))),
    ("ThreadTracking.gtr_empty_conf2",
     "((?c, ?w, {#}) : trcl (gtr ?S)) = (?w = [] & ?c = {#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_hole 6))
           ))),
    ("ThreadTracking.gtrI_s",
     "((?s, ?c), ?e, ?s', ?c') : ?gtrs ==>
      (add_mset ?s ?c, ?e, add_mset ?s' ?c') : gtr ?gtrs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ThreadTracking.gtrI",
     "((?s, ?c), ?w, ?s', ?c') : trcl ?gtrs ==>
      (add_mset ?s ?c, ?w, add_mset ?s' ?c') : trcl (gtr ?gtrs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 1)))),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ThreadTracking.gtrp2gtr_s",
     "((?s, ?c), ?e, ?s', ?c') : gtrp ?T ==>
      (add_mset ?s ?c, le_rem_s ?e, add_mset ?s' ?c') : gtr ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 1)))),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ThreadTracking.gtrp2gtr",
     "((?s, ?c), ?w, ?s', ?c') : trcl (gtrp ?T) ==>
      (add_mset ?s ?c, map le_rem_s ?w, add_mset ?s' ?c') : trcl (gtr ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_app
                     (template_app (template_hole 11, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ThreadTracking.gtrpp_gtrp_eq",
     "gtrpp (%x xa xb xc xd. ((x, xa), xb, xc, xd) : ?S) =
      (%x xa xb xc xd. ((x, xa), xb, xc, xd) : gtrp ?S)",
     template_equation (template_app (template_hole 8, t_empty), t_empty)),
    ("ThreadTracking.gtrE",
     "[| (?c, ?e, ?c') : gtr ?T;
         !!s ce s' ce'.
            [| ?c = add_mset s ce; ?c' = add_mset s' ce';
               ((s, ce), ?e, s', ce') : ?T |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 4),
                  template_app
                   (template_app (template_hole 14, template_var 3),
                    template_var 2))),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("ThreadTracking.gtr_find_thread",
     "[| (?c, ?e, ?c') : gtr ?gtrs;
         !!s ce s' ce'.
            [| ?c = add_mset s ce; ?c' = add_mset s' ce';
               ((s, ce), ?e, s', ce') : ?gtrs |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 4),
                  template_app
                   (template_app (template_hole 14, template_var 3),
                    template_var 2))),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("ThreadTracking.gtr_preserve_s",
     "[| (?c, ?e, ?c') : gtr ?T; ?P ?c;
         !!s c s' c' e.
            [| ?P (add_mset s c); ((s, c), e, s', c') : ?T |]
            ==> ?P (add_mset s' c') |]
      ==> ?P ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2))),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("ThreadTracking.gtr_preserve",
     "[| (?c, ?w, ?c') : trcl (gtr ?T); ?P ?c;
         !!s c s' c' e.
            [| ?P (add_mset s c); ((s, c), e, s', c') : ?T |]
            ==> ?P (add_mset s' c') |]
      ==> ?P ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate (template_app (template_var 0, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("ThreadTracking.gtrp_preserve_s",
     "[| ((?s, ?c), ?e, ?s', ?c') : gtrp ?T; ?P (add_mset ?s ?c);
         !!s c s' c' e.
            [| ?P (add_mset s c); ((s, c), e, s', c') : ?T |]
            ==> ?P (add_mset s' c') |]
      ==> ?P (add_mset ?s' ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_var 0,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2))
           ))),
    ("ThreadTracking.gtrp_preserve",
     "[| ((?s, ?c), ?w, ?s', ?c') : trcl (gtrp ?T); ?P (add_mset ?s ?c);
         !!s c s' c' e.
            [| ?P (add_mset s c); ((s, c), e, s', c') : ?T |]
            ==> ?P (add_mset s' c') |]
      ==> ?P (add_mset ?s' ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_var 0,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2))
           ))),
    ("ThreadTracking.gtr_rev_cases",
     "[| (?c, ?e, add_mset ?s' ?ce') : gtr ?gtrs;
         !!s ce.
            [| ?c = add_mset s ce; ((s, ce), ?e, ?s', ?ce') : ?gtrs |]
            ==> ?P;
         !!cc ss ss' ce.
            [| ?c = add_mset ss ce; ?ce' = add_mset ss' cc;
               ((ss, ce), ?e, ss', add_mset ?s' cc) : ?gtrs |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_app
                   (template_app (template_hole 14, template_var 4),
                    template_app
                     (template_app (template_hole 13, template_var 3),
                      template_var 2)))),
              template_app (template_hole 12, template_var 1))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("ThreadTracking.gtr_step_cases",
     "[| (add_mset ?s ?ce, ?e, ?c') : gtr ?gtrs;
         !!s' ce'.
            [| ?c' = add_mset s' ce'; ((?s, ?ce), ?e, s', ce') : ?gtrs |]
            ==> ?P;
         !!cc ss ss' ce'.
            [| ?ce = add_mset ss cc; ?c' = add_mset ss' ce';
               ((ss, add_mset ?s cc), ?e, ss', ce') : ?gtrs |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_var 2))),
              template_app (template_hole 12, template_var 1))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ThreadTrackingMoreTemplates"
### 0.414s elapsed time, 0.664s cpu time, 0.080s GC time
val it = (): unit
