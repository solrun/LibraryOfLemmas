   [("ConsInterleave.cil_subset_il",
     "?w \<otimes>\<^bsub>?\<alpha>\<^esub> ?w' <= ?w \<otimes> ?w'",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("ConsInterleave.cil_commute",
     "?w \<otimes>\<^bsub>?\<alpha>\<^esub> ?w' =
      ?w' \<otimes>\<^bsub>?\<alpha>\<^esub> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("ConsInterleave.mon_pl_unconc",
     "mon_pl (?a @ ?b) = mon_pl ?a Un mon_pl ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ConsInterleave.mon_pl_ileq",
     "?w \<preceq> ?w' ==> mon_pl ?w <= mon_pl ?w'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ConsInterleave.mon_pl_cons",
     "mon_pl (?e # ?w) = fst ?e Un snd ?e Un mon_pl ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("ConsInterleave.cil_subset_il'",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      ?w : ?w1.0 \<otimes> ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ConsInterleave.cil_contains_empty",
     "([] : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb) =
      (?wa = [] & ?wb = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_hole 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 3))
           ))),
    ("ConsInterleave.cil_ileq",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      ?w1.0 \<preceq> ?w & ?w2.0 \<preceq> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("ConsInterleave.cil_set",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      set ?w = set ?w1.0 Un set ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0))))),
    ("ConsInterleave.cil_length",
     "?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb ==>
      length ?w = length ?wa + length ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0))))),
    ("ConsInterleave.mon_pl_set",
     "mon_pl ?w = \<Union> {fst e Un snd e |e. e : set ?w}",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("ConsInterleave.cil_mon_pl",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      mon_pl (map ?\<alpha> ?w) =
      mon_pl (map ?\<alpha> ?w1.0) Un mon_pl (map ?\<alpha> ?w2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("ConsInterleave.cil_map",
     "?w : ?w1.0 \<otimes>\<^bsub>(?\<alpha> o ?f)\<^esub> ?w2.0 ==>
      map ?f ?w
      : map ?f ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> map ?f ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("ConsInterleave.cil_cons2",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?wa) = {} |]
      ==> ?e # ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?e # ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_var 2, template_var 0))),
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 3))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ConsInterleave.cil_cons1",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?wb) = {} |]
      ==> ?e # ?w : ?e # ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_var 2, template_var 0))),
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2),
               template_var 1))
           ))),
    ("ConsInterleave.cil_assoc2",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?wr;
         ?wr : ?w2.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0 |]
      ==> EX wl.
             ?w : wl \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0 &
             wl : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConsInterleave.cil_assoc1",
     "[| ?w : ?wl \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0;
         ?wl : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 |]
      ==> EX wr.
             ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> wr &
             wr : ?w2.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConsInterleave.cil_cons_cases",
     "[| ?e # ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         !!w1'.
            [| ?w1.0 = ?e # w1';
               ?w : w1' \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
               fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?w2.0) = {} |]
            ==> ?P;
         !!w2'.
            [| ?w2.0 = ?e # w2';
               ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> w2';
               fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?w1.0) = {} |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("ConsInterleave.cil_last_case_split",
     "[| ?w : ?e1.0 #
              ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?e2.0 # ?w2.0;
         !!w'. [| ?w = ?e1.0 # w';
                  w' : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?e2.0 #
                          ?w2.0;
                  fst (?\<alpha> ?e1.0) Int
                  mon_pl (map ?\<alpha> (?e2.0 # ?w2.0)) =
                  {} |]
               ==> ?P;
         !!w'. [| ?w = ?e2.0 # w';
                  w' : ?e1.0 #
                       ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
                  fst (?\<alpha> ?e2.0) Int
                  mon_pl (map ?\<alpha> (?e1.0 # ?w1.0)) =
                  {} |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("ConsInterleave.cil_induct_fix\<alpha>",
     "[| ?P ?\<alpha> [] []; !!ad ae. ?P ?\<alpha> [] (ad # ae);
         !!z aa. ?P ?\<alpha> (z # aa) [];
         !!e1 w1 e2 w2.
            [| fst (?\<alpha> e2) Int mon_pl (map ?\<alpha> (e1 # w1)) =
               {} -->
               ?P ?\<alpha> (e1 # w1) w2;
               fst (?\<alpha> e1) Int mon_pl (map ?\<alpha> (e2 # w2)) =
               {} -->
               ?P ?\<alpha> w1 (e2 # w2) |]
            ==> ?P ?\<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_hole 10),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_induct_fix\<alpha>'",
     "[| ?P ?\<alpha> [] []; !!ad ae. ?P ?\<alpha> [] (ad # ae);
         !!z aa. ?P ?\<alpha> (z # aa) [];
         !!e1 w1 e2 w2.
            [| fst (?\<alpha> e1) Int mon_pl (map ?\<alpha> (e2 # w2)) =
               {} ==>
               ?P ?\<alpha> w1 (e2 # w2);
               fst (?\<alpha> e2) Int mon_pl (map ?\<alpha> (e1 # w1)) =
               {} ==>
               ?P ?\<alpha> (e1 # w1) w2 |]
            ==> ?P ?\<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?wa ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_hole 9),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_induct'",
     "[| !!\<alpha>. ?P \<alpha> [] [];
         !!\<alpha> ad ae. ?P \<alpha> [] (ad # ae);
         !!\<alpha> z aa. ?P \<alpha> (z # aa) [];
         !!\<alpha> e1 w1 e2 w2.
            [| fst (\<alpha> e1) Int mon_pl (map \<alpha> (e2 # w2)) =
               {} ==>
               ?P \<alpha> w1 (e2 # w2);
               fst (\<alpha> e2) Int mon_pl (map \<alpha> (e1 # w1)) =
               {} ==>
               ?P \<alpha> (e1 # w1) w2 |]
            ==> ?P \<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?wa ?wb",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_set_induct_fix\<alpha>",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         ?P [] ?\<alpha> [] [];
         !!e w' w1' w2.
            [| w' : w1' \<otimes>\<^bsub>?\<alpha>\<^esub> w2;
               fst (?\<alpha> e) Int mon_pl (map ?\<alpha> w2) = {};
               ?P w' ?\<alpha> w1' w2 |]
            ==> ?P (e # w') ?\<alpha> (e # w1') w2;
         !!e w' w2' w1.
            [| w' : w1 \<otimes>\<^bsub>?\<alpha>\<^esub> w2';
               fst (?\<alpha> e) Int mon_pl (map ?\<alpha> w1) = {};
               ?P w' ?\<alpha> w1 w2' |]
            ==> ?P (e # w') ?\<alpha> w1 (e # w2') |]
      ==> ?P ?w ?\<alpha> ?w1.0 ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_var 0, template_hole 9),
                  template_var 2),
                template_hole 9),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 2),
               template_var 3),
             template_var 1)
           ))),
    ("ConsInterleave.cil_set_induct",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         !!\<alpha>. ?P [] \<alpha> [] [];
         !!\<alpha> e w' w1' w2.
            [| w' : w1' \<otimes>\<^bsub>\<alpha>\<^esub> w2;
               fst (\<alpha> e) Int mon_pl (map \<alpha> w2) = {};
               ?P w' \<alpha> w1' w2 |]
            ==> ?P (e # w') \<alpha> (e # w1') w2;
         !!\<alpha> e w' w2' w1.
            [| w' : w1 \<otimes>\<^bsub>\<alpha>\<^esub> w2';
               fst (\<alpha> e) Int mon_pl (map \<alpha> w1) = {};
               ?P w' \<alpha> w1 w2' |]
            ==> ?P (e # w') \<alpha> w1 (e # w2') |]
      ==> ?P ?w ?\<alpha> ?w1.0 ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 2),
               template_var 3),
             template_var 1)
           ))),
    ("ConsInterleave.cil_cases",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         [| ?w = []; ?wa = []; ?wb = [] |] ==> ?P;
         [| ?wa = []; ?w = ?wb |] ==> ?P; [| ?w = ?wa; ?wb = [] |] ==> ?P;
         !!ea wa' w'.
            [| ?w = ea # w'; ?wa = ea # wa';
               w' : wa' \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
               fst (?\<alpha> ea) Int mon_pl (map ?\<alpha> ?wb) = {} |]
            ==> ?P;
         !!eb wb' w'.
            [| ?w = eb # w'; ?wb = eb # wb';
               w' : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> wb';
               fst (?\<alpha> eb) Int mon_pl (map ?\<alpha> ?wa) = {} |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 9)],
          template_implication
           ([template_equation (template_var 3, template_hole 9)],
            template_implication
             ([template_equation (template_var 1, template_hole 9)],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation (template_var 3, template_hole 9)],
          template_implication
           ([template_equation (template_var 4, template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 4, template_var 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 9)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0)))]
