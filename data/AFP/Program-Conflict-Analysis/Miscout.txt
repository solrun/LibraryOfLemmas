Loading theory "HOL-Library.Cancellation" (required by "Draft.MiscMoreTemplates" via "Draft.Misc" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.541s cpu time, 0.049s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.MiscMoreTemplates" via "Draft.Misc" via "HOL-Library.Subseq_Order")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.940s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.351s elapsed time, 1.402s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  prefixes :: "'a list => 'a list list"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.432s elapsed time, 1.733s cpu time, 0.118s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.MiscMoreTemplates" via "Draft.Misc")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
consts
  snth :: "'a stream => nat => 'a"
Proofs for inductive predicate(s) "list_emb"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.183s elapsed time, 4.492s cpu time, 1.025s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.Sublist"
### 1.643s elapsed time, 6.301s cpu time, 1.174s GC time
Loading theory "HOL-Library.Subseq_Order" (required by "Draft.MiscMoreTemplates" via "Draft.Misc")
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  list :: (type) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Subseq_Order"
### 0.077s elapsed time, 0.297s cpu time, 0.063s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.835s elapsed time, 2.830s cpu time, 0.350s GC time
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.208s elapsed time, 7.943s cpu time, 1.444s GC time
Loading theory "Draft.Templates" (required by "Draft.MiscMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.114s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MiscMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.568s elapsed time, 1.200s cpu time, 0.154s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.282s elapsed time, 8.984s cpu time, 1.516s GC time
Loading theory "Draft.Misc" (required by "Draft.MiscMoreTemplates")
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
### theory "Draft.Misc"
### 0.658s elapsed time, 1.464s cpu time, 0.944s GC time
Loading theory "Draft.MiscMoreTemplates"
val templateLemmas =
   [("Misc.drop_all_conc", "drop (length ?a) (?a @ ?b) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Misc.mset_le_incr_right1", "?a <=# ?b ==> ?a <=# ?b + ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_le_incr_right2", "?a <=# ?b ==> ?a <=# ?c + ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Misc.mset_le_decr_left1", "?a + ?c <=# ?b ==> ?a <=# ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Misc.mset_le_decr_left2", "?c + ?a <=# ?b ==> ?a <=# ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Misc.mset_le_add_mset_decr_left1",
     "add_mset ?c ?a <=# ?b ==> ?a <=# ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Misc.foldl_un_empty_eq",
     "foldl (Un) ?i ?ww = ?i Un foldl (Un) {} ?ww",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Misc.mset_empty_count", "(ALL p. count ?M p = 0) = (?M = {#})",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Misc.foldl_conc_empty_eq", "foldl (@) ?i ?ww = ?i @ foldl (@) [] ?ww",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Misc.last_in_set", "?l ~= [] ==> last ?l : set ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Misc.foldl_set", "foldl (Un) {} ?l = \<Union> {x. x : set ?l}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4),
         template_var 0),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Misc.mset_le_subtract", "?A <=# ?B ==> ?A - ?C <=# ?B - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_le_add_mset_decr_left2",
     "add_mset ?c ?a <=# ?b ==> {#?c#} <=# ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Misc.list_decomp_1", "length ?l = 1 ==> EX a. ?l = [a]",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Misc.mset_union_subset", "?A + ?B <=# ?C ==> ?A <=# ?C & ?B <=# ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_contains_eq", "(?m :# ?M) = ({#?m#} + (?M - {#?m#}) = ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0))),
    ("Misc.mset_diff_cancel1elem", "?a ~:# ?B ==> {#?a#} - ?B = {#?a#}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Misc.mset_le_subtract_right",
     "?A + ?B <=# ?X ==> ?A <=# ?X - ?B & ?B <=# ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_le_subtract_left",
     "?A + ?B <=# ?X ==> ?B <=# ?X - ?A & ?A <=# ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Misc.mset_le_add_mset",
     "add_mset ?x ?B <=# ?C ==> {#?x#} <=# ?C & ?B <=# ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 0)),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Misc.list_tail_coinc",
     "?n1.0 # ?r1.0 = ?n2.0 # ?r2.0 ==> ?n1.0 = ?n2.0 & ?r1.0 = ?r2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Misc.mset_map_id", "(!!x. ?f (?g x) = x) ==> ?f `# ?g `# ?X = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Misc.count_ne_remove",
     "?x ~= ?t ==> count ?S ?x = count (?S - {#?t#}) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_var 2)))),
    ("Misc.list_rev_decomp", "?l ~= [] ==> EX ll e. ?l = ll @ [e]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Misc.size_diff_se", "?t :# ?S ==> size ?S = size (?S - {#?t#}) + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)))),
           template_hole 0)))),
    ("Misc.mset_union_subset_s",
     "{#?a#} + ?B <=# ?C ==> ?a :# ?C & ?B <=# ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_hole 3)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_size1elem", "[| size ?P <= 1; ?q :# ?P |] ==> ?P = {#?q#}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Misc.union_diff_assoc",
     "?C - ?B = {#} ==> ?A + ?B - ?C = ?A + (?B - ?C)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Misc.mset_le_subtract_add_mset_right",
     "add_mset ?x ?B <=# ?X ==> {#?x#} <=# ?X - ?B & ?B <=# ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Misc.mset_le_addE",
     "[| ?xs <=# ?ys; !!zs. ?ys = ?xs + zs ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.list_decomp_2", "length ?l = 2 ==> EX a b. ?l = [a, b]",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Misc.mset_left_cancel_union",
     "[| ?a :# ?A + ?B; ?a ~:# ?A |] ==> ?a :# ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Misc.mset_right_cancel_union",
     "[| ?a :# ?A + ?B; ?a ~:# ?B |] ==> ?a :# ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Misc.boolfun_cases_helper",
     "?g = (%x. False) | ?g = (%x. x) | ?g = (%x. True) | ?g = Not",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0), t_empty)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0), t_empty)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   t_empty)),
               template_app
                (template_app (template_hole 3, template_var 0), t_empty))))
         )),
    ("Misc.mset_le_subtract_add_mset_left",
     "add_mset ?x ?B <=# ?X ==> ?B <=# ?X - {#?x#} & {#?x#} <=# ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 0)),
               template_var 0))
           ))),
    ("Misc.mset_right_cancel_elem",
     "[| ?a :# ?A + {#?b#}; ?a ~= ?b |] ==> ?a :# ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Misc.mset_left_cancel_elem",
     "[| ?a :# {#?b#} + ?A; ?a ~= ?b |] ==> ?a :# ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2)),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app (template_hole 5, template_var 0))
           ))),
    ("Misc.diff_union_single_convs",
     "?a :# ?J ==> ?I + ?J - {#?a#} = ?I + (?J - {#?a#})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)))))),
    ("Misc.diff_union_single_conv2",
     "?a :# ?J ==> ?J + ?I - {#?a#} = ?J - {#?a#} + ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_var 0)))),
    ("Misc.mset_union_diff_comm",
     "?t :# ?S ==> ?T + (?S - {#?t#}) = ?T + ?S - {#?t#}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Misc.mset_le_mono_add_single",
     "[| ?a :# ?ys; ?b :# ?ws |] ==> {#?a, ?b#} <=# ?ys + ?ws",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Misc.multiset_induct'",
     "[| ?P {#}; !!M x. ?P M ==> ?P ({#x#} + M) |] ==> ?P ?M",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Misc.nat_compl_induct",
     "[| ?P 0; !!n. ALL nn<=n. ?P nn ==> ?P (Suc n) |] ==> ?P ?n",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Misc.list_rest_coinc",
     "[| length ?s2.0 <= length ?s1.0; ?s1.0 @ ?r1.0 = ?s2.0 @ ?r2.0 |]
      ==> EX r1p. ?r2.0 = r1p @ ?r1.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Misc.mset_le_single_cases",
     "[| ?M <=# {#?a#}; ?M = {#} ==> ?P; ?M = {#?a#} ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Misc.mset_un_cases",
     "[| ?a :# ?A + ?B; ?a :# ?A ==> ?P; ?a :# ?B ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Misc.mset_size2elem",
     "[| size ?P <= 2; {#?q#} + {#?q'#} <=# ?P |]
      ==> ?P = {#?q#} + {#?q'#}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_hole 1)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))),
              template_var 2)
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("Misc.mset_map_single_rightE",
     "[| ?f `# ?P = {#?y#}; !!x. [| ?P = {#x#}; ?f x = ?y |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_size_le1_cases",
     "[| size ?M <= Suc 0; ?M = {#} ==> ?P; !!m. ?M = {#m#} ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.length_compl_induct",
     "[| ?P [];
         !!e l. (!!ll. length ll <= length l ==> ?P ll) ==> ?P (e # l) |]
      ==> ?P ?l",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Misc.length_compl_rev_induct",
     "[| ?P [];
         !!l e. (!!ll. length ll <= length l ==> ?P ll) ==> ?P (l @ [e]) |]
      ==> ?P ?l",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Misc.mset_le_distrib",
     "[| ?X <=# ?A + ?B;
         !!Xa Xb. [| ?X = Xa + Xb; Xa <=# ?A; Xb <=# ?B |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_union_2_elem",
     "{#?a#} + {#?b#} = ?M + {#?c#} ==>
      {#?a#} = ?M & ?b = ?c | ?a = ?c & {#?b#} = ?M",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_hole 3)),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_hole 3)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 3)),
                 template_var 1)))
           ))),
    ("Misc.mset_map_split_orig",
     "[| ?f `# ?P = ?M1.0 + ?M2.0;
         !!P1 P2.
            [| ?P = P1 + P2; ?f `# P1 = ?M1.0; ?f `# P2 = ?M2.0 |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_map_split_orig_le",
     "[| ?f `# ?P <=# ?M1.0 + ?M2.0;
         !!P1 P2.
            [| ?P = P1 + P2; ?f `# P1 <=# ?M1.0; ?f `# P2 <=# ?M2.0 |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.boolfun_cases",
     "[| ?g = (%x. False) ==> ?P ?g; ?g = (%x. x) ==> ?P ?g;
         ?g = (%x. True) ==> ?P ?g; ?g = Not ==> ?P ?g |]
      ==> ?P ?g",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, t_empty)],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation (template_var 1, t_empty)],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation (template_var 1, t_empty)],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation (template_var 1, t_empty)],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Misc.list_2pre_induct",
     "[| ?P [] []; !!e w1' w2. ?P w1' w2 ==> ?P (e # w1') w2;
         !!e w1 w2'. ?P w1 w2' ==> ?P w1 (e # w2') |]
      ==> ?P ?w1.0 ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_hole 7),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Misc.list_append_eq_Cons_cases",
     "[| ?ys @ ?zs = ?x # ?xs; [| ?ys = []; ?zs = ?x # ?xs |] ==> ?P;
         !!ys'. [| ?ys = ?x # ys'; ys' @ ?zs = ?xs |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_hole 1)],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.list_Cons_eq_append_cases",
     "[| ?x # ?xs = ?ys @ ?zs; [| ?ys = []; ?zs = ?x # ?xs |] ==> ?P;
         !!ys'. [| ?ys = ?x # ys'; ys' @ ?zs = ?xs |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.some_theI",
     "[| EX a b. ?P a b;
         !!b1 b2. [| EX a. ?P a b1; EX a. ?P a b2 |] ==> b1 = b2 |]
      ==> ?P (SOME a. EX b. ?P a b) (THE b. EX a. ?P a b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 0, template_app (template_hole 1, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("Misc.foldl_A1_eq",
     "[| !!e. ?f ?n e = e; !!e. ?f e ?n = e;
         !!a b c. ?f a (?f b c) = ?f (?f a b) c |]
      ==> foldl ?f ?i ?ww = ?f ?i (foldl ?f ?n ?ww)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_var 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Misc.mset_distrib",
     "[| ?A + ?B = ?M + ?N;
         !!Am An Bm Bn.
            [| ?A = Am + An; ?B = Bm + Bn; ?M = Am + Bm; ?N = An + Bn |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_un_single_un_cases",
     "[| add_mset ?a ?A = ?B + ?C;
         [| ?a :# ?B; ?A = ?B - {#?a#} + ?C |] ==> ?P;
         [| ?a :# ?C; ?A = ?B + (?C - {#?a#}) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 2))
               )],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_hole 0))),
                 template_var 1))],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 1))
               )],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_hole 0))))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Misc.mset_unplusm_dist_cases2",
     "[| ?B + ?C = add_mset ?s ?A;
         [| ?B = add_mset ?s (?B - {#?s#}); ?A = ?B - {#?s#} + ?C |] ==> ?P;
         [| ?C = add_mset ?s (?C - {#?s#}); ?A = ?B + (?C - {#?s#}) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation
            (template_var 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0))))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_hole 0))),
                 template_var 3))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0))))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 0))))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Misc.mset_unplusm_dist_cases",
     "[| add_mset ?s ?A = ?B + ?C;
         [| ?B = add_mset ?s (?B - {#?s#}); ?A = ?B - {#?s#} + ?C |] ==> ?P;
         [| ?C = add_mset ?s (?C - {#?s#}); ?A = ?B + (?C - {#?s#}) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_hole 0))))],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_hole 0))),
                 template_var 1))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_hole 0))))],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_hole 0))))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Misc.mset_single_cases2'",
     "[| add_mset ?s ?c = add_mset ?r' ?c'; [| ?s = ?r'; ?c = ?c' |] ==> ?P;
         !!cc. [| ?c' = cc + {#?s#}; ?c = cc + {#?r'#}; ?c' - {#?s#} = cc;
                  ?c - {#?r'#} = cc |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_single_cases'",
     "[| add_mset ?s ?c = add_mset ?r' ?c'; [| ?s = ?r'; ?c = ?c' |] ==> ?P;
         !!cc. [| ?c' = {#?s#} + cc; ?c = {#?r'#} + cc; ?c' - {#?s#} = cc;
                  ?c - {#?r'#} = cc |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Misc.mset_single_cases",
     "[| add_mset ?s ?c = add_mset ?r' ?c'; [| ?s = ?r'; ?c = ?c' |] ==> ?P;
         [| ?c' = {#?s#} + (?c' - {#?s#}); ?c = {#?r'#} + (?c - {#?r'#});
            ?c - {#?r'#} = ?c' - {#?s#} |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_hole 1))))],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 1))))],
            template_implication
             ([template_equation
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_hole 1)))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Misc.mset_single_cases2",
     "[| add_mset ?s ?c = add_mset ?r' ?c'; [| ?s = ?r'; ?c = ?c' |] ==> ?P;
         [| ?c' = ?c' - {#?s#} + {#?s#}; ?c = ?c - {#?r'#} + {#?r'#};
            ?c - {#?r'#} = ?c' - {#?s#} |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_hole 0))),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_hole 0)))],
          template_implication
           ([template_equation
              (template_var 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_hole 0))),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 0)))],
            template_implication
             ([template_equation
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_hole 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_hole 0)))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Misc.mset_2dist2_cases",
     "[| {#?a, ?b#} <=# ?A + ?B; {#?a, ?b#} <=# ?A ==> ?P;
         {#?a, ?b#} <=# ?B ==> ?P; [| ?a :# ?A; ?b :# ?B |] ==> ?P;
         [| ?a :# ?B; ?b :# ?A |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_hole 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_hole 3))),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_hole 3))),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 2))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 2))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MiscMoreTemplates"
### 0.434s elapsed time, 0.682s cpu time, 0.086s GC time
val it = (): unit
