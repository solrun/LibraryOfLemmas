Loading theory "Draft.LTS" (required by "Draft.LTSMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Proofs for inductive predicate(s) "trclp"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.504s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.LTS"
### 0.219s elapsed time, 0.888s cpu time, 0.038s GC time
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.879s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.216s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.747s elapsed time, 2.294s cpu time, 0.320s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.796s elapsed time, 2.287s cpu time, 0.245s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.857s elapsed time, 4.334s cpu time, 0.982s GC time
Loading theory "Draft.Templates" (required by "Draft.LTSMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LTSMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.445s elapsed time, 0.450s cpu time, 0.000s GC time
Loading theory "Draft.LTSMoreTemplates"
val templateLemmas =
   [("LTS.trcl_mono", "?A <= ?B ==> trcl ?A <= trcl ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LTS.trcl_empty_simp", "((?c, [], ?c') : trcl ?t) = (?c = ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1))),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 2, template_var 1))),
    ("LTS.trcl_inter_mono", "?x : trcl (?S Int ?R) ==> ?x : trcl ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("LTS.trcl_inter_mono", "?x : trcl (?S Int ?R) ==> ?x : trcl ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))
           ))),
    ("LTS.trcl_empty_cons", "(?c, [], ?c') : trcl ?t ==> ?c = ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1))),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 2, template_var 1))),
    ("LTS.trcl_single",
     "((?c, [?a], ?c') : trcl ?t) = ((?c, ?a, ?c') : ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4)),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("LTS.trcl_one_elem",
     "(?c, ?e, ?c') : ?t ==> (?c, [?e], ?c') : trcl ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_hole 1)),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LTS.trclp_trcl_eq",
     "trclp (%x xa xb. (x, xa, xb) : ?t) =
      (%x xa xb. (x, xa, xb) : trcl ?t)",
     template_equation (template_app (template_hole 7, t_empty), t_empty)),
    ("LTS.trcl_uncons",
     "(?c, ?a # ?w, ?c') : trcl ?t ==>
      EX ch. (?c, ?a, ch) : ?t & (ch, ?w, ?c') : trcl ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2)),
                    template_var 1))),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LTS.trcl_cons2",
     "[| (?c, ?e, ?ch) : ?T; (?ch, ?f, ?c') : ?T |]
      ==> (?c, [?e, ?f], ?c') : trcl ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1))),
                   template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("LTS.trcl_concat",
     "[| (?c, ?w1.0, ?c') : trcl ?t; (?c', ?w2.0, ?c'') : trcl ?t |]
      ==> (?c, ?w1.0 @ ?w2.0, ?c'') : trcl ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3))),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1)),
                   template_var 0))),
             template_app (template_hole 1, template_var 2))
           ))),
    ("LTS.trcl_unconcat",
     "(?c, ?w1.0 @ ?w2.0, ?c') : trcl ?t ==>
      EX ch. (?c, ?w1.0, ch) : trcl ?t & (ch, ?w2.0, ?c') : trcl ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2)),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("LTS.trcl_rev_cons",
     "[| (?c, ?w, ?ch) : trcl ?T; (?ch, ?e, ?c') : ?T |]
      ==> (?c, ?w @ [?e], ?c') : trcl ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3))),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0))),
                   template_var 0))),
             template_app (template_hole 6, template_var 2))
           ))),
    ("LTS.trcl_rev_uncons",
     "(?c, ?w @ [?e], ?c') : trcl ?T ==>
      EX ch. (?c, ?w, ch) : trcl ?T & (ch, ?e, ?c') : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 3),
                        template_app
                         (template_app (template_hole 7, template_var 2),
                          template_hole 6))),
                    template_var 1))),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LTS.trcl_unconsE",
     "[| (?c, ?e # ?w, ?c') : trcl ?S;
         !!ch. [| (?c, ?e, ch) : ?S; (ch, ?w, ?c') : trcl ?S |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_var 2))),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("LTS.trcl_prop_trans",
     "[| (?c, ?w, ?c') : trcl ?S; [| ?c = ?c'; ?w = [] |] ==> ?P;
         [| ?c : Domain ?S; ?c' : Range (Range ?S) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2))),
              template_app (template_hole 7, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_hole 4)],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("LTS.trcl_pair_unconsE",
     "[| ((?s, ?c), ?e # ?w, ?s', ?c') : trcl ?S;
         !!sh ch.
            [| ((?s, ?c), ?e, sh, ch) : ?S;
               ((sh, ch), ?w, ?s', ?c') : trcl ?S |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)))),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("LTS.trcl_rev_cases",
     "[| (?c, ?w, ?c') : trcl ?S; [| ?w = []; ?c = ?c' |] ==> ?P;
         !!ch e wh.
            [| ?w = wh @ [e]; (?c, wh, ch) : trcl ?S; (ch, e, ?c') : ?S |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_app
                   (template_app (template_hole 12, template_var 3),
                    template_var 2))),
              template_app (template_hole 11, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 3, template_hole 9)],
          template_implication
           ([template_equation (template_var 4, template_var 2)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("LTS.trcl_rev_induct",
     "[| (?c, ?w, ?c') : trcl ?S; !!c. ?P c [] c;
         !!c w c' e c''.
            [| (c, w, c') : trcl ?S; (c', e, c'') : ?S; ?P c w c' |]
            ==> ?P c (w @ [e]) c'' |]
      ==> ?P ?c ?w ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("LTS.trcl_pair_induct",
     "[| ((?xc1.0, ?xc2.0), ?xb, ?xa1.0, ?xa2.0) : trcl ?t;
         !!a b. ?P a b [] a b;
         !!a b aa ab ba w ac bb.
            [| ((a, b), aa, ab, ba) : ?t; ((ab, ba), w, ac, bb) : trcl ?t;
               ?P ab ba w ac bb |]
            ==> ?P a b (aa # w) ac bb |]
      ==> ?P ?xc1.0 ?xc2.0 ?xb ?xa1.0 ?xa2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 11, template_var 3),
                      template_var 2)))),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("LTS.trcl_rev_pair_induct",
     "[| ((?xc1.0, ?xc2.0), ?xb, ?xa1.0, ?xa2.0) : trcl ?S;
         !!a b. ?P a b [] a b;
         !!a b w aa ba e ab bb.
            [| ((a, b), w, aa, ba) : trcl ?S; ((aa, ba), e, ab, bb) : ?S;
               ?P a b w aa ba |]
            ==> ?P a b (w @ [e]) ab bb |]
      ==> ?P ?xc1.0 ?xc2.0 ?xb ?xa1.0 ?xa2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2)))),
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.LTSMoreTemplates"
### 0.285s elapsed time, 0.426s cpu time, 0.059s GC time
val it = (): unit
