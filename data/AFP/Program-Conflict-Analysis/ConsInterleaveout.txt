Loading theory "HOL-Library.Cancellation" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave" via "Draft.Interleave" via "Draft.Misc" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.537s cpu time, 0.048s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave" via "Draft.Interleave" via "Draft.Misc" via "HOL-Library.Subseq_Order")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.878s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.385s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  prefixes :: "'a list => 'a list list"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.444s elapsed time, 1.775s cpu time, 0.134s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave" via "Draft.Interleave" via "Draft.Misc")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  suffixes :: "'a list => 'a list list"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.136s elapsed time, 4.334s cpu time, 0.982s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Sublist"
### 1.675s elapsed time, 6.445s cpu time, 1.231s GC time
Loading theory "HOL-Library.Subseq_Order" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave" via "Draft.Interleave" via "Draft.Misc")
instantiation
  list :: (type) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Subseq_Order"
### 0.080s elapsed time, 0.307s cpu time, 0.065s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.852s elapsed time, 2.953s cpu time, 0.392s GC time
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.488s elapsed time, 8.877s cpu time, 2.286s GC time
Loading theory "Draft.Templates" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConsInterleaveMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 1.187s cpu time, 0.115s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.592s elapsed time, 9.940s cpu time, 2.372s GC time
Loading theory "Draft.Misc" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave" via "Draft.Interleave")
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
### theory "Draft.Misc"
### 0.656s elapsed time, 1.632s cpu time, 1.188s GC time
Loading theory "Draft.Interleave" (required by "Draft.ConsInterleaveMoreTemplates" via "Draft.ConsInterleave")
### theory "Draft.Interleave"
### 0.245s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "Draft.ConsInterleave" (required by "Draft.ConsInterleaveMoreTemplates")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Draft.ConsInterleave"
### 0.320s elapsed time, 0.420s cpu time, 0.128s GC time
Loading theory "Draft.ConsInterleaveMoreTemplates"
val templateLemmas =
   [("ConsInterleave.cil_subset_il",
     "?w \<otimes>\<^bsub>?\<alpha>\<^esub> ?w' <= ?w \<otimes> ?w'",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("ConsInterleave.cil_commute",
     "?w \<otimes>\<^bsub>?\<alpha>\<^esub> ?w' =
      ?w' \<otimes>\<^bsub>?\<alpha>\<^esub> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("ConsInterleave.mon_pl_unconc",
     "mon_pl (?a @ ?b) = mon_pl ?a Un mon_pl ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ConsInterleave.mon_pl_ileq",
     "?w \<preceq> ?w' ==> mon_pl ?w <= mon_pl ?w'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ConsInterleave.mon_pl_cons",
     "mon_pl (?e # ?w) = fst ?e Un snd ?e Un mon_pl ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 4, template_var 0)))),
    ("ConsInterleave.cil_subset_il'",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      ?w : ?w1.0 \<otimes> ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ConsInterleave.cil_contains_empty",
     "([] : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb) =
      (?wa = [] & ?wb = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_hole 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 3))
           ))),
    ("ConsInterleave.cil_ileq",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      ?w1.0 \<preceq> ?w & ?w2.0 \<preceq> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("ConsInterleave.cil_set",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      set ?w = set ?w1.0 Un set ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0))))),
    ("ConsInterleave.cil_length",
     "?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb ==>
      length ?w = length ?wa + length ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 0))))),
    ("ConsInterleave.mon_pl_set",
     "mon_pl ?w = \<Union> {fst e Un snd e |e. e : set ?w}",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("ConsInterleave.cil_mon_pl",
     "?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 ==>
      mon_pl (map ?\<alpha> ?w) =
      mon_pl (map ?\<alpha> ?w1.0) Un mon_pl (map ?\<alpha> ?w2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("ConsInterleave.cil_map",
     "?w : ?w1.0 \<otimes>\<^bsub>(?\<alpha> o ?f)\<^esub> ?w2.0 ==>
      map ?f ?w
      : map ?f ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> map ?f ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3)),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("ConsInterleave.cil_cons2",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?wa) = {} |]
      ==> ?e # ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?e # ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_var 2, template_var 0))),
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 3))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ConsInterleave.cil_cons1",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?wb) = {} |]
      ==> ?e # ?w : ?e # ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_var 2, template_var 0))),
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_var 2),
               template_var 1))
           ))),
    ("ConsInterleave.cil_assoc2",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?wr;
         ?wr : ?w2.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0 |]
      ==> EX wl.
             ?w : wl \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0 &
             wl : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConsInterleave.cil_assoc1",
     "[| ?w : ?wl \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0;
         ?wl : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0 |]
      ==> EX wr.
             ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> wr &
             wr : ?w2.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ConsInterleave.cil_cons_cases",
     "[| ?e # ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         !!w1'.
            [| ?w1.0 = ?e # w1';
               ?w : w1' \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
               fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?w2.0) = {} |]
            ==> ?P;
         !!w2'.
            [| ?w2.0 = ?e # w2';
               ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> w2';
               fst (?\<alpha> ?e) Int mon_pl (map ?\<alpha> ?w1.0) = {} |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("ConsInterleave.cil_last_case_split",
     "[| ?w : ?e1.0 #
              ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?e2.0 # ?w2.0;
         !!w'. [| ?w = ?e1.0 # w';
                  w' : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?e2.0 #
                          ?w2.0;
                  fst (?\<alpha> ?e1.0) Int
                  mon_pl (map ?\<alpha> (?e2.0 # ?w2.0)) =
                  {} |]
               ==> ?P;
         !!w'. [| ?w = ?e2.0 # w';
                  w' : ?e1.0 #
                       ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
                  fst (?\<alpha> ?e2.0) Int
                  mon_pl (map ?\<alpha> (?e1.0 # ?w1.0)) =
                  {} |]
               ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("ConsInterleave.cil_induct_fix\<alpha>",
     "[| ?P ?\<alpha> [] []; !!ad ae. ?P ?\<alpha> [] (ad # ae);
         !!z aa. ?P ?\<alpha> (z # aa) [];
         !!e1 w1 e2 w2.
            [| fst (?\<alpha> e2) Int mon_pl (map ?\<alpha> (e1 # w1)) =
               {} -->
               ?P ?\<alpha> (e1 # w1) w2;
               fst (?\<alpha> e1) Int mon_pl (map ?\<alpha> (e2 # w2)) =
               {} -->
               ?P ?\<alpha> w1 (e2 # w2) |]
            ==> ?P ?\<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_hole 10),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_induct_fix\<alpha>'",
     "[| ?P ?\<alpha> [] []; !!ad ae. ?P ?\<alpha> [] (ad # ae);
         !!z aa. ?P ?\<alpha> (z # aa) [];
         !!e1 w1 e2 w2.
            [| fst (?\<alpha> e1) Int mon_pl (map ?\<alpha> (e2 # w2)) =
               {} ==>
               ?P ?\<alpha> w1 (e2 # w2);
               fst (?\<alpha> e2) Int mon_pl (map ?\<alpha> (e1 # w1)) =
               {} ==>
               ?P ?\<alpha> (e1 # w1) w2 |]
            ==> ?P ?\<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?wa ?wb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_hole 9),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_induct'",
     "[| !!\<alpha>. ?P \<alpha> [] [];
         !!\<alpha> ad ae. ?P \<alpha> [] (ad # ae);
         !!\<alpha> z aa. ?P \<alpha> (z # aa) [];
         !!\<alpha> e1 w1 e2 w2.
            [| fst (\<alpha> e1) Int mon_pl (map \<alpha> (e2 # w2)) =
               {} ==>
               ?P \<alpha> w1 (e2 # w2);
               fst (\<alpha> e2) Int mon_pl (map \<alpha> (e1 # w1)) =
               {} ==>
               ?P \<alpha> (e1 # w1) w2 |]
            ==> ?P \<alpha> (e1 # w1) (e2 # w2) |]
      ==> ?P ?\<alpha> ?wa ?wb",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ConsInterleave.cil_set_induct_fix\<alpha>",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         ?P [] ?\<alpha> [] [];
         !!e w' w1' w2.
            [| w' : w1' \<otimes>\<^bsub>?\<alpha>\<^esub> w2;
               fst (?\<alpha> e) Int mon_pl (map ?\<alpha> w2) = {};
               ?P w' ?\<alpha> w1' w2 |]
            ==> ?P (e # w') ?\<alpha> (e # w1') w2;
         !!e w' w2' w1.
            [| w' : w1 \<otimes>\<^bsub>?\<alpha>\<^esub> w2';
               fst (?\<alpha> e) Int mon_pl (map ?\<alpha> w1) = {};
               ?P w' ?\<alpha> w1 w2' |]
            ==> ?P (e # w') ?\<alpha> w1 (e # w2') |]
      ==> ?P ?w ?\<alpha> ?w1.0 ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_var 0, template_hole 9),
                  template_var 2),
                template_hole 9),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 2),
               template_var 3),
             template_var 1)
           ))),
    ("ConsInterleave.cil_set_induct",
     "[| ?w : ?w1.0 \<otimes>\<^bsub>?\<alpha>\<^esub> ?w2.0;
         !!\<alpha>. ?P [] \<alpha> [] [];
         !!\<alpha> e w' w1' w2.
            [| w' : w1' \<otimes>\<^bsub>\<alpha>\<^esub> w2;
               fst (\<alpha> e) Int mon_pl (map \<alpha> w2) = {};
               ?P w' \<alpha> w1' w2 |]
            ==> ?P (e # w') \<alpha> (e # w1') w2;
         !!\<alpha> e w' w2' w1.
            [| w' : w1 \<otimes>\<^bsub>\<alpha>\<^esub> w2';
               fst (\<alpha> e) Int mon_pl (map \<alpha> w1) = {};
               ?P w' \<alpha> w1 w2' |]
            ==> ?P (e # w') \<alpha> w1 (e # w2') |]
      ==> ?P ?w ?\<alpha> ?w1.0 ?w2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 2),
               template_var 3),
             template_var 1)
           ))),
    ("ConsInterleave.cil_cases",
     "[| ?w : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
         [| ?w = []; ?wa = []; ?wb = [] |] ==> ?P;
         [| ?wa = []; ?w = ?wb |] ==> ?P; [| ?w = ?wa; ?wb = [] |] ==> ?P;
         !!ea wa' w'.
            [| ?w = ea # w'; ?wa = ea # wa';
               w' : wa' \<otimes>\<^bsub>?\<alpha>\<^esub> ?wb;
               fst (?\<alpha> ea) Int mon_pl (map ?\<alpha> ?wb) = {} |]
            ==> ?P;
         !!eb wb' w'.
            [| ?w = eb # w'; ?wb = eb # wb';
               w' : ?wa \<otimes>\<^bsub>?\<alpha>\<^esub> wb';
               fst (?\<alpha> eb) Int mon_pl (map ?\<alpha> ?wa) = {} |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 4, template_hole 9)],
          template_implication
           ([template_equation (template_var 3, template_hole 9)],
            template_implication
             ([template_equation (template_var 1, template_hole 9)],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation (template_var 3, template_hole 9)],
          template_implication
           ([template_equation (template_var 4, template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 4, template_var 3)],
          template_implication
           ([template_equation (template_var 1, template_hole 9)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ConsInterleaveMoreTemplates"
### 0.414s elapsed time, 0.663s cpu time, 0.088s GC time
val it = (): unit
