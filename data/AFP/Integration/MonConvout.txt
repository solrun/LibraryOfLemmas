Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.502s cpu time, 0.045s GC time
Loading theory "Draft.MonConv" (required by "Draft.MonConvMoreTemplates")
overloading
  mon_conv_real \<equiv> mon_conv :: (nat => real) => real => bool
  mon_conv_real_fun \<equiv> mon_conv ::
    (nat => 'a => real) => ('a => real) => bool
  mon_conv_set \<equiv> mon_conv :: (nat => 'a set) => 'a set => bool
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.858s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs")
consts
  mk_mon :: "(nat => 'a set) => nat => 'a set"
### theory "Draft.MonConv"
### 0.109s elapsed time, 0.435s cpu time, 0.000s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.271s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.757s elapsed time, 2.326s cpu time, 0.285s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.803s elapsed time, 2.272s cpu time, 0.197s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.880s elapsed time, 4.668s cpu time, 0.863s GC time
Loading theory "Draft.Templates" (required by "Draft.MonConvMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.111s cpu time, 0.037s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MonConvMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.429s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.MonConvMoreTemplates"
val templateLemmas =
   [("MonConv.realfun_mon_conv_le", "?x\<up>?y ==> ?x ?i <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_var 1))),
    ("MonConv.real_mon_conv_le", "?x\<up>?y ==> ?x ?i <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_var 1))),
    ("MonConv.mon_conv_mon", "?x\<up>?y ==> ?x ?i <= ?x (?m + ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 1),
         template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MonConv.realfun_mon_conv_iff",
     "?u\<up>?f = (ALL w. (%n. ?u n w)\<up>?f w)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("MonConv.limseq_shift_iff",
     "(%m. ?x (m + ?i)) \<longlonglongrightarrow> ?y =
      ?x \<longlonglongrightarrow> ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("MonConv.real_mon_conv_times",
     "[| ?x\<up>?y; 0 <= ?z |] ==> (%m. ?z * ?x m)\<up>?z * ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("MonConv.real_mon_conv_add",
     "[| ?x\<up>?y; ?a\<up>?b |] ==> (%m. ?x m + ?a m)\<up>?y + ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("MonConv.real_mon_conv_outgrow",
     "[| ?x\<up>?y; ?z < ?y |] ==> EX n. ALL m>=n. ?z < ?x m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("MonConv.realfun_mon_conv_times",
     "[| ?x\<up>?y; 0 <= ?z |] ==> (%m w. ?z * ?x m w)\<up>(%w. ?z * ?y w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_app (template_hole 3, t_empty), t_empty)))),
    ("MonConv.realfun_mon_conv_add",
     "[| ?x\<up>?y; ?a\<up>?b |]
      ==> (%m w. ?x m w + ?a m w)\<up>(%w. ?y w + ?b w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_app (template_hole 1, t_empty), t_empty)))),
    ("MonConv.realfun_mon_conv_bound",
     "[| !!n. ?c n <= ?c (Suc n); !!n. ?c n <= ?x |]
      ==> EX l. ?c\<up>l & l <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MonConv.real_mon_conv_bound",
     "[| !!n. ?c n <= ?c (Suc n); !!n. ?c n <= ?x |]
      ==> EX l. ?c\<up>l & l <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MonConv.real_mon_conv_dom",
     "[| ?x\<up>?y; !!n. ?c n <= ?c (Suc n); ?c <= ?x |]
      ==> EX l. ?c\<up>l & l <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.MonConvMoreTemplates"
### 0.315s elapsed time, 0.446s cpu time, 0.052s GC time
val it = (): unit
