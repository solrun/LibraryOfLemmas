Loading theory "Draft.Sigma_Algebra" (required by "Draft.FailureMoreTemplates" via "Draft.Failure" via "Draft.RealRandVar" via "Draft.Measure")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.FailureMoreTemplates" via "Draft.Failure" via "Draft.RealRandVar" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "sigmap"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.546s cpu time, 0.032s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  trivial_series :: "'a set => 'a set => nat => 'a set"
### theory "Draft.Sigma_Algebra"
### 0.158s elapsed time, 0.648s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.312s elapsed time, 1.245s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.911s cpu time, 0.098s GC time
Loading theory "Draft.MonConv" (required by "Draft.FailureMoreTemplates" via "Draft.Failure" via "Draft.RealRandVar" via "Draft.Measure")
overloading
  mon_conv_real \<equiv> mon_conv :: (nat => real) => real => bool
  mon_conv_real_fun \<equiv> mon_conv ::
    (nat => 'a => real) => ('a => real) => bool
  mon_conv_set \<equiv> mon_conv :: (nat => 'a set) => 'a set => bool
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.407s elapsed time, 1.618s cpu time, 0.130s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.FailureMoreTemplates" via "Draft.Failure" via "Draft.RealRandVar")
consts
  mk_mon :: "(nat => 'a set) => nat => 'a set"
### theory "Draft.MonConv"
### 0.130s elapsed time, 0.512s cpu time, 0.085s GC time
Loading theory "Draft.Measure" (required by "Draft.FailureMoreTemplates" via "Draft.Failure" via "Draft.RealRandVar")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  mkdisjoint :: "(nat => 'a set) => nat => 'a set"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  trivial_series2 :: "'a set => 'a set => nat => 'a set"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Measure"
### 0.476s elapsed time, 1.885s cpu time, 0.167s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.114s elapsed time, 4.240s cpu time, 0.852s GC time
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.361s elapsed time, 4.922s cpu time, 0.918s GC time
Loading theory "Draft.RealRandVar" (required by "Draft.FailureMoreTemplates" via "Draft.Failure")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.980s elapsed time, 3.256s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
measure_space ?M ==>
(?f : rv ?M) = (ALL a. {w. a <= ?f w} : measurable_sets ?M)
### theory "Draft.RealRandVar"
### 0.421s elapsed time, 1.049s cpu time, 0.160s GC time
Loading theory "Draft.Failure" (required by "Draft.FailureMoreTemplates")
### theory "HOL-Library.Tree"
### 2.083s elapsed time, 7.107s cpu time, 1.262s GC time
Loading theory "Draft.Templates" (required by "Draft.FailureMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "integral_setp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.133s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FailureMoreTemplates")
### theory "Draft.Failure"
### 0.179s elapsed time, 0.419s cpu time, 0.087s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.494s elapsed time, 0.649s cpu time, 0.087s GC time
Loading theory "Draft.FailureMoreTemplates"
val templateLemmas =
   [("Failure.integral_setp_integral_set_eq",
     "integral_setp ?M = (%x xa. (x, xa) : integral_set ?M)",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty))]:
   (string * thm * template) list
### theory "Draft.FailureMoreTemplates"
### 0.539s elapsed time, 1.128s cpu time, 0.679s GC time
val it = (): unit
