Loading theory "Draft.Sigma_Algebra" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral" via "Draft.RealRandVar" via "Draft.Measure")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral" via "Draft.RealRandVar" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "sigmap"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.597s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  trivial_series :: "'a set => 'a set => nat => 'a set"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.Sigma_Algebra"
### 0.181s elapsed time, 0.749s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.292s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.847s cpu time, 0.092s GC time
Loading theory "Draft.MonConv" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral" via "Draft.RealRandVar" via "Draft.Measure")
overloading
  mon_conv_real \<equiv> mon_conv :: (nat => real) => real => bool
  mon_conv_real_fun \<equiv> mon_conv ::
    (nat => 'a => real) => ('a => real) => bool
  mon_conv_set \<equiv> mon_conv :: (nat => 'a set) => 'a set => bool
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.419s elapsed time, 1.679s cpu time, 0.126s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral" via "Draft.RealRandVar")
consts
  mk_mon :: "(nat => 'a set) => nat => 'a set"
### theory "Draft.MonConv"
### 0.129s elapsed time, 0.512s cpu time, 0.096s GC time
Loading theory "Draft.Measure" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral" via "Draft.RealRandVar")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  mkdisjoint :: "(nat => 'a set) => nat => 'a set"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  trivial_series2 :: "'a set => 'a set => nat => 'a set"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Measure"
### 0.468s elapsed time, 1.853s cpu time, 0.168s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.872s elapsed time, 3.441s cpu time, 0.359s GC time
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.343s elapsed time, 4.801s cpu time, 0.968s GC time
Loading theory "Draft.RealRandVar" (required by "Draft.IntegralMoreTemplates" via "Draft.Integral")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.999s elapsed time, 3.273s cpu time, 0.880s GC time
measure_space ?M ==>
(?f : rv ?M) = (ALL a. {w. a <= ?f w} : measurable_sets ?M)
Found termination order: "size <*mlex*> {}"
### theory "Draft.RealRandVar"
### 0.422s elapsed time, 1.066s cpu time, 0.160s GC time
Loading theory "Draft.Integral" (required by "Draft.IntegralMoreTemplates")
Proofs for inductive predicate(s) "sfisp"
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 7.051s cpu time, 1.316s GC time
Loading theory "Draft.Templates" (required by "Draft.IntegralMoreTemplates" via "Draft.ExtrEqs")
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.235s cpu time, 0.098s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IntegralMoreTemplates")
Proofs for inductive predicate(s) "nnfisp"
  Proving monotonicity ...
consts
  mon_upclose_help ::
    "nat => (nat => nat => 'a => real) => nat => 'a => real"
### Ignoring duplicate rewrite rule:
### (0::?'a1) <= ?a1 ==> (0::?'a1) <= ?a1 ^ ?n1 == True
### Ambiguous input (line 2038 of "$AFP/Integration/Integral.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Integral.integral"
###       ("_lambda" ("_position" t)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" f) ("_position" t))
###           ("_applC" ("_position" g) ("_position" t))))
###       ("_position" M))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Integral.integral" ("_position" f) ("_position" M))
###       ("\<^const>Integral.integral" ("_position" g) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Integral.integral"
###       ("_lambda" ("_position" t)
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" f) ("_position" t))
###           ("_applC" ("_position" g) ("_position" t))))
###       ("_position" M))
###     ("\<^const>Integral.integral" ("_position" f)
###       ("\<^const>Groups.plus_class.plus" ("_position" M)
###         ("\<^const>Integral.integral" ("_position" g) ("_position" M))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2221 of "$AFP/Integration/Integral.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("\<^const>RealRandVar.distribution")
###       ("_cargs" ("_position" M)
###         ("_cargs" ("_position" f)
###           ("\<^const>Set_Interval.ord_class.atLeast" ("_position" a)))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^const>Integral.integral"
###         ("_lambda" ("_position" x)
###           ("\<^const>Power.power_class.power"
###             ("\<^const>Groups.abs_class.abs"
###               ("_applC" ("_position" f) ("_position" x)))
###             ("_position" n)))
###         ("_position" M))
###       ("\<^const>Power.power_class.power" ("_position" a)
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("\<^const>RealRandVar.distribution")
###       ("_cargs" ("_position" M)
###         ("_cargs" ("_position" f)
###           ("\<^const>Set_Interval.ord_class.atLeast" ("_position" a)))))
###     ("\<^const>Integral.integral"
###       ("_lambda" ("_position" x)
###         ("\<^const>Power.power_class.power"
###           ("\<^const>Groups.abs_class.abs"
###             ("_applC" ("_position" f) ("_position" x)))
###           ("_position" n)))
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" M)
###         ("\<^const>Power.power_class.power" ("_position" a)
###           ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Integral"
### 0.701s elapsed time, 1.851s cpu time, 0.972s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.777s elapsed time, 1.740s cpu time, 0.873s GC time
Loading theory "Draft.IntegralMoreTemplates"
val templateLemmas =
   [("Integral.prod_encode_fst_inj", "inj (%i. prod_encode (i, ?j))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Integral.prod_encode_snd_inj", "inj (%j. prod_encode (?i, j))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Integral.integrable_rv", "integrable ?f ?M ==> ?f : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Integral.nnfis_nn", "?a : nnfis ?f ?M ==> nonnegative ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Integral.sfis_nn", "?a : sfis ?f ?M ==> nonnegative ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Integral.nnfisp_nnfis_eq", "nnfisp ?f ?M = (%x. x : nnfis ?f ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("Integral.sfisp_sfis_eq", "sfisp ?f ?M = (%x. x : sfis ?f ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("Integral.integral_times",
     "integrable ?f ?M ==> integrable (%t. ?a * ?f t) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Integral.sfis_nnfis", "?a : sfis ?f ?M ==> ?a : nnfis ?f ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Integral.integral_char",
     "[| measure_space ?M; ?A : measurable_sets ?M |]
      ==> integrable \<chi> ?A ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Integral.nnfis_integral",
     "[| ?a : nnfis ?f ?M; measure_space ?M |] ==> integrable ?f ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Integral.nnfis_rv",
     "[| measure_space ?M; ?a : nnfis ?f ?M |] ==> ?f : rv ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Integral.sfis_rv",
     "[| measure_space ?M; ?a : sfis ?f ?M |] ==> ?f : rv ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Integral.nnfis_integral",
     "[| ?a : nnfis ?f ?M; measure_space ?M |]
      ==> \<integral> ?f \<partial>?M = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Integral.integral_times",
     "integrable ?f ?M ==>
      \<integral> (%t. ?a * ?f t) \<partial>?M =
      ?a * \<integral> ?f \<partial>?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Integral.integral_char",
     "[| measure_space ?M; ?A : measurable_sets ?M |]
      ==> \<integral> \<chi> ?A \<partial>?M = Measure.measure ?M ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Integral.sfis_char",
     "[| measure_space ?M; ?A : measurable_sets ?M |]
      ==> Measure.measure ?M ?A : sfis \<chi> ?A ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Integral.integral_add",
     "[| integrable ?f ?M; integrable ?g ?M |]
      ==> integrable (%t. ?f t + ?g t) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Integral.mu_help",
     "[| !!n. (%m. ?u m n)\<up>?f n; ?f\<up>?h |] ==> mu ?u\<up>?h",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Integral.sumr_sum",
     "(SUM i = 0..<?k. if i : ?R then ?f i else 0) =
      sum ?f (?R Int {..<?k})",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Integral.nnfis_unique",
     "[| measure_space ?M; ?a : nnfis ?f ?M; ?b : nnfis ?f ?M |]
      ==> ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Integral.sfis_unique",
     "[| measure_space ?M; ?a : sfis ?f ?M; ?b : sfis ?f ?M |] ==> ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Integral.real_le_mult_sustain",
     "(!!z. [| 0 < z; z < 1 |] ==> z * ?r <= ?y) ==> ?r <= ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Integral.mu_help",
     "[| !!n. (%m. ?u m n)\<up>?f n; ?f\<up>?h |] ==> mu ?u ?n <= ?f ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Integral.integral_mono",
     "[| integrable ?f ?M; integrable ?g ?M; ?f <= ?g |]
      ==> \<integral> ?f \<partial>?M <= \<integral> ?g \<partial>?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Integral.sfis_times",
     "[| ?a : sfis ?f ?M; 0 <= ?z |] ==> ?z * ?a : sfis (%w. ?z * ?f w) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))
           ))),
    ("Integral.sum_rv",
     "[| ALL k:?K. ?f k : rv ?M; measure_space ?M |]
      ==> (%t. SUM k:?K. ?f k t) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Integral.integral_add",
     "[| integrable ?f ?M; integrable ?g ?M |]
      ==> \<integral> (%t. ?f t + ?g t) \<partial>?M =
          \<integral> ?f \<partial>?M + \<integral> ?g \<partial>?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Integral.nnfis_minus_nnfis_integral",
     "[| ?a : nnfis ?f ?M; ?b : nnfis ?g ?M; measure_space ?M |]
      ==> integrable (%t. ?f t - ?g t) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)
           ))),
    ("Integral.nnfis_mono",
     "[| measure_space ?M; ?a : nnfis ?f ?M; ?b : nnfis ?g ?M; ?f <= ?g |]
      ==> ?a <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 4))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation (less_equals, template_var 3, template_var 1))),
    ("Integral.sfis_mono",
     "[| measure_space ?M; ?a : sfis ?f ?M; ?b : sfis ?g ?M; ?f <= ?g |]
      ==> ?a <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 4))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation (less_equals, template_var 3, template_var 1))),
    ("Integral.nnfis_times",
     "[| measure_space ?M; ?a : nnfis ?f ?M; 0 <= ?z |]
      ==> ?z * ?a : nnfis (%w. ?z * ?f w) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3))
            ),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, t_empty), template_var 3))
           ))),
    ("Integral.upclose_sfis",
     "[| measure_space ?M; ?a : sfis ?f ?M; ?b : sfis ?g ?M |]
      ==> EX c. c : sfis (upclose ?f ?g) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Integral.nnfis_add",
     "[| measure_space ?M; ?a : nnfis ?f ?M; ?b : nnfis ?g ?M |]
      ==> ?a + ?b : nnfis (%w. ?f w + ?g w) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, t_empty), template_var 4))
           ))),
    ("Integral.sfis_add",
     "[| measure_space ?M; ?a : sfis ?f ?M; ?b : sfis ?g ?M |]
      ==> ?a + ?b : sfis (%w. ?f w + ?g w) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, t_empty), template_var 4))
           ))),
    ("Integral.nnfis_minus_nnfis_integral",
     "[| ?a : nnfis ?f ?M; ?b : nnfis ?g ?M; measure_space ?M |]
      ==> \<integral> (%t. ?f t - ?g t) \<partial>?M = ?a - ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 1)))),
    ("Integral.nnfis_mon_conv",
     "[| ?f\<up>?h; !!n. ?x n : nnfis (?f n) ?M; ?x\<up>?y;
         measure_space ?M |]
      ==> ?y : nnfis ?h ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1))
           ))),
    ("Integral.mu_sfis",
     "[| !!m n. EX a. a : sfis (?u m n) ?M; measure_space ?M |]
      ==> EX c. ALL m. c m : sfis (mu ?u m) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Integral.rv_mon_conv_sfis",
     "[| measure_space ?M; ?f : rv ?M; nonnegative ?f |]
      ==> EX u x. u\<up>?f & (ALL n. x n : sfis (u n) ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Integral.sfis_sum",
     "[| measure_space ?M; ALL i:?S. ?a i : sfis (?f i) ?M; finite ?S |]
      ==> sum ?a ?S : sfis (%t. SUM i:?S. ?f i t) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 2, t_empty), template_var 3))
           ))),
    ("Integral.nnfis_dom_conv",
     "[| measure_space ?M; ?f : rv ?M; ?b : nnfis ?g ?M; ?f <= ?g;
         nonnegative ?f |]
      ==> EX a. a : nnfis ?f ?M & a <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Integral.markov_ineq",
     "[| integrable ?f ?M; 0 < ?a;
         integrable (%x. \<bar>?f x\<bar> ^ ?n) ?M |]
      ==> law ?M ?f {?a..}
          <= \<integral> (%x. \<bar>?f x\<bar> ^ ?n) \<partial>?M /
             ?a ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty), template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 3),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))))),
    ("Integral.sfis_mon_conv_mono",
     "[| ?u\<up>?f; !!n. ?x n : sfis (?u n) ?M; ?x\<up>?y; ?r : sfis ?s ?M;
         ?s <= ?f; measure_space ?M |]
      ==> ?r <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 0, template_var 5),
        template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_inequation (less_equals, template_var 1, template_var 2))),
    ("Integral.sf_norm_help",
     "[| finite ?K; ?j : ?K; ?t : ?C ?j; ALL i:?K - {?j}. ?t ~: ?C i |]
      ==> (SUM i:?K. ?z i * \<chi> (?C i) ?t) = ?z ?j",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_var 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 5))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 4),
         template_app (template_var 0, template_var 3)))),
    ("Integral.sfis_intro",
     "[| measure_space ?M; ALL i:?S. ?A i : measurable_sets ?M;
         nonnegative ?x; finite ?S |]
      ==> (SUM i:?S. ?x i * Measure.measure ?M (?A i))
          : sfis (%t. SUM i:?S. ?x i * \<chi> (?A i) t) ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 1, t_empty), template_var 3))
           ))),
    ("Integral.char_split",
     "[| \<Union> (?B ` ?R) = UNIV; finite ?R;
         ALL j1:?R. ALL j2:?R. j1 ~= j2 --> ?B j1 Int ?B j2 = {} |]
      ==> \<chi> ?A ?t = (SUM j:?R. \<chi> (?A Int ?B j) ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, t_empty), template_var 2)),
          template_hole 10),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Integral.measure_sums_UNION",
     "[| measure_space ?M;
         ALL j1:?R. ALL j2:?R. j1 ~= j2 --> ?B j1 Int ?B j2 = {};
         ALL j:?R. ?B j : measurable_sets ?M |]
      ==> (%n. Measure.measure ?M (if n : ?R then ?B n else {})) sums
          Measure.measure ?M (\<Union> (?B ` ?R))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))))
           ))),
    ("Integral.measure_sum",
     "[| measure_space ?M;
         ALL j1:?R. ALL j2:?R. j1 ~= j2 --> ?B j1 Int ?B j2 = {};
         ALL j:?R. ?B j : measurable_sets ?M; finite ?R |]
      ==> Measure.measure ?M (\<Union> (?B ` ?R)) =
          (SUM j:?R. Measure.measure ?M (?B j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1), t_empty)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Integral.measure_split",
     "[| measure_space ?M; \<Union> (?B ` ?R) = UNIV; finite ?R;
         ALL j1:?R. ALL j2:?R. j1 ~= j2 --> ?B j1 Int ?B j2 = {};
         ALL j:?R. ?B j : measurable_sets ?M; ?A : measurable_sets ?M |]
      ==> Measure.measure ?M ?A =
          (SUM j:?R. Measure.measure ?M (?A Int ?B j))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, t_empty), template_var 1)),
          template_hole 12),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Integral.sfis_present",
     "[| measure_space ?M; ?a : sfis ?f ?M; ?b : sfis ?g ?M |]
      ==> EX z1 z2 C K.
             ?f = (%t. SUM i:K. z1 i * \<chi> (C i) t) &
             ?g = (%t. SUM i:K. z2 i * \<chi> (C i) t) &
             ?a = (SUM i:K. z1 i * Measure.measure ?M (C i)) &
             ?b = (SUM i:K. z2 i * Measure.measure ?M (C i)) &
             finite K &
             (ALL i:K. ALL j:K. i ~= j --> C i Int C j = {}) &
             (ALL i:K. C i : measurable_sets ?M) &
             \<Union> (C ` K) = UNIV & nonnegative z1 & nonnegative z2",
     template_implication
      ([template_predicate
         (template_app (template_hole 26, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 3),
              template_app
               (template_app (template_hole 24, template_var 2),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 1),
              template_app
               (template_app (template_hole 24, template_var 0),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 23, t_empty))))]:
   (string * thm * template) list
### theory "Draft.IntegralMoreTemplates"
### 0.374s elapsed time, 0.520s cpu time, 0.084s GC time
val it = (): unit
