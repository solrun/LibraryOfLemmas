Loading theory "Draft.Sigma_Algebra" (required by "Draft.RealRandVarMoreTemplates" via "Draft.RealRandVar" via "Draft.Measure")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.RealRandVarMoreTemplates" via "Draft.RealRandVar" via "HOL-Library.Countable")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "sigmap"
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  trivial_series :: "'a set => 'a set => nat => 'a set"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.609s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Sigma_Algebra"
### 0.148s elapsed time, 0.611s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.398s elapsed time, 1.598s cpu time, 0.118s GC time
Loading theory "Draft.MonConv" (required by "Draft.RealRandVarMoreTemplates" via "Draft.RealRandVar" via "Draft.Measure")
### theory "HOL-Library.Nat_Bijection"
### 0.411s elapsed time, 1.644s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.268s elapsed time, 1.058s cpu time, 0.085s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.RealRandVarMoreTemplates" via "Draft.RealRandVar")
overloading
  mon_conv_real \<equiv> mon_conv :: (nat => real) => real => bool
  mon_conv_real_fun \<equiv> mon_conv ::
    (nat => 'a => real) => ('a => real) => bool
  mon_conv_set \<equiv> mon_conv :: (nat => 'a set) => 'a set => bool
consts
  mk_mon :: "(nat => 'a set) => nat => 'a set"
### theory "Draft.MonConv"
### 0.136s elapsed time, 0.529s cpu time, 0.083s GC time
Loading theory "Draft.Measure" (required by "Draft.RealRandVarMoreTemplates" via "Draft.RealRandVar")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  mkdisjoint :: "(nat => 'a set) => nat => 'a set"
Found termination order: "size <*mlex*> {}"
consts
  trivial_series2 :: "'a set => 'a set => nat => 'a set"
### theory "Draft.Measure"
### 0.496s elapsed time, 1.962s cpu time, 0.158s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Stream"
### 1.120s elapsed time, 4.243s cpu time, 0.933s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.382s elapsed time, 5.044s cpu time, 0.988s GC time
Loading theory "Draft.RealRandVar" (required by "Draft.RealRandVarMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.992s elapsed time, 3.287s cpu time, 0.820s GC time
Found termination order: "size <*mlex*> {}"
measure_space ?M ==>
(?f : rv ?M) = (ALL a. {w. a <= ?f w} : measurable_sets ?M)
### theory "Draft.RealRandVar"
### 0.420s elapsed time, 1.111s cpu time, 0.138s GC time
### theory "HOL-Library.Tree"
### 2.099s elapsed time, 7.269s cpu time, 1.211s GC time
Loading theory "Draft.Templates" (required by "Draft.RealRandVarMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.068s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RealRandVarMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.479s elapsed time, 0.554s cpu time, 0.091s GC time
Loading theory "Draft.RealRandVarMoreTemplates"
val templateLemmas =
   [("RealRandVar.nn_pp_np", "nonnegative ?f ==> pp ?f = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("RealRandVar.const_rv", "measure_space ?M ==> (%x. ?c) : rv ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.nn_pp_np", "nonnegative ?f ==> np ?f = (%t. 0::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("RealRandVar.f_plus_minus2", "?f = (%t. pp ?f t - np ?f t)",
     template_equation (template_var 0, t_empty)),
    ("RealRandVar.f_plus_minus", "?f ?x = pp ?f ?x - np ?f ?x",
     template_equation
      (template_app (template_var 1, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("RealRandVar.const_measurable",
     "sigma_algebra ?S ==> (%x. ?c) : measurable ?S ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("RealRandVar.f_abs_plus_minus",
     "\<bar>?f ?x\<bar> = pp ?f ?x + np ?f ?x",
     template_equation
      (template_app
        (template_hole 3, template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("RealRandVar.real_neg_pp_np", "?f <= (%t. 0) ==> pp ?f = (%t. 0)",
     template_implication
      ([template_inequation (less_equals, template_var 0, t_empty)],
       template_equation
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("RealRandVar.pp_np_rv", "?f : rv ?M ==> np ?f : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("RealRandVar.pp_np_rv", "?f : rv ?M ==> pp ?f : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("RealRandVar.real_neg_pp_np", "?f <= (%t. 0) ==> np ?f = (%t. - ?f t)",
     template_implication
      ([template_inequation (less_equals, template_var 0, t_empty)],
       template_equation
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("RealRandVar.char_rv",
     "[| measure_space ?M; ?A : measurable_sets ?M |]
      ==> \<chi> ?A : rv ?M",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.char_measurable",
     "[| ?a : ?S; sigma_algebra ?S |] ==> \<chi> ?a : measurable ?S ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("RealRandVar.pp_np_rv_iff",
     "(?f : rv ?M) = (pp ?f : rv ?M & np ?f : rv ?M)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("RealRandVar.rv_square", "?f : rv ?M ==> (%w. (?f w)\<^sup>2) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0))
           ))),
    ("RealRandVar.affine_rv", "?g : rv ?M ==> (%x. ?a + ?g x * ?b) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 2))
           ))),
    ("RealRandVar.pow2_le_abs",
     "(?a\<^sup>2 <= ?b\<^sup>2) = (\<bar>?a\<bar> <= \<bar>?b\<bar>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("RealRandVar.pos_pp_np_help",
     "(0::?'b) <= ?f ?x ==> pp ?f ?x = ?f ?x & np ?f ?x = (0::?'b)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 4,
          template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 4))
           ))),
    ("RealRandVar.mon_conv_rv",
     "[| !!n. ?u n : rv ?M; ?u\<up>?f |] ==> ?f : rv ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))
           ))),
    ("RealRandVar.real_neg_pp_np_help",
     "?f ?x <= 0 ==> np ?f ?x = - ?f ?x & pp ?f ?x = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_var 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 5))
           ))),
    ("RealRandVar.rv_gr_iff",
     "measure_space ?M ==>
      (?f : rv ?M) = (ALL a. {w. a < ?f w} : measurable_sets ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("RealRandVar.rv_less_iff",
     "measure_space ?M ==>
      (?f : rv ?M) = (ALL a. {w. ?f w < a} : measurable_sets ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("RealRandVar.rv_ge_iff",
     "measure_space ?M ==>
      (?f : rv ?M) = (ALL a. {w. a <= ?f w} : measurable_sets ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("RealRandVar.rv_le_iff",
     "measure_space ?M ==>
      (?f : rv ?M) = (ALL a. {w. ?f w <= a} : measurable_sets ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("RealRandVar.rv_minus_rv",
     "[| ?f : rv ?M; ?g : rv ?M |] ==> (%t. ?f t - ?g t) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 1))
           ))),
    ("RealRandVar.rv_plus_rv",
     "[| ?f : rv ?M; ?g : rv ?M |] ==> (%w. ?f w + ?g w) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 1))
           ))),
    ("RealRandVar.rv_times_rv",
     "[| ?f : rv ?M; ?g : rv ?M |] ==> (%w. ?f w * ?g w) : rv ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 1))
           ))),
    ("RealRandVar.f_eq_g_measurable",
     "[| ?f : rv ?M; ?g : rv ?M |]
      ==> {w. ?f w = ?g w} : measurable_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.rv_less_rv_measurable",
     "[| ?f : rv ?M; ?g : rv ?M |]
      ==> {w. ?f w < ?g w} : measurable_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.rv_le_rv_measurable",
     "[| ?f : rv ?M; ?g : rv ?M |]
      ==> {w. ?f w <= ?g w} : measurable_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.f_noteq_g_measurable",
     "[| ?f : rv ?M; ?g : rv ?M |]
      ==> {w. ?f w ~= ?g w} : measurable_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RealRandVar.gr_le",
     "[| sigma_algebra ?A; ALL a. {w. a < ?f w} : ?A |]
      ==> ALL a. {w. ?f w <= a} : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RealRandVar.less_ge",
     "[| sigma_algebra ?A; ALL a. {w. ?f w < a} : ?A |]
      ==> ALL a. {w. a <= ?f w} : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RealRandVar.ge_gr",
     "[| sigma_algebra ?A; ALL a. {w. a <= ?f w} : ?A |]
      ==> ALL a. {w. a < ?f w} : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RealRandVar.le_less",
     "[| sigma_algebra ?A; ALL a. {w. ?f w <= a} : ?A |]
      ==> ALL a. {w. ?f w < a} : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RealRandVar.realpow_two_binomial_iff",
     "(?f + ?g)\<^sup>2 = ?f\<^sup>2 + 2 * (?f * ?g) + ?g\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))))),
    ("RealRandVar.times_iff_sum_squares",
     "?f * ?g = (?f + ?g)\<^sup>2 / 4 - (?f - ?g)\<^sup>2 / 4",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_hole 2, template_hole 1))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app (template_hole 2, template_hole 1))))))),
    ("RealRandVar.real_pp_np_pos_times",
     "0 <= ?a ==>
      pp (%t. ?a * ?f t) = (%t. ?a * pp ?f t) &
      np (%t. ?a * ?f t) = (%t. ?a * np ?f t)",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 0, t_empty)),
               t_empty))
           ))),
    ("RealRandVar.real_pp_np_neg_times",
     "?a <= 0 ==>
      pp (%t. ?a * ?f t) = (%t. - ?a * np ?f t) &
      np (%t. ?a * ?f t) = (%t. - ?a * pp ?f t)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 0, t_empty)),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.RealRandVarMoreTemplates"
### 0.550s elapsed time, 1.188s cpu time, 0.754s GC time
val it = (): unit
