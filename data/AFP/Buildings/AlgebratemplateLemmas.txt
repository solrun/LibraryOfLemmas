   [("Algebra.genby_Group", "Group \<langle>?S\<rangle>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebra.FreeGroup_Group", "Group (FreeGroup ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebra.additive_freeword_funlift", "UGroupHom (freeword_funlift ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebra.lcoset_inj_on", "inj ((+o) ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Function_Algebras.one_fun_apply", "1 ?x = (1::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Function_Algebras.zero_fun_apply", "0 ?x = (0::?'a)",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Algebra.genby_genset_subset", "?S <= \<langle>?S\<rangle>",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Algebra.FreeGroup_0_closed", "0 : FreeGroup ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Algebra.freeword_funlift_0", "freeword_funlift ?f 0 = (0::?'h)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Algebra.set_zero_plus'", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_zero_plus", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_one_times", "(1::?'a) *o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Function_Algebras.of_nat_fun_apply", "of_nat ?n ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.numeral_fun_apply", "numeral ?n ?x = numeral ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Function_Algebras.of_nat_fun", "of_nat ?n = (%x. of_nat ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Function_Algebras.numeral_fun", "numeral ?n = (%x. numeral ?n)",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("Algebra.genby_uminus_genset_subset",
     "uminus ` ?S <= \<langle>?S\<rangle>",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Algebra.genby_lcoset_refl", "?a : ?a +o \<langle>?S\<rangle>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Boolean_Algebras.sup_boolI1", "?P ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.sup_boolI2", "?Q ==> sup ?P ?Q",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Algebra.lcoset_0", "?w +o 0 = {?w}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Algebra.genby_lcoset_empty", "?w +o \<langle>{}\<rangle> = {?w}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Boolean_Algebras.sup1I1", "?A ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup1I2", "?B ?x ==> sup ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Boolean_Algebras.inf1D1", "inf ?A ?B ?x ==> ?A ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Boolean_Algebras.inf1D2", "inf ?A ?B ?x ==> ?B ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Algebra.freeword_funlift_uminus",
     "freeword_funlift ?f (- ?g) = - freeword_funlift ?f ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Algebra.times2_conv_add", "?j + ?j = 2 * ?j",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Algebra.genby_empty'", "?w : \<langle>{}\<rangle> ==> ?w = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_hole 2))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Function_Algebras.plus_fun_apply", "(?f + ?g) ?x = ?f ?x + ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.times_fun_apply", "(?f * ?g) ?x = ?f ?x * ?g ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Function_Algebras.func_plus", "?f + ?g = (%x. ?f x + ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Function_Algebras.func_times", "?f * ?g = (%x. ?f x * ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       t_empty)),
    ("Algebra.freeword_funlift_surj",
     "freeword_funlift ?f ` FreeGroup ?S = \<langle>?f ` ?S\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Boolean_Algebras.sup2I1", "?A ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Boolean_Algebras.sup2I2", "?B ?x ?y ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.genby_mono",
     "?T <= ?S ==> \<langle>?T\<rangle> <= \<langle>?S\<rangle>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Algebra.lcoset_refl", "(0::?'a) : ?A ==> ?a : ?a +o ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_zero_plus2", "(0::?'a) : ?A ==> ?B <= ?A + ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Boolean_Algebras.inf2D1", "inf ?A ?B ?x ?y ==> ?A ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Boolean_Algebras.inf2D2", "inf ?A ?B ?x ?y ==> ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Algebra.freeword_funlift_Abs_freeletter",
     "freeword_funlift ?f (Abs_freeletter ?s) = ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))),
       template_app (template_var 1, template_var 0))),
    ("Algebra.genbyp_genby_eq",
     "genbyp (%x. x : ?S) = (%x. x : \<langle>?S\<rangle>)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Set_Algebras.set_plus_rearrange3", "?a +o ?B + ?C = ?a +o (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_rearrange2",
     "?a +o (?b +o ?C) = (?a + ?b) +o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_times_rearrange3", "?a *o ?B * ?C = ?a *o (?B * ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange2",
     "?a *o (?b *o ?C) = (?a * ?b) *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange4", "?C + ?a +o ?D = ?a +o (?C + ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange4", "?C * ?a *o ?D = ?a *o (?C * ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_minus_plus", "(?a - ?b : ?C) = (?a : ?b +o ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.fully_prappend_signed_list",
     "prappend_signed_list (rev (map flip_signed ?xs)) ?xs = []",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 0))),
         template_var 0),
       template_hole 0)),
    ("Algebra.flip_signed_order2", "flip_signed (flip_signed ?x) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_var 0)),
    ("Algebra.genby_uminus_closed",
     "?g : \<langle>?S\<rangle> ==> - ?g : \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Algebra.FreeGroup_uminus_closed",
     "?g : FreeGroup ?S ==> - ?g : FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Algebra.freeword_funlift_uminus_Abs_freeletter",
     "freeword_funlift ?f (Abs_freeword [pairfalse ?s]) = - ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_hole 1))),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Algebra.ker_subset_ker_restrict0", "ker ?f <= ker (restrict0 ?f ?A)",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 1),
       template_app (template_hole 3, t_empty))),
    ("Set_Algebras.set_plus_mono", "?C <= ?D ==> ?a +o ?C <= ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono", "?C <= ?D ==> ?a *o ?C <= ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_plus_mono3", "?a : ?C ==> ?a +o ?D <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro2", "?b : ?C ==> ?a + ?b : ?a +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono3", "?a : ?C ==> ?a *o ?D <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_intro2", "?b : ?C ==> ?a * ?b : ?a *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_neg_intro2", "?a : ?C ==> - ?a : - (1::?'a) *o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_hole 0)),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4", "?a : ?C ==> ?a +o ?D <= ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_times_mono4", "?a : ?C ==> ?a *o ?D <= ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Set_Algebras.set_plus_imp_minus", "?a : ?b +o ?C ==> ?a - ?b : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Set_Algebras.set_minus_imp_plus", "?a - ?b : ?C ==> ?a : ?b +o ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.set_neg_intro", "?a : - (1::?'a) *o ?C ==> - ?a : ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("Algebra.lcoset_eq_reps", "?a +o ?A = ?a +o ?B ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Algebra.lcoset_eq_reps_subset", "?a +o ?A <= ?a +o ?B ==> ?A <= ?B",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Boolean_Algebras.inf1I", "[| ?A ?x; ?B ?x |] ==> inf ?A ?B ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Set_Algebras.finite_set_plus",
     "[| finite ?s; finite ?t |] ==> finite (?s + ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Algebras.finite_set_times",
     "[| finite ?s; finite ?t |] ==> finite (?s * ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebra.hom_restrict0_freeword_funlift",
     "GroupHom (FreeGroup ?S) (res_freeword_funlift ?f ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           t_empty)
         )),
    ("Algebra.freeword_funlift_diff",
     "freeword_funlift ?f (?g - ?g') =
      freeword_funlift ?f ?g - freeword_funlift ?f ?g'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.freeword_funlift_add",
     "freeword_funlift ?f (?g + ?g') =
      freeword_funlift ?f ?g + freeword_funlift ?f ?g'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "?A * (?B Un ?C) = ?A * ?B Un ?A * ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "(?A Un ?B) * ?C = ?A * ?C Un ?B * ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib2",
     "?a *o (?B + ?C) = ?a *o ?B + ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib",
     "?a *o (?b +o ?C) = ?a * ?b +o ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.Abs_freeletter_in_FreeGroup_iff",
     "(Abs_freeletter ?s : FreeGroup ?S) = (?s : ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Set_Algebras.set_times_plus_distrib3",
     "?a +o ?C * ?D <= ?a *o ?D + ?C * ?D",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Algebra.genby_lcoset_el_reduce",
     "?a : \<langle>?S\<rangle> ==>
      ?a +o \<langle>?S\<rangle> = \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Algebra.FreeGroupD",
     "?x : FreeGroup ?S ==> fst ` set (freeword ?x) <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Algebra.lcoset_conv_set", "?a : ?b +o ?A ==> - ?b + ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 2)),
             template_var 0)
           ))),
    ("Boolean_Algebras.sup1CI", "(~ ?B ?x ==> ?A ?x) ==> sup ?A ?B ?x",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 2, template_var 1))
               )],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.collapse_flipped_signed",
     "prappend_signed_list [(?s, ?b)] [(?s, ~ ?b)] = []",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_hole 1)),
       template_hole 1)),
    ("Algebra.fst_set_prappend_signed_list",
     "fst ` set (prappend_signed_list ?xs ?ys)
      <= fst ` (set ?xs Un set ?ys)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Algebra.freeword_funlift_im",
     "?x : FreeGroup ?S ==>
      freeword_funlift ?f ?x : \<langle>?f ` ?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Algebra.lcoset_relI", "- ?x + ?y : ?A ==> (?x, ?y) : lcoset_rel ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.permutation_eq_image",
     "?a `\<rightarrow> ?A = ?a `\<rightarrow> ?B ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 2)),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Set_Algebras.set_plus_image",
     "?S + ?T = (%(x, y). x + y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_image",
     "?S * ?T = (%(x, y). x * y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "?A * \<Union> (?M ` ?I) = (UN i:?I. ?A * ?M i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "\<Union> (?M ` ?I) * ?A = (UN i:?I. ?M i * ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Set_Algebras.set_plus_rearrange",
     "?a +o ?C + ?b +o ?D = (?a + ?b) +o (?C + ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange",
     "?a *o ?C * ?b *o ?D = (?a * ?b) *o (?C * ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.Abs_freelist_inverse",
     "freeword (Abs_freelist ?as) = map pairtrue ?as",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Algebra.uminus_Abs_freeword_singleton",
     "- Abs_freeword [(?s, ?b)] = Abs_freeword [(?s, ~ ?b)]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1))),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_hole 1)))),
    ("Algebra.genby_lcoset_el_reduce0",
     "(0::?'g) : ?a +o \<langle>?S\<rangle> ==>
      ?a +o \<langle>?S\<rangle> = \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Algebra.sum_list_lists_in_genby",
     "?ss : lists (?S Un uminus ` ?S) ==>
      sum_list ?ss : \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Boolean_Algebras.inf2I",
     "[| ?A ?x ?y; ?B ?x ?y |] ==> inf ?A ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.extend_map_to_freeword_hom2",
     "UGroupHom (%x. SUM (s, b)<-freeword x. if b then ?f s else - ?f s)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Algebra.universal_property",
     "EX! g. g o Abs_freeletter = ?f & UGroupHom g",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Algebra.freeword_funlift_Abs_freelist",
     "freeword_funlift ?f (Abs_freelist ?xs) = sum_list (map ?f ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Algebra.genby_eq_sum_lists",
     "\<langle>?S\<rangle> =
      (UN ss:lists (?S Un uminus ` ?S). {sum_list ss})",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("Algebra.Abs_freeletter_prod_conv_Abs_freeword",
     "snd ?x ==> Abs_freeletter (fst ?x) = Abs_freeword [?x]",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_hole 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 0))))),
    ("Algebra.Abs_freelist_in_FreeGroup",
     "?ss : lists ?S ==> Abs_freelist ?ss : FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Boolean_Algebras.sup2CI",
     "(~ ?B ?x ?y ==> ?A ?x ?y) ==> sup ?A ?B ?x ?y",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_var 3, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Algebra.FreeGroupD_transfer'",
     "Abs_freelist ?xs : FreeGroup ?S ==> ?xs : lists ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.freeword_funlift_Abs_freeword_singleton",
     "freeword_funlift ?f (Abs_freeword [?x]) = apply_sign ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0)))))),
    ("Algebra.proper_signed_list_map_uniform_snd",
     "proper_signed_list (map (%s. (s, ?b)) ?as)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))
         )),
    ("Algebra.genby_order2",
     "?s + ?s = (0::?'a) ==> \<langle>{?s}\<rangle> = {0::?'a, ?s}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 0), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Set_Algebras.set_plus_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C + ?E <= ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_mono_b",
     "[| ?C <= ?D; ?x : ?a +o ?C |] ==> ?x : ?a +o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono2",
     "[| ?C <= ?D; ?E <= ?F |] ==> ?C * ?E <= ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_mono_b",
     "[| ?C <= ?D; ?x : ?a *o ?C |] ==> ?x : ?a *o ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_plus_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a +o ?B <= ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_plus_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a + ?b : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono3_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?C + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono5",
     "[| ?a : ?C; ?B <= ?D |] ==> ?a *o ?B <= ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_intro",
     "[| ?a : ?C; ?b : ?D |] ==> ?a * ?b : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_times_mono3_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Set_Algebras.set_plus_mono4_b",
     "[| ?a : ?C; ?x : ?a +o ?D |] ==> ?x : ?D + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Set_Algebras.set_times_mono4_b",
     "[| ?a : ?C; ?x : ?a *o ?D |] ==> ?x : ?D * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Algebra.UGroupHomI",
     "(!!g g'. ?T (g + g') = ?T g + ?T g') ==> UGroupHom ?T",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Boolean_Algebras.inf1E",
     "[| inf ?A ?B ?x; [| ?A ?x; ?B ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Algebra.genby_lcoset_closed",
     "[| ?a : \<langle>?S\<rangle>; ?A <= \<langle>?S\<rangle> |]
      ==> ?a +o ?A <= \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app (template_hole 2, template_var 1)))),
    ("Algebra.genby_add_closed",
     "[| ?g : \<langle>?S\<rangle>; ?h : \<langle>?S\<rangle> |]
      ==> ?g + ?h : \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Algebra.FreeGroup_add_closed",
     "[| ?g : FreeGroup ?S; ?h : FreeGroup ?S |]
      ==> ?g + ?h : FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Algebra.FreeGroup_diff_closed",
     "[| ?x : FreeGroup ?S; ?y : FreeGroup ?S |]
      ==> ?x - ?y : FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Algebra.sum_list_lists_in_genby_sym",
     "[| uminus ` ?S <= ?S; ?ss : lists ?S |]
      ==> sum_list ?ss : \<langle>?S\<rangle>",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 1),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Boolean_Algebras.sup_boolE",
     "[| sup ?P ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algebra.freeword_funlift_lconjby",
     "freeword_funlift ?f (lconjby ?x ?g) =
      lconjby (freeword_funlift ?f ?x) (freeword_funlift ?f ?g)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("Algebra.genby_sym_eq_sum_lists",
     "uminus ` ?S <= ?S ==>
      \<langle>?S\<rangle> = (UN ss:lists ?S. {sum_list ss})",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 0),
          template_var 0)],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Algebra.genby_uminus_add_closed",
     "[| ?g : \<langle>?S\<rangle>; ?h : \<langle>?S\<rangle> |]
      ==> - ?g + ?h : \<langle>?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Algebra.FreeGroup_universal_property",
     "EX! T.
         (ALL s:?S. T (Abs_freeletter s) = ?f s) &
         GroupHom (FreeGroup ?S) T",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Algebra.in_genby_imp_in_reduced_letter_set",
     "?a : \<langle>?A\<rangle> ==>
      ?a : \<langle>reduced_letter_set (?A Un uminus ` ?A) ?a\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_app
                            (template_app
                              (template_hole 1, template_hole 0),
                             template_var 0))),
                       template_var 1))))))
           ))),
    ("Algebra.genby_lcoset_subgroup_imp_eq_reps",
     "?w +o \<langle>?Sa\<rangle> <= ?w' +o \<langle>?S\<rangle> ==>
      ?w' +o \<langle>?S\<rangle> = ?w +o \<langle>?S\<rangle>",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app (template_hole 1, template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app (template_hole 1, template_var 0))))),
    ("Algebra.genby_in_sum_list_lists",
     "?w : \<langle>?S\<rangle> ==>
      ?w : (UN ss:lists (?S Un uminus ` ?S). {sum_list ss})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 1),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0))))))
           ))),
    ("Algebra.genby_lcoset_order2",
     "?s + ?s = (0::?'a) ==> ?w +o \<langle>{?s}\<rangle> = {?w, ?w + ?s}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 1),
          template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 1)),
             template_hole 0))))),
    ("Boolean_Algebras.inf2E",
     "[| inf ?A ?B ?x ?y; [| ?A ?x ?y; ?B ?x ?y |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 3, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Boolean_Algebras.sup1E",
     "[| sup ?A ?B ?x; ?A ?x ==> ?P; ?B ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algebra.extend_map_to_freeword_hom1",
     "(SUM (s,
          b)<-freeword (Abs_freeletter ?s). if b then ?f s else - ?f s) =
      ?f ?s",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 0))))),
       template_app (template_var 1, template_var 0))),
    ("Algebra.prappend_signed_list_single_Cons",
     "prappend_signed_list [?x] (?y # ?ys) =
      (if ?y = flip_signed ?x then ?ys else ?x # ?y # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 2))),
               template_var 0),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))
           ))),
    ("Algebra.uniform_snd_imp_proper_signed_list",
     "snd ` set ?xs <= {?b} ==> proper_signed_list ?xs",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_hole 4))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("Algebra.freeword_funlift_surj'",
     "?ys : lists (?f ` ?S Un uminus ` ?f ` ?S) ==>
      sum_list ?ys : freeword_funlift ?f ` FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Algebra.plus_permutation_abs_eq",
     "[| bij ?f; bij ?g |]
      ==> Abs_permutation ?f + Abs_permutation ?g =
          Abs_permutation (?f o ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Algebra.in_genby_reduced_letter_set",
     "[| ?as : lists ?A; sum_list ?as = ?a |]
      ==> ?a : \<langle>reduced_letter_set ?A ?a\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_equation
         (template_app (template_hole 7, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))))
           ))),
    ("Algebra.genby_order2'",
     "[| ?s + ?s = (0::?'a); ?w : \<langle>{?s}\<rangle> |]
      ==> ?w = (0::?'a) | ?w = ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 1),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 5)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1))
           ))),
    ("Set_Algebras.set_plus_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C + ?E |] ==> ?x : ?D + ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Set_Algebras.set_times_mono2_b",
     "[| ?C <= ?D; ?E <= ?F; ?x : ?C * ?E |] ==> ?x : ?D * ?F",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Algebra.Abs_freeword_singleton_conv_apply_sign_freeletter",
     "Abs_freeword [?x] = apply_sign Abs_freeletter ?x",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1)),
               template_hole 6))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1)),
               template_hole 6)))))),
    ("Algebra.in_genby_sym_imp_in_reduced_letter_set",
     "[| uminus ` ?A <= ?A; ?a : \<langle>?A\<rangle> |]
      ==> ?a : \<langle>reduced_letter_set ?A ?a\<rangle>",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 1),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))))
           ))),
    ("Algebra.Abs_freelist_Cons",
     "Abs_freelist (?x # ?xs) = Abs_freeletter ?x + Abs_freelist ?xs",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_hole 0))),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 0))))),
    ("Algebra.minus_permutation_abs_eq",
     "[| bij ?f; bij ?g |]
      ==> Abs_permutation ?f - Abs_permutation ?g =
          Abs_permutation (?f o the_inv ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_hole 5),
               template_var 0)))))),
    ("Boolean_Algebras.sup2E",
     "[| sup ?A ?B ?x ?y; ?A ?x ?y ==> ?P; ?B ?x ?y ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algebra.freeword_conv_freeletter_sum_list",
     "?x = sum_list (map (apply_sign Abs_freeletter) (freeword ?x))",
     template_equation
      (template_var 0,
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Algebra.Abs_freelist_append",
     "Abs_freelist (?xs @ ?ys) = Abs_freelist ?xs + Abs_freelist ?ys",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))))),
    ("Algebra.Abs_freeword_append_uniform_snd",
     "Abs_freeword (map (%s. (s, ?b)) (?xs @ ?ys)) =
      Abs_freeword (map (%s. (s, ?b)) ?xs) +
      Abs_freeword (map (%s. (s, ?b)) ?ys)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0))))),
    ("Algebra.Abs_freeletter_add", "?s [+] ?t = Abs_freelist [?s, ?t]",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_hole 3))),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_hole 3))),
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Set_Algebras.set_sum_alt",
     "finite ?I ==> sum ?S ?I = {sum s ?I |s. ALL i:?I. s i : ?S i}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app (template_hole 6, t_empty)))),
    ("Algebra.supset_lbound_lcoset_shift",
     "dual_order.lbound_of ?X ?Y ?B ==>
      dual_order.lbound_of (?a +o ?X) (?a +o ?Y) (?a +o ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, t_empty), template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebra.uminus_freeword_Abs_eq",
     "proper_signed_list ?xs ==>
      - Abs_freeword ?xs = Abs_freeword (rev (map flip_signed ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 5, t_empty)),
               template_var 0)))))),
    ("Algebra.prappend_signed_list_map_uniform_snd",
     "prappend_signed_list (map (%s. (s, ?b)) ?xs) (map (%s. (s, ?b)) ?ys) =
      map (%s. (s, ?b)) ?xs @ map (%s. (s, ?b)) ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Algebra.map_charpair_uniform",
     "?ss : lists ?S ==> map (charpair ?S) ?ss = map pairtrue ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty), template_var 1),
         template_app
          (template_app (template_hole 6, t_empty), template_var 1)))),
    ("Algebra.FreeGroupD_transfer",
     "[| proper_signed_list ?xs; Abs_freeword ?xs : FreeGroup ?S |]
      ==> fst ` set ?xs <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Algebra.FreeGroupI_transfer",
     "[| proper_signed_list ?xs; fst ` set ?xs <= ?S |]
      ==> Abs_freeword ?xs : FreeGroup ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty), template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app (template_hole 3, template_var 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebra.Abs_freeword_Cons",
     "proper_signed_list (?x # ?xs) ==>
      Abs_freeword (?x # ?xs) = Abs_freeword [?x] + Abs_freeword ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0))),
           template_app (template_hole 2, template_var 0))))),
    ("Algebra.reduced_word_for_genby_sym_arg_min",
     "[| uminus ` ?A <= ?A; ?a : \<langle>?A\<rangle> |]
      ==> reduced_word_for ?A ?a (arg_min length (word_for ?A ?a))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 11, template_hole 10),
            template_var 1),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 6, template_hole 5), t_empty))
           ))),
    ("Algebra.reduced_word_for_genby_arg_min",
     "?a : \<langle>?A\<rangle> ==>
      reduced_word_for (?A Un uminus ` ?A) ?a
       (arg_min length (word_for (?A Un uminus ` ?A) ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 0))),
               template_var 1),
             template_app
              (template_app (template_hole 6, template_hole 5), t_empty))
           ))),
    ("Algebra.fst_set_map_charpair_un_uminus",
     "?ss : lists (?S Un uminus ` ?S) ==>
      fst ` set (map (charpair ?S) ?ss) <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 0),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 0))))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_var 1))),
         template_var 0))),
    ("Algebra.supset_glbound_in_of_lcoset_shift",
     "dual_order.glbound_in_of ?P ?X ?Y ?B ==>
      dual_order.glbound_in_of ((+o) ?a ` ?P) (?a +o ?X) (?a +o ?Y)
       (?a +o ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, t_empty),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, t_empty),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 0)),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebra.proper_map_flip_signed",
     "proper_signed_list ?xs ==> proper_signed_list (map flip_signed ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 1, t_empty)),
               template_var 0))
           ))),
    ("Algebra.freeword_funlift_im'",
     "[| proper_signed_list ?xs; fst ` set ?xs <= ?S |]
      ==> freeword_funlift ?f (Abs_freeword ?xs)
          : \<langle>?f ` ?S\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, t_empty), template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app (template_hole 5, template_var 2)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Algebra.proper_rev_map_flip_signed",
     "proper_signed_list ?xs ==>
      proper_signed_list (rev (map flip_signed ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, t_empty)),
                 template_var 0)))
           ))),
    ("Set_Algebras.set_plus_elim",
     "[| ?x : ?A + ?B;
         !!a b. [| ?x = a + b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Set_Algebras.set_times_elim",
     "[| ?x : ?A * ?B;
         !!a b. [| ?x = a * b; a : ?A; b : ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Algebra.freeword_funlift_Abs_freeword",
     "proper_signed_list ?xs ==>
      freeword_funlift ?f (Abs_freeword ?xs) =
      sum_list (map (apply_sign ?f) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 1))))),
    ("Algebra.uniqueness_of_restricted_lift",
     "[| GroupHom (FreeGroup ?S) ?T;
         ALL s:?S. ?T (Abs_freeletter s) = ?f s |]
      ==> ?T = res_freeword_funlift ?f ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            )],
       template_equation (template_var 1, t_empty))),
    ("Algebra.uniqueness_of_extended_map_to_freeword_hom",
     "[| ?k o Abs_freeletter = ?f; UGroupHom ?k |]
      ==> ?k = (%x. SUM (s, b)<-freeword x. if b then ?f s else - ?f s)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 1), t_empty),
          template_var 0),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation (template_var 1, t_empty))),
    ("Algebra.Abs_freelist_append_append",
     "Abs_freelist (?xs @ ?ys @ ?zs) =
      Abs_freelist ?xs + Abs_freelist ?ys + Abs_freelist ?zs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_var 1)))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))))),
    ("Set_Algebras.sum_set_linear",
     "[| !!A B. ?f A + ?f B = ?f (A + B); ?f {0::?'a} = {0::?'b} |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_hole 6)),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_hole 3))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Algebra.freeword_funlift_Abs_freeword_Cons",
     "proper_signed_list (?x # ?xs) ==>
      freeword_funlift ?f (Abs_freeword (?x # ?xs)) =
      apply_sign ?f ?x + freeword_funlift ?f (Abs_freeword ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, t_empty),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_var 0,
                   template_app (template_hole 1, template_var 2))),
               template_app
                (template_hole 0,
                 template_app
                  (template_var 0,
                   template_app (template_hole 1, template_var 2))))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 1)))))),
    ("Algebra.plus_freeword_abs_eq",
     "[| proper_signed_list ?xs; proper_signed_list ?ys |]
      ==> Abs_freeword ?xs + Abs_freeword ?ys =
          Abs_freeword (prappend_signed_list ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Algebra.Abs_freeword_conv_freeletter_sum_list",
     "proper_signed_list ?xs ==>
      Abs_freeword ?xs = sum_list (map (apply_sign Abs_freeletter) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty), template_var 0)
            )],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty), template_var 0))))),
    ("Algebra.proper_prappend_signed_list",
     "[| proper_signed_list ?xs; proper_signed_list ?ys |]
      ==> proper_signed_list (prappend_signed_list ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebra.extend_map_to_freeword_hom'",
     "(SUM (s,
          b)<-prappend_signed_list ?xs ?ys. if b then ?f s else - ?f s) =
      (SUM (s, b)<-?xs. if b then ?f s else - ?f s) +
      (SUM (s, b)<-?ys. if b then ?f s else - ?f s)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_var 1))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_var 0))))),
    ("Algebra.FreeGroup_genby_set_lconjby_set_rconjby_closed",
     "[| ?g : FreeGroup ?S;
         ?x : \<langle>UN g:FreeGroup ?S. lconjby g ` ?A\<rangle> |]
      ==> rconjby ?g ?x
          : \<langle>UN g:FreeGroup ?S. lconjby g ` ?A\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_app (template_hole 7, template_var 2)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_app (template_hole 7, template_var 2)))))
           ))),
    ("Algebra.prappend_signed_list_assoc_conv_snoc2Cons",
     "[| proper_signed_list (?xs @ [?y]); proper_signed_list (?y # ?ys) |]
      ==> prappend_signed_list (?xs @ [?y]) ?ys =
          prappend_signed_list ?xs (?y # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2))),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Algebra.prappend_signed_list_assoc",
     "[| proper_signed_list ?xs; proper_signed_list ?ys;
         proper_signed_list ?zs |]
      ==> prappend_signed_list (prappend_signed_list ?xs ?ys) ?zs =
          prappend_signed_list ?xs (prappend_signed_list ?ys ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Set_Algebras.sum_set_cond_linear",
     "[| !!A B. [| ?P A; ?P B |] ==> ?P (A + B); ?P {0::?'a};
         !!A B. [| ?P A; ?P B |] ==> ?f (A + B) = ?f A + ?f B;
         ?f {0::?'a} = {0::?'b}; !!i. i : ?I ==> ?P (?S i) |]
      ==> ?f (sum ?S ?I) = sum (?f o ?S) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_hole 10))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_app
           (template_var 2,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_hole 10)),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Algebra.uniqueness_of_extended_map_to_freeword_hom'",
     "[| !!s. ?k [pairtrue s] = ?f s;
         !!xs ys.
            [| proper_signed_list xs; proper_signed_list ys |]
            ==> ?k (prappend_signed_list xs ys) = ?k xs + ?k ys;
         proper_signed_list ?xs |]
      ==> ?k ?xs = (SUM (s, b)<-?xs. if b then ?f s else - ?f s)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, t_empty), template_var 0)
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 0)))))]
