Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.162s elapsed time, 0.656s cpu time, 0.045s GC time
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.835s cpu time, 0.045s GC time
Loading theory "Draft.Prelim" (required by "Draft.SimplicialMoreTemplates" via "Draft.Simplicial")
Loading theory "HOL-Library.BigO" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.365s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs")
consts
  alternating_list :: "nat => 'a => 'a => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
consts
  snth :: "'a stream => nat => 'a"
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.007s elapsed time, 3.794s cpu time, 0.915s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.082s elapsed time, 3.917s cpu time, 0.897s GC time
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Prelim"
### 1.305s elapsed time, 4.607s cpu time, 0.987s GC time
Loading theory "Draft.Simplicial" (required by "Draft.SimplicialMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale SimplicialComplexIsomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'b"
  assumes "SimplicialComplexIsomorphism X f"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
locale ComplexLikePoset
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and P :: "'a set"
  assumes "ComplexLikePoset (\<^bold>\<le>) (\<^bold><) P"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Simplicial"
### 0.401s elapsed time, 0.897s cpu time, 0.130s GC time
### theory "HOL-Library.Tree"
### 2.078s elapsed time, 6.562s cpu time, 1.162s GC time
Loading theory "Draft.Templates" (required by "Draft.SimplicialMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SimplicialMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.478s elapsed time, 0.514s cpu time, 0.043s GC time
Loading theory "Draft.SimplicialMoreTemplates"
val templateLemmas =
   [("Simplicial.empty_not_adjacent", "~ {} \<sim> ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("Simplicial.adjacent_sym", "?x \<sim> ?y ==> ?y \<sim> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Simplicial.facetrel_psubset", "?y \<lhd> ?x ==> ?y < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Simplicial.facetrel_subset", "?y \<lhd> ?x ==> ?y <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Simplicial.adjacent_refl", "?x ~= {} ==> ?x \<sim> ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Simplicial.adjacent_card", "?x \<sim> ?y ==> card ?x = card ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Simplicial.adjacentchain_Cons_reduce",
     "adjacentchain (?x # ?xs) ==> adjacentchain ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)
           ))),
    ("Simplicial.facetrel_card", "?y \<lhd> ?x ==> card (?x - ?y) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Simplicial.facetrel_diff_vertex", "?v : ?x ==> ?x - {?v} \<lhd> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("Simplicial.adjacentI",
     "[| ?z \<lhd> ?x; ?z \<lhd> ?y |] ==> ?x \<sim> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplicial.finite_facetrel_card",
     "[| finite ?x; ?y \<lhd> ?x |] ==> card ?x = Suc (card ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Simplicial.adjacentchain_card",
     "adjacentchain (?x # ?xs @ [?y]) ==> card ?x = card ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_hole 2))))
            )],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Simplicial.facetrelI_card",
     "[| ?y <= ?x; card (?x - ?y) = 1 |] ==> ?y \<lhd> ?x",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplicial.facetrelI_cardSuc",
     "[| ?z <= ?x; card ?x = Suc (card ?z) |] ==> ?z \<lhd> ?x",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app
           (template_hole 1,
            template_app (template_hole 2, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplicial.adjacent_int_facet1",
     "[| ?x \<sim> ?y; ?x ~= ?y |] ==> ?x Int ?y \<lhd> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Simplicial.adjacent_int_facet2",
     "[| ?x \<sim> ?y; ?x ~= ?y |] ==> ?x Int ?y \<lhd> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Simplicial.facetrel_complement_vertex",
     "[| ?y \<lhd> ?x; ?x = insert ?v ?y |] ==> ?v ~: ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)
               )
           ))),
    ("Simplicial.facetrelI",
     "[| ?v ~: ?y; ?x = insert ?v ?y |] ==> ?y \<lhd> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplicial.facetrel_conv_insert",
     "[| ?y \<lhd> ?x; ?v : ?x - ?y |] ==> ?x = insert ?v ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Simplicial.adj_antivertex",
     "[| ?x \<sim> ?y; ?x ~= ?y |] ==> EX! v. v : ?x - ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Simplicial.adjacent_conv_insert",
     "[| ?x \<sim> ?y; ?v : ?x - ?y |] ==> ?x = insert ?v (?x Int ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Simplicial.common_facet",
     "[| ?z \<lhd> ?x; ?z \<lhd> ?y; ?x ~= ?y |] ==> ?z = ?x Int ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Simplicial.facet2_subset",
     "[| ?z \<lhd> ?x; ?z \<lhd> ?y; ?x Int ?y - ?z ~= {} |] ==> ?x <= ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0)),
                template_var 2),
              template_hole 1)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Simplicial.adjacent_int_decomp",
     "[| ?x \<sim> ?y; ?x ~= ?y |]
      ==> EX v. v ~: ?y & ?x = insert v (?x Int ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Simplicial.inj_on_pullback_facet",
     "[| inj_on ?f ?x; ?z \<lhd> ?f ` ?x;
         !!y. [| y \<lhd> ?x; ?f ` y = ?z |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Simplicial.adjacent_to_adjacent_int",
     "[| ?C \<sim> ?D; ?f ` ?C \<sim> ?f ` ?D; ?f ` ?C ~= ?f ` ?D |]
      ==> ?f ` (?C Int ?D) = ?f ` ?C Int ?f ` ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1))))),
    ("Simplicial.adjacent_to_adjacent_int_subset",
     "[| ?C \<sim> ?D; ?f ` ?C \<sim> ?f ` ?D; ?f ` ?C ~= ?f ` ?D |]
      ==> ?f ` ?C Int ?f ` ?D <= ?f ` (?C Int ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Simplicial.adjacentchain_obtain_proper",
     "[| ?x ~= ?y; adjacentchain (?x # ?xs @ [?y]) |]
      ==> EX zs.
             set zs <= set ?xs &
             length zs <= length ?xs & padjacentchain (?x # zs @ [?y])",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_hole 7))))
            )],
       template_predicate (template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SimplicialMoreTemplates"
### 0.337s elapsed time, 0.486s cpu time, 0.056s GC time
val it = (): unit
