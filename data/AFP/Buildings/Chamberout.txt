Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.535s cpu time, 0.054s GC time
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.748s cpu time, 0.054s GC time
Loading theory "Draft.Prelim" (required by "Draft.ChamberMoreTemplates" via "Draft.Chamber" via "Draft.Algebra")
Loading theory "HOL-Library.BigO" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.357s elapsed time, 1.355s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs")
consts
  alternating_list :: "nat => 'a => 'a => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.957s elapsed time, 3.609s cpu time, 0.828s GC time
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.861s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Prelim"
### 1.298s elapsed time, 4.564s cpu time, 0.941s GC time
Loading theory "Draft.Algebra" (required by "Draft.ChamberMoreTemplates" via "Draft.Chamber")
Loading theory "Draft.Simplicial" (required by "Draft.ChamberMoreTemplates" via "Draft.Chamber")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
Found termination order: "size <*mlex*> {}"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
instantiation
  permutation :: (type) zero
  zero_permutation == zero_class.zero :: 'a permutation
instantiation
  permutation :: (type) plus
  plus_permutation == plus ::
    'a permutation => 'a permutation => 'a permutation
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  permutation :: (type) uminus
  uminus_permutation == uminus :: 'a permutation => 'a permutation
instantiation
  permutation :: (type) minus
  minus_permutation == minus ::
    'a permutation => 'a permutation => 'a permutation
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
locale SimplicialComplexIsomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'b"
  assumes "SimplicialComplexIsomorphism X f"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
consts
  sums :: "'a list => 'a list"
locale ComplexLikePoset
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and P :: "'a set"
  assumes "ComplexLikePoset (\<^bold>\<le>) (\<^bold><) P"
### theory "Draft.Simplicial"
### 0.463s elapsed time, 1.452s cpu time, 0.207s GC time
Found termination order: "size <*mlex*> {}"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
consts
  lconjseq :: "'a list => 'a list"
### theory "HOL-Library.Tree"
### 2.163s elapsed time, 7.243s cpu time, 1.264s GC time
Loading theory "Draft.Templates" (required by "Draft.ChamberMoreTemplates" via "Draft.ExtrEqs")
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ChamberMoreTemplates")
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale BinOpSetGroup
  fixes G :: "'a set"
    and binop :: "'a => 'a => 'a"
    and e :: "'a"
  assumes "BinOpSetGroup G binop e"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
Proofs for inductive predicate(s) "genbyp"
  Proving monotonicity ...
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale UGroupHom
  fixes T :: "'g => 'h"
  assumes "UGroupHom T"
locale GroupIso
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupIso G T"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.562s elapsed time, 1.181s cpu time, 0.133s GC time
instantiation
  freeword :: (type) zero
  zero_freeword == zero_class.zero :: 'a freeword
instantiation
  freeword :: (type) plus
  plus_freeword == plus :: 'a freeword => 'a freeword => 'a freeword
instantiation
  freeword :: (type) uminus
  uminus_freeword == uminus :: 'a freeword => 'a freeword
instantiation
  freeword :: (type) minus
  minus_freeword == minus :: 'a freeword => 'a freeword => 'a freeword
locale GroupByPresentation
  fixes S :: "'a set"
    and P :: "('a * bool) list set"
  assumes "GroupByPresentation S P"
locale GroupByPresentationInducedFun
  fixes S :: "'a set"
    and P :: "('a * bool) list set"
    and f :: "'a => 'b"
  assumes "GroupByPresentationInducedFun S P f"
locale GroupWithGeneratorsRelators
  fixes S :: "'g set"
    and R :: "'g list set"
  assumes "GroupWithGeneratorsRelators S R"
locale GroupPresentation
  fixes S :: "'g set"
    and R :: "'g list set"
  assumes "GroupPresentation S R"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Draft.Algebra"
### 1.720s elapsed time, 3.565s cpu time, 0.463s GC time
Loading theory "Draft.Chamber" (required by "Draft.ChamberMoreTemplates")
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexIsomorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexIsomorphism X Y f"
locale ChamberComplexIsomorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexIsomorphism X Y f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexAutomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexAutomorphism X f"
locale ChamberComplexAutomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexAutomorphism X f"
locale ChamberComplexRetraction
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexRetraction X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ThinishChamberComplex
  fixes X :: "'a set set"
  assumes "ThinishChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinishChamberComplex
  fixes X :: "'a set set"
  assumes "ThinishChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinishChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinishChamberComplexFolding X f"
locale ThinChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinChamberComplexFolding X f"
locale ThinChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinChamberComplexFolding X f"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
Found termination order: "length <*mlex*> {}"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThickChamberComplex
  fixes X :: "'a set set"
  assumes "ThickChamberComplex X"
### theory "Draft.Chamber"
### 2.948s elapsed time, 3.978s cpu time, 1.447s GC time
Loading theory "Draft.ChamberMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ChamberMoreTemplates"
### 0.331s elapsed time, 0.485s cpu time, 0.000s GC time
val it = (): unit
