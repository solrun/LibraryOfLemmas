Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.602s cpu time, 0.039s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.726s cpu time, 0.039s GC time
Loading theory "Draft.Prelim" (required by "Draft.BuildingMoreTemplates" via "Draft.Building" via "Draft.Coxeter" via "Draft.Chamber" via "Draft.Algebra")
Loading theory "HOL-Library.BigO" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.309s elapsed time, 1.192s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs")
consts
  alternating_list :: "nat => 'a => 'a => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale OrderingSetIso
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetIso (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale OrderingSetMap
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and
    less_eq' :: "'b => 'b => bool"  (infix \<open>\<^bold>\<le>*\<close> 50)
    and less' :: "'b => 'b => bool"  (infix \<open>\<^bold><*\<close> 50)
    and P :: "'a set"
    and f :: "'a => 'b"
  assumes
    "OrderingSetMap (\<^bold>\<le>) (\<^bold><) (\<^bold>\<le>*)
      (\<^bold><*) P f"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.904s elapsed time, 3.433s cpu time, 0.766s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
### theory "HOL-Library.Stream"
### 0.953s elapsed time, 3.503s cpu time, 0.748s GC time
Found termination order: "size <*mlex*> {}"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Prelim"
### 1.168s elapsed time, 4.136s cpu time, 0.835s GC time
Loading theory "Draft.Algebra" (required by "Draft.BuildingMoreTemplates" via "Draft.Building" via "Draft.Coxeter" via "Draft.Chamber")
Loading theory "Draft.Simplicial" (required by "Draft.BuildingMoreTemplates" via "Draft.Building" via "Draft.Coxeter" via "Draft.Chamber")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
locale SimplicialComplex
  fixes X :: "'a set set"
  assumes "SimplicialComplex X"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  permutation :: (type) zero
  zero_permutation == zero_class.zero :: 'a permutation
instantiation
  permutation :: (type) plus
  plus_permutation == plus ::
    'a permutation => 'a permutation => 'a permutation
instantiation
  permutation :: (type) uminus
  uminus_permutation == uminus :: 'a permutation => 'a permutation
instantiation
  permutation :: (type) minus
  minus_permutation == minus ::
    'a permutation => 'a permutation => 'a permutation
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
locale SimplicialComplexIsomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'b"
  assumes "SimplicialComplexIsomorphism X f"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
locale ordering
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "ordering (\<^bold>\<le>) (\<^bold><)"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
locale ComplexLikePoset
  fixes
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
    and P :: "'a set"
  assumes "ComplexLikePoset (\<^bold>\<le>) (\<^bold><) P"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Simplicial"
### 0.380s elapsed time, 1.211s cpu time, 0.189s GC time
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
consts
  sums :: "'a list => 'a list"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
### theory "HOL-Library.Tree"
### 1.880s elapsed time, 6.404s cpu time, 1.064s GC time
Loading theory "Draft.Templates" (required by "Draft.BuildingMoreTemplates" via "Draft.ExtrEqs")
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
consts
  lconjseq :: "'a list => 'a list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.159s cpu time, 0.057s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BuildingMoreTemplates")
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale BinOpSetGroup
  fixes G :: "'a set"
    and binop :: "'a => 'a => 'a"
    and e :: "'a"
  assumes "BinOpSetGroup G binop e"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
Proofs for inductive predicate(s) "genbyp"
  Proving monotonicity ...
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale UGroupHom
  fixes T :: "'g => 'h"
  assumes "UGroupHom T"
locale GroupIso
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupIso G T"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.518s elapsed time, 1.090s cpu time, 0.126s GC time
instantiation
  freeword :: (type) zero
  zero_freeword == zero_class.zero :: 'a freeword
instantiation
  freeword :: (type) plus
  plus_freeword == plus :: 'a freeword => 'a freeword => 'a freeword
instantiation
  freeword :: (type) uminus
  uminus_freeword == uminus :: 'a freeword => 'a freeword
instantiation
  freeword :: (type) minus
  minus_freeword == minus :: 'a freeword => 'a freeword => 'a freeword
locale GroupByPresentation
  fixes S :: "'a set"
    and P :: "('a * bool) list set"
  assumes "GroupByPresentation S P"
locale GroupByPresentationInducedFun
  fixes S :: "'a set"
    and P :: "('a * bool) list set"
    and f :: "'a => 'b"
  assumes "GroupByPresentationInducedFun S P f"
locale GroupWithGeneratorsRelators
  fixes S :: "'g set"
    and R :: "'g list set"
  assumes "GroupWithGeneratorsRelators S R"
locale GroupPresentation
  fixes S :: "'g set"
    and R :: "'g list set"
  assumes "GroupPresentation S R"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Draft.Algebra"
### 1.636s elapsed time, 3.196s cpu time, 0.436s GC time
Loading theory "Draft.Chamber" (required by "Draft.BuildingMoreTemplates" via "Draft.Building" via "Draft.Coxeter")
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplex
  fixes X :: "'a set set"
  assumes "ChamberComplex X"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexMorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexMorphism X Y f"
locale ChamberComplexIsomorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexIsomorphism X Y f"
locale ChamberComplexIsomorphism
  fixes X :: "'a set set"
    and Y :: "'b set set"
    and f :: "'a => 'b"
  assumes "ChamberComplexIsomorphism X Y f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexEndomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexEndomorphism X f"
locale ChamberComplexAutomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexAutomorphism X f"
locale ChamberComplexAutomorphism
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexAutomorphism X f"
locale ChamberComplexRetraction
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexRetraction X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ChamberComplexFolding X f"
locale ThinishChamberComplex
  fixes X :: "'a set set"
  assumes "ThinishChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinishChamberComplex
  fixes X :: "'a set set"
  assumes "ThinishChamberComplex X"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinishChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinishChamberComplexFolding X f"
locale ThinChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinChamberComplexFolding X f"
locale ThinChamberComplexFolding
  fixes X :: "'a set set"
    and f :: "'a => 'a"
  assumes "ThinChamberComplexFolding X f"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
Found termination order: "length <*mlex*> {}"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale OpposedThinChamberComplexFoldings
  fixes X :: "'a set set"
    and f :: "'a => 'a"
    and g :: "'a => 'a"
    and C0 :: "'a set"
  assumes "OpposedThinChamberComplexFoldings X f g C0"
locale ThinChamberComplex
  fixes X :: "'a set set"
  assumes "ThinChamberComplex X"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale ThickChamberComplex
  fixes X :: "'a set set"
  assumes "ThickChamberComplex X"
### theory "Draft.Chamber"
### 3.124s elapsed time, 4.172s cpu time, 1.474s GC time
Loading theory "Draft.Coxeter" (required by "Draft.BuildingMoreTemplates" via "Draft.Building")
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystem
  fixes S :: "'w set"
  assumes "PreCoxeterSystem S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale CoxeterSystem
  fixes S :: "'w set"
  assumes "CoxeterSystem S"
locale CoxeterSystem
  fixes S :: "'w set"
  assumes "CoxeterSystem S"
locale CoxeterSystem
  fixes S :: "'w set"
  assumes "CoxeterSystem S"
locale PreCoxeterSystemWithDeletion
  fixes S :: "'w set"
  assumes "PreCoxeterSystemWithDeletion S"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
locale CoxeterComplex
  fixes S :: "'w set"
  assumes "CoxeterComplex S"
locale CoxeterComplex
  fixes S :: "'w set"
  assumes "CoxeterComplex S"
locale CoxeterComplex
  fixes S :: "'w set"
  assumes "CoxeterComplex S"
locale ThinChamberComplexManyFoldings
  fixes X :: "'a set set"
    and C0 :: "'a set"
  assumes "ThinChamberComplexManyFoldings X C0"
### theory "Draft.Coxeter"
### 0.828s elapsed time, 0.933s cpu time, 0.145s GC time
Loading theory "Draft.Building" (required by "Draft.BuildingMoreTemplates")
locale ChamberComplexWithApartmentSystem
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "ChamberComplexWithApartmentSystem X \<A>"
locale ChamberComplexWithApartmentSystem
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "ChamberComplexWithApartmentSystem X \<A>"
locale ChamberComplexWithApartmentSystem
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "ChamberComplexWithApartmentSystem X \<A>"
locale ChamberComplexWithApartmentSystem
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "ChamberComplexWithApartmentSystem X \<A>"
locale ChamberComplexApartmentSystemTriangle
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
    and A :: "'a set set"
    and B :: "'a set set"
    and B' :: "'a set set"
    and C :: "'a set"
    and D :: "'a set"
    and E :: "'a set"
    and z :: "'a set"
  assumes "ChamberComplexApartmentSystemTriangle X \<A> A B B' C D E z"
locale Building
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "Building X \<A>"
locale Building
  fixes X :: "'a set set"
    and \<A> :: "'a set set set"
  assumes "Building X \<A>"
### theory "Draft.Building"
### 0.711s elapsed time, 0.759s cpu time, 0.066s GC time
Loading theory "Draft.BuildingMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.BuildingMoreTemplates"
### 0.364s elapsed time, 0.560s cpu time, 0.061s GC time
val it = (): unit
