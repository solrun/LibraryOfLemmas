   [("Algebra.freeword_funlift_0", "freeword_funlift ?f 0 = (0::?'h)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Algebra.set_zero_plus'", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_zero_plus", "(0::?'a) +o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Set_Algebras.set_one_times", "(1::?'a) *o ?C = ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Algebra.lcoset_0", "?w +o 0 = {?w}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Algebra.genby_lcoset_empty", "?w +o \<langle>{}\<rangle> = {?w}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Algebra.freeword_funlift_uminus",
     "freeword_funlift ?f (- ?g) = - freeword_funlift ?f ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Algebra.times2_conv_add", "?j + ?j = 2 * ?j",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Algebra.freeword_funlift_surj",
     "freeword_funlift ?f ` FreeGroup ?S = \<langle>?f ` ?S\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.freeword_funlift_Abs_freeletter",
     "freeword_funlift ?f (Abs_freeletter ?s) = ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))),
       template_app (template_var 1, template_var 0))),
    ("Algebra.genbyp_genby_eq",
     "genbyp (%x. x : ?S) = (%x. x : \<langle>?S\<rangle>)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Set_Algebras.set_plus_rearrange3", "?a +o ?B + ?C = ?a +o (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_plus_rearrange2",
     "?a +o (?b +o ?C) = (?a + ?b) +o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_times_rearrange3", "?a *o ?B * ?C = ?a *o (?B * ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange2",
     "?a *o (?b *o ?C) = (?a * ?b) *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Set_Algebras.set_plus_rearrange4", "?C + ?a +o ?D = ?a +o (?C + ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange4", "?C * ?a *o ?D = ?a *o (?C * ?D)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_minus_plus", "(?a - ?b : ?C) = (?a : ?b +o ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebra.fully_prappend_signed_list",
     "prappend_signed_list (rev (map flip_signed ?xs)) ?xs = []",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 0))),
         template_var 0),
       template_hole 0)),
    ("Algebra.flip_signed_order2", "flip_signed (flip_signed ?x) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_var 0)),
    ("Algebra.freeword_funlift_uminus_Abs_freeletter",
     "freeword_funlift ?f (Abs_freeword [pairfalse ?s]) = - ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_hole 1))),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Algebra.freeword_funlift_diff",
     "freeword_funlift ?f (?g - ?g') =
      freeword_funlift ?f ?g - freeword_funlift ?f ?g'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.freeword_funlift_add",
     "freeword_funlift ?f (?g + ?g') =
      freeword_funlift ?f ?g + freeword_funlift ?f ?g'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "?A * (?B Un ?C) = ?A * ?B Un ?A * ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_Un_distrib",
     "(?A Un ?B) * ?C = ?A * ?C Un ?B * ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib2",
     "?a *o (?B + ?C) = ?a *o ?B + ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_plus_distrib",
     "?a *o (?b +o ?C) = ?a * ?b +o ?a *o ?C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.Abs_freeletter_in_FreeGroup_iff",
     "(Abs_freeletter ?s : FreeGroup ?S) = (?s : ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Algebra.collapse_flipped_signed",
     "prappend_signed_list [(?s, ?b)] [(?s, ~ ?b)] = []",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_hole 1)),
       template_hole 1)),
    ("Set_Algebras.set_plus_image",
     "?S + ?T = (%(x, y). x + y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_image",
     "?S * ?T = (%(x, y). x * y) ` (?S \<times> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "?A * \<Union> (?M ` ?I) = (UN i:?I. ?A * ?M i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Set_Algebras.set_times_UNION_distrib",
     "\<Union> (?M ` ?I) * ?A = (UN i:?I. ?M i * ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Set_Algebras.set_plus_rearrange",
     "?a +o ?C + ?b +o ?D = (?a + ?b) +o (?C + ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Set_Algebras.set_times_rearrange",
     "?a *o ?C * ?b *o ?D = (?a * ?b) *o (?C * ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebra.Abs_freelist_inverse",
     "freeword (Abs_freelist ?as) = map pairtrue ?as",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Algebra.uminus_Abs_freeword_singleton",
     "- Abs_freeword [(?s, ?b)] = Abs_freeword [(?s, ~ ?b)]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1))),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_hole 1)))),
    ("Algebra.freeword_funlift_Abs_freelist",
     "freeword_funlift ?f (Abs_freelist ?xs) = sum_list (map ?f ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Algebra.genby_eq_sum_lists",
     "\<langle>?S\<rangle> =
      (UN ss:lists (?S Un uminus ` ?S). {sum_list ss})",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("Algebra.freeword_funlift_Abs_freeword_singleton",
     "freeword_funlift ?f (Abs_freeword [?x]) = apply_sign ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_var 1,
             template_app (template_hole 1, template_var 0)))))),
    ("Algebra.freeword_funlift_lconjby",
     "freeword_funlift ?f (lconjby ?x ?g) =
      lconjby (freeword_funlift ?f ?x) (freeword_funlift ?f ?g)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("Algebra.extend_map_to_freeword_hom1",
     "(SUM (s,
          b)<-freeword (Abs_freeletter ?s). if b then ?f s else - ?f s) =
      ?f ?s",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 0))))),
       template_app (template_var 1, template_var 0))),
    ("Algebra.prappend_signed_list_single_Cons",
     "prappend_signed_list [?x] (?y # ?ys) =
      (if ?y = flip_signed ?x then ?ys else ?x # ?y # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Algebra.Abs_freeword_singleton_conv_apply_sign_freeletter",
     "Abs_freeword [?x] = apply_sign Abs_freeletter ?x",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1)),
               template_hole 6))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1)),
               template_hole 6)))))),
    ("Algebra.Abs_freelist_Cons",
     "Abs_freelist (?x # ?xs) = Abs_freeletter ?x + Abs_freelist ?xs",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_hole 0))),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 0))))),
    ("Algebra.freeword_conv_freeletter_sum_list",
     "?x = sum_list (map (apply_sign Abs_freeletter) (freeword ?x))",
     template_equation
      (template_var 0,
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Algebra.Abs_freelist_append",
     "Abs_freelist (?xs @ ?ys) = Abs_freelist ?xs + Abs_freelist ?ys",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))))),
    ("Algebra.Abs_freeword_append_uniform_snd",
     "Abs_freeword (map (%s. (s, ?b)) (?xs @ ?ys)) =
      Abs_freeword (map (%s. (s, ?b)) ?xs) +
      Abs_freeword (map (%s. (s, ?b)) ?ys)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0))))),
    ("Algebra.Abs_freeletter_add", "?s [+] ?t = Abs_freelist [?s, ?t]",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               template_hole 3))),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_hole 3))),
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Algebra.prappend_signed_list_map_uniform_snd",
     "prappend_signed_list (map (%s. (s, ?b)) ?xs) (map (%s. (s, ?b)) ?ys) =
      map (%s. (s, ?b)) ?xs @ map (%s. (s, ?b)) ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Algebra.Abs_freelist_append_append",
     "Abs_freelist (?xs @ ?ys @ ?zs) =
      Abs_freelist ?xs + Abs_freelist ?ys + Abs_freelist ?zs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_var 1)))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))))),
    ("Algebra.extend_map_to_freeword_hom'",
     "(SUM (s,
          b)<-prappend_signed_list ?xs ?ys. if b then ?f s else - ?f s) =
      (SUM (s, b)<-?xs. if b then ?f s else - ?f s) +
      (SUM (s, b)<-?ys. if b then ?f s else - ?f s)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_var 1))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_var 0)))))]
