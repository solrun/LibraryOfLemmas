   [("Simplex_Incremental.init_simplex",
     "checked_simplex ?cs {} (init_simplex ?cs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Simplex_Incremental.solution_simplex'",
     "solution_simplex (Simplex_State ?s) = solution_simplex' ?s",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Simplex_Incremental.init_simplex'",
     "init_simplex ?cs = Simplex_State (init_simplex' ?cs)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Simplex_Incremental.checkpoint_simplex'",
     "checkpoint_simplex (Simplex_State ?s) =
      Simplex_Checkpoint (checkpoint_simplex' ?s)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Simplex_Incremental.check_simplex'",
     "check_simplex (Simplex_State ?s) =
      map_sum id Simplex_State (check_simplex' ?s)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 3),
         template_app (template_hole 0, template_var 0)))),
    ("Simplex_Incremental.code_lemmas",
     "checkpoint_simplex' (?cs, ?asi_tv, ?s) = checkpoint_s ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Simplex_Incremental.backtrack_simplex'",
     "backtrack_simplex (Simplex_Checkpoint ?c) (Simplex_State ?s) =
      Simplex_State (backtrack_simplex' ?c ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Simplex_Incremental.checked_invariant_simplex",
     "checked_simplex ?cs ?J ?s ==> invariant_simplex ?cs ?J ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Simplex_Incremental.assert_simplex'",
     "assert_simplex ?i (Simplex_State ?s) =
      map_sum id Simplex_State (assert_simplex' ?i ?s)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 3),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Simplex_Incremental.list_map_to_fun_create_map",
     "set (list_map_to_fun (create_map ?ias) ?i) =
      set ?ias Int {?i} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           t_empty)))),
    ("Simplex_Incremental.code_lemmas",
     "backtrack_simplex' ?c (?cs, ?asi_tv, ?s) =
      (?cs, ?asi_tv, backtrack_s ?c ?s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Simplex_Incremental.check_simplex_ok",
     "[| invariant_simplex ?cs ?J ?s; check_simplex ?s = Inr ?s' |]
      ==> checked_simplex ?cs ?J ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Simplex_Incremental.solution_simplex",
     "[| checked_simplex ?cs ?J ?s; solution_simplex ?s = ?v |]
      ==> (?J, ?v) \<Turnstile>\<^sub>i\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Simplex_Incremental.code_lemmas",
     "solution_simplex' (?cs, (?asi, ?tv), ?s) =
      \<langle>from_ns (solution_nsc \<V> ((?asi, ?tv), ?s)) ?cs\<rangle>",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_var 3)))),
    ("Simplex_Incremental.code_lemmas",
     "check_simplex' (?cs, ?asi_tv, ?s) =
      (case check_s ?s of Inl y => Inl y
       | Inr s' => Inr (?cs, ?asi_tv, s'))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_app (template_hole 3, t_empty), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Simplex_Incremental.assert_simplex_ok",
     "[| invariant_simplex ?cs ?J ?s; assert_simplex ?j ?s = Inr ?s' |]
      ==> invariant_simplex ?cs (insert ?j ?J) ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("Simplex_Incremental.assert_all_simplex_ok",
     "[| invariant_simplex ?cs ?J ?s; assert_all_simplex ?K ?s = Inr ?s' |]
      ==> invariant_simplex ?cs (?J Un set ?K) ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Simplex_Incremental.check_simplex_unsat",
     "[| invariant_simplex ?cs ?J ?s; check_simplex ?s = Inl ?I |]
      ==> set ?I <= ?J & minimal_unsat_core (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0)),
               template_var 3))
           ))),
    ("Simplex_Incremental.assert_simplex_unsat",
     "[| invariant_simplex ?cs ?J ?s; assert_simplex ?j ?s = Inl ?I |]
      ==> set ?I <= insert ?j ?J & minimal_unsat_core (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 4))
           ))),
    ("Simplex_Incremental.assert_all_simplex_unsat",
     "[| invariant_simplex ?cs ?J ?s; assert_all_simplex ?K ?s = Inl ?I |]
      ==> set ?I <= set ?K Un ?J & minimal_unsat_core (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 2, template_var 1)),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 4))
           ))),
    ("Simplex_Incremental.code_lemmas",
     "init_simplex' ?cs =
      (let tons_cs = to_ns ?cs
       in (map snd tons_cs,
           case preprocess tons_cs of
           (t, as, trans_v, ui) =>
             ((create_map as, trans_v, remdups ui), init_state t)))",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         t_empty))),
    ("Simplex_Incremental.case_sum_case_sum",
     "(case case ?x of Inl y => Inl (?f1.0 y) | Inr z => Inr (?f2.0 z) of
       Inl y => Inl (?g1.0 y) | Inr z => Inr (?g2.0 z)) =
      (case ?x of Inl y => Inl (?g1.0 (?f1.0 y))
       | Inr z => Inr (?g2.0 (?f2.0 z)))",
     template_equation
      (template_app
        (template_app (template_app (template_hole 6, t_empty), t_empty),
         template_app
          (template_app (template_app (template_hole 3, t_empty), t_empty),
           template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("Simplex_Incremental.backtrack_simplex",
     "[| checked_simplex ?cs ?J ?s; checkpoint_simplex ?s = ?c;
         invariant_simplex ?cs ?K ?s'; backtrack_simplex ?c ?s' = ?s'';
         ?J <= ?K |]
      ==> invariant_simplex ?cs ?J ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 4, template_var 4), template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_var 0),
        template_inequation (less_equals, template_var 5, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_var 5),
             template_var 0)
           ))),
    ("Simplex_Incremental.code_lemmas",
     "assert_simplex' ?i (?cs, (?asi, ?tv, ?ui), ?s) =
      (case if ?i : set ?ui then Inl [?i]
            else case assert_all_s (list_map_to_fun ?asi ?i) ?s of
                 Inl x => Inl x | Inr s' => Inr ((?asi, ?tv, ?ui), s') of
       Inl x => Inl x | Inr s' => Inr (?cs, s'))",
     template_equation
      (template_app
        (template_app (template_hole 17, template_var 5),
         template_app
          (template_app (template_hole 16, template_var 4),
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 3),
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_var 1))),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 12, template_hole 11), t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app (template_hole 7, template_var 1))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_hole 4))),
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 6), t_empty),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 5)),
               template_var 0))))))]
