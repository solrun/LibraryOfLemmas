Loading theory "Draft.Simplex_Auxiliary" (required by "Draft.Rel_ChainTemplates" via "Draft.Rel_Chain")
Loading theory "Draft.Templates" (required by "Draft.Rel_ChainTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.162s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rel_ChainTemplates")
### theory "Draft.Simplex_Auxiliary"
### 0.082s elapsed time, 0.199s cpu time, 0.000s GC time
Loading theory "Draft.Rel_Chain" (required by "Draft.Rel_ChainTemplates")
### theory "Draft.Rel_Chain"
### 0.079s elapsed time, 0.166s cpu time, 0.035s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.590s cpu time, 0.035s GC time
Loading theory "Draft.Rel_ChainTemplates"
val templateLemmas =
   [("Rel_Chain.rel_chain_Nil", "rel_chain [] ?r",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Rel_Chain.rel_chain_butlast",
     "rel_chain ?l ?R ==> rel_chain (butlast ?l) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Rel_Chain.rel_chain_tl", "rel_chain ?l ?R ==> rel_chain (tl ?l) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Rel_Chain.rel_chain_drop",
     "rel_chain ?l ?R ==> rel_chain (drop ?n ?l) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Rel_Chain.rel_chain_take",
     "rel_chain ?l ?R ==> rel_chain (take ?n ?l) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Rel_Chain.rel_chain_appendD",
     "rel_chain (?l @ ?l') ?R ==> rel_chain ?l ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Rel_Chain.rel_chain_appendD",
     "rel_chain (?l @ ?l') ?R ==> rel_chain ?l' ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Rel_Chain.rel_chain_Cons",
     "rel_chain (?x # ?xs) ?r =
      (if ?xs = [] then True else (?x, hd ?xs) : ?r & rel_chain ?xs ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 5)),
               template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app (template_hole 0, template_var 1))),
                   template_var 0)),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 0)))
           ))),
    ("Rel_Chain.rel_chain_appendD",
     "rel_chain (?l @ ?l') ?R ==>
      ?l ~= [] & ?l' ~= [] --> (last ?l, hd ?l') : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_hole 4))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app (template_hole 0, template_var 1))),
               template_var 0))
           ))),
    ("Rel_Chain.rel_chain_append",
     "[| rel_chain ?l ?R; rel_chain ?l' ?R; (last ?l, hd ?l') : ?R |]
      ==> rel_chain (?l @ ?l') ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_app (template_hole 1, template_var 0))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Rel_Chain.rel_chain_elems_rtrancl",
     "[| rel_chain ?l ?R; ?i <= ?j; ?j < length ?l |]
      ==> (?l ! ?i, ?l ! ?j) : ?R^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Rel_Chain.rtrancl_rel_chain",
     "((?x, ?y) : ?R^*) =
      (EX l. l ~= [] & hd l = ?x & last l = ?y & rel_chain l ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Rel_Chain.trancl_rel_chain",
     "((?x, ?y) : ?R^+) =
      (EX l. l ~= [] &
             1 < length l & hd l = ?x & last l = ?y & rel_chain l ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 2),
             template_var 1)),
         template_app (template_hole 12, template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Rel_Chain.reorder_cyclic_list",
     "[| hd ?l = ?s; last ?l = ?s; 2 < length ?l; ?sl + 1 < length ?l;
         rel_chain ?l ?r;
         !!l'. [| hd l' = ?l ! (?sl + 1); last l' = ?l ! ?sl;
                  rel_chain l' ?r; length l' = length ?l - 1;
                  ALL i.
                     i + 1 < length l' -->
                     (EX j. j + 1 < length ?l &
                            l' ! i = ?l ! j &
                            l' ! (i + 1) = ?l ! (j + 1)) |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 4), template_var 3),
        template_equation
         (template_app (template_hole 16, template_var 4), template_var 3),
        template_inequation
         (less_than,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_app (template_hole 11, template_var 4)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 10, template_var 2),
            template_hole 9),
          template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Rel_ChainTemplates"
### 0.322s elapsed time, 0.493s cpu time, 0.063s GC time
val it = (): unit
