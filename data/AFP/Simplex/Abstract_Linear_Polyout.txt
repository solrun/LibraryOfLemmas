Loading theory "Draft.Simplex_Algebra" (required by "Draft.Abstract_Linear_PolyTemplates" via "Draft.Abstract_Linear_Poly")
Loading theory "Draft.Templates" (required by "Draft.Abstract_Linear_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.155s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abstract_Linear_PolyTemplates")
class scaleRat = type +
  fixes scaleRat :: "rat => 'a => 'a"
class rational_vector = ab_group_add + scaleRat +
  assumes
    "scaleRat_right_distrib": "!!a x y. a *R (x + y) = a *R x + a *R y"
    and "scaleRat_left_distrib": "!!a b x. (a + b) *R x = a *R x + b *R x"
    and "scaleRat_scaleRat": "!!a b x. a *R b *R x = (a * b) *R x"
    and "scaleRat_one": "!!x. 1 *R x = x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.055s cpu time, 0.061s GC time
class linordered_rational_vector = linorder + ordered_rational_vector +
  assumes "plus_less": "!!a b c. a < b ==> a + c < b + c"
    and "scaleRat_less1": "!!a b k. [| a < b; 0 < k |] ==> k *R a < k *R b"
    and "scaleRat_less2": "!!a b k. [| a < b; k < 0 |] ==> k *R b < k *R a"
class lrv = one + linordered_rational_vector +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
instantiation
  rat :: rational_vector
  scaleRat_rat == scaleRat :: rat => rat => rat
instantiation
  rat :: ordered_rational_vector
instantiation
  rat :: linordered_rational_vector
instantiation
  rat :: lrv
### theory "Draft.Simplex_Algebra"
### 1.576s elapsed time, 2.227s cpu time, 0.101s GC time
Loading theory "Draft.Abstract_Linear_Poly" (required by "Draft.Abstract_Linear_PolyTemplates")
instantiation
  linear_poly :: rational_vector
  uminus_linear_poly == uminus :: linear_poly => linear_poly
  zero_linear_poly == zero_class.zero :: linear_poly
  minus_linear_poly == minus :: linear_poly => linear_poly => linear_poly
  plus_linear_poly == plus :: linear_poly => linear_poly => linear_poly
  scaleRat_linear_poly == scaleRat :: rat => linear_poly => linear_poly
### theory "Draft.Abstract_Linear_Poly"
### 0.316s elapsed time, 0.365s cpu time, 0.046s GC time
Loading theory "Draft.Abstract_Linear_PolyTemplates"
val templateLemmas =
   [("Abstract_Linear_Poly.finite_vars", "finite (vars ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Linear_Poly.distinct_vars_list", "distinct (vars_list ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Linear_Poly.valuate_zero",
     "0 \<lbrace> ?v \<rbrace> = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Abstract_Linear_Poly.coeff_zero_simp", "coeff 0 ?v = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Abstract_Linear_Poly.coeff_Var1", "coeff (Var ?x) ?x = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Abstract_Linear_Poly.vars_uminus", "vars (- ?p) = vars ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Abstract_Linear_Poly.set_vars_list", "set (vars_list ?lp) = vars ?lp",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Abstract_Linear_Poly.valuate_Var",
     "Var ?x \<lbrace> ?v \<rbrace> = ?v ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Abstract_Linear_Poly.vars_Var", "vars (Var ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Abstract_Linear_Poly.vars_scaleRat1", "vars (?c *R ?p) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Abstract_Linear_Poly.valuate_lp_monom_1",
     "lp_monom 1 ?x \<lbrace> ?v \<rbrace> = ?v ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Abstract_Linear_Poly.vars_empty_zero", "(vars ?lp = {}) = (?lp = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Abstract_Linear_Poly.inv_fun_scale",
     "Abstract_Linear_Poly.inv ?f ==>
      Abstract_Linear_Poly.inv (fun_scale ?r ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Abstract_Linear_Poly.valuate_uminus",
     "- ?p \<lbrace> ?v \<rbrace> = - ?p \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.coeff_uminus",
     "coeff (- ?lp) ?var = - coeff ?lp ?var",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.is_monom_monom_coeff_not_zero",
     "is_monom ?l ==> monom_coeff ?l ~= 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Abstract_Linear_Poly.is_monom_vars_not_empty",
     "is_monom ?l ==> vars ?l ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Abstract_Linear_Poly.monom_var_in_vars",
     "is_monom ?l ==> monom_var ?l : vars ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abstract_Linear_Poly.valuate_lp_monom",
     "lp_monom ?c ?x \<lbrace> ?v \<rbrace> = ?c * ?v ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Abstract_Linear_Poly.vars_minus",
     "vars (?p1.0 - ?p2.0) <= vars ?p1.0 Un vars ?p2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abstract_Linear_Poly.vars_plus",
     "vars (?p1.0 + ?p2.0) <= vars ?p1.0 Un vars ?p2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abstract_Linear_Poly.max_var_max",
     "?a : vars ?lp ==> ?a <= max_var ?lp",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Abstract_Linear_Poly.valuate_scaleRat",
     "?c *R ?lp \<lbrace> ?v \<rbrace> = ?c *R ?lp \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.valuate_opposite_val",
     "?p \<lbrace> %x. - ?v x \<rbrace> = - ?p \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), t_empty),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.coeff_scaleRat",
     "coeff (?k *R ?lp1.0) ?var = ?k * coeff ?lp1.0 ?var",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.zero_coeff_zero",
     "(?p = 0) = (ALL v. coeff ?p v = 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Abstract_Linear_Poly.coeff_zero",
     "(coeff ?p ?x ~= 0) = (?x : vars ?p)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Abstract_Linear_Poly.is_monom_vars_monom_var",
     "is_monom ?l ==> vars ?l = {monom_var ?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Abstract_Linear_Poly.coeff_lp_monom",
     "coeff (lp_monom ?c ?v) ?v' = (if ?v = ?v' then ?c else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_var 2),
             template_hole 0)
           ))),
    ("Abstract_Linear_Poly.coeff_Var2",
     "?x ~= ?y ==> coeff (Var ?x) ?y = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Abstract_Linear_Poly.all_valuate_zero",
     "(!!v. ?p \<lbrace> v \<rbrace> = (0::?'a)) ==> ?p = 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Abstract_Linear_Poly.inv_fun_plus",
     "[| Abstract_Linear_Poly.inv ?f1.0; Abstract_Linear_Poly.inv ?f2.0 |]
      ==> Abstract_Linear_Poly.inv (fun_plus ?f1.0 ?f2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Abstract_Linear_Poly.valuate_minus",
     "?p1.0 - ?p2.0 \<lbrace> ?v \<rbrace> =
      ?p1.0 \<lbrace> ?v \<rbrace> - ?p2.0 \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.valuate_add",
     "?p1.0 + ?p2.0 \<lbrace> ?v \<rbrace> =
      ?p1.0 \<lbrace> ?v \<rbrace> + ?p2.0 \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.coeff_minus",
     "coeff (?lp1.0 - ?lp2.0) ?var = coeff ?lp1.0 ?var - coeff ?lp2.0 ?var",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.coeff_plus",
     "coeff (?lp1.0 + ?lp2.0) ?var = coeff ?lp1.0 ?var + coeff ?lp2.0 ?var",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.coeff_sum",
     "coeff (sum ?f ?is) ?x = (SUM i:?is. coeff (?f i) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Abstract_Linear_Poly.vars_lp_monom",
     "vars (lp_monom ?r ?x) = (if ?r = 0 then {} else {?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 1))
           ))),
    ("Abstract_Linear_Poly.poly_eq_iff",
     "(?p = ?q) = (ALL v. coeff ?p v = coeff ?q v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Abstract_Linear_Poly.monom_poly_assemble",
     "is_monom ?p ==> monom_coeff ?p *R lp_monom 1 (monom_var ?p) = ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Abstract_Linear_Poly.vars_scaleRat",
     "?c ~= 0 ==> vars (?c *R ?p) = vars ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Abstract_Linear_Poly.linear_poly_sum",
     "?p \<lbrace> ?v \<rbrace> = (SUM x:vars ?p. coeff ?p x *R ?v x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Abstract_Linear_Poly.monom_valuate",
     "is_monom ?m ==>
      ?m \<lbrace> ?v \<rbrace> = monom_coeff ?m *R ?v (monom_var ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Abstract_Linear_Poly.linear_poly_eqI",
     "(!!v. ?p \<lbrace> v \<rbrace> = ?q \<lbrace> v \<rbrace>) ==>
      ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Abstract_Linear_Poly.poly_eqI",
     "(!!v. coeff ?p v = coeff ?q v) ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Abstract_Linear_Poly.valuate_sum",
     "sum ?f ?A \<lbrace> ?v \<rbrace> =
      (SUM x:?A. ?f x \<lbrace> ?v \<rbrace>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Abstract_Linear_Poly.valuate_diff",
     "?p \<lbrace> ?v1.0 \<rbrace> - ?p \<lbrace> ?v2.0 \<rbrace> =
      ?p \<lbrace> %x. ?v1.0 x - ?v2.0 x \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Abstract_Linear_Poly.max_var_code",
     "max_var ?lp =
      (let vl = vars_list ?lp
       in if vl = [] then 0 else foldl max (hd vl) (tl vl))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         t_empty))),
    ("Abstract_Linear_Poly.valuate_depend",
     "ALL x:vars ?p. ?v x = ?v' x ==>
      ?p \<lbrace> ?v \<rbrace> = ?p \<lbrace> ?v' \<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Abstract_Linear_Poly.all_val",
     "ALL v.
         EX v'.
            (ALL x:vars ?p. v' x = v x) &
            ?p \<lbrace> v' \<rbrace> = (0::?'a) ==>
      ?p = 0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Abstract_Linear_Poly.coeff_sum_list",
     "distinct ?xs ==>
      coeff (SUM x<-?xs. ?f x *R lp_monom 1 x) ?v =
      (if ?v : set ?xs then ?f ?v else 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty), template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_app (template_var 1, template_var 0)),
           template_hole 0)))),
    ("Abstract_Linear_Poly.list_two_elements",
     "[| ?y : set ?l; ?x : set ?l; length ?l = Suc 0; ?y ~= ?x |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            ),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_hole 3)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate (template_hole 0))),
    ("Abstract_Linear_Poly.valuate_nonneg",
     "ALL x:vars ?p.
         (0 < coeff ?p x --> (0::?'a) <= ?v x) &
         (coeff ?p x < 0 --> ?v x <= (0::?'a)) ==>
      (0::?'a) <= ?p \<lbrace> ?v \<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Abstract_Linear_Poly.valuate_nonpos",
     "ALL x:vars ?p.
         (0 < coeff ?p x --> ?v x <= (0::?'a)) &
         (coeff ?p x < 0 --> (0::?'a) <= ?v x) ==>
      ?p \<lbrace> ?v \<rbrace> <= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Abstract_Linear_Poly.valuate_update_x",
     "ALL y:vars ?lp. y ~= ?x --> ?v1.0 y = ?v2.0 y ==>
      ?lp \<lbrace> ?v1.0 \<rbrace> +
      coeff ?lp ?x *R (?v2.0 ?x - ?v1.0 ?x) =
      ?lp \<lbrace> ?v2.0 \<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2)),
               template_app (template_var 1, template_var 2)))),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("Abstract_Linear_Poly.valuate_update_x_lemma",
     "[| ALL y. ?f y ~= 0 --> y ~= ?x --> ?v1.0 y = ?v2.0 y;
         finite {v. ?f v ~= 0} |]
      ==> (SUM x:{v. ?f v ~= 0}. ?f x *R ?v1.0 x) +
          ?f ?x *R (?v2.0 ?x - ?v1.0 ?x) =
          (SUM x:{v. ?f v ~= 0}. ?f x *R ?v2.0 x)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 4, t_empty))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2)),
               template_app (template_var 1, template_var 2)))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 4, t_empty))))),
    ("Abstract_Linear_Poly.valuate_add_lemma",
     "[| finite {v. ?f1.0 v ~= 0}; finite {v. ?f2.0 v ~= 0} |]
      ==> (SUM x:{v. ?f1.0 v + ?f2.0 v ~= 0}. (?f1.0 x + ?f2.0 x) *R ?v x) =
          (SUM x:{v. ?f1.0 v ~= 0}. ?f1.0 x *R ?v x) +
          (SUM x:{v. ?f2.0 v ~= 0}. ?f2.0 x *R ?v x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9, template_app (template_hole 8, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 9, template_app (template_hole 8, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 8, t_empty)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 8, t_empty))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 8, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.Abstract_Linear_PolyTemplates"
### 0.313s elapsed time, 0.431s cpu time, 0.000s GC time
val it = (): unit
