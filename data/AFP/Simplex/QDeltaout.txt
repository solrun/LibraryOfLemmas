Loading theory "Draft.Simplex_Algebra" (required by "Draft.QDeltaTemplates" via "Draft.QDelta" via "Draft.Abstract_Linear_Poly")
Loading theory "Draft.Templates" (required by "Draft.QDeltaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.166s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.QDeltaTemplates")
class scaleRat = type +
  fixes scaleRat :: "rat => 'a => 'a"
class rational_vector = ab_group_add + scaleRat +
  assumes
    "scaleRat_right_distrib": "!!a x y. a *R (x + y) = a *R x + a *R y"
    and "scaleRat_left_distrib": "!!a b x. (a + b) *R x = a *R x + b *R x"
    and "scaleRat_scaleRat": "!!a b x. a *R b *R x = (a * b) *R x"
    and "scaleRat_one": "!!x. 1 *R x = x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.056s cpu time, 0.059s GC time
class linordered_rational_vector = linorder + ordered_rational_vector +
  assumes "plus_less": "!!a b c. a < b ==> a + c < b + c"
    and "scaleRat_less1": "!!a b k. [| a < b; 0 < k |] ==> k *R a < k *R b"
    and "scaleRat_less2": "!!a b k. [| a < b; k < 0 |] ==> k *R b < k *R a"
class lrv = one + linordered_rational_vector +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
instantiation
  rat :: rational_vector
  scaleRat_rat == scaleRat :: rat => rat => rat
instantiation
  rat :: ordered_rational_vector
instantiation
  rat :: linordered_rational_vector
instantiation
  rat :: lrv
### theory "Draft.Simplex_Algebra"
### 1.643s elapsed time, 2.305s cpu time, 0.098s GC time
Loading theory "Draft.Abstract_Linear_Poly" (required by "Draft.QDeltaTemplates" via "Draft.QDelta")
instantiation
  linear_poly :: rational_vector
  uminus_linear_poly == uminus :: linear_poly => linear_poly
  zero_linear_poly == zero_class.zero :: linear_poly
  minus_linear_poly == minus :: linear_poly => linear_poly => linear_poly
  plus_linear_poly == plus :: linear_poly => linear_poly => linear_poly
  scaleRat_linear_poly == scaleRat :: rat => linear_poly => linear_poly
### theory "Draft.Abstract_Linear_Poly"
### 0.338s elapsed time, 0.395s cpu time, 0.044s GC time
Loading theory "Draft.QDelta" (required by "Draft.QDeltaTemplates")
consts
  qdfst :: "QDelta => rat"
consts
  qdsnd :: "QDelta => rat"
instantiation
  QDelta :: rational_vector
  uminus_QDelta == uminus :: QDelta => QDelta
  zero_QDelta == zero_class.zero :: QDelta
  minus_QDelta == minus :: QDelta => QDelta => QDelta
  plus_QDelta == plus :: QDelta => QDelta => QDelta
  scaleRat_QDelta == scaleRat :: rat => QDelta => QDelta
instantiation
  QDelta :: linorder
  less_eq_QDelta == less_eq :: QDelta => QDelta => bool
  less_QDelta == less :: QDelta => QDelta => bool
instantiation
  QDelta :: linordered_rational_vector
instantiation
  QDelta :: lrv
  one_QDelta == one_class.one :: QDelta
consts
  \<delta>_min :: "(QDelta * QDelta) list => rat"
### theory "Draft.QDelta"
### 0.328s elapsed time, 0.328s cpu time, 0.000s GC time
Loading theory "Draft.QDeltaTemplates"
val templateLemmas =
   [("QDelta.delta_gt_zero", "0 < \<delta>_min ?l",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("QDelta.delta_le_one", "\<delta>_min ?l <= 1",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("QDelta.delta_min_append",
     "\<delta>_min (?as @ ?bs) = min (\<delta>_min ?as) (\<delta>_min ?bs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("QDelta.val_scaleRat",
     "val (?c *R ?qd) ?\<delta> = ?c * val ?qd ?\<delta>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("QDelta.delta_min_mono",
     "set ?as <= set ?bs ==> \<delta>_min ?bs <= \<delta>_min ?as",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("QDelta.val_plus",
     "val (?qd1.0 + ?qd2.0) ?\<delta> =
      val ?qd1.0 ?\<delta> + val ?qd2.0 ?\<delta>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("QDelta.valuate_rat_valuate",
     "?lp \<lbrace> %v. val (?vl v) ?\<delta> \<rbrace> =
      val ?lp \<lbrace> ?vl \<rbrace> ?\<delta>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("QDelta.valuate_valuate_rat",
     "?lp \<lbrace> %v. QDelta (?vl v) 0 \<rbrace> =
      QDelta ?lp \<lbrace> ?vl \<rbrace> 0",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("QDelta.qdfst_setsum",
     "finite ?A ==> qdfst (sum ?f ?A) = (SUM x:?A. qdfst (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("QDelta.qdsnd_setsum",
     "finite ?A ==> qdsnd (sum ?f ?A) = (SUM x:?A. qdsnd (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("QDelta.delta0",
     "?qd1.0 <= ?qd2.0 ==>
      ALL \<epsilon>.
         0 < \<epsilon> & \<epsilon> <= \<delta>0 ?qd1.0 ?qd2.0 -->
         val ?qd1.0 \<epsilon> <= val ?qd2.0 \<epsilon>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("QDelta.delta_min",
     "ALL qd1 qd2. (qd1, qd2) : set ?qd --> qd1 <= qd2 ==>
      ALL \<epsilon>.
         0 < \<epsilon> & \<epsilon> <= \<delta>_min ?qd -->
         (ALL qd1 qd2.
             (qd1, qd2) : set ?qd -->
             val qd1 \<epsilon> <= val qd2 \<epsilon>)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.QDeltaTemplates"
### 0.351s elapsed time, 0.502s cpu time, 0.054s GC time
val it = (): unit
