Loading theory "Draft.Simplex_Auxiliary" (required by "Draft.Simplex_AuxiliaryTemplates")
Loading theory "Draft.Templates" (required by "Draft.Simplex_AuxiliaryTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Simplex_AuxiliaryTemplates")
### theory "Draft.Simplex_Auxiliary"
### 0.074s elapsed time, 0.174s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.466s elapsed time, 0.510s cpu time, 0.040s GC time
Loading theory "Draft.Simplex_AuxiliaryTemplates"
val templateLemmas =
   [("Simplex_Auxiliary.butlast_empty_conv_length",
     "(butlast ?l = []) = (length ?l <= 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Simplex_Auxiliary.last_tl",
     "1 < length ?l ==> last (tl ?l) = last ?l",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Simplex_Auxiliary.min_satisfying_None",
     "min_satisfying ?P ?l = None --> (ALL x:set ?l. ~ ?P x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty))
         )),
    ("Simplex_Auxiliary.hd_tl", "1 < length ?l ==> hd (tl ?l) = ?l ! 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 5)))),
    ("Simplex_Auxiliary.map_parametrize_idx",
     "map ?f ?l = map (%i. ?f (?l ! i)) [0..<length ?l]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Simplex_Auxiliary.tl_nth", "?l ~= [] ==> tl ?l ! ?n = ?l ! (?n + 1)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Simplex_Auxiliary.list_min_Min",
     "?l ~= [] ==> list_min ?l = Min (set ?l)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Simplex_Auxiliary.butlast_nth",
     "?n + 1 < length ?l ==> butlast ?l ! ?n = ?l ! ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Simplex_Auxiliary.min_element",
     "EX m. ?P m ==> EX mm. ?P mm & (ALL m'<mm. ~ ?P m')",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Simplex_Auxiliary.last_take_conv_nth",
     "[| 0 < ?n; ?n <= length ?l |] ==> last (take ?n ?l) = ?l ! (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Simplex_Auxiliary.interval_3split",
     "?i < ?n ==> [0..<?n] = [0..<?i] @ [?i] @ [?i + 1..<?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)))))),
    ("Simplex_Auxiliary.min_satisfying_Some",
     "min_satisfying ?P ?l = Some ?x -->
      ?x : set ?l & ?P ?x & (ALL x':set ?l. x' < ?x --> ~ ?P x')",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 1)),
                 t_empty))))
         )),
    ("Simplex_Auxiliary.map_reindex",
     "ALL i<length ?l. ?g (?l ! i) = ?f i ==>
      map ?f [0..<length ?l] = map ?g ?l",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 7, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Simplex_Auxiliary.foldl_mapping_update",
     "[| ?X : set ?l; distinct (map ?f ?l) |]
      ==> Mapping.lookup
           (foldl (%m a. Mapping.update (?f a) (?g a) m) ?i ?l) (?f ?X) =
          Some (?g ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 3)),
           template_app (template_var 2, template_var 4)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 4))))),
    ("Simplex_Auxiliary.finite_fun_args",
     "[| finite ?A; ALL a:?A. finite (?B a) |]
      ==> finite {f. ALL a. if a : ?A then f a : ?B a else f a = ?f0.0 a}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Simplex_AuxiliaryTemplates"
### 0.304s elapsed time, 0.410s cpu time, 0.000s GC time
val it = (): unit
