Loading theory "Draft.Simplex_Algebra" (required by "Draft.Linear_Poly_MapsTemplates" via "Draft.Linear_Poly_Maps" via "Draft.Abstract_Linear_Poly")
Loading theory "Draft.Templates" (required by "Draft.Linear_Poly_MapsTemplates" via "Draft.ExtrEqs")
class scaleRat = type +
  fixes scaleRat :: "rat => 'a => 'a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Poly_MapsTemplates")
class rational_vector = ab_group_add + scaleRat +
  assumes
    "scaleRat_right_distrib": "!!a x y. a *R (x + y) = a *R x + a *R y"
    and "scaleRat_left_distrib": "!!a b x. (a + b) *R x = a *R x + b *R x"
    and "scaleRat_scaleRat": "!!a b x. a *R b *R x = (a * b) *R x"
    and "scaleRat_one": "!!x. 1 *R x = x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.524s elapsed time, 1.064s cpu time, 0.059s GC time
class linordered_rational_vector = linorder + ordered_rational_vector +
  assumes "plus_less": "!!a b c. a < b ==> a + c < b + c"
    and "scaleRat_less1": "!!a b k. [| a < b; 0 < k |] ==> k *R a < k *R b"
    and "scaleRat_less2": "!!a b k. [| a < b; k < 0 |] ==> k *R b < k *R a"
class lrv = one + linordered_rational_vector +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
instantiation
  rat :: rational_vector
  scaleRat_rat == scaleRat :: rat => rat => rat
instantiation
  rat :: ordered_rational_vector
instantiation
  rat :: linordered_rational_vector
instantiation
  rat :: lrv
### theory "Draft.Simplex_Algebra"
### 1.582s elapsed time, 2.251s cpu time, 0.097s GC time
Loading theory "Draft.Abstract_Linear_Poly" (required by "Draft.Linear_Poly_MapsTemplates" via "Draft.Linear_Poly_Maps")
instantiation
  linear_poly :: rational_vector
  uminus_linear_poly == uminus :: linear_poly => linear_poly
  zero_linear_poly == zero_class.zero :: linear_poly
  minus_linear_poly == minus :: linear_poly => linear_poly => linear_poly
  plus_linear_poly == plus :: linear_poly => linear_poly => linear_poly
  scaleRat_linear_poly == scaleRat :: rat => linear_poly => linear_poly
### theory "Draft.Abstract_Linear_Poly"
### 0.316s elapsed time, 0.365s cpu time, 0.043s GC time
Loading theory "Draft.Linear_Poly_Maps" (required by "Draft.Linear_Poly_MapsTemplates")
instantiation
  linear_poly :: equal
  equal_linear_poly == equal_class.equal ::
    linear_poly => linear_poly => bool
### theory "Draft.Linear_Poly_Maps"
### 0.462s elapsed time, 0.504s cpu time, 0.061s GC time
Loading theory "Draft.Linear_Poly_MapsTemplates"
val templateLemmas =
   [("Linear_Poly_Maps.certificate",
     "LinearPoly (linear_poly_map ?lp) = ?lp",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Linear_Poly_Maps.coeff_code",
     "coeff ?lp = get_var_coeff (linear_poly_map ?lp)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Linear_Poly_Maps.vars_list_code",
     "vars_list ?lp = ordered_keys (linear_poly_map ?lp)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Linear_Poly_Maps.vars_code",
     "vars ?lp = fset (fmdom (linear_poly_map ?lp))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Linear_Poly_Maps.Var_code",
     "linear_poly_map (Var ?x) = set_var_coeff ?x 1 fmempty",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Linear_Poly_Maps.lp_monom_code",
     "linear_poly_map (lp_monom ?c ?x) =
      (if ?c = 0 then fmempty else fmupd ?x ?c fmempty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_hole 1))
           ))),
    ("Linear_Poly_Maps.lookup_add_monom",
     "?x ~= ?v ==> fmlookup (add_monom ?c ?v ?lp) ?x = fmlookup ?lp ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 3)))),
    ("Linear_Poly_Maps.lookup_add_monom",
     "get_var_coeff ?lp ?v + ?c = 0 ==>
      fmlookup (add_monom ?c ?v ?lp) ?v = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)),
            template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1),
               template_var 2)),
           template_var 1),
         template_hole 0))),
    ("Linear_Poly_Maps.valuate_code",
     "?lp \<lbrace> ?val \<rbrace> =
      (let lpm = linear_poly_map ?lp
       in SUM x<-vars_list ?lp. the (fmlookup lpm x) *R ?val x)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         t_empty))),
    ("Linear_Poly_Maps.lookup_add_monom",
     "get_var_coeff ?lp ?v + ?c ~= 0 ==>
      fmlookup (add_monom ?c ?v ?lp) ?v = Some (get_var_coeff ?lp ?v + ?c)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Linear_Poly_Maps.fmlookup_fold_not_mem",
     "?x ~: set ?k1.0 ==>
      fmlookup
       (foldl (%lp v. add_monom (get_var_coeff ?P1.0 v) v lp) ?P2.0 ?k1.0)
       ?x =
      fmlookup ?P2.0 ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.Linear_Poly_MapsTemplates"
### 0.356s elapsed time, 0.481s cpu time, 0.000s GC time
val it = (): unit
