   [("Simplex_Auxiliary.butlast_empty_conv_length",
     "(butlast ?l = []) = (length ?l <= 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Simplex_Auxiliary.last_tl",
     "1 < length ?l ==> last (tl ?l) = last ?l",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Simplex_Auxiliary.min_satisfying_None",
     "min_satisfying ?P ?l = None --> (ALL x:set ?l. ~ ?P x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty))
         )),
    ("Simplex_Auxiliary.hd_tl", "1 < length ?l ==> hd (tl ?l) = ?l ! 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 5)))),
    ("Simplex_Auxiliary.map_parametrize_idx",
     "map ?f ?l = map (%i. ?f (?l ! i)) [0..<length ?l]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Simplex_Auxiliary.tl_nth", "?l ~= [] ==> tl ?l ! ?n = ?l ! (?n + 1)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Simplex_Auxiliary.list_min_Min",
     "?l ~= [] ==> list_min ?l = Min (set ?l)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Simplex_Auxiliary.butlast_nth",
     "?n + 1 < length ?l ==> butlast ?l ! ?n = ?l ! ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Simplex_Auxiliary.min_element",
     "EX m. ?P m ==> EX mm. ?P mm & (ALL m'<mm. ~ ?P m')",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Simplex_Auxiliary.last_take_conv_nth",
     "[| 0 < ?n; ?n <= length ?l |] ==> last (take ?n ?l) = ?l ! (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Simplex_Auxiliary.interval_3split",
     "?i < ?n ==> [0..<?n] = [0..<?i] @ [?i] @ [?i + 1..<?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)))))),
    ("Simplex_Auxiliary.min_satisfying_Some",
     "min_satisfying ?P ?l = Some ?x -->
      ?x : set ?l & ?P ?x & (ALL x':set ?l. x' < ?x --> ~ ?P x')",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 1)),
                 t_empty))))
         )),
    ("Simplex_Auxiliary.map_reindex",
     "ALL i<length ?l. ?g (?l ! i) = ?f i ==>
      map ?f [0..<length ?l] = map ?g ?l",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 7, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Simplex_Auxiliary.foldl_mapping_update",
     "[| ?X : set ?l; distinct (map ?f ?l) |]
      ==> Mapping.lookup
           (foldl (%m a. Mapping.update (?f a) (?g a) m) ?i ?l) (?f ?X) =
          Some (?g ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 3)),
           template_app (template_var 2, template_var 4)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 4))))),
    ("Simplex_Auxiliary.finite_fun_args",
     "[| finite ?A; ALL a:?A. finite (?B a) |]
      ==> finite {f. ALL a. if a : ?A then f a : ?B a else f a = ?f0.0 a}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           )))]
