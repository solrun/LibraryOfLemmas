   [("Simplex.init_satisfies", "\<Turnstile> (init_state ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Simplex.init_tableau_valuated", "\<nabla> (init_state ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Simplex.init_unsat_flag", "~ \<U> (init_state ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Simplex.init_index_valid", "index_valid ?as (init_state ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Simplex.init_indices", "indices_state (init_state ?t) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Simplex.init_tableau_id", "\<T> (init_state ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Simplex.look_upd_simps", "Mapping.lookup Mapping.empty ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Simplex.init_bounds",
     "\<B>\<^sub>i\<^sub>l (init_state ?t) = Mapping.empty",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Simplex.init_bounds",
     "\<B>\<^sub>i\<^sub>u (init_state ?t) = Mapping.empty",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Simplex.satisfies_consistent", "\<Turnstile> ?s --> \<diamond> ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Simplex.lhs_linear_poly_to_eq", "lhs (linear_poly_to_eq ?h ?v) = ?v",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Simplex.set_unsat_simps", "\<U> (set_unsat ?I ?s) = True",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Simplex.update_simps", "\<T> (\<T>_update ?T ?s) = ?T",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Simplex.update_simps", "\<V> (\<V>_update ?V ?s) = ?V",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Simplex.fresh_var_monoinc",
     "?start <= FirstFreshVariable (preprocess' ?cs ?start)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Simplex.normalized_tableau_preprocess'",
     "\<triangle> (Tableau (preprocess' ?cs (start_fresh_variable ?cs)))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Simplex.init_satisfies_tableau",
     "\<langle>\<V> (init_state ?t)\<rangle> \<Turnstile>\<^sub>t ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 0)
         )),
    ("Simplex.satisfies_satisfies_no_lhs",
     "\<Turnstile> ?s ==>
      \<Turnstile>\<^sub>n\<^sub>o\<^sub>l\<^sub>h\<^sub>s ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Simplex.bounds_updates",
     "\<B>\<^sub>l (\<B>\<^sub>i\<^sub>u_update ?u ?s) = \<B>\<^sub>l ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.bounds_updates",
     "\<B>\<^sub>u (\<B>\<^sub>i\<^sub>l_update ?u ?s) = \<B>\<^sub>u ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.indices_state_set_unsat",
     "indices_state (set_unsat ?I ?s) = indices_state ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U> (\<B>\<^sub>i\<^sub>l_update ?up ?s) = \<U> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U> (\<B>\<^sub>i\<^sub>u_update ?up ?s) = \<U> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps", "\<U> (\<T>_update ?T ?s) = \<U> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps", "\<U> (\<V>_update ?V ?s) = \<U> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<T> (\<B>\<^sub>i\<^sub>l_update ?up ?s) = \<T> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<T> (\<B>\<^sub>i\<^sub>u_update ?up ?s) = \<T> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps", "\<T> (\<V>_update ?V ?s) = \<T> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.set_unsat_simps", "\<T> (set_unsat ?I ?s) = \<T> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U>\<^sub>c (\<B>\<^sub>i\<^sub>l_update ?up ?s) = \<U>\<^sub>c ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U>\<^sub>c (\<B>\<^sub>i\<^sub>u_update ?up ?s) = \<U>\<^sub>c ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U>\<^sub>c (\<T>_update ?T ?s) = \<U>\<^sub>c ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<U>\<^sub>c (\<V>_update ?V ?s) = \<U>\<^sub>c ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<V> (\<B>\<^sub>i\<^sub>l_update ?up ?s) = \<V> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<V> (\<B>\<^sub>i\<^sub>u_update ?up ?s) = \<V> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps", "\<V> (\<T>_update ?T ?s) = \<V> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.set_unsat_simps", "\<V> (set_unsat ?I ?s) = \<V> ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>l (\<B>\<^sub>i\<^sub>u_update ?up ?s) =
      \<B>\<^sub>i\<^sub>l ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>l (\<T>_update ?T ?s) = \<B>\<^sub>i\<^sub>l ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>l (\<V>_update ?V ?s) = \<B>\<^sub>i\<^sub>l ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.set_unsat_simps",
     "\<B>\<^sub>i\<^sub>l (set_unsat ?I ?s) = \<B>\<^sub>i\<^sub>l ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>u (\<B>\<^sub>i\<^sub>l_update ?up ?s) =
      \<B>\<^sub>i\<^sub>u ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>u (\<T>_update ?T ?s) = \<B>\<^sub>i\<^sub>u ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>u (\<V>_update ?V ?s) = \<B>\<^sub>i\<^sub>u ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.set_unsat_simps",
     "\<B>\<^sub>i\<^sub>u (set_unsat ?I ?s) = \<B>\<^sub>i\<^sub>u ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Simplex.lvars_distinct",
     "distinct (map lhs (Tableau (preprocess' ?cs ?start)))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("Simplex.rvars_eq_linear_poly_to_eq",
     "rvars_eq (linear_poly_to_eq ?h ?v) = vars ?h",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 2, template_var 1))),
    ("Simplex.bounds_compare_Some",
     "?x \<ge>\<^sub>l\<^sub>b Some ?c = (?c <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Simplex.bounds_compare_Some",
     "?x \<ge>\<^sub>u\<^sub>b Some ?c = (?c <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Simplex.bounds_compare_Some",
     "?x >\<^sub>l\<^sub>b Some ?c = (?c < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Simplex.bounds_compare_Some",
     "?x >\<^sub>u\<^sub>b Some ?c = (?c < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Simplex.bounds_compare_Some",
     "?x \<le>\<^sub>l\<^sub>b Some ?c = (?x <= ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex.bounds_compare_Some",
     "?x \<le>\<^sub>u\<^sub>b Some ?c = (?x <= ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex.bounds_compare_Some",
     "?x <\<^sub>l\<^sub>b Some ?c = (?x < ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex.bounds_compare_Some",
     "?x <\<^sub>u\<^sub>b Some ?c = (?x < ?c)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex.normalize_ns_constraint",
     "?v \<Turnstile>\<^sub>n\<^sub>s normalize_ns_constraint ?c =
      ?v \<Turnstile>\<^sub>n\<^sub>s ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Simplex.set_unsat_simps",
     "\<U>\<^sub>c (set_unsat ?I ?s) = Some (remdups ?I)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>l (\<B>\<^sub>i\<^sub>l_update ?up ?s) =
      ?up (\<B>\<^sub>i\<^sub>l ?s)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Simplex.update_simps",
     "\<B>\<^sub>i\<^sub>u (\<B>\<^sub>i\<^sub>u_update ?up ?s) =
      ?up (\<B>\<^sub>i\<^sub>u ?s)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Simplex.init_tableau_normalized",
     "\<triangle> ?t ==> \<triangle> (\<T> (init_state ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Simplex.compare_strict_nonstrict",
     "?x >\<^sub>l\<^sub>b ?b ==> ?x \<ge>\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.compare_strict_nonstrict",
     "?x >\<^sub>u\<^sub>b ?b ==> ?x \<ge>\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.i_satisfies_atom_set'_stronger",
     "?Iv \<Turnstile>\<^sub>i\<^sub>a\<^sub>e\<^sub>s ?as ==>
      ?Iv \<Turnstile>\<^sub>i\<^sub>a\<^sub>s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.compare_strict_nonstrict",
     "?x <\<^sub>l\<^sub>b ?b ==> ?x \<le>\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.compare_strict_nonstrict",
     "?x <\<^sub>u\<^sub>b ?b ==> ?x \<le>\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.satisfies_atom'_stronger",
     "?v \<Turnstile>\<^sub>a\<^sub>e ?a ==> ?v \<Turnstile>\<^sub>a ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex_Auxiliary.butlast_empty_conv_length",
     "(butlast ?l = []) = (length ?l <= 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Simplex_Algebra.uminus_less_lrv", "(- ?a < - ?b) = (?b < ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("Simplex.init_atoms_equiv_bounds", "{} \<doteq> \<B> (init_state ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0))))
         )),
    ("Simplex.neg_bounds_compare",
     "~ ?c \<ge>\<^sub>l\<^sub>b ?b ==> ?c <\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c \<ge>\<^sub>u\<^sub>b ?b ==> ?c <\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c >\<^sub>l\<^sub>b ?b ==> ?c \<le>\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c >\<^sub>u\<^sub>b ?b ==> ?c \<le>\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c \<le>\<^sub>l\<^sub>b ?b ==> ?c >\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c \<le>\<^sub>u\<^sub>b ?b ==> ?c >\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c <\<^sub>l\<^sub>b ?b ==> ?c \<ge>\<^sub>l\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.neg_bounds_compare",
     "~ ?c <\<^sub>u\<^sub>b ?b ==> ?c \<ge>\<^sub>u\<^sub>b ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.rhs_no_zero_tableau_start",
     "0 ~: rhs ` set (Tableau (preprocess' ?cs ?start))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)))))
             )
         )),
    ("Simplex.satisfies_bounds_consistent",
     "?v \<Turnstile>\<^sub>b \<B> ?s --> \<diamond> ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 1, template_var 0)))),
           template_app (template_hole 0, template_var 0))
         )),
    ("Simplex.lvars_tableau_ge_start",
     "ALL var:lvars (Tableau (preprocess' ?cs ?start)). ?start <= var",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           t_empty)
         )),
    ("Simplex.unsat_state_core_unsat",
     "unsat_state_core ?s ==> \<nexists>v. v \<Turnstile>\<^sub>s ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 1, t_empty))))),
    ("Simplex.state_satisfies_index",
     "?v \<Turnstile>\<^sub>s ?s ==>
      (?I, ?v) \<Turnstile>\<^sub>i\<^sub>s ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Simplex.i_satisfies_normalize_ns_constraint",
     "?Iv \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s 
      (map_prod id normalize_ns_constraint ` ?cs) =
      ?Iv \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  ?cs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0))),
    ("Simplex.preprocess'_code",
     "preprocess' [] ?v = IState ?v [] [] Map.empty []",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3),
             template_hole 2),
           t_empty),
         template_hole 0))),
    ("Simplex.min_lvar_not_in_bounds_lvars",
     "min_lvar_not_in_bounds ?s = Some ?x\<^sub>i -->
      ?x\<^sub>i : lvars (\<T> ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))
         )),
    ("Simplex.init'_unsat",
     "\<triangle> ?t ==>
      \<U> (init_state ?t) --> minimal_unsat_state_core (init_state ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Simplex.index_valid_indices_state",
     "index_valid ?as ?s ==> indices_state ?s <= fst ` ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Simplex.minimal_unsat_core_tabl_atomsD",
     "minimal_unsat_core_tabl_atoms ?I ?t ?as ==> ?I <= fst ` ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Simplex.satisfies_atom_set'_stronger",
     "?v \<Turnstile>\<^sub>a\<^sub>e\<^sub>s ?as ==>
      ?v \<Turnstile>\<^sub>a\<^sub>s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Simplex.one_zero_contra", "[| 1 <= ?x; ?x <= 0 |] ==> False",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c \<ge>\<^sub>l\<^sub>b ?b; ?c <\<^sub>l\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c \<ge>\<^sub>u\<^sub>b ?b; ?c <\<^sub>u\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c >\<^sub>l\<^sub>b ?b; ?c \<le>\<^sub>l\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c >\<^sub>u\<^sub>b ?b; ?c \<le>\<^sub>u\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.index_valid_distinct_indices",
     "[| index_valid ?as ?s; distinct_indices_atoms ?as |]
      ==> distinct_indices_state ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c \<le>\<^sub>l\<^sub>b ?b; ?c >\<^sub>l\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c \<le>\<^sub>u\<^sub>b ?b; ?c >\<^sub>u\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c <\<^sub>l\<^sub>b ?b; ?c \<ge>\<^sub>l\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.bounds_compare_contradictory",
     "[| ?c <\<^sub>u\<^sub>b ?b; ?c \<ge>\<^sub>u\<^sub>b ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Simplex.look_upd",
     "Mapping.lookup (Mapping.update ?k ?v ?m) = Mapping.lookup ?m(?k |->
      ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Simplex.init_satisfies_bounds",
     "\<langle>\<V> (init_state ?t)\<rangle> \<Turnstile>\<^sub>b
      \<B> (init_state ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0))))
         )),
    ("Simplex.init'_sat",
     "\<triangle> ?t ==>
      ~ \<U> (init_state ?t) --> \<Turnstile> (init_state ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Simplex_Auxiliary.last_tl",
     "1 < length ?l ==> last (tl ?l) = last ?l",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Simplex.opposite_dir",
     "\<unrhd>\<^sub>l\<^sub>b (%x y. y < x) ?a ?b =
      \<unlhd>\<^sub>u\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<unrhd>\<^sub>u\<^sub>b (%x y. y < x) ?a ?b =
      \<unlhd>\<^sub>l\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<rhd>\<^sub>l\<^sub>b (%x y. y < x) ?a ?b =
      \<lhd>\<^sub>u\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<rhd>\<^sub>u\<^sub>b (%x y. y < x) ?a ?b =
      \<lhd>\<^sub>l\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<unlhd>\<^sub>l\<^sub>b (%x y. y < x) ?a ?b =
      \<unrhd>\<^sub>u\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<unlhd>\<^sub>u\<^sub>b (%x y. y < x) ?a ?b =
      \<unrhd>\<^sub>l\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<lhd>\<^sub>l\<^sub>b (%x y. y < x) ?a ?b =
      \<rhd>\<^sub>u\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex.opposite_dir",
     "\<lhd>\<^sub>u\<^sub>b (%x y. y < x) ?a ?b =
      \<rhd>\<^sub>l\<^sub>b (<) ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 1), template_var 1),
         template_var 0))),
    ("Simplex_Auxiliary.min_satisfying_None",
     "min_satisfying ?P ?l = None --> (ALL x:set ?l. ~ ?P x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty))
         )),
    ("Simplex.first_fresh_variable_not_in_lvars",
     "ALL var:lvars (Tableau (preprocess' ?cs ?start)).
         var < FirstFreshVariable (preprocess' ?cs ?start)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           t_empty)
         )),
    ("Simplex.init'_tableau_equiv",
     "\<triangle> ?t ==>
      ?v \<Turnstile>\<^sub>t ?t =
      ?v \<Turnstile>\<^sub>t \<T> (init_state ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Simplex.init'_atoms_equiv_bounds",
     "\<triangle> ?t ==> {} \<doteq> \<B> (init_state ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("Simplex_Auxiliary.hd_tl", "1 < length ?l ==> hd (tl ?l) = ?l ! 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 5)))),
    ("Simplex.subst_no_effect",
     "?x\<^sub>j ~: vars ?lp ==> subst_var ?x\<^sub>j ?lp' ?lp = ?lp",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Simplex.index_valid_mono",
     "[| ?as <= ?bs; index_valid ?as ?s |] ==> index_valid ?bs ?s",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.i_satisfies_atom_set_mono",
     "[| ?as <= ?as'; ?v \<Turnstile>\<^sub>i\<^sub>a\<^sub>s ?as' |]
      ==> ?v \<Turnstile>\<^sub>i\<^sub>a\<^sub>s ?as",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Simplex.atoms_imply_bounds_index_mono",
     "[| ?as <= ?as'; ?as \<Turnstile>\<^sub>i ?bi |]
      ==> ?as' \<Turnstile>\<^sub>i ?bi",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simplex.bounds_lg",
     "[| ?c \<ge>\<^sub>u\<^sub>b ?b; ?x \<le>\<^sub>u\<^sub>b ?b |]
      ==> ?x <= ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Simplex.bounds_lg",
     "[| ?c \<ge>\<^sub>u\<^sub>b ?b; ?x <\<^sub>u\<^sub>b ?b |]
      ==> ?x < ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 0, template_var 2))),
    ("Simplex.bounds_lg",
     "[| ?c >\<^sub>u\<^sub>b ?b; ?x \<le>\<^sub>u\<^sub>b ?b |]
      ==> ?x < ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 0, template_var 2))),
    ("Simplex.bounds_lg",
     "[| ?c \<le>\<^sub>l\<^sub>b ?b; ?x \<ge>\<^sub>l\<^sub>b ?b |]
      ==> ?c <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Simplex.bounds_lg",
     "[| ?c \<le>\<^sub>l\<^sub>b ?b; ?x >\<^sub>l\<^sub>b ?b |]
      ==> ?c < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Simplex.bounds_lg",
     "[| ?c <\<^sub>l\<^sub>b ?b; ?x \<ge>\<^sub>l\<^sub>b ?b |]
      ==> ?c < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Simplex.zero_satisfies",
     "[| poly ?c = 0; zero_satisfies ?c |]
      ==> ?v \<Turnstile>\<^sub>n\<^sub>s ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Simplex_Auxiliary.map_parametrize_idx",
     "map ?f ?l = map (%i. ?f (?l ! i)) [0..<length ?l]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Simplex.qdelta_constraint_to_atom_monom",
     "is_monom (poly ?h) ==>
      ?v \<Turnstile>\<^sub>a qdelta_constraint_to_atom ?h ?var =
      ?v \<Turnstile>\<^sub>n\<^sub>s ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Simplex.min_rvar_incdec_eq_Some_rvars",
     "min_rvar_incdec_eq ?dir ?s ?eq = Inr ?x\<^sub>j ==>
      ?x\<^sub>j : rvars_eq ?eq",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Simplex.preprocess",
     "preprocess ?cs = (?t, ?as, ?trans_v, ?ui) ==> \<triangle> ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_predicate
        (template_app (template_hole 0, template_var 3)))),
    ("Simplex.bounds_updates",
     "\<B>\<^sub>l
       (\<B>\<^sub>i\<^sub>l_update (Mapping.update ?x (?i, ?c)) ?s) =
      \<B>\<^sub>l ?s(?x |-> ?c)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 0)),
           template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Simplex.bounds_updates",
     "\<B>\<^sub>u
       (\<B>\<^sub>i\<^sub>u_update (Mapping.update ?x (?i, ?c)) ?s) =
      \<B>\<^sub>u ?s(?x |-> ?c)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 0)),
           template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Simplex.set_unsat_bounds_id", "\<B> (set_unsat ?I ?s) = \<B> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Simplex.vars_subst_var",
     "vars (subst_var ?x\<^sub>j ?lp' ?lp)
      <= vars ?lp - {?x\<^sub>j} Un vars ?lp'",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app (template_hole 5, template_var 1)))),
    ("Simplex.vars_tableau_vars_constraints",
     "rvars (Tableau (preprocess' ?cs ?start))
      <= vars_constraints (map snd ?cs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))))))),
    ("Simplex.vars_subst_var_supset",
     "vars ?lp - {?x\<^sub>j} - vars ?lp'
      <= vars (subst_var ?x\<^sub>j ?lp' ?lp)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Simplex.start_fresh_variable_fresh",
     "ALL var:vars_constraints (map snd ?cs).
         var < start_fresh_variable ?cs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 0)))))),
           t_empty)
         )),
    ("Simplex.simplex",
     "simplex ?cs = Inr ?v ==>
      \<langle>?v\<rangle> \<Turnstile>\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("Simplex.minimal_unsat_core_tabl_atoms_mono",
     "[| ?as <= ?bs; minimal_unsat_core_tabl_atoms ?I ?t ?as |]
      ==> minimal_unsat_core_tabl_atoms ?I ?t ?bs",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Simplex.satisfies_tableau_Cons",
     "[| ?v \<Turnstile>\<^sub>t ?t; ?v \<Turnstile>\<^sub>e ?e |]
      ==> ?v \<Turnstile>\<^sub>t (?e # ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Simplex.not_zero_satisfies",
     "[| poly ?c = 0; ~ zero_satisfies ?c |]
      ==> ~ ?v \<Turnstile>\<^sub>n\<^sub>s ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Simplex.preprocess_part_2",
     "[| preprocess_part_2 ?as ?t = (?t', ?tv); \<triangle> ?t |]
      ==> \<triangle> ?t'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Simplex.normalized_tableau_unique_eq_for_lvar",
     "\<triangle> ?t ==> ALL x:lvars ?t. EX! p. (x, p) : set ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("Simplex_Auxiliary.tl_nth", "?l ~= [] ==> tl ?l ! ?n = ?l ! (?n + 1)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Simplex_Auxiliary.list_min_Min",
     "?l ~= [] ==> list_min ?l = Min (set ?l)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Simplex.pivot_eq_satisfies_eq",
     "?y : rvars_eq ?e ==>
      ?v \<Turnstile>\<^sub>e ?e = ?v \<Turnstile>\<^sub>e pivot_eq ?e ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Simplex_Auxiliary.butlast_nth",
     "?n + 1 < length ?l ==> butlast ?l ! ?n = ?l ! ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Simplex.min_lvar_not_in_bounds_None'",
     "min_lvar_not_in_bounds ?s = None -->
      \<langle>\<V> ?s\<rangle> \<Turnstile>\<^sub>b \<B> ?s \<parallel>
      lvars (\<T> ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_hole 8)),
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))
         )),
    ("Simplex.min_lvar_not_in_bounds_Some",
     "min_lvar_not_in_bounds ?s = Some ?x\<^sub>i -->
      ~ in_bounds ?x\<^sub>i \<langle>\<V> ?s\<rangle> (\<B> ?s)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1)),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 1)))))
         )),
    ("Simplex.equiv_subst_var",
     "?v ?x\<^sub>j = ?lp' \<lbrace> ?v \<rbrace> -->
      ?lp \<lbrace> ?v \<rbrace> =
      subst_var ?x\<^sub>j ?lp' ?lp \<lbrace> ?v \<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 3)))
         )),
    ("Simplex.rvars_eq_subst_var_eq",
     "rvars_eq (subst_var_eq_code ?x\<^sub>j ?lp ?eq)
      <= rvars_eq ?eq - {?x\<^sub>j} Un vars ?lp",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app (template_hole 6, template_var 1)))),
    ("Simplex.rvars_eq_subst_var_eq_supset",
     "rvars_eq ?eq - {?x\<^sub>j} - vars ?lp
      <= rvars_eq (subst_var_eq_code ?x\<^sub>j ?lp ?eq)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Simplex.init_atoms_imply_bounds_index",
     "{} \<Turnstile>\<^sub>i \<B>\<I> (init_state ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0)))))
         )),
    ("Simplex.simplex_index",
     "simplex_index ?cs = Inr ?v ==>
      \<langle>?v\<rangle> \<Turnstile>\<^sub>c\<^sub>s (snd ` set ?cs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 1))),
             t_empty)
           ))),
    ("Simplex.simplex",
     "simplex ?cs = Inl ?I ==>
      \<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("Simplex.equiv_subst_var_eq",
     "?v \<Turnstile>\<^sub>e (?x\<^sub>j, ?lp') ==>
      ?v \<Turnstile>\<^sub>e ?eq =
      ?v \<Turnstile>\<^sub>e subst_var_eq_code ?x\<^sub>j ?lp' ?eq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Simplex.bounds_consistent_lt_lb",
     "[| \<diamond> ?s; ?c >\<^sub>u\<^sub>b \<B>\<^sub>u ?s ?x |]
      ==> ~ ?c <\<^sub>l\<^sub>b \<B>\<^sub>l ?s ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("Simplex.bounds_consistent_gt_ub",
     "[| \<diamond> ?s; ?c <\<^sub>l\<^sub>b \<B>\<^sub>l ?s ?x |]
      ==> ~ ?c >\<^sub>u\<^sub>b \<B>\<^sub>u ?s ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("Simplex.bounds_consistent_leq_ub",
     "[| \<diamond> ?s; \<B>\<^sub>l ?s ?x\<^sub>i = Some ?c |]
      ==> ?c \<le>\<^sub>u\<^sub>b \<B>\<^sub>u ?s ?x\<^sub>i",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Simplex.bounds_consistent_geq_lb",
     "[| \<diamond> ?s; \<B>\<^sub>u ?s ?x\<^sub>i = Some ?c |]
      ==> ?c \<ge>\<^sub>l\<^sub>b \<B>\<^sub>l ?s ?x\<^sub>i",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Simplex.i_satisfies_ns_constraints_mono",
     "[| (?I, ?v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  ?cs;
         ?J <= ?I |]
      ==> (?J, ?v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Simplex.minimal_unsat_core_tabl_atomsD",
     "minimal_unsat_core_tabl_atoms ?I ?t ?as ==>
      \<nexists>v.
         v \<Turnstile>\<^sub>t ?t &
         (?I, v) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 4, t_empty))))),
    ("Simplex.preprocess'_unsat_indices",
     "?i : set (UnsatIndices (preprocess' ?s ?start)) ==>
      ~ ({?i}, ?v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  set ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_hole 1)),
                     template_var 0)),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("Simplex.not_in_bounds",
     "in_bounds ?x ?v (?lb, ?ub) ~=
      (?v ?x <\<^sub>l\<^sub>b ?lb ?x | ?v ?x >\<^sub>u\<^sub>b ?ub ?x)",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 2, template_var 3)),
                 template_app (template_var 1, template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 3)),
               template_app (template_var 0, template_var 3))))
         )),
    ("Simplex.poly_eval_update",
     "?p \<lbrace> ?v(?x := ?c) \<rbrace> =
      ?p \<lbrace> ?v \<rbrace> + coeff ?p ?x *R (?c - ?v ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_var 2, template_var 1)))))),
    ("Simplex.satisfies_bounds_iff",
     "?v \<Turnstile>\<^sub>b (?lb, ?ub) =
      (ALL x.
          ?v x \<ge>\<^sub>l\<^sub>b ?lb x &
          ?v x \<le>\<^sub>u\<^sub>b ?ub x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Simplex.preprocess'_Tableau_Poly_Mapping_None",
     "Poly_Mapping (preprocess' ?cs ?start) ?p = None ==>
      linear_poly_to_eq ?p ?v ~: set (Tableau (preprocess' ?cs ?start))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)),
            template_var 1),
          template_hole 5)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2))))
               )
           ))),
    ("Simplex.preprocess'_Tableau_Poly_Mapping_Some",
     "Poly_Mapping (preprocess' ?cs ?start) ?p = Some ?v ==>
      linear_poly_to_eq ?p ?v : set (Tableau (preprocess' ?cs ?start))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2))))
           ))),
    ("Simplex.sat_constraint_valuation",
     "ALL var:vars (poly ?c). ?v1.0 var = ?v2.0 var ==>
      ?v1.0 \<Turnstile>\<^sub>n\<^sub>s ?c =
      ?v2.0 \<Turnstile>\<^sub>n\<^sub>s ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Simplex.min_lvar_not_in_bounds_None",
     "min_lvar_not_in_bounds ?s = None -->
      (ALL x:lvars (\<T> ?s).
          in_bounds x \<langle>\<V> ?s\<rangle> (\<B> ?s))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 0)),
               template_hole 9)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0))),
             t_empty))
         )),
    ("Simplex_Auxiliary.min_element",
     "EX m. ?P m ==> EX mm. ?P mm & (ALL m'<mm. ~ ?P m')",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Simplex.preprocess",
     "[| preprocess ?cs = (?t, ?as, ?trans_v, ?ui);
         distinct_indices_ns (set ?cs) |]
      ==> distinct_indices_atoms (set ?as)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 4),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0)))),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2))
           ))),
    ("Simplex.recalc_tableau_lvars",
     "\<triangle> ?t ==>
      ALL v.
         EX v'. (ALL x:rvars ?t. v x = v' x) & v' \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Simplex.init'_atoms_imply_bounds_index",
     "\<triangle> ?t ==> {} \<Turnstile>\<^sub>i \<B>\<I> (init_state ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 0))),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 0)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 0)))))
           ))),
    ("Simplex_Auxiliary.last_take_conv_nth",
     "[| 0 < ?n; ?n <= length ?l |] ==> last (take ?n ?l) = ?l ! (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Simplex.preprocess_part_2",
     "[| preprocess_part_2 ?as ?t = (?t', ?tv); \<triangle> ?t;
         ?v \<Turnstile>\<^sub>t ?t |]
      ==> ?v \<Turnstile>\<^sub>t ?t'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Simplex_Auxiliary.interval_3split",
     "?i < ?n ==> [0..<?n] = [0..<?i] @ [?i] @ [?i + 1..<?n]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)))))),
    ("Simplex.satisfies_tableau_satisfies_tableau",
     "[| ?v1.0 \<Turnstile>\<^sub>t ?t;
         ALL var:tvars ?t. ?v1.0 var = ?v2.0 var |]
      ==> ?v2.0 \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 1))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0), template_var 1)
           ))),
    ("Simplex.subst_with_effect",
     "[| ?x\<^sub>j : vars ?lp; ?x : vars ?lp' - vars ?lp |]
      ==> ?x : vars (subst_var ?x\<^sub>j ?lp' ?lp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 2, template_var 0)),
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 2)))
           ))),
    ("Simplex.lhs_pivot_eq",
     "[| ?x\<^sub>j : rvars_eq ?eq; lhs ?eq ~: rvars_eq ?eq |]
      ==> lhs (pivot_eq ?eq ?x\<^sub>j) = ?x\<^sub>j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 2, template_var 0)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Simplex.distinct_indicesD",
     "[| distinct_indices ?as; (?i, ?x) : set ?as; (?i, ?y) : set ?as |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Simplex.preprocess",
     "preprocess ?cs = (?t, ?as, ?trans_v, ?ui) ==>
      fst ` set ?as Un set ?ui <= fst ` set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 4),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 2))),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 4))))),
    ("Simplex.sat_atom_sat_eq_sat_constraint_non_monom",
     "[| ?v \<Turnstile>\<^sub>a qdelta_constraint_to_atom ?h ?var;
         ?v \<Turnstile>\<^sub>e linear_poly_to_eq (poly ?h) ?var;
         ~ is_monom (poly ?h) |]
      ==> ?v \<Turnstile>\<^sub>n\<^sub>s ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 1,
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Simplex.preprocess_part_2",
     "[| preprocess_part_2 ?as ?t = (?t', ?tv); \<triangle> ?t;
         \<langle>?w\<rangle> \<Turnstile>\<^sub>t ?t' |]
      ==> \<langle>?tv ?w\<rangle> \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 0))),
             template_var 3)
           ))),
    ("Simplex.min_lvar_not_in_bounds_Some_min",
     "min_lvar_not_in_bounds ?s = Some ?x\<^sub>i -->
      (ALL x:lvars (\<T> ?s).
          x < ?x\<^sub>i -->
          in_bounds x \<langle>\<V> ?s\<rangle> (\<B> ?s))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 1)),
               template_app (template_hole 10, template_var 0))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1))),
             t_empty))
         )),
    ("Simplex.satisfies_tableau_cong",
     "(!!x. x : tvars ?t ==> ?v x = ?w x) ==>
      ?v \<Turnstile>\<^sub>t ?t = ?w \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Simplex.equiv_pivot_eq",
     "[| ?x\<^sub>j : rvars_eq ?eq; lhs ?eq ~: rvars_eq ?eq |]
      ==> ?v \<Turnstile>\<^sub>e pivot_eq ?eq ?x\<^sub>j =
          ?v \<Turnstile>\<^sub>e ?eq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 3, template_var 1)),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Simplex.unsat_mono",
     "[| \<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s ?cs; ?cs <= ?ds |]
      ==> \<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s ?ds",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 3, t_empty))),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("Simplex_Auxiliary.min_satisfying_Some",
     "min_satisfying ?P ?l = Some ?x -->
      ?x : set ?l & ?P ?x & (ALL x':set ?l. x' < ?x --> ~ ?P x')",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 1)),
                 t_empty))))
         )),
    ("Simplex_Auxiliary.map_reindex",
     "ALL i<length ?l. ?g (?l ! i) = ?f i ==>
      map ?f [0..<length ?l] = map ?g ?l",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 7, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Simplex.minimal_unsat_core_tabl_atomsD",
     "[| minimal_unsat_core_tabl_atoms ?I ?t ?as;
         distinct_indices_atoms ?as; ?J < ?I |]
      ==> EX v. v \<Turnstile>\<^sub>t ?t &
                (?J, v) \<Turnstile>\<^sub>i\<^sub>a\<^sub>e\<^sub>s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 3)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Simplex.satisfying_state_valuation_to_atom_tabl",
     "[| ?J <= indices_state ?s;
         (?J, ?v) \<Turnstile>\<^sub>i\<^sub>s\<^sub>e ?s;
         index_valid ?as ?s; distinct_indices_atoms ?as |]
      ==> ?v \<Turnstile>\<^sub>t \<T> ?s",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Simplex.satisfying_state_valuation_to_atom_tabl",
     "[| ?J <= indices_state ?s;
         (?J, ?v) \<Turnstile>\<^sub>i\<^sub>s\<^sub>e ?s;
         index_valid ?as ?s; distinct_indices_atoms ?as |]
      ==> (?J, ?v) \<Turnstile>\<^sub>i\<^sub>a\<^sub>e\<^sub>s ?as",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Simplex.preprocess",
     "[| preprocess ?cs = (?t, ?as, ?trans_v, ?ui); ?i : set ?ui |]
      ==> \<nexists>v.
             ({?i}, v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s 
             set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 5),
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            )],
       template_negation
        (template_predicate (template_app (template_hole 5, t_empty))))),
    ("Simplex_Auxiliary.foldl_mapping_update",
     "[| ?X : set ?l; distinct (map ?f ?l) |]
      ==> Mapping.lookup
           (foldl (%m a. Mapping.update (?f a) (?g a) m) ?i ?l) (?f ?X) =
          Some (?g ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 0),
               template_var 3)),
           template_app (template_var 2, template_var 4)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 4))))),
    ("Simplex.preprocess_part_2",
     "[| preprocess_part_2 ?as ?t = (?t', ?tv); \<triangle> ?t;
         (?I, \<langle>?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
         set ?as |]
      ==> (?I,
           \<langle>?tv ?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
          set ?as",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))),
              template_app (template_hole 0, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_var 2, template_var 0)))),
             template_app (template_hole 0, template_var 5))
           ))),
    ("Simplex.vars_subst_var'",
     " vars ?lp - {?x\<^sub>j} -
       vars
        ?lp' \<subseteq>s vars
                           (subst_var ?x\<^sub>j ?lp'
                             ?lp) \<subseteq>s vars ?lp - {?x\<^sub>j} Un
         vars ?lp'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 2)),
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_hole 2))),
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))),
               template_app (template_hole 4, template_var 0))))
         )),
    ("Simplex.\<B>\<I>_set_unsat",
     "\<B>\<I> (set_unsat ?I ?s) = \<B>\<I> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Simplex.eq_idx_for_lvar_aux",
     "?x : lvars ?t ==>
      let idx = eq_idx_for_lvar_aux ?t ?x ?i
      in ?i <= idx & idx < ?i + length ?t & lhs (?t ! (idx - ?i)) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 1),
                   template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Simplex_Auxiliary.finite_fun_args",
     "[| finite ?A; ALL a:?A. finite (?B a) |]
      ==> finite {f. ALL a. if a : ?A then f a : ?B a else f a = ?f0.0 a}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Simplex.preprocess'_Tableau_Poly_Mapping_Some'",
     "Poly_Mapping (preprocess' ?cs ?start) ?p = Some ?v ==>
      EX h. poly h = ?p &
            ~ is_monom (poly h) &
            qdelta_constraint_to_atom h ?v
            : snd ` set (Atoms (preprocess' ?cs ?start))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 12, template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Simplex.rvars_pivot_eq",
     "[| ?x\<^sub>j : rvars_eq ?eq; lhs ?eq ~: rvars_eq ?eq |]
      ==> rvars_eq (pivot_eq ?eq ?x\<^sub>j) =
          {lhs ?eq} Un (rvars_eq ?eq - {?x\<^sub>j})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 6, template_var 0)),
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_var 0)),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)))))),
    ("Simplex.atom_var_first",
     "[| ?a : snd ` set (Atoms (preprocess' ?cs ?start));
         ALL var:vars_constraints (map snd ?cs). var < ?start |]
      ==> atom_var ?a < FirstFreshVariable (preprocess' ?cs ?start)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 1),
                      template_var 0)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_app
                       (template_app (template_hole 6, template_hole 5),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 1)))))),
              t_empty)
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 12, template_var 1),
             template_var 0))))),
    ("Simplex.preprocess",
     "[| preprocess ?cs = (?t, ?as, ?trans_v, ?ui);
         EX v. (?I, v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s 
               set ?cs |]
      ==> EX v'.
             (?I, v') \<Turnstile>\<^sub>i\<^sub>a\<^sub>s set ?as &
             v' \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1)))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Simplex.preprocess_opt",
     "[| ?X = atom_var ` snd ` set ?as;
         preprocess_opt ?X ?t1.0 ?t2.0 = (?t', ?tv); \<triangle> ?t;
         ?t = rev ?t1.0 @ ?t2.0 |]
      ==> \<triangle> ?t'",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app (template_hole 7, template_var 5)))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 6),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 4)),
            template_var 3))],
       template_predicate
        (template_app (template_hole 3, template_var 2)))),
    ("Simplex.i_preprocess'_sat",
     "[| (?I, ?v) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
         set (Atoms (preprocess' ?s ?start));
         ?v \<Turnstile>\<^sub>t Tableau (preprocess' ?s ?start);
         ?I Int set (UnsatIndices (preprocess' ?s ?start)) = {} |]
      ==> (?I, ?v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  set ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)))),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Simplex.preprocess'_sat",
     "[| ?v \<Turnstile>\<^sub>a\<^sub>s
         (snd ` set (Atoms (preprocess' ?s ?start)));
         ?v \<Turnstile>\<^sub>t Tableau (preprocess' ?s ?start);
         set (UnsatIndices (preprocess' ?s ?start)) = {} |]
      ==> ?v \<Turnstile>\<^sub>n\<^sub>s\<^sub>s  (snd ` set ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 1),
                      template_var 0)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)))
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 1))),
             t_empty)
           ))),
    ("Simplex.pivot_eq_rvars",
     "[| ?x : rvars_eq (pivot_eq ?e ?v); ?x ~= lhs ?e;
         coeff (rhs ?e) ?v ~= 0; ?v ~= lhs ?e |]
      ==> ?x : rvars_eq ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 7, template_var 1)),
                template_var 0),
              template_hole 0)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)))
           ))),
    ("Simplex.satisifies_atom_restrict_to_Cons",
     "[| ?v \<Turnstile>\<^sub>a\<^sub>s
         (snd ` (set ?as Int ?I \<times> UNIV));
         ?i : ?I ==> ?v \<Turnstile>\<^sub>a ?a |]
      ==> ?v \<Turnstile>\<^sub>a\<^sub>s
          (snd ` (set ((?i, ?a) # ?as) Int ?I \<times> UNIV))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    t_empty))))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)
               )],
          template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 4),
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 0)),
                       template_var 3))),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   t_empty))))
           ))),
    ("Simplex.tableau_perm",
     "[| lvars ?t1.0 = lvars ?t2.0; rvars ?t1.0 = rvars ?t2.0;
         \<triangle> ?t1.0; \<triangle> ?t2.0;
         !!v. v \<Turnstile>\<^sub>t ?t1.0 = v \<Turnstile>\<^sub>t ?t2.0 |]
      ==> mset ?t1.0 = mset ?t2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Simplex.preprocess_opt",
     "[| ?X = atom_var ` snd ` set ?as;
         preprocess_opt ?X ?t1.0 ?t2.0 = (?t', ?tv); \<triangle> ?t;
         ?t = rev ?t1.0 @ ?t2.0; ?v \<Turnstile>\<^sub>t ?t |]
      ==> ?v \<Turnstile>\<^sub>t ?t'",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 6)))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 7),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 5)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Simplex.vars_pivot_eq",
     "[| ?x\<^sub>j : rvars_eq ?eq; lhs ?eq ~: rvars_eq ?eq |]
      ==> let eq' = pivot_eq ?eq ?x\<^sub>j
          in lhs eq' = ?x\<^sub>j &
             rvars_eq eq' = {lhs ?eq} Un (rvars_eq ?eq - {?x\<^sub>j})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 9, template_var 0)),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Simplex.min_lvar_not_in_bounds_Some'",
     "min_lvar_not_in_bounds ?s = Some ?x\<^sub>i -->
      ?x\<^sub>i : lvars (\<T> ?s) &
      ~ in_bounds ?x\<^sub>i \<langle>\<V> ?s\<rangle> (\<B> ?s) &
      (ALL x:lvars (\<T> ?s).
          x < ?x\<^sub>i -->
          in_bounds x \<langle>\<V> ?s\<rangle> (\<B> ?s))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app (template_hole 14, template_var 1)),
               template_app (template_hole 13, template_var 0))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 0),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 1)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 0),
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 1))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)),
                       template_app (template_hole 2, template_var 1))))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 1))),
                 t_empty))))
         )),
    ("Simplex.preprocess",
     "[| preprocess ?cs = (?t, ?as, ?trans_v, ?ui); ?I Int set ?ui = {};
         (?I, \<langle>?v\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
         set ?as;
         \<langle>?v\<rangle> \<Turnstile>\<^sub>t ?t |]
      ==> (?I,
           \<langle>?trans_v
                     ?v\<rangle>) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s 
          set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 6),
          template_app
           (template_app (template_hole 13, template_var 5),
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1),
            template_app (template_hole 8, template_var 2)),
          template_hole 7),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 4, template_var 0)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_var 3, template_var 0)))),
             template_app (template_hole 0, template_var 6))
           ))),
    ("Simplex.preprocess_opt",
     "[| ?X = atom_var ` snd ` set ?as;
         preprocess_opt ?X ?t1.0 ?t2.0 = (?t', ?tv); \<triangle> ?t;
         ?t = rev ?t1.0 @ ?t2.0;
         \<langle>?w\<rangle> \<Turnstile>\<^sub>t ?t' |]
      ==> \<langle>?tv ?w\<rangle> \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_app (template_hole 9, template_var 6)))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 7),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 5)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0))),
             template_var 1)
           ))),
    ("Simplex.simplex_index",
     "simplex_index ?cs = Inl ?I ==>
      set ?I <= fst ` set ?cs &
      (\<nexists>v.
          (set ?I, v) \<Turnstile>\<^sub>i\<^sub>c\<^sub>s set ?cs) &
      (distinct_indices ?cs -->
       (ALL J<set ?I.
           EX v. (J, v) \<Turnstile>\<^sub>i\<^sub>c\<^sub>s set ?cs))",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 1),
          template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 0)),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app (template_hole 8, template_var 1)))),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, t_empty))))
           ))),
    ("Simplex.pivot_tableau_eq",
     "[| ?t = ?t1.0 @ ?eq # ?t2.0; ?t' = ?t1' @ ?eq' # ?t2';
         ?x : rvars_eq ?eq; \<triangle> ?t;
         pivot_tableau_eq ?t1.0 ?eq ?t2.0 ?x = (?t1', ?eq', ?t2') |]
      ==> \<triangle> ?t'",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 9, template_var 7),
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 6)))
            ),
        template_predicate (template_app (template_hole 4, template_var 8)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 7),
                template_var 6),
              template_var 5),
            template_var 0),
          template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)))],
       template_predicate
        (template_app (template_hole 4, template_var 4)))),
    ("Simplex.min_rvar_incdec_eq_Some_incdec",
     "min_rvar_incdec_eq ?dir ?s ?eq = Inr ?x\<^sub>j ==>
      0 < coeff (rhs ?eq) ?x\<^sub>j &
      \<lhd>\<^sub>u\<^sub>b (Direction.lt ?dir)
       (\<langle>\<V> ?s\<rangle> ?x\<^sub>j)
       (Direction.UB ?dir ?s ?x\<^sub>j) |
      coeff (rhs ?eq) ?x\<^sub>j < 0 &
      \<rhd>\<^sub>l\<^sub>b (Direction.lt ?dir)
       (\<langle>\<V> ?s\<rangle> ?x\<^sub>j)
       (Direction.LB ?dir ?s ?x\<^sub>j)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 13, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 3)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 2)),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 1)),
                       template_var 0)),
                   template_hole 9)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 0))))
           ))),
    ("Simplex.pivot_tableau_eq",
     "[| ?t = ?t1.0 @ ?eq # ?t2.0; ?t' = ?t1' @ ?eq' # ?t2';
         ?x : rvars_eq ?eq; \<triangle> ?t;
         pivot_tableau_eq ?t1.0 ?eq ?t2.0 ?x = (?t1', ?eq', ?t2') |]
      ==> lhs ?eq' = ?x",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 11, template_var 7),
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 6)))
            ),
        template_predicate (template_app (template_hole 6, template_var 8)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_var 5),
            template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)))],
       template_equation
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Simplex.decrease_ub_satisfied_inverse",
     "[| \<lhd>\<^sub>u\<^sub>b (Direction.lt ?dir) ?c
          (Direction.UB ?dir ?s ?x);
         ?dir = Positive | ?dir = Negative;
         ?v \<Turnstile>\<^sub>b
         \<B> (update\<B>\<I> (Direction.UBI_upd ?dir) ?i ?x ?c ?s) |]
      ==> ?v \<Turnstile>\<^sub>b \<B> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 5)),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_hole 7)),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 2,
                              template_app
                               (template_hole 1, template_var 5)),
                            template_var 0),
                          template_var 2),
                        template_var 4),
                      template_var 3))),
                template_app
                 (template_hole 0,
                  template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 2,
                            template_app (template_hole 1, template_var 5)),
                          template_var 0),
                        template_var 2),
                      template_var 4),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Simplex.delete_lhs_var",
     "[| \<triangle> ?t; ?t = ?t1.0 @ (?x, ?p) # ?t2.0; ?t' = ?t1.0 @ ?t2.0;
         ?tv =
         (%v. Mapping.update ?x ?p \<lbrace> \<langle>v\<rangle> \<rbrace>
               v);
         ?x ~: atom_var ` snd ` set ?as |]
      ==> \<triangle> ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 7)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 13, template_var 6),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_var 3))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 13, template_var 6),
            template_var 3)),
        template_equation (template_var 1, t_empty),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_app (template_hole 0, template_var 0))))
                )
            )],
       template_predicate
        (template_app (template_hole 15, template_var 2)))),
    ("Simplex.pivot_tableau_eq",
     "[| ?t = ?t1.0 @ ?eq # ?t2.0; ?t' = ?t1' @ ?eq' # ?t2';
         ?x : rvars_eq ?eq; \<triangle> ?t;
         pivot_tableau_eq ?t1.0 ?eq ?t2.0 ?x = (?t1', ?eq', ?t2') |]
      ==> ?v \<Turnstile>\<^sub>t ?t' = ?v \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 11, template_var 8),
            template_app
             (template_app (template_hole 10, template_var 7),
              template_var 6))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 7)))
            ),
        template_predicate (template_app (template_hole 6, template_var 9)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 8),
                template_var 7),
              template_var 6),
            template_var 1),
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 5),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 9)))),
    ("Simplex.preprocess_opt",
     "[| ?X = atom_var ` snd ` set ?as;
         preprocess_opt ?X ?t1.0 ?t2.0 = (?t', ?tv); \<triangle> ?t;
         ?t = rev ?t1.0 @ ?t2.0;
         (?I, \<langle>?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
         set ?as |]
      ==> (?I,
           \<langle>?tv ?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
          set ?as",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 14, template_hole 13),
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app (template_hole 10, template_var 7)))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 8),
              template_var 6),
            template_var 5),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 6)),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app (template_hole 0, template_var 0))),
              template_app (template_hole 10, template_var 7))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_var 3, template_var 0)))),
             template_app (template_hole 10, template_var 7))
           ))),
    ("Simplex.distinct_indices_stateD",
     "[| distinct_indices_state ?s;
         Mapping.lookup (\<B>\<^sub>i\<^sub>l ?s) ?x = Some (?i, ?b) |
         Mapping.lookup (\<B>\<^sub>i\<^sub>u ?s) ?x = Some (?i, ?b);
         Mapping.lookup (\<B>\<^sub>i\<^sub>l ?s) ?x' = Some (?i, ?b') |
         Mapping.lookup (\<B>\<^sub>i\<^sub>u ?s) ?x' = Some (?i, ?b') |]
      ==> ?x = ?x' & ?b = ?b'",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 5)),
                      template_var 4)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 3, template_var 5)),
                    template_var 4)),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 5)),
                      template_var 1)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 0)))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 3, template_var 5)),
                    template_var 1)),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Simplex.delete_lhs_var",
     "[| \<triangle> ?t; ?t = ?t1.0 @ (?x, ?p) # ?t2.0; ?t' = ?t1.0 @ ?t2.0;
         ?tv =
         (%v. Mapping.update ?x ?p \<lbrace> \<langle>v\<rangle> \<rbrace>
               v);
         ?x ~: atom_var ` snd ` set ?as; ?v \<Turnstile>\<^sub>t ?t |]
      ==> ?v \<Turnstile>\<^sub>t ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 8)),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 14, template_var 7),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5)),
              template_var 4))),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 14, template_var 7),
            template_var 4)),
        template_equation (template_var 2, t_empty),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_app (template_hole 1, template_var 1))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 8)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Simplex.atoms_equiv_bounds_extend",
     "[| ?dir = Positive | ?dir = Negative;
         ~ \<unrhd>\<^sub>u\<^sub>b (Direction.lt ?dir) ?c
            (Direction.UB ?dir ?s ?x);
         ?ats \<doteq> \<B> ?s |]
      ==> (?ats Un {Direction.LE ?dir ?x ?c}) \<doteq>
          \<B> (update\<B>\<I> (Direction.UBI_upd ?dir) ?i ?x ?c ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 5),
                  template_hole 15)),
              template_app
               (template_app (template_hole 16, template_var 5),
                template_hole 14))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_var 5)),
                    template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 10, template_var 5),
                      template_var 3),
                    template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 3)),
                template_app (template_hole 6, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 5),
                         template_var 2),
                       template_var 4)),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 5)),
                           template_var 0),
                         template_var 2),
                       template_var 4),
                     template_var 3))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 5)),
                         template_var 0),
                       template_var 2),
                     template_var 4),
                   template_var 3))))
           ))),
    ("Simplex.min_rvar_incdec_eq_Some_min",
     "min_rvar_incdec_eq ?dir ?s ?eq = Inr ?x\<^sub>j ==>
      ALL x:rvars_eq ?eq.
         x < ?x\<^sub>j -->
         ~ (0 < coeff (rhs ?eq) x &
            \<lhd>\<^sub>u\<^sub>b (Direction.lt ?dir)
             (\<langle>\<V> ?s\<rangle> x) (Direction.UB ?dir ?s x) |
            coeff (rhs ?eq) x < 0 &
            \<rhd>\<^sub>l\<^sub>b (Direction.lt ?dir)
             (\<langle>\<V> ?s\<rangle> x) (Direction.LB ?dir ?s x))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 19, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 18, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_hole 16,
                 template_app (template_hole 15, template_var 1))),
             t_empty)
           ))),
    ("Simplex.delete_lhs_var",
     "[| \<triangle> ?t; ?t = ?t1.0 @ (?x, ?p) # ?t2.0; ?t' = ?t1.0 @ ?t2.0;
         ?tv =
         (%v. Mapping.update ?x ?p \<lbrace> \<langle>v\<rangle> \<rbrace>
               v);
         ?x ~: atom_var ` snd ` set ?as;
         \<langle>?w\<rangle> \<Turnstile>\<^sub>t ?t' |]
      ==> \<langle>?tv ?w\<rangle> \<Turnstile>\<^sub>t ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 8)),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 14, template_var 7),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5)),
              template_var 4))),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 14, template_var 7),
            template_var 4)),
        template_equation (template_var 2, t_empty),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_app (template_hole 1, template_var 1))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 8, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 8,
                 template_app (template_var 2, template_var 0))),
             template_var 8)
           ))),
    ("Simplex.preprocess'_unsat",
     "[| (?I, ?v) \<Turnstile>\<^sub>i\<^sub>n\<^sub>s\<^sub>s  set ?s;
         vars_constraints (map snd ?s) <= ?V; ALL var:?V. var < ?start |]
      ==> EX v'.
             (ALL var:?V. ?v var = v' var) &
             v' \<Turnstile>\<^sub>a\<^sub>s
             (snd `
              (set (Atoms (preprocess' ?s ?start)) Int ?I \<times> UNIV)) &
             v' \<Turnstile>\<^sub>t Tableau (preprocess' ?s ?start)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 4),
                  template_var 3)),
              template_app (template_hole 25, template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 23,
            template_app
             (template_hole 22,
              template_app
               (template_app (template_hole 21, template_hole 20),
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_app
                   (template_app (template_hole 17, template_hole 16),
                    template_var 2))))),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Simplex.delete_lhs_var",
     "[| \<triangle> ?t; ?t = ?t1.0 @ (?x, ?p) # ?t2.0; ?t' = ?t1.0 @ ?t2.0;
         ?tv =
         (%v. Mapping.update ?x ?p \<lbrace> \<langle>v\<rangle> \<rbrace>
               v);
         ?x ~: atom_var ` snd ` set ?as;
         (?I, \<langle>?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
         set ?as |]
      ==> (?I,
           \<langle>?tv ?w\<rangle>) \<Turnstile>\<^sub>i\<^sub>a\<^sub>s
          set ?as",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 9)),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 15, template_var 8),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 7),
                  template_var 6)),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 15, template_var 8),
            template_var 5)),
        template_equation (template_var 3, t_empty),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_app (template_hole 2, template_var 2))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_app (template_hole 9, template_var 0))),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 9,
                   template_app (template_var 3, template_var 0)))),
             template_app (template_hole 2, template_var 2))
           ))),
    ("Simplex.simplex",
     "simplex ?cs = Inl ?I ==>
      set ?I <= {0..<length ?cs} &
      (\<nexists>v.
          v \<Turnstile>\<^sub>c\<^sub>s {?cs ! i |i. i : set ?I}) &
      (ALL J<set ?I.
          EX v. v \<Turnstile>\<^sub>c\<^sub>s {?cs ! i |i. i : J})",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 1),
          template_app (template_hole 18, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_var 0)),
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app (template_hole 12, template_var 1)))),
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, t_empty))),
               template_app (template_hole 2, t_empty)))
           ))),
    ("Simplex.min_rvar_incdec_eq_None'",
     "[| ?dir = Positive | ?dir = Negative;
         min_rvar_incdec_eq ?dir ?s ?eq = Inl ?is; ?I = set ?is;
         (?I, ?v) \<Turnstile>\<^sub>i\<^sub>b \<B>\<I> ?s |]
      ==> Direction.lt ?dir rhs ?eq \<lbrace> ?v \<rbrace>
           rhs ?eq \<lbrace> \<langle>\<V> ?s\<rangle> \<rbrace> |
          rhs ?eq \<lbrace> ?v \<rbrace> =
          rhs ?eq \<lbrace> \<langle>\<V> ?s\<rangle> \<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_hole 21)),
              template_app
               (template_app (template_hole 22, template_var 5),
                template_hole 20))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 17, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 4)),
                    template_app (template_hole 9, template_var 4))),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 4)),
                  template_app (template_hole 6, template_var 4))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 3)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 4))))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)))))
           ))),
    ("Simplex.preprocess'_simps",
     "preprocess' ((?i, ?h) # ?t) ?v =
      (let s' = preprocess' ?t ?v; p = poly ?h; is_monom_h = is_monom p;
           v' = FirstFreshVariable s'; t' = Tableau s'; a' = Atoms s';
           m' = Poly_Mapping s'; u' = UnsatIndices s'
       in if is_monom_h
          then IState v' t' ((?i, monom_to_atom ?h) # a') m' u'
          else if p = 0
               then if zero_satisfies ?h then s'
                    else IState v' t' a' m' (?i # u')
               else case m' p of
                    None =>
                      IState (v' + 1) (linear_poly_to_eq p v' # t')
                       ((?i, qdelta_constraint_to_atom' ?h v') # a')
                       (m'(p |-> v')) u'
                    | Some v =>
                        IState v' t'
                         ((?i, qdelta_constraint_to_atom' ?h v) # a') m'
                         u')",
     template_equation
      (template_app
        (template_app
          (template_hole 34,
           template_app
            (template_app
              (template_hole 33,
               template_app
                (template_app (template_hole 32, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 31,
           template_app
            (template_app (template_hole 34, template_var 1),
             template_var 0)),
         t_empty))),
    ("Simplex.min_rvar_incdec_eq_None",
     "min_rvar_incdec_eq ?dir ?s ?eq = Inl ?is ==>
      (ALL x:rvars_eq ?eq.
          ~ (0 < coeff (rhs ?eq) x &
             \<lhd>\<^sub>u\<^sub>b (Direction.lt ?dir)
              (\<langle>\<V> ?s\<rangle> x) (Direction.UB ?dir ?s x) |
             coeff (rhs ?eq) x < 0 &
             \<rhd>\<^sub>l\<^sub>b (Direction.lt ?dir)
              (\<langle>\<V> ?s\<rangle> x) (Direction.LB ?dir ?s x))) &
      set ?is =
      {Direction.LI ?dir ?s (lhs ?eq)} Un
      {Direction.LI ?dir ?s x |x.
       x : rvars_eq ?eq & coeff (rhs ?eq) x < 0} Un
      {Direction.UI ?dir ?s x |x.
       x : rvars_eq ?eq & 0 < coeff (rhs ?eq) x} &
      (?dir = Positive | ?dir = Negative -->
       Direction.LI ?dir ?s (lhs ?eq) : indices_state ?s -->
       set ?is <= indices_state ?s)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 36, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 35, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 34,
               template_app
                (template_app
                  (template_hole 33,
                   template_app
                    (template_hole 32,
                     template_app (template_hole 31, template_var 1))),
                 t_empty)),
             template_app
              (template_app
                (template_hole 34,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app (template_hole 17, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 14, template_var 3),
                                   template_var 2),
                                 template_app
                                  (template_hole 13, template_var 1))),
                             template_hole 12)),
                         template_app (template_hole 11, t_empty))),
                     template_app (template_hole 11, t_empty)))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 29,
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_hole 4)),
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_hole 3))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 14, template_var 3),
                             template_var 2),
                           template_app
                            (template_hole 13, template_var 1))),
                       template_app (template_hole 1, template_var 2))),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 17, template_var 0)),
                     template_app (template_hole 1, template_var 2))))))
           )))]
