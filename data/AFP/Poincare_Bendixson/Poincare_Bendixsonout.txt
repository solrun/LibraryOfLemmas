Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Analysis_Misc" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.Poincare_Bendixson")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.533s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
bundle eucl_notation
bundle no_eucl_notation
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Analysis_Misc"
### 0.795s elapsed time, 2.998s cpu time, 0.382s GC time
Loading theory "Draft.ODE_Misc" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.Poincare_Bendixson")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.096s elapsed time, 4.079s cpu time, 0.907s GC time
"filterlim f (nhds_set (frontier X)) F"
  :: "bool"
### theory "HOL-Library.BigO"
### 0.982s elapsed time, 3.617s cpu time, 0.843s GC time
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale c1_on_open
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open f f' X"
Found termination order: "size <*mlex*> {}"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
### theory "HOL-Library.Tree"
### 2.156s elapsed time, 6.290s cpu time, 1.176s GC time
Loading theory "Draft.Templates" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Poincare_BendixsonTemplates")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.787s elapsed time, 1.835s cpu time, 0.699s GC time
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### theory "Draft.ODE_Misc"
### 2.918s elapsed time, 5.955s cpu time, 1.562s GC time
Loading theory "Draft.Invariance" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.Poincare_Bendixson" via "Draft.Periodic_Orbit" via "Draft.Limit_Set")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### theory "Draft.Invariance"
### 0.914s elapsed time, 0.964s cpu time, 0.096s GC time
Loading theory "Draft.Limit_Set" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.Poincare_Bendixson" via "Draft.Periodic_Orbit")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### Ambiguous input (line 10 of "$AFP/Poincare_Bendixson/Limit_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" \<omega>_limit_point)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.subset_eq"
###         ("\<^const>Set_Interval.ord_class.atLeast"
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" existence_ivl0) ("_position" x)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Analysis_Misc.sequentially_at_top"
###           ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###         ("\<^const>Topological_Spaces.topological_space_class.LIMSEQ"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" flow0) ("_position" x)) ("_position" s))
###           ("_position" p))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" \<omega>_limit_point)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.subset_eq"
###         ("\<^const>Set_Interval.ord_class.atLeast"
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" existence_ivl0) ("_position" x)))
###       ("\<^const>HOL.Ex_binder" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>Analysis_Misc.sequentially_at_top" ("_position" s))
###           ("\<^const>Topological_Spaces.topological_space_class.LIMSEQ"
###             ("\<^const>Fun.comp"
###               ("_applC" ("_position" flow0) ("_position" x))
###               ("_position" s))
###             ("_position" p)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Poincare_Bendixson/Limit_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" \<alpha>_limit_point)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.subset_eq"
###         ("\<^const>Set_Interval.ord_class.atMost"
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" existence_ivl0) ("_position" x)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Analysis_Misc.sequentially_at_bot"
###           ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###         ("\<^const>Topological_Spaces.topological_space_class.LIMSEQ"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" flow0) ("_position" x)) ("_position" s))
###           ("_position" p))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" \<alpha>_limit_point)
###       ("_cargs" ("_position" x) ("_position" p)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.subset_eq"
###         ("\<^const>Set_Interval.ord_class.atMost"
###           ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" existence_ivl0) ("_position" x)))
###       ("\<^const>HOL.Ex_binder" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>Analysis_Misc.sequentially_at_bot" ("_position" s))
###           ("\<^const>Topological_Spaces.topological_space_class.LIMSEQ"
###             ("\<^const>Fun.comp"
###               ("_applC" ("_position" flow0) ("_position" x))
###               ("_position" s))
###             ("_position" p)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### theory "Draft.Limit_Set"
### 0.932s elapsed time, 0.978s cpu time, 0.080s GC time
Loading theory "Draft.Periodic_Orbit" (required by "Draft.Poincare_BendixsonTemplates" via "Draft.Poincare_Bendixson")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### theory "Draft.Periodic_Orbit"
### 0.574s elapsed time, 0.593s cpu time, 0.036s GC time
Loading theory "Draft.Poincare_Bendixson" (required by "Draft.Poincare_BendixsonTemplates")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale c1_on_open_R2
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_R2 f f' X"
locale c1_on_open_R2
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_R2 f f' X"
locale c1_on_open_R2
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_R2 f f' X"
### theory "Draft.Poincare_Bendixson"
### 2.321s elapsed time, 2.453s cpu time, 0.227s GC time
Loading theory "Draft.Poincare_BendixsonTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Poincare_BendixsonTemplates"
### 1.362s elapsed time, 1.665s cpu time, 0.215s GC time
val it = (): unit
