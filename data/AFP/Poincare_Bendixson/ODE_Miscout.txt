Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ODE_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Analysis_Misc" (required by "Draft.ODE_MiscTemplates" via "Draft.ODE_Misc")
Loading theory "HOL-Library.Stream" (required by "Draft.ODE_MiscTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.ODE_MiscTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.555s cpu time, 0.068s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ODE_MiscTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
bundle eucl_notation
bundle no_eucl_notation
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Analysis_Misc"
### 0.711s elapsed time, 2.719s cpu time, 0.301s GC time
Loading theory "Draft.ODE_Misc" (required by "Draft.ODE_MiscTemplates")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.161s elapsed time, 4.307s cpu time, 1.054s GC time
"filterlim f (nhds_set (frontier X)) F"
  :: "bool"
### theory "HOL-Library.BigO"
### 1.044s elapsed time, 3.829s cpu time, 0.985s GC time
Found termination order: "size <*mlex*> {}"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale c1_on_open
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open f f' X"
Found termination order: "size <*mlex*> {}"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
### theory "HOL-Library.Tree"
### 2.128s elapsed time, 6.331s cpu time, 1.274s GC time
Loading theory "Draft.Templates" (required by "Draft.ODE_MiscTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ODE_MiscTemplates")
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.796s elapsed time, 1.879s cpu time, 0.810s GC time
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### theory "Draft.ODE_Misc"
### 2.969s elapsed time, 6.302s cpu time, 1.854s GC time
Loading theory "Draft.ODE_MiscTemplates"
val templateLemmas =
   [("ODE_Misc.bdd_above_is_intervalI",
     "[| is_interval ?I; ?a <= ?b; ?a : ?I; ?b ~: ?I |] ==> bdd_above ?I",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2)
                )
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("ODE_Misc.bdd_below_is_intervalI",
     "[| is_interval ?I; ?a <= ?b; ?a ~: ?I; ?b : ?I |] ==> bdd_below ?I",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("ODE_Misc.comparison_principle_le_linear",
     "[| continuous_on {?a..?b} ?g;
         !!t. t : {?a..?b} ==>
              (?\<phi> has_real_derivative ?\<phi>' t) (at t);
         ?\<phi> ?a <= 0;
         !!t. t : {?a..?b} ==> ?\<phi>' t <= ?g t *\<^sub>R ?\<phi> t |]
      ==> ALL t:{?a..?b}. ?\<phi> t <= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 4),
          template_hole 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 9, template_var 4),
                 template_var 3)),
             t_empty)
           ))),
    ("ODE_Misc.local_lipschitz_compact_bicomposeE",
     "[| local_lipschitz ?T ?X ?f;
         !!x. x : ?X ==> continuous_on ?I (%t. ?f t x); compact ?I;
         ?I <= ?T; continuous_on ?I ?v; continuous_on ?I ?w; ?v ` ?I <= ?X;
         ?w ` ?I <= ?X;
         !!L. [| 0 < L;
                 !!x. x : ?I ==>
                      dist (?f x (?v x)) (?f x (?w x))
                      <= L * dist (?v x) (?w x) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_inequation (less_equals, template_var 3, template_var 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 2), template_var 3),
          template_var 5),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 1), template_var 3),
          template_var 5),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("ODE_Misc.comparison_principle_le",
     "[| local_lipschitz ?X ?Y ?f;
         !!x. x : ?Y ==> continuous_on {?a..?b} (%t. ?f t x);
         {?a..?b} <= ?X;
         !!x. x : {?a..?b} ==>
              (?\<phi> has_real_derivative ?\<phi>' x) (at x);
         !!x. x : {?a..?b} ==>
              (?\<psi> has_real_derivative ?\<psi>' x) (at x);
         ?\<phi> ` {?a..?b} <= ?Y; ?\<psi> ` {?a..?b} <= ?Y;
         ?\<phi> ?a <= ?\<psi> ?a;
         !!x. x : {?a..?b} ==>
              ?\<phi>' x - ?f x (?\<phi> x)
              <= ?\<psi>' x - ?f x (?\<psi> x) |]
      ==> ALL x:{?a..?b}. ?\<phi> x <= ?\<psi> x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 5), template_var 4),
          template_var 8),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4)),
          template_var 7),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4)),
          template_var 7),
        template_inequation
         (less_equals, template_app (template_var 3, template_var 5),
          template_app (template_var 1, template_var 5)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_var 4)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.ODE_MiscTemplates"
### 1.326s elapsed time, 1.643s cpu time, 0.232s GC time
val it = (): unit
