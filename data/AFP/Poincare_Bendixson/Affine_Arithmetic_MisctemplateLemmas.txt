   [("Affine_Arithmetic_Misc.prove_nonneg_empty",
     "prove_nonneg ?prnt (Suc ?i) ?p ?slp []",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Affine_Arithmetic_Misc.prove_nonneg_simps",
     "prove_nonneg ?prnt 0 ?p ?slp ?X = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_hole 1),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("Affine_Arithmetic_Misc.prove_nonneg_fuel_mono",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?YSS ==>
      prove_nonneg ?prnt (Suc ?i) ?p (slp_of_fas [?fa]) ?YSS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_hole 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_var 0)
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg_mono",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) (?YS # ?YSS) ==>
      prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?YSS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_hole 1))),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_var 0)
           ))),
    ("Affine_Arithmetic_Misc.split_aforms_lemma",
     "[| split_aforms ?XS ?i = (?YS, ?ZS); ?xs : Joints ?XS |]
      ==> ?xs : Joints ?YS Un Joints ?ZS",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?XSS ==>
      ALL XS:set ?XSS. ALL xs:Joints XS. 0 <= interpret_floatarith ?fa xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_hole 7))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg_simps",
     "prove_nonneg ?prnt (Suc ?i) ?p ?slp ?XXS =
      (case ?XXS of [] => True
       | X # XS =>
           let RS = approx_slp_outer ?p 1 ?slp X
           in if RS ~= None & 0 <= Inf_aform' ?p (hd (the RS))
              then prove_nonneg ?prnt ?i ?p ?slp XS
              else case split_aforms_largest_uncond X of
                   (a, b) => prove_nonneg ?prnt ?i ?p ?slp (a # b # XS))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 17, template_hole 16), t_empty),
         template_var 0)))]
