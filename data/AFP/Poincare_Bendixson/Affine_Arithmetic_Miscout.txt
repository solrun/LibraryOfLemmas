Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Affine_Arithmetic_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Affine_Arithmetic_MiscTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.Affine_Arithmetic_MiscTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Affine_Arithmetic_Misc" (required by "Draft.Affine_Arithmetic_MiscTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  prove_nonneg ::
    "(nat * nat * char list) list
     => nat
        => nat => floatarith list => (real * real pdevs) list list => bool"
### theory "HOL-Library.Function_Algebras"
### 0.172s elapsed time, 0.685s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Affine_Arithmetic_MiscTemplates" via "Draft.ExtrEqs")
### theory "Draft.Affine_Arithmetic_Misc"
### 0.184s elapsed time, 0.734s cpu time, 0.050s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.935s elapsed time, 2.960s cpu time, 0.271s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.812s elapsed time, 2.411s cpu time, 0.304s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.817s elapsed time, 4.291s cpu time, 0.858s GC time
Loading theory "Draft.Templates" (required by "Draft.Affine_Arithmetic_MiscTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.086s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Affine_Arithmetic_MiscTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.480s elapsed time, 0.529s cpu time, 0.063s GC time
Loading theory "Draft.Affine_Arithmetic_MiscTemplates"
val templateLemmas =
   [("Affine_Arithmetic_Misc.prove_nonneg_empty",
     "prove_nonneg ?prnt (Suc ?i) ?p ?slp []",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Affine_Arithmetic_Misc.prove_nonneg_simps",
     "prove_nonneg ?prnt 0 ?p ?slp ?X = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_hole 1),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("Affine_Arithmetic_Misc.prove_nonneg_fuel_mono",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?YSS ==>
      prove_nonneg ?prnt (Suc ?i) ?p (slp_of_fas [?fa]) ?YSS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_hole 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_var 0)
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg_mono",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) (?YS # ?YSS) ==>
      prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?YSS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_hole 1))),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_var 0)
           ))),
    ("Affine_Arithmetic_Misc.split_aforms_lemma",
     "[| split_aforms ?XS ?i = (?YS, ?ZS); ?xs : Joints ?XS |]
      ==> ?xs : Joints ?YS Un Joints ?ZS",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg",
     "prove_nonneg ?prnt ?i ?p (slp_of_fas [?fa]) ?XSS ==>
      ALL XS:set ?XSS. ALL xs:Joints XS. 0 <= interpret_floatarith ?fa xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_hole 7))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("Affine_Arithmetic_Misc.prove_nonneg_simps",
     "prove_nonneg ?prnt (Suc ?i) ?p ?slp ?XXS =
      (case ?XXS of [] => True
       | X # XS =>
           let RS = approx_slp_outer ?p 1 ?slp X
           in if RS ~= None & 0 <= Inf_aform' ?p (hd (the RS))
              then prove_nonneg ?prnt ?i ?p ?slp XS
              else case split_aforms_largest_uncond X of
                   (a, b) => prove_nonneg ?prnt ?i ?p ?slp (a # b # XS))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 19, template_var 4),
               template_app (template_hole 18, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 17, template_hole 16), t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Affine_Arithmetic_MiscTemplates"
### 3.217s elapsed time, 4.231s cpu time, 1.066s GC time
val it = (): unit
