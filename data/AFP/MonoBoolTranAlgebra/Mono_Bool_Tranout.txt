Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.560s cpu time, 0.041s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.Mono_Bool_Tran")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.832s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "LatticeProperties.Conj_Disj"
### 0.178s elapsed time, 0.701s cpu time, 0.091s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.Mono_Bool_Tran" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.368s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.371s elapsed time, 1.476s cpu time, 0.075s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.Mono_Bool_Tran")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.271s elapsed time, 1.067s cpu time, 0.124s GC time
Loading theory "Draft.Mono_Bool_Tran" (required by "Draft.Mono_Bool_TranMoreTemplates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.001s elapsed time, 3.804s cpu time, 0.793s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.942s cpu time, 0.742s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  MonoTran :: (order) order
  less_eq_MonoTran == less_eq :: 'a MonoTran => 'a MonoTran => bool
  less_MonoTran == less :: 'a MonoTran => 'a MonoTran => bool
instantiation
  MonoTran :: (order) monoid_mult
  one_MonoTran == one_class.one :: 'a MonoTran
  times_MonoTran == times :: 'a MonoTran => 'a MonoTran => 'a MonoTran
Found termination order: "size <*mlex*> {}"
instantiation
  MonoTran :: (order_bot) order_bot
  bot_MonoTran == bot :: 'a MonoTran
instantiation
  MonoTran :: (order_top) order_top
  top_MonoTran == top :: 'a MonoTran
instantiation
  MonoTran :: (lattice) lattice
  inf_MonoTran == inf :: 'a MonoTran => 'a MonoTran => 'a MonoTran
  sup_MonoTran == sup :: 'a MonoTran => 'a MonoTran => 'a MonoTran
instantiation
  MonoTran :: (complete_lattice) complete_lattice
  Inf_MonoTran == Inf :: 'a MonoTran set => 'a MonoTran
  Sup_MonoTran == Sup :: 'a MonoTran set => 'a MonoTran
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Mono_Bool_Tran"
### 0.875s elapsed time, 2.394s cpu time, 0.679s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.024s elapsed time, 6.406s cpu time, 1.011s GC time
Loading theory "Draft.Templates" (required by "Draft.Mono_Bool_TranMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.118s cpu time, 0.044s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mono_Bool_TranMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.450s elapsed time, 0.455s cpu time, 0.000s GC time
Loading theory "Draft.Mono_Bool_TranMoreTemplates"
val templateLemmas =
   [("Mono_Bool_Tran.mono_assert_fun", "mono (assert_fun ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Mono_Bool_Tran.assert_fun_le_id", "assert_fun ?p <= id",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Mono_Bool_Tran.mono_comp_fun", "mono ?f ==> mono ((o) ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_dual_fun", "mono ?f ==> mono (dual_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_omega_fun", "mono ?f ==> mono (omega_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_star_fun", "mono ?f ==> mono (star_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.assertion_fun_MonoTran",
     "?x : assertion_fun ==> mono ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Mono_Bool_Tran.dual_fun_apply", "dual_fun ?f ?p = - ?f (- ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Mono_Bool_Tran.assert_fun_disjunctive",
     "assert_fun ?p : Apply.disjunctive",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0),
             t_empty))
         )),
    ("Mono_Bool_Tran.mono_Omega_fun", "mono ?f ==> mono (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Mono_Bool_Tran.assertion_fun_le_one",
     "?x : assertion_fun ==> ?x <= id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_inequation (less_equals, template_var 0, template_hole 0))),
    ("Mono_Bool_Tran.assert_fun_dual",
     "(assert_fun ?p o \<top>) \<sqinter> dual_fun (assert_fun ?p) =
      assert_fun ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Mono_Bool_Tran.Omega_fun_apply",
     "Omega_fun ?f ?g ?h ?p = ?g ?p \<sqinter> ?f (?h ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app
          (template_var 3,
           template_app (template_var 1, template_var 0))))),
    ("Mono_Bool_Tran.Inf_comp_fun",
     "\<Sqinter> ?M o ?f = (\<Sqinter>m\<in>?M. m o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.Sup_comp_fun",
     "\<Squnion> ?M o ?f = (\<Squnion>m\<in>?M. m o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.mono_mono_Omega_fun",
     "[| mono ?f; mono ?g |] ==> mono_mono (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Mono_Bool_Tran.lfp_omega",
     "mono ?f ==> omega_fun ?f o ?g = lfp (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Mono_Bool_Tran.gfp_star",
     "mono ?f ==> star_fun ?f o ?g = gfp (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Mono_Bool_Tran.assertion_fun_dual",
     "?x : assertion_fun ==> (?x o \<top>) \<sqinter> dual_fun ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Mono_Bool_Tran.INF_comp_fun",
     "\<Sqinter> (?g ` ?A) o ?f = (\<Sqinter>a\<in>?A. ?g a o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.SUP_comp_fun",
     "\<Squnion> (?g ` ?A) o ?f = (\<Squnion>a\<in>?A. ?g a o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.gfp_omega_upperbound",
     "[| mono ?f; ?A <= Omega_fun ?f ?g ?A |] ==> ?A <= star_fun ?f o ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0),
            template_var 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Mono_Bool_Tran.lfp_omega_lowerbound",
     "[| mono ?f; Omega_fun ?f ?g ?A <= ?A |] ==> omega_fun ?f o ?g <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Mono_Bool_Tran.assert_cont",
     "[| ?x <= id; ?x : Apply.disjunctive |]
      ==> ?x = assert_fun (?x \<top>)",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 3),
                t_empty))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_var 0, template_hole 0))))),
    ("Mono_Bool_Tran.gfp_star_least",
     "(!!u. u <= Omega_fun ?f ?g u ==> u <= ?A) ==> star_fun ?f o ?g <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Mono_Bool_Tran.lfp_omega_greatest",
     "(!!u. Omega_fun ?f ?g u <= u ==> ?A <= u) ==>
      ?A <= omega_fun ?f o ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Mono_Bool_TranMoreTemplates"
### 0.330s elapsed time, 0.468s cpu time, 0.049s GC time
val it = (): unit
