   [("Mono_Bool_Tran.mono_assert_fun", "mono (assert_fun ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Mono_Bool_Tran.assert_fun_le_id", "assert_fun ?p <= id",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Mono_Bool_Tran.mono_comp_fun", "mono ?f ==> mono ((o) ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_dual_fun", "mono ?f ==> mono (dual_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_omega_fun", "mono ?f ==> mono (omega_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.mono_star_fun", "mono ?f ==> mono (star_fun ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Mono_Bool_Tran.assertion_fun_MonoTran",
     "?x : assertion_fun ==> mono ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Mono_Bool_Tran.dual_fun_apply", "dual_fun ?f ?p = - ?f (- ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Mono_Bool_Tran.assert_fun_disjunctive",
     "assert_fun ?p : Apply.disjunctive",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0),
             t_empty))
         )),
    ("Mono_Bool_Tran.mono_Omega_fun", "mono ?f ==> mono (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Mono_Bool_Tran.assertion_fun_le_one",
     "?x : assertion_fun ==> ?x <= id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_inequation (less_equals, template_var 0, template_hole 0))),
    ("Mono_Bool_Tran.assert_fun_dual",
     "(assert_fun ?p o \<top>) \<sqinter> dual_fun (assert_fun ?p) =
      assert_fun ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Mono_Bool_Tran.Omega_fun_apply",
     "Omega_fun ?f ?g ?h ?p = ?g ?p \<sqinter> ?f (?h ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app
          (template_var 3,
           template_app (template_var 1, template_var 0))))),
    ("Mono_Bool_Tran.Inf_comp_fun",
     "\<Sqinter> ?M o ?f = (\<Sqinter>m\<in>?M. m o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.Sup_comp_fun",
     "\<Squnion> ?M o ?f = (\<Squnion>m\<in>?M. m o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.mono_mono_Omega_fun",
     "[| mono ?f; mono ?g |] ==> mono_mono (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Mono_Bool_Tran.lfp_omega",
     "mono ?f ==> omega_fun ?f o ?g = lfp (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Mono_Bool_Tran.gfp_star",
     "mono ?f ==> star_fun ?f o ?g = gfp (Omega_fun ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Mono_Bool_Tran.assertion_fun_dual",
     "?x : assertion_fun ==> (?x o \<top>) \<sqinter> dual_fun ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Mono_Bool_Tran.INF_comp_fun",
     "\<Sqinter> (?g ` ?A) o ?f = (\<Sqinter>a\<in>?A. ?g a o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.SUP_comp_fun",
     "\<Squnion> (?g ` ?A) o ?f = (\<Squnion>a\<in>?A. ?g a o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Mono_Bool_Tran.gfp_omega_upperbound",
     "[| mono ?f; ?A <= Omega_fun ?f ?g ?A |] ==> ?A <= star_fun ?f o ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0),
            template_var 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Mono_Bool_Tran.lfp_omega_lowerbound",
     "[| mono ?f; Omega_fun ?f ?g ?A <= ?A |] ==> omega_fun ?f o ?g <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Mono_Bool_Tran.assert_cont",
     "[| ?x <= id; ?x : Apply.disjunctive |]
      ==> ?x = assert_fun (?x \<top>)",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 3),
                t_empty))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_var 0, template_hole 0))))),
    ("Mono_Bool_Tran.gfp_star_least",
     "(!!u. u <= Omega_fun ?f ?g u ==> u <= ?A) ==> star_fun ?f o ?g <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Mono_Bool_Tran.lfp_omega_greatest",
     "(!!u. Omega_fun ?f ?g u <= u ==> ?A <= u) ==>
      ?A <= omega_fun ?f o ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1))))]
