Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.601s cpu time, 0.048s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.830s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs")
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "LatticeProperties.Conj_Disj"
### 0.175s elapsed time, 0.687s cpu time, 0.102s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.347s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.374s elapsed time, 1.487s cpu time, 0.092s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.284s elapsed time, 1.116s cpu time, 0.151s GC time
Loading theory "Draft.Mono_Bool_Tran" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.Mono_Bool_Tran_Algebra")
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.035s elapsed time, 3.944s cpu time, 0.905s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.101s elapsed time, 4.036s cpu time, 0.854s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  MonoTran :: (order) order
  less_eq_MonoTran == less_eq :: 'a MonoTran => 'a MonoTran => bool
  less_MonoTran == less :: 'a MonoTran => 'a MonoTran => bool
instantiation
  MonoTran :: (order) monoid_mult
  one_MonoTran == one_class.one :: 'a MonoTran
  times_MonoTran == times :: 'a MonoTran => 'a MonoTran => 'a MonoTran
instantiation
  MonoTran :: (order_bot) order_bot
  bot_MonoTran == bot :: 'a MonoTran
Found termination order: "size <*mlex*> {}"
instantiation
  MonoTran :: (order_top) order_top
  top_MonoTran == top :: 'a MonoTran
instantiation
  MonoTran :: (lattice) lattice
  inf_MonoTran == inf :: 'a MonoTran => 'a MonoTran => 'a MonoTran
  sup_MonoTran == sup :: 'a MonoTran => 'a MonoTran => 'a MonoTran
instantiation
  MonoTran :: (complete_lattice) complete_lattice
  Inf_MonoTran == Inf :: 'a MonoTran set => 'a MonoTran
  Sup_MonoTran == Sup :: 'a MonoTran set => 'a MonoTran
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Mono_Bool_Tran"
### 0.901s elapsed time, 2.473s cpu time, 0.773s GC time
Loading theory "Draft.Mono_Bool_Tran_Algebra" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates")
class dual = type +
  fixes dual :: "'a => 'a"
class omega = type +
  fixes omega :: "'a => 'a"
Found termination order: "size <*mlex*> {}"
class star = type +
  fixes star :: "'a => 'a"
class dual_star = type +
  fixes dual_star :: "'a => 'a"
### theory "HOL-Library.Tree"
### 2.133s elapsed time, 6.901s cpu time, 1.225s GC time
Loading theory "Draft.Templates" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mono_Bool_Tran_AlgebraMoreTemplates")
class mbt_algebra = monoid_mult + distrib_lattice + dual + dual_star +
  omega + star + order_bot + order_top +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.057s cpu time, 0.046s GC time
instantiation
  MonoTran :: (complete_boolean_algebra) mbt_algebra
  dual_MonoTran == dual :: 'a MonoTran => 'a MonoTran
  star_MonoTran == star :: 'a MonoTran => 'a MonoTran
  omega_MonoTran == omega :: 'a MonoTran => 'a MonoTran
  dual_star_MonoTran == dual_star :: 'a MonoTran => 'a MonoTran
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class post_mbt_algebra = mbt_algebra +
  fixes post :: "'a => 'a"
  assumes "post_1": "!!x. post x * x * \<top> = \<top>"
    and "post_2": "!!y x. y * x * \<top> \<sqinter> post x <= y"
instantiation
  MonoTran :: (complete_boolean_algebra) post_mbt_algebra
  post_MonoTran == post :: 'a MonoTran => 'a MonoTran
class complete_mbt_algebra = complete_distrib_lattice + post_mbt_algebra +
  assumes "Inf_comp": "!!X z. \<Sqinter> X * z = (\<Sqinter>x\<in>X. x * z)"
class complete_mbt_algebra = complete_distrib_lattice + post_mbt_algebra +
  assumes "Inf_comp": "!!X z. \<Sqinter> X * z = (\<Sqinter>x\<in>X. x * z)"
class mbt_algebra_fusion = mbt_algebra +
  assumes
    "fusion":
      "!!x y z u v.
          ALL t.
             x * t \<sqinter> y \<sqinter> z
             <= u * (t \<sqinter> z) \<sqinter> v ==>
          x ^ \<omega> * y \<sqinter> z <= u ^ \<omega> * v"
class mbt_algebra_fusion = mbt_algebra +
  assumes
    "fusion":
      "!!x y z u v.
          ALL t.
             x * t \<sqinter> y \<sqinter> z
             <= u * (t \<sqinter> z) \<sqinter> v ==>
          x ^ \<omega> * y \<sqinter> z <= u ^ \<omega> * v"
### theory "Draft.Mono_Bool_Tran_Algebra"
### 2.867s elapsed time, 3.889s cpu time, 0.297s GC time
Loading theory "Draft.Mono_Bool_Tran_AlgebraMoreTemplates"
val templateLemmas =
   [("Mono_Bool_Tran_Algebra.mono_post_fun", "mono (post_fun ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Mono_Bool_Tran_Algebra.post_top", "post_fun ?p ?p = \<top>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Mono_Bool_Tran_Algebra.post_refin",
     "mono ?S ==> ?S ?p \<sqinter> post_fun ?p ?x <= ?S ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Mono_Bool_Tran_AlgebraMoreTemplates"
### 0.322s elapsed time, 0.458s cpu time, 0.039s GC time
val it = (): unit
