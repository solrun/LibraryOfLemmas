Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.527s cpu time, 0.051s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements" via "Draft.Assertion_Algebra" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.038s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs")
### theory "LatticeProperties.Conj_Disj"
### 0.167s elapsed time, 0.657s cpu time, 0.076s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements" via "Draft.Assertion_Algebra" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.361s elapsed time, 1.454s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.334s elapsed time, 1.324s cpu time, 0.061s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements" via "Draft.Assertion_Algebra" via "Draft.Mono_Bool_Tran_Algebra" via "Draft.Mono_Bool_Tran")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.284s elapsed time, 1.117s cpu time, 0.121s GC time
Loading theory "Draft.Mono_Bool_Tran" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements" via "Draft.Assertion_Algebra" via "Draft.Mono_Bool_Tran_Algebra")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.958s elapsed time, 3.649s cpu time, 0.767s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.050s elapsed time, 3.848s cpu time, 0.739s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  MonoTran :: (order) order
  less_eq_MonoTran == less_eq :: 'a MonoTran => 'a MonoTran => bool
  less_MonoTran == less :: 'a MonoTran => 'a MonoTran => bool
Found termination order: "size <*mlex*> {}"
instantiation
  MonoTran :: (order) monoid_mult
  one_MonoTran == one_class.one :: 'a MonoTran
  times_MonoTran == times :: 'a MonoTran => 'a MonoTran => 'a MonoTran
instantiation
  MonoTran :: (order_bot) order_bot
  bot_MonoTran == bot :: 'a MonoTran
instantiation
  MonoTran :: (order_top) order_top
  top_MonoTran == top :: 'a MonoTran
instantiation
  MonoTran :: (lattice) lattice
  inf_MonoTran == inf :: 'a MonoTran => 'a MonoTran => 'a MonoTran
  sup_MonoTran == sup :: 'a MonoTran => 'a MonoTran => 'a MonoTran
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  MonoTran :: (complete_lattice) complete_lattice
  Inf_MonoTran == Inf :: 'a MonoTran set => 'a MonoTran
  Sup_MonoTran == Sup :: 'a MonoTran set => 'a MonoTran
### theory "Draft.Mono_Bool_Tran"
### 0.897s elapsed time, 2.538s cpu time, 0.702s GC time
Loading theory "Draft.Mono_Bool_Tran_Algebra" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements" via "Draft.Assertion_Algebra")
Found termination order: "size <*mlex*> {}"
class dual = type +
  fixes dual :: "'a => 'a"
class omega = type +
  fixes omega :: "'a => 'a"
class star = type +
  fixes star :: "'a => 'a"
class dual_star = type +
  fixes dual_star :: "'a => 'a"
### theory "HOL-Library.Tree"
### 2.016s elapsed time, 6.616s cpu time, 1.068s GC time
Loading theory "Draft.Templates" (required by "Draft.StatementsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StatementsMoreTemplates")
class mbt_algebra = monoid_mult + distrib_lattice + dual + dual_star +
  omega + star + order_bot + order_top +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.509s elapsed time, 1.040s cpu time, 0.042s GC time
instantiation
  MonoTran :: (complete_boolean_algebra) mbt_algebra
  dual_MonoTran == dual :: 'a MonoTran => 'a MonoTran
  star_MonoTran == star :: 'a MonoTran => 'a MonoTran
  omega_MonoTran == omega :: 'a MonoTran => 'a MonoTran
  dual_star_MonoTran == dual_star :: 'a MonoTran => 'a MonoTran
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class mbt_algebra = monoid_mult + bounded_lattice + distrib_lattice + dual +
  dual_star + omega + star +
  assumes "dual_le": "!!x y. (x <= y) = (y ^ o <= x ^ o)"
    and "dual_dual": "!!x. (x ^ o) ^ o = x"
    and "dual_comp": "!!x y. (x * y) ^ o = x ^ o * y ^ o"
    and "dual_one": "(1::'a) ^ o = (1::'a)"
    and "top_comp": "!!x. \<top> * x = \<top>"
    and "inf_comp": "!!x y z. x \<sqinter> y * z = x * z \<sqinter> (y * z)"
    and "le_comp": "!!x y z. x <= y ==> z * x <= z * y"
    and
    "dual_neg": "!!x. x * \<top> \<sqinter> (x ^ o * \<bottom>) = \<bottom>"
    and
    "omega_fix": "!!x. x ^ \<omega> = x * x ^ \<omega> \<sqinter> (1::'a)"
    and
    "omega_least":
      "!!x z y. x * z \<sqinter> y <= z ==> x ^ \<omega> * y <= z"
    and "star_fix": "!!x. x ^ * = x * x ^ * \<sqinter> (1::'a)"
    and
    "star_greatest": "!!z x y. z <= x * z \<sqinter> y ==> z <= x ^ * * y"
    and "dual_star_def": "!!x. x ^ \<otimes> = ((x ^ o) ^ *) ^ o"
class post_mbt_algebra = mbt_algebra +
  fixes post :: "'a => 'a"
  assumes "post_1": "!!x. post x * x * \<top> = \<top>"
    and "post_2": "!!y x. y * x * \<top> \<sqinter> post x <= y"
instantiation
  MonoTran :: (complete_boolean_algebra) post_mbt_algebra
  post_MonoTran == post :: 'a MonoTran => 'a MonoTran
class complete_mbt_algebra = complete_distrib_lattice + post_mbt_algebra +
  assumes "Inf_comp": "!!X z. \<Sqinter> X * z = (\<Sqinter>x\<in>X. x * z)"
class complete_mbt_algebra = complete_distrib_lattice + post_mbt_algebra +
  assumes "Inf_comp": "!!X z. \<Sqinter> X * z = (\<Sqinter>x\<in>X. x * z)"
class mbt_algebra_fusion = mbt_algebra +
  assumes
    "fusion":
      "!!x y z u v.
          ALL t.
             x * t \<sqinter> y \<sqinter> z
             <= u * (t \<sqinter> z) \<sqinter> v ==>
          x ^ \<omega> * y \<sqinter> z <= u ^ \<omega> * v"
class mbt_algebra_fusion = mbt_algebra +
  assumes
    "fusion":
      "!!x y z u v.
          ALL t.
             x * t \<sqinter> y \<sqinter> z
             <= u * (t \<sqinter> z) \<sqinter> v ==>
          x ^ \<omega> * y \<sqinter> z <= u ^ \<omega> * v"
### theory "Draft.Mono_Bool_Tran_Algebra"
### 2.843s elapsed time, 3.815s cpu time, 0.302s GC time
Loading theory "Draft.Assertion_Algebra" (required by "Draft.StatementsMoreTemplates" via "Draft.Statements")
instantiation
  Assertion :: (mbt_algebra) boolean_algebra
  minus_Assertion == minus :: 'a Assertion => 'a Assertion => 'a Assertion
  uminus_Assertion == uminus :: 'a Assertion => 'a Assertion
  bot_Assertion == bot :: 'a Assertion
  top_Assertion == top :: 'a Assertion
  inf_Assertion == inf :: 'a Assertion => 'a Assertion => 'a Assertion
  sup_Assertion == sup :: 'a Assertion => 'a Assertion => 'a Assertion
  less_eq_Assertion == less_eq :: 'a Assertion => 'a Assertion => bool
  less_Assertion == less :: 'a Assertion => 'a Assertion => bool
instantiation
  Assertion :: (complete_mbt_algebra) complete_lattice
  Inf_Assertion == Inf :: 'a Assertion set => 'a Assertion
  Sup_Assertion == Sup :: 'a Assertion set => 'a Assertion
### theory "Draft.Assertion_Algebra"
### 0.125s elapsed time, 0.170s cpu time, 0.031s GC time
Loading theory "Draft.Statements" (required by "Draft.StatementsMoreTemplates")
### theory "Draft.Statements"
### 0.295s elapsed time, 0.324s cpu time, 0.041s GC time
Loading theory "Draft.StatementsMoreTemplates"
val templateLemmas =
   [("Statements.wp_mono", "mono (wp ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Statements.while_false", "(While bot do ?x) = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Statements.dual_assume", "[\<cdot> ?p ] ^ o = {\<cdot> ?p }",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Statements.hoare_wp", "hoare (wp ?x ?q) ?x ?q",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("Statements.assert_neg", "{\<cdot> - ?p } = neg_assert {\<cdot> ?p }",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Statements.grd_comp", "[\<cdot> grd ?x ] * ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0),
       template_var 0)),
    ("Statements.assumption_conjuncive", "[\<cdot> ?p ] : conjunctive",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_hole 0))
         )),
    ("Statements.assumption_disjuncive", "[\<cdot> ?p ] : disjunctive",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_hole 0))
         )),
    ("Statements.assert_assume",
     "{\<cdot> ?p } * [\<cdot> ?p ] = {\<cdot> ?p }",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Statements.wp_assert", "wp {\<cdot> ?p } ?q = inf ?p ?q",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Statements.assume_prop",
     "sup ([\<cdot> ?p ] * bot) (1::?'a) = [\<cdot> ?p ]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_hole 0),
       template_app (template_hole 2, template_var 0))),
    ("Statements.wp_assume", "wp [\<cdot> ?p ] ?q = sup (- ?p) ?q",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Statements.assert_inf",
     "{\<cdot> inf ?p ?q } = inf {\<cdot> ?p } {\<cdot> ?q }",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Statements.assert_sup",
     "{\<cdot> sup ?p ?q } = sup {\<cdot> ?p } {\<cdot> ?q }",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Statements.wp_choice", "wp (inf ?x ?y) = inf (wp ?x) (wp ?y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Statements.wp_comp", "wp (?x * ?y) ?p = wp ?x (wp ?y ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Statements.wp_fun_mono2", "?x <= ?y ==> wp ?x ?p <= wp ?y ?p",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Statements.wp_mono2", "?p <= ?q ==> wp ?x ?p <= wp ?x ?q",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Statements.while_dual_star",
     "(While ?p do ?x) =
      ({\<cdot> ?p } * ?x) ^ \<otimes> * {\<cdot> - ?p }",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Statements.Assertion_wp",
     "{\<cdot> wp ?x ?p } = inf (?x * {\<cdot> ?p } * top) (1::?'a)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 5, template_var 0))),
             template_hole 1)),
         template_hole 0))),
    ("Statements.hoare_refinement",
     "hoare ?p ?S ?q = ({\<cdot> ?p } * post {\<cdot> ?q } <= ?S)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))),
         template_var 1))),
    ("Statements.hoare_Sup",
     "hoare (Sup ?P) ?x ?q = (ALL p:?P. hoare p ?x ?q)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Statements.hoare_comp_wp",
     "hoare ?p (?x * ?y) ?q = hoare ?p ?x (wp ?y ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Statements.wp_omega_fix",
     "wp (?x ^ \<omega>) ?p = inf (wp ?x (wp (?x ^ \<omega>) ?p)) ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))),
         template_var 0))),
    ("Statements.if_assertion",
     "(If ?p then ?x else ?y) =
      sup ({\<cdot> ?p } * ?x) ({\<cdot> - ?p } * ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))),
           template_var 0)))),
    ("Statements.wp_omega_least",
     "inf (wp ?x ?r) ?p <= ?r ==> wp (?x ^ \<omega>) ?p <= ?r",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1)),
            template_var 0),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_var 1))),
    ("Statements.hoare_choice",
     "hoare ?p (inf ?x ?y) ?q = (hoare ?p ?x ?q & hoare ?p ?y ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Statements.while_pres_disj",
     "?x : disjunctive ==> (While ?p do ?x) : disjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_hole 1))
           ))),
    ("Statements.while_pres_conj",
     "?x : conjunctive ==> (While ?p do ?x) : conjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_hole 1))
           ))),
    ("Statements.hoare_comp",
     "hoare ?p (?x * ?y) ?q = (EX r. hoare ?p ?x r & hoare r ?y ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Statements.assert_commute",
     "?y : conjunctive ==> ?y * {\<cdot> ?p } = {\<cdot> wp ?y ?p } * ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 1)))),
    ("Statements.if_Assertion_assumption",
     "sup ({\<cdot> ?p } * ?x) ({\<cdot> - ?p } * ?y) =
      inf ([\<cdot> ?p ] * ?x) ([\<cdot> - ?p ] * ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2))),
           template_var 0)))),
    ("Statements.hoare_if",
     "hoare ?p (If ?b then ?x else ?y) ?q =
      (hoare (inf ?p ?b) ?x ?q & hoare (inf ?p (- ?b)) ?y ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 3))),
             template_var 1),
           template_var 0)))),
    ("Statements.inf_pres_conj",
     "[| ?x : conjunctive; ?y : conjunctive |] ==> inf ?x ?y : conjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 1),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Statements.sup_pres_disj",
     "[| ?x : disjunctive; ?y : disjunctive |] ==> sup ?x ?y : disjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 1),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Statements.if_pres_conj",
     "[| ?x : conjunctive; ?y : conjunctive |]
      ==> (If ?p then ?x else ?y) : conjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_hole 1))
           ))),
    ("Statements.if_pres_disj",
     "[| ?x : disjunctive; ?y : disjunctive |]
      ==> (If ?p then ?x else ?y) : disjunctive",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_hole 1))
           ))),
    ("Statements.hoare_while_complete_mbt",
     "ALL w. hoare (inf (?p w) ?b) ?x (Sup_less ?p w) ==>
      hoare (Sup (range ?p)) (While ?b do ?x)
       (inf (Sup (range ?p)) (- ?b))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 2))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 2))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Statements.hoare_fixpoint_complete_mbt",
     "[| ?F ?x = ?x;
         !!w f. hoare (Sup_less ?p w) f ?q ==> hoare (?p w) (?F f) ?q |]
      ==> hoare (Sup (range ?p)) ?x ?q",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2), template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))),
               template_var 2),
             template_var 0)
           ))),
    ("Statements.hoare_fixpoint_mbt",
     "[| ?F ?x = ?x;
         !!w f.
            (!!v. v < w ==> hoare (?p v) f ?q) ==> hoare (?p w) (?F f) ?q |]
      ==> hoare (?p ?u) ?x ?q",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3), template_var 3),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0)),
               template_var 3),
             template_var 1)
           ))),
    ("Statements.hoare_while_mbt",
     "[| ALL w r. (ALL v<w. ?p v <= r) --> hoare (inf (?p w) ?b) ?x r;
         ALL u. ?p u <= ?q |]
      ==> hoare (?p ?w) (While ?b do ?x) (inf ?q (- ?b))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 4, template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 3)))
           )))]:
   (string * thm * template) list
### theory "Draft.StatementsMoreTemplates"
### 0.335s elapsed time, 0.467s cpu time, 0.000s GC time
val it = (): unit
