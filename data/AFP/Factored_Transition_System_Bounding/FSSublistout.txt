Loading theory "Draft.ListUtils" (required by "Draft.FSSublistTemplates" via "Draft.FSSublist")
Loading theory "HOL-Library.Stream" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.ListUtils"
### 0.126s elapsed time, 0.520s cpu time, 0.057s GC time
Loading theory "Draft.FSSublist" (required by "Draft.FSSublistTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.608s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.982s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs")
### theory "Draft.FSSublist"
### 0.259s elapsed time, 1.014s cpu time, 0.110s GC time
0 <= length ?l
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.866s elapsed time, 3.014s cpu time, 0.324s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.786s elapsed time, 2.398s cpu time, 0.357s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.824s elapsed time, 4.107s cpu time, 0.882s GC time
Loading theory "Draft.Templates" (required by "Draft.FSSublistTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.117s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FSSublistTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.443s cpu time, 0.000s GC time
Loading theory "Draft.FSSublistTemplates"
val templateLemmas =
   [("FSSublist.sublist_refl", "subseq ?l ?l",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 0)
         )),
    ("FSSublist.sublist_EQNS", "subseq [] ?l = True",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("FSSublist.sublist_append_front", "subseq ?l1.0 (?l1.0 @ ?l2.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("FSSublist.sublist_append_back", "subseq ?l1.0 (?l2.0 @ ?l1.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("FSSublist.sublist_filter", "subseq (filter ?P ?l) ?l",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("FSSublist.list_frag_HOL4_equiv_sublist",
     "list_frag_HOL4 ?l ?l' = sublist ?l' ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("FSSublist.sublist_HOL4_equiv_subseq",
     "sublist_HOL4 ?l1.0 ?l2.0 = subseq ?l1.0 ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("FSSublist.sublist_NIL", "subseq ?l1.0 [] = (?l1.0 = [])",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0),
             template_hole 1)
           ),
       template_equation (template_var 0, template_hole 1))),
    ("FSSublist.sublist_EQNS", "subseq (?h # ?t) [] = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("FSSublist.isPREFIX_sublist", "prefix ?x ?y ==> subseq ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("FSSublist.sublist_SING_MEM", "subseq [?h] ?l = ListMem ?h ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("FSSublist.sublist_length",
     "subseq ?l ?l' ==> length ?l <= length ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FSSublist.sublist_subset",
     "subseq ?l1.0 ?l2.0 ==> set ?l1.0 <= set ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FSSublist.sublist_MEM",
     "subseq (?h # ?l1.0) ?l2.0 ==> ListMem ?h ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("FSSublist.sublist_cons_4", "subseq ?l ?l' ==> subseq ?l (?h # ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FSSublist.sublist_append2",
     "subseq ?l1.0 ?l2.0 ==> subseq ?l1.0 (?l2.0 @ ?l3.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FSSublist.sublist_cons",
     "subseq ?l1.0 ?l2.0 ==> subseq ?l1.0 (?h # ?l2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FSSublist.sublist_CONS1_E",
     "subseq (?h # ?l1.0) ?l2.0 ==> subseq ?l1.0 ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)
           ))),
    ("FSSublist.sublist_cons_2",
     "subseq (?h # ?l1.0) (?h # ?l2.0) = subseq ?l1.0 ?l2.0",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)
           ))),
    ("FSSublist.sublist_every",
     "subseq ?l1.0 ?l2.0 & list_all ?P ?l2.0 ==> list_all ?P ?l1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("FSSublist.sublist_snoc",
     "subseq ?l1.0 ?l2.0 ==> subseq ?l1.0 (?l2.0 @ [?h])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("FSSublist.sublist_imp_len_filter_le",
     "subseq ?l' ?l ==> length (filter ?P ?l') <= length (filter ?P ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("FSSublist.sublist_antisym",
     "[| subseq ?l1.0 ?l2.0; subseq ?l2.0 ?l1.0 |] ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("FSSublist.append_sublist",
     "subseq (?l1.0 @ ?l2.0 @ ?l3.0) ?l ==> subseq (?l1.0 @ ?l3.0) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("FSSublist.sublist_trans",
     "[| subseq ?l1.0 ?l2.0; subseq ?l2.0 ?l3.0 |] ==> subseq ?l1.0 ?l3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_var 0)
           ))),
    ("FSSublist.sublist_equal_lengths",
     "[| subseq ?l1.0 ?l2.0; length ?l1.0 = length ?l2.0 |]
      ==> ?l1.0 = ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("FSSublist.append_sublist_1",
     "subseq (?l1.0 @ ?l2.0) ?l ==> subseq ?l1.0 ?l & subseq ?l2.0 ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1),
               template_var 0))
           ))),
    ("FSSublist.sublist_append_both_I",
     "[| subseq ?a ?b; subseq ?c ?d |] ==> subseq (?a @ ?c) (?b @ ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FSSublist.sublist_append",
     "[| subseq ?l1.0 ?l1'; subseq ?l2.0 ?l2' |]
      ==> subseq (?l1.0 @ ?l2.0) (?l1' @ ?l2')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FSSublist.sublist_append_6",
     "[| subseq (?h # ?l) (?l1.0 @ ?l2.0); ~ ListMem ?h ?l1.0 |]
      ==> subseq (?h # ?l) ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 0)
           ))),
    ("FSSublist.sublist_append_5",
     "[| subseq (?h # ?l) (?l1.0 @ ?l2.0); list_all ((~=) ?h) ?l1.0 |]
      ==> subseq (?h # ?l) ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 0)
           ))),
    ("FSSublist.sublist_prefix",
     "subseq (?h # ?l1.0) ?l2.0 ==>
      EX l2a l2b. ?l2.0 = l2a @ [?h] @ l2b & ~ ListMem ?h l2a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("FSSublist.sublist_append_exists_2",
     "subseq (?h # ?l1.0) ?l2.0 ==>
      EX l3 l4. ?l2.0 = l3 @ [?h] @ l4 & subseq ?l1.0 l4",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("FSSublist.sublist_append_exists",
     "subseq (?l1.0 @ ?l2.0) ?l3.0 ==>
      EX l3a l3b. ?l3.0 = l3a @ l3b & subseq ?l1.0 l3a & subseq ?l2.0 l3b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("FSSublist.sublist_append_4",
     "[| subseq (?h # ?l) (?l1.0 @ [?h] @ ?l2.0);
         list_all ((~=) ?h) ?l1.0 |]
      ==> subseq ?l ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_hole 2)),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 2),
             template_var 0)
           ))),
    ("FSSublist.sublist_cons_exists",
     "subseq (?h # ?l1.0) ?l2.0 =
      (EX l2a l2b.
          ?l2.0 = l2a @ [?h] @ l2b & ~ ListMem ?h l2a & subseq ?l1.0 l2b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("FSSublist.sublist_split_trans",
     "[| ?l1.0 = ?h # ?l1'; ?l2.0 = ?l2a @ [?h] @ ?l2b; subseq ?l1.0 ?l2.0;
         ~ ListMem ?h ?l2a |]
      ==> subseq ?l1' ?l2b",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_hole 4)),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 5),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 3),
             template_var 0)
           ))),
    ("FSSublist.sublist_skip",
     "[| ?l1.0 = ?h # ?l1'; ?l2.0 = ?l2a @ [?h] @ ?l2b; subseq ?l1.0 ?l2.0;
         ~ ListMem ?h ?l2a |]
      ==> subseq ?l1.0 (?h # ?l2b)",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_hole 4)),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 5),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 5),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 0))
           ))),
    ("FSSublist.list_with_three_types_shorten_type2",
     "[| ?PProbs ?s; ?PProbl ?l;
         ALL l s.
            ?PProbs s & ?PProbl l & list_all ?P1.0 l -->
            (EX l'.
                ?f s l' = ?f s l &
                length (filter ?P2.0 l') <= ?k1.0 &
                length (filter ?P3.0 l') <= length (filter ?P3.0 l) &
                list_all ?P1.0 l' & subseq l' l);
         ALL s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);
         ALL s l. ?PProbs s & ?PProbl l --> ?PProbs (?f s l);
         ALL l1 l2. subseq l1 l2 & ?PProbl l2 --> ?PProbl l1;
         ALL l1 l2. ?PProbl (l1 @ l2) = (?PProbl l1 & ?PProbl l2) |]
      ==> EX l'.
             ?f ?s l' = ?f ?s ?l &
             length (filter ?P3.0 l') <= length (filter ?P3.0 ?l) &
             (ALL l''.
                 sublist l'' l' & list_all ?P1.0 l'' -->
                 length (filter ?P2.0 l'') <= ?k1.0) &
             subseq l' ?l",
     template_implication
      ([template_predicate (template_app (template_var 8, template_var 7)),
        template_predicate (template_app (template_var 6, template_var 5)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FSSublistTemplates"
### 0.334s elapsed time, 0.482s cpu time, 0.070s GC time
val it = (): unit
