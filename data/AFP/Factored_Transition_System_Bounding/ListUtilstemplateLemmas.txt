   [("ListUtils.len_ge_0", "0 <= length ?l",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ListUtils.filter_empty_every_not",
     "(filter ?P ?l = []) = list_all (%x. ~ ?P x) ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("ListUtils.frag_len_filter_le",
     "sublist ?l' ?l ==> length (filter ?P ?l') <= length (filter ?P ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("ListUtils.nempty_list_append_length_add",
     "?l2.0 ~= [] ==>
      length (?l1.0 @ ?l3.0) < length (?l1.0 @ ?l2.0 @ ?l3.0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("ListUtils.MEM_SPLIT",
     "~ ListMem ?x ?l ==> ALL l1 l2. ?l ~= l1 @ [?x] @ l2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ListUtils.len_gt_pref_is_pref",
     "[| length ?l1.0 < length ?l2.0; prefix ?l1.0 ?l; prefix ?l2.0 ?l |]
      ==> prefix ?l1.0 ?l2.0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("ListUtils.LIST_FRAG_DICHOTOMY",
     "[| sublist ?l (?la @ [?x] @ ?lb); ~ ListMem ?x ?l |]
      ==> sublist ?l ?la | sublist ?l ?lb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_hole 3)),
                  template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 0))
           ))),
    ("ListUtils.LIST_FRAG_DICHOTOMY_2",
     "[| sublist ?l (?la @ [?x] @ ?lb); ~ ?P ?x; list_all ?P ?l |]
      ==> sublist ?l ?la | sublist ?l ?lb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_hole 3)),
                  template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 1))
           ))),
    ("ListUtils.append_filter",
     "?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 ?p) ==>
      EX p_1 p_2.
         p_1 @ p_2 = ?p &
         ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) &
         ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ListUtils.APPEND_EQ_APPEND_MID",
     "(?l1.0 @ [?e] @ ?l2.0 = ?m1.0 @ ?m2.0) =
      ((EX l. ?m1.0 = ?l1.0 @ [?e] @ l & ?l2.0 = l @ ?m2.0) |
       (EX l. ?l1.0 = ?m1.0 @ l & ?m2.0 = l @ [?e] @ ?l2.0))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_var 2))),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("ListUtils.append_eq_as_proj_1",
     "?as1.0 @ ?as2.0 @ ?as3.0 = filter ?f1.0 (map ?f2.0 ?p) ==>
      EX p_1 p_2 p_3.
         p_1 @ p_2 @ p_3 = ?p &
         ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) &
         ?as2.0 = filter ?f1.0 (map ?f2.0 p_2) &
         ?as3.0 = filter ?f1.0 (map ?f2.0 p_3)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5),
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 1, t_empty))))]
