Loading theory "Draft.Acyclicity" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace")
Loading theory "Draft.RelUtils" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.SystemAbstraction" via "Draft.Dependency")
Loading theory "Draft.HoArithUtils" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.FactoredSystem")
Loading theory "Draft.SetUtils" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.SystemAbstraction" via "Draft.TopologicalProps")
### theory "Draft.HoArithUtils"
### 0.028s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.RelUtils"
### 0.081s elapsed time, 0.354s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.SetUtils"
### 0.113s elapsed time, 0.466s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.470s cpu time, 0.047s GC time
Loading theory "Draft.ListUtils" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.FactoredSystem" via "Draft.FSSublist")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.ListUtils"
### 0.074s elapsed time, 0.301s cpu time, 0.000s GC time
Loading theory "Draft.FSSublist" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.FactoredSystem")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 0.990s cpu time, 0.107s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. length (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Draft.FSSublist"
### 0.270s elapsed time, 1.054s cpu time, 0.191s GC time
Loading theory "Draft.FactoredSystemLib" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.FactoredSystem")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Acyclicity"
### 0.541s elapsed time, 2.151s cpu time, 0.238s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.FactoredSystemLib"
### 0.165s elapsed time, 0.646s cpu time, 0.078s GC time
Loading theory "Draft.FmapUtils" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.FactoredSystem")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.FmapUtils"
### 0.064s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.FactoredSystem" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 1.083s elapsed time, 4.136s cpu time, 0.975s GC time
0 <= length ?l
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.016s elapsed time, 3.558s cpu time, 0.898s GC time
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.FactoredSystem"
### 1.791s elapsed time, 5.067s cpu time, 1.697s GC time
Loading theory "Draft.ActionSeqProcess" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace")
### theory "HOL-Library.Tree"
### 2.274s elapsed time, 6.868s cpu time, 2.038s GC time
Loading theory "Draft.Templates" (required by "Draft.AcycSspaceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.150s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AcycSspaceTemplates")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.ActionSeqProcess"
### 0.648s elapsed time, 1.403s cpu time, 0.164s GC time
Loading theory "Draft.Dependency" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.SystemAbstraction")
Loading theory "Draft.TopologicalProps" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace" via "Draft.SystemAbstraction")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.587s elapsed time, 1.297s cpu time, 0.164s GC time
### theory "Draft.Dependency"
### 0.280s elapsed time, 0.635s cpu time, 0.081s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### theory "Draft.TopologicalProps"
### 1.094s elapsed time, 2.181s cpu time, 1.144s GC time
Loading theory "Draft.SystemAbstraction" (required by "Draft.AcycSspaceTemplates" via "Draft.AcycSspace")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### theory "Draft.SystemAbstraction"
### 0.856s elapsed time, 1.071s cpu time, 0.291s GC time
Loading theory "Draft.AcycSspace" (required by "Draft.AcycSspaceTemplates")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
"%u. state_succ u `
     (%u. (fmfilter (%u. u : vs) (fst u), fmfilter (%u. u : vs) (snd u))) `
     PROB -
     {u}"
  :: "('a, 'b) fmap => ('a, 'b) fmap set"
### theory "Draft.AcycSspace"
### 0.520s elapsed time, 0.786s cpu time, 0.074s GC time
Loading theory "Draft.AcycSspaceTemplates"
val templateLemmas =
   [("AcycSspace.snapshot_bound_leq_S",
     "problem_plan_bound (snapshot ?PROB (fmrestrict_set ?vs ?s))
      <= S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("AcycSspace.empty_change_no_change",
     "vars_change ?as ?vs ?s = [] ==>
      fmrestrict_set ?vs (exec_plan ?s ?as) = fmrestrict_set ?vs ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("AcycSspace.vars_change_cat",
     "vars_change (?as1.0 @ ?as2.0) ?vs ?s =
      vars_change ?as1.0 ?vs ?s @
      vars_change ?as2.0 ?vs (exec_plan ?s ?as1.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("AcycSspace.vars_change_cons_2",
     "vars_change ?as ?vs ?s = ?s' # ?ss ==>
      fmrestrict_set ?vs ?s' ~= fmrestrict_set ?vs ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("AcycSspace.no_vs_change_valid_in_snapshot",
     "[| ?as : valid_plans ?PROB; sat_precond_as ?s ?as;
         vars_change ?as ?vs ?s = [] |]
      ==> ?as : valid_plans (snapshot ?PROB (fmrestrict_set ?vs ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0),
            template_var 1),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("AcycSspace.problem_plan_bound_S_bound_thesis",
     "[| finite ?PROB; sspace_DAG (prob_proj ?PROB ?vs) ?lss |]
      ==> problem_plan_bound ?PROB
          <= Sup {S ?vs ?lss ?PROB s' |s'.
                  s' : valid_states (prob_proj ?PROB ?vs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 2),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("AcycSspace.zero_change_imp_all_preconds_submap",
     "[| vars_change ?as ?vs ?s = []; sat_precond_as ?s ?as; ListMem ?b ?as;
         fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s' |]
      ==> fmrestrict_set ?vs (fst ?b) \<subseteq>\<^sub>f
          fmrestrict_set ?vs ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0))
           ))),
    ("AcycSspace.zero_change_imp_all_effects_submap",
     "[| vars_change ?as ?vs ?s = []; sat_precond_as ?s ?as; ListMem ?b ?as;
         fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s' |]
      ==> fmrestrict_set ?vs (snd ?b) \<subseteq>\<^sub>f
          fmrestrict_set ?vs ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0))
           ))),
    ("AcycSspace.problem_plan_bound_S_bound",
     "[| finite ?PROB;
         top_sorted_abs (%x y. y : state_successors (prob_proj ?PROB ?vs) x)
          ?lss;
         set ?lss = valid_states (prob_proj ?PROB ?vs) |]
      ==> problem_plan_bound ?PROB
          <= Sup {S ?vs ?lss ?PROB s' |s'.
                  s' : valid_states (prob_proj ?PROB ?vs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, t_empty), template_var 0)
            ),
        template_equation
         (template_app (template_hole 9, template_var 0),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 2),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("AcycSspace.problem_plan_bound_S_bound_2nd_step_thesis",
     "[| finite ?PROB; sspace_DAG (prob_proj ?PROB ?vs) ?lss;
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s as' = exec_plan ?s ?as &
             subseq as' ?as &
             length as' <= S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 4))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("AcycSspace.vars_change_cons",
     "vars_change ?as ?vs ?s = ?s' # ?ss ==>
      EX as1 act as2.
         ?as = as1 @ act # as2 &
         vars_change as1 ?vs ?s = [] &
         state_succ (exec_plan ?s as1) act = ?s' &
         vars_change as2 ?vs (state_succ (exec_plan ?s as1) act) = ?ss",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("AcycSspace.no_vs_change_snapshot_s_vs_is_valid_bound",
     "[| finite ?PROB; vars_change ?as ?vs ?s = []; no_effectless_act ?as;
         sat_precond_as ?s ?as; ?s : valid_states ?PROB;
         ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s ?as = exec_plan ?s as' &
             subseq as' ?as &
             length as'
             <= problem_plan_bound
                 (snapshot ?PROB (fmrestrict_set ?vs ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 17),
        template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 3))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("AcycSspace.S_geq_S_succ_plus_ell",
     "[| ?s : valid_states ?PROB;
         top_sorted_abs (%x y. y : state_successors (prob_proj ?PROB ?vs) x)
          ?lss;
         ?s' : state_successors (prob_proj ?PROB ?vs) ?s;
         set ?lss = valid_states (prob_proj ?PROB ?vs) |]
      ==> problem_plan_bound (snapshot ?PROB (fmrestrict_set ?vs ?s)) +
          S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s') +
          1
          <= S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2)),
                template_var 4))
            ),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 4)))),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)))),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 4))))),
    ("AcycSspace.problem_plan_bound_S_bound_2nd_step",
     "[| finite ?PROB;
         top_sorted_abs (%x y. y : state_successors (prob_proj ?PROB ?vs) x)
          ?lss;
         set ?lss = valid_states (prob_proj ?PROB ?vs);
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s as' = exec_plan ?s ?as &
             subseq as' ?as &
             length as' <= S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, t_empty), template_var 2)
            ),
        template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 15, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app (template_hole 12, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 4))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("AcycSspace.no_vs_change_obtain_snapshot_bound_1st_step",
     "[| finite ?PROB; vars_change ?as ?vs ?s = []; sat_precond_as ?s ?as;
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan
              (fmrestrict_set
                (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s))) ?s)
              ?as =
             exec_plan
              (fmrestrict_set
                (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s))) ?s)
              as' &
             subseq as' ?as &
             length as'
             <= problem_plan_bound
                 (snapshot ?PROB (fmrestrict_set ?vs ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 14, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, template_var 3))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("AcycSspace.no_vs_change_obtain_snapshot_bound_2nd_step",
     "[| finite ?PROB; vars_change ?as ?vs ?s = []; sat_precond_as ?s ?as;
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan
              (fmrestrict_set
                (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s))) ?s)
              ?as =
             exec_plan
              (fmrestrict_set
                (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s))) ?s)
              as' &
             subseq as' ?as &
             sat_precond_as ?s as' &
             length as'
             <= problem_plan_bound
                 (snapshot ?PROB (fmrestrict_set ?vs ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 14, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, template_var 3))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("AcycSspace.no_vs_change_obtain_snapshot_bound_3rd_step",
     "[| finite ?PROB; vars_change ?as ?vs ?s = []; no_effectless_act ?as;
         sat_precond_as ?s ?as; ?s : valid_states ?PROB;
         ?as : valid_plans ?PROB |]
      ==> EX as'.
             fmrestrict_set
              (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
              (exec_plan ?s ?as) =
             fmrestrict_set
              (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
              (exec_plan ?s as') &
             subseq as' ?as &
             length as'
             <= problem_plan_bound
                 (snapshot ?PROB (fmrestrict_set ?vs ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 19, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 18),
        template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 14, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app (template_hole 12, template_var 3))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("AcycSspace.problem_plan_bound_S_bound_1st_step",
     "[| finite ?PROB;
         top_sorted_abs (%x y. y : state_successors (prob_proj ?PROB ?vs) x)
          ?lss;
         set ?lss = valid_states (prob_proj ?PROB ?vs);
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB;
         no_effectless_act ?as; sat_precond_as ?s ?as |]
      ==> EX as'.
             exec_plan ?s as' = exec_plan ?s ?as &
             subseq as' ?as &
             length as' <= S ?vs ?lss ?PROB (fmrestrict_set ?vs ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, t_empty), template_var 2)
            ),
        template_equation
         (template_app (template_hole 15, template_var 2),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app (template_hole 12, template_var 4))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("AcycSspace.S_in_MPLS_leq_2_pow_n",
     "[| finite ?PROB;
         top_sorted_abs (%x y. y : state_successors (prob_proj ?PROB ?vs) x)
          ?lss;
         set ?lss = valid_states (prob_proj ?PROB ?vs);
         ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s as' = exec_plan ?s ?as &
             subseq as' ?as &
             length as'
             <= Sup {S ?vs ?lss ?PROB s' |s'.
                     s' : valid_states (prob_proj ?PROB ?vs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, t_empty), template_var 2)
            ),
        template_equation
         (template_app (template_hole 16, template_var 2),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 18, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 1),
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 4))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("AcycSspace.no_vs_change_snapshot_s_vs_is_valid_bound_i",
     "[| finite ?PROB; vars_change ?as ?vs ?s = []; no_effectless_act ?as;
         sat_precond_as ?s ?as; ?s : valid_states ?PROB;
         ?as : valid_plans ?PROB;
         fmrestrict_set (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
          (exec_plan ?s ?as) =
         fmrestrict_set (prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
          (exec_plan ?s ?as');
         subseq ?as' ?as;
         length ?as'
         <= problem_plan_bound (snapshot ?PROB (fmrestrict_set ?vs ?s)) |]
      ==> fmrestrict_set
           (fmdom' (exec_plan ?s ?as) -
            prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
           (exec_plan ?s ?as) =
          fmrestrict_set
           (fmdom' (exec_plan ?s ?as) -
            prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
           ?s &
          fmrestrict_set
           (fmdom' (exec_plan ?s ?as') -
            prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
           (exec_plan ?s ?as') =
          fmrestrict_set
           (fmdom' (exec_plan ?s ?as') -
            prob_dom (snapshot ?PROB (fmrestrict_set ?vs ?s)))
           ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 20, template_var 3),
              template_var 2),
            template_var 1),
          template_hole 19),
        template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_app (template_hole 13, template_var 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_var 1)))),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 3)),
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_var 1)))),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_hole 8, template_var 1),
                               template_var 3))),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 4),
                             template_app
                              (template_app
                                (template_hole 11, template_var 2),
                               template_var 1))))),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 3))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 8, template_var 1),
                             template_var 3))),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 4),
                           template_app
                            (template_app
                              (template_hole 11, template_var 2),
                             template_var 1))))),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 8, template_var 1),
                             template_var 0))),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 4),
                           template_app
                            (template_app
                              (template_hole 11, template_var 2),
                             template_var 1))))),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_var 0))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 4),
                         template_app
                          (template_app (template_hole 11, template_var 2),
                           template_var 1))))),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.AcycSspaceTemplates"
### 0.409s elapsed time, 0.558s cpu time, 0.078s GC time
val it = (): unit
