Loading theory "Draft.HoArithUtils" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps" via "Draft.FactoredSystem")
Loading theory "Draft.SetUtils" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs")
### theory "Draft.HoArithUtils"
### 0.027s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.SetUtils"
### 0.084s elapsed time, 0.369s cpu time, 0.000s GC time
Loading theory "Draft.ListUtils" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps" via "Draft.FactoredSystem" via "Draft.FSSublist")
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.551s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.ListUtils"
### 0.081s elapsed time, 0.313s cpu time, 0.053s GC time
Loading theory "Draft.FSSublist" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps" via "Draft.FactoredSystem")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.852s cpu time, 0.053s GC time
Loading theory "Draft.FactoredSystemLib" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps" via "Draft.FactoredSystem")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.FactoredSystemLib"
### 0.178s elapsed time, 0.688s cpu time, 0.161s GC time
Loading theory "Draft.FmapUtils" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps" via "Draft.FactoredSystem")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.FSSublist"
### 0.270s elapsed time, 1.060s cpu time, 0.161s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.FmapUtils"
### 0.060s elapsed time, 0.240s cpu time, 0.000s GC time
Loading theory "Draft.FactoredSystem" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.844s elapsed time, 3.346s cpu time, 0.355s GC time
0 <= length ?l
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.896s elapsed time, 3.133s cpu time, 0.800s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.FactoredSystem"
### 1.499s elapsed time, 4.347s cpu time, 1.045s GC time
Loading theory "Draft.ActionSeqProcess" (required by "Draft.TopologicalPropsTemplates" via "Draft.TopologicalProps")
### theory "HOL-Library.Tree"
### 1.882s elapsed time, 5.831s cpu time, 1.207s GC time
Loading theory "Draft.Templates" (required by "Draft.TopologicalPropsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TopologicalPropsTemplates")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.ActionSeqProcess"
### 0.866s elapsed time, 2.180s cpu time, 0.983s GC time
Loading theory "Draft.TopologicalProps" (required by "Draft.TopologicalPropsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.812s elapsed time, 2.055s cpu time, 0.983s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### theory "Draft.TopologicalProps"
### 0.831s elapsed time, 0.980s cpu time, 0.198s GC time
Loading theory "Draft.TopologicalPropsTemplates"
val templateLemmas =
   [("TopologicalProps.finite_PLS", "finite (PLS ?s ?as)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("TopologicalProps.finite_traversed_states",
     "finite (traversed_states ?s ?as)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("TopologicalProps.init_is_traversed", "?s : traversed_states ?s ?as",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("TopologicalProps.bound_main_lemma_s_3", "MPLS_s ?PROB ?s ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("TopologicalProps.PLS_NEMPTY", "PLS ?s ?as ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("TopologicalProps.traversed_states_nempty",
     "traversed_states ?s ?as ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("TopologicalProps.statelist'_EQ_NIL", "statelist' ?s ?as ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("TopologicalProps.traversed_states_geq_1",
     "1 <= card (traversed_states ?s ?as)",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TopologicalProps.FINITE_MPLS", "finite ?Pi ==> finite (MPLS ?Pi)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TopologicalProps.LENGTH_statelist'",
     "length (statelist' ?s ?as) = length ?as + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("TopologicalProps.MPLS_nempty", "finite ?PROB ==> MPLS ?PROB ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("TopologicalProps.bound_main_lemma_charles_3",
     "finite ?PROB ==> MPLS_charles ?PROB ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("TopologicalProps.sublistD_bounds_D",
     "finite ?PROB ==>
      problem_plan_bound_charles ?PROB <= problem_plan_bound ?PROB",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("TopologicalProps.RD_bounds_sublistD",
     "finite ?Pi ==> problem_plan_bound ?Pi <= RD ?Pi",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("TopologicalProps.traversed_states_rem_condless_act",
     "traversed_states ?s (rem_condless_act ?s [] ?as) =
      traversed_states ?s ?as",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("TopologicalProps.empty_problem_bound",
     "prob_dom ?PROB = {} ==> problem_plan_bound ?PROB = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("TopologicalProps.statelist'_exec_plan",
     "statelist' ?s ?as = ?p ==> exec_plan ?s ?as = last ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TopologicalProps.statelist'_TAKE_i",
     "Suc ?m <= length (?a # ?as) ==> ?m <= length ?as",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("TopologicalProps.PLS_nempty_and_has_min",
     "EX x. x : PLS ?s ?as & x = Inf (PLS ?s ?as)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("TopologicalProps.AS_VALID_MPLS_VALID",
     "?as : valid_plans ?PROB ==> Inf (PLS ?s ?as) : MPLS_s ?PROB ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("TopologicalProps.sublistD_bounds_D_and_RD_bounds_sublistD",
     "finite ?PROB ==>
      problem_plan_bound_charles ?PROB <= problem_plan_bound ?PROB &
      problem_plan_bound ?PROB <= RD ?PROB",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("TopologicalProps.bound_main_lemma",
     "finite ?PROB ==>
      problem_plan_bound ?PROB <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("TopologicalProps.bound_main_lemma_charles",
     "finite ?PROB ==>
      problem_plan_bound_charles ?PROB <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("TopologicalProps.Sup_MPLS_s_lt_if",
     "ALL x:MPLS_s ?PROB ?s. x < ?k ==> Sup (MPLS_s ?PROB ?s) < ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("TopologicalProps.valid_path_statelist'",
     "[| ?as : valid_plans ?Pi; ?s : valid_states ?Pi |]
      ==> valid_path ?Pi (statelist' ?s ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("TopologicalProps.bound_main_lemma_reachability_s",
     "[| finite ?PROB; ?s : valid_states ?PROB |]
      ==> problem_plan_bound_s ?PROB ?s < card (reachable_s ?PROB ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TopologicalProps.problem_plan_bound_s_LESS_EQ_problem_plan_bound_thm",
     "[| finite ?PROB; ?s : valid_states ?PROB |]
      ==> problem_plan_bound_s ?PROB ?s < problem_plan_bound ?PROB + 1",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_hole 0)))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound_charles_i",
     "[| finite ?PROB; ALL x:MPLS_charles ?PROB. x < ?k |]
      ==> Sup (MPLS_charles ?PROB) : MPLS_charles ?PROB",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1))),
             template_app (template_hole 3, template_var 1))
           ))),
    ("TopologicalProps.S_VALID_AS_VALID_IMP_MIN_IN_PLS",
     "[| ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> Inf (PLS ?s ?as) : MPLS ?PROB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("TopologicalProps.RD_bounds_sublistD_i_b",
     "{length p - 1 |p. valid_path ?Pi p & distinct p} ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 9, t_empty), template_hole 0)
         )),
    ("TopologicalProps.bounded_MPLS_contains_supremum",
     "[| finite ?PROB; EX k. ALL x:MPLS ?PROB. x < k |]
      ==> Sup (MPLS ?PROB) : MPLS ?PROB",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 0))),
             template_app (template_hole 3, template_var 0))
           ))),
    ("TopologicalProps.in_MPLS_leq_2_pow_n",
     "[| finite ?PROB; ?x : MPLS ?PROB |]
      ==> ?x <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_hole 0)))),
    ("TopologicalProps.in_MPLS_charles_leq_2_pow_n",
     "[| finite ?PROB; ?x : MPLS_charles ?PROB |]
      ==> ?x <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_hole 0)))),
    ("TopologicalProps.RD_bounds_sublistD_i_a",
     "finite ?Pi ==>
      finite {length p - 1 |p. valid_path ?Pi p & distinct p}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 9, template_app (template_hole 8, t_empty))
           ))),
    ("TopologicalProps.statelist'_TAKE",
     "statelist' ?s ?as = ?p ==>
      ALL n<=length ?as. exec_plan ?s (take n ?as) = ?p ! n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TopologicalProps.bound_main_lemma_s",
     "[| finite ?PROB; ?s : valid_states ?PROB |]
      ==> problem_plan_bound_s ?PROB ?s <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_hole 0)))),
    ("TopologicalProps.expanded_problem_plan_bound_thm_1",
     "problem_plan_bound ?PROB =
      (SUP (s,
          as)\<in>{(s, as).
                   s : valid_states ?PROB & as : valid_plans ?PROB}.
          Inf (PLS s as))",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("TopologicalProps.expanded_problem_plan_bound_thm",
     "problem_plan_bound ?PROB =
      Sup {Inf (PLS s as) |s as.
           s : valid_states ?PROB & as : valid_plans ?PROB}",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_hole 10, template_app (template_hole 9, t_empty)))),
    ("TopologicalProps.x_in_MPLS_if",
     "?x : MPLS ?PROB ==>
      EX s as.
         s : valid_states ?PROB &
         as : valid_plans ?PROB & ?x = Inf (PLS s as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("TopologicalProps.PLS_works",
     "?x : PLS ?s ?as ==>
      EX as'.
         exec_plan ?s ?as = exec_plan ?s as' &
         length as' = ?x & subseq as' ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_s_i",
     "[| ?s : valid_states ?PROB; ?x : MPLS_s ?PROB ?s |]
      ==> EX as. ?x = Inf (PLS ?s as) & as : valid_plans ?PROB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 2))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("TopologicalProps.x_in_MPLS_charles_then",
     "?x : MPLS_charles ?PROB ==>
      EX s as.
         s : valid_states ?PROB &
         as : valid_plans ?PROB & ?x = Inf (PLS_charles s as ?PROB)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("TopologicalProps.bound_main_lemma_s_1",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?x : MPLS_s ?PROB ?s |]
      ==> ?x <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)))),
           template_hole 0)))),
    ("TopologicalProps.expanded_problem_plan_bound_charles_thm",
     "problem_plan_bound_charles ?PROB =
      Sup {Inf (PLS_charles (fst p) (snd p) ?PROB) |p.
           fst p : valid_states ?PROB & snd p : valid_plans ?PROB}",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_hole 11, template_app (template_hole 10, t_empty)))),
    ("TopologicalProps.problem_plan_bound_ge_min_pls",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB;
         problem_plan_bound ?PROB <= ?k |]
      ==> Inf (PLS ?s ?as) <= problem_plan_bound ?PROB",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 3))
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 3),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 3)))),
    ("TopologicalProps.problem_plan_bound_s_ge_min_pls",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB;
         problem_plan_bound_s ?PROB ?s <= ?k |]
      ==> Inf (PLS ?s ?as) <= problem_plan_bound_s ?PROB ?s",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 3))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 2)))),
    ("TopologicalProps.td_UBound_i",
     "finite ?PROB ==>
      {card (traversed_states (fst p) (snd p)) - 1 |p.
       fst p : valid_states ?PROB & snd p : valid_plans ?PROB} ~=
      {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 14, t_empty), template_hole 0)
           ))),
    ("TopologicalProps.MAX_SET_ELIM'",
     "[| finite ?P; ?P ~= {};
         ALL x. (ALL y. y : ?P --> y <= x) & x : ?P --> ?R x |]
      ==> ?R (Max ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("TopologicalProps.MIN_SET_ELIM'",
     "[| finite ?P; ?P ~= {};
         ALL x. (ALL y. y : ?P --> x <= y) & x : ?P --> ?Q x |]
      ==> ?Q (Min ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("TopologicalProps.in_PLS_leq_2_pow_n",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX x. x : PLS ?s ?as & x <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 2))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("TopologicalProps.td_UBound",
     "[| finite ?PROB;
         ALL s as.
            sat_precond_as s as &
            s : valid_states ?PROB & as : valid_plans ?PROB -->
            card (traversed_states s as) <= ?k |]
      ==> td ?PROB <= ?k - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("TopologicalProps.in_PLS_charles_leq_2_pow_n",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX x. x : PLS_charles ?s ?as ?PROB &
                x <= 2 ^ card (prob_dom ?PROB) - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 2))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("TopologicalProps.problem_plan_bound_works",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s ?as = exec_plan ?s as' &
             subseq as' ?as & length as' <= problem_plan_bound ?PROB",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 2))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("TopologicalProps.problem_plan_bound_s_works",
     "[| finite ?PROB; ?as : valid_plans ?PROB; ?s : valid_states ?PROB |]
      ==> EX as'.
             exec_plan ?s ?as = exec_plan ?s as' &
             subseq as' ?as & length as' <= problem_plan_bound_s ?PROB ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 2))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("TopologicalProps.problem_plan_bound_works'",
     "[| finite ?PROB; ?s : valid_states ?PROB; ?as : valid_plans ?PROB |]
      ==> EX as'.
             exec_plan ?s as' = exec_plan ?s ?as &
             subseq as' ?as &
             length as' <= problem_plan_bound ?PROB &
             sat_precond_as ?s as'",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 2))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("TopologicalProps.RD_bounds_sublistD_i",
     "[| finite ?Pi; ALL y. y : MPLS ?Pi --> y <= ?x; ?x : MPLS ?Pi |]
      ==> ?x <= Max {length p - 1 |p. valid_path ?Pi p & distinct p}",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app (template_hole 11, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 9, template_app (template_hole 8, t_empty))))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound_thesis'",
     "[| finite ?PROB;
         ALL as s.
            s : valid_states ?PROB & as : valid_plans ?PROB -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' < ?k) |]
      ==> problem_plan_bound ?PROB < ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound_thesis",
     "[| finite ?PROB;
         ALL as s.
            s : valid_states ?PROB & as : valid_plans ?PROB -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' <= ?k) |]
      ==> problem_plan_bound ?PROB <= ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("TopologicalProps.problem_plan_bound_UBound",
     "[| ALL as s.
            s : valid_states ?PROB & as : valid_plans ?PROB -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' < ?f ?PROB);
         finite ?PROB |]
      ==> problem_plan_bound ?PROB < ?f ?PROB",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_thesis",
     "[| finite ?PROB;
         ALL as s.
            s : valid_states ?PROB & as : valid_plans ?PROB -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' < ?k);
         ?x : MPLS ?PROB |]
      ==> ?x < ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_inequation (less_than, template_var 0, template_var 1))),
    ("TopologicalProps.valid_path_ITP2015",
     "valid_path ?Pi [] = True &
      valid_path ?Pi [?s] = (?s : valid_states ?Pi) &
      valid_path ?Pi (?s1.0 # ?s2.0 # ?rest) =
      (?s1.0 : valid_states ?Pi &
       (EX a. a : ?Pi & exec_plan ?s1.0 [a] = ?s2.0) &
       valid_path ?Pi (?s2.0 # ?rest))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 4),
                   template_hole 10)),
               template_hole 9)),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 4),
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_hole 10))),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app (template_hole 6, template_var 4)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 4),
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_app (template_hole 6, template_var 4))),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 5, t_empty)),
                   template_app
                    (template_app (template_hole 11, template_var 4),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)))))))
         )),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS",
     "ALL PROB as s.
         ?P PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB x. ?P PROB --> x : MPLS PROB --> x < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB.
         ?P PROB & finite PROB --> problem_plan_bound PROB < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound_charles",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB.
         ?P PROB & finite PROB -->
         problem_plan_bound_charles PROB < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_problem_plan_bound_",
     "[| ALL PROB' as s.
            finite ?PROB &
            ?P PROB' & s : valid_states PROB' & as : valid_plans PROB' -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' < ?f PROB');
         ?P ?PROB; finite ?PROB |]
      ==> problem_plan_bound ?PROB < ?f ?PROB",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_var 1, template_var 2)),
        template_predicate
         (template_app (template_hole 12, template_var 2))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("TopologicalProps.bound_child_parent_card_state_set_cons_thesis",
     "[| finite ?PROB;
         ALL as s.
            as : valid_plans ?PROB & s : valid_states ?PROB -->
            (EX as'.
                exec_plan s as = exec_plan s as' &
                subseq as' as & length as' < ?k);
         ?as : valid_plans ?PROB; ?s : valid_states ?PROB |]
      ==> EX x. x : PLS ?s ?as & x < ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 3))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_finite",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB x. ?P PROB & finite PROB --> x : MPLS PROB --> x < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_charles",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB x.
         ?P PROB & finite PROB --> x : MPLS_charles PROB --> x < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.bound_child_parent_lemma_s_2",
     "ALL PROB as s.
         finite PROB &
         ?P PROB & s : valid_states PROB & as : valid_plans PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB s) ==>
      finite ?PROB & ?P ?PROB & ?s : valid_states ?PROB -->
      problem_plan_bound_s ?PROB ?s < ?f ?PROB ?s",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_var 3, template_var 1)),
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_app (template_hole 10, template_var 1))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_var 2, template_var 1),
                 template_var 0)))
           ))),
    ("TopologicalProps.bound_child_parent_card_state_set_cons",
     "ALL PROB as s.
         ?P PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB s as.
         ?P PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX x. x : PLS s as & x < ?f PROB)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_s",
     "ALL PROB as s.
         finite PROB &
         ?P PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB s) ==>
      ALL PROB x s.
         finite PROB & ?P PROB & s : valid_states PROB -->
         x : MPLS_s PROB s --> x < ?f PROB s",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.bound_child_parent_card_state_set_cons_finite",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB s as.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX x. x : PLS s as & x < ?f PROB)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_MPLS_charles_i",
     "ALL PROB s as.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB s as.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         Inf {n. n : PLS_charles s as PROB} < ?f PROB",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_app (template_hole 20, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_PLS_charles",
     "ALL PROB as s.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB) ==>
      ALL PROB s as.
         ?P PROB &
         finite PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX x. x : PLS_charles s as PROB & x < ?f PROB)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.bound_on_all_plans_bounds_PLS_s",
     "ALL PROB as s.
         finite PROB &
         ?P PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX as'.
             exec_plan s as = exec_plan s as' &
             subseq as' as & length as' < ?f PROB s) ==>
      ALL PROB s as.
         finite PROB &
         ?P PROB & as : valid_plans PROB & s : valid_states PROB -->
         (EX x. x : PLS s as & x < ?f PROB s)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("TopologicalProps.RD_bounds_sublistD_i_c",
     "[| ?s : valid_states ?Pi; ?as : valid_plans ?Pi;
         ALL y.
            y : {length p - 1 |p. valid_path ?Pi p & distinct p} -->
            y <= ?x;
         ?x : {length p - 1 |p. valid_path ?Pi p & distinct p} |]
      ==> Min (PLS ?s ?as)
          <= Max {length p - 1 |p. valid_path ?Pi p & distinct p}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_app (template_hole 18, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app (template_hole 16, template_var 2))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app (template_hole 12, t_empty))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_hole 0, template_app (template_hole 12, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.TopologicalPropsTemplates"
### 0.427s elapsed time, 0.621s cpu time, 0.141s GC time
val it = (): unit
