   [("Acyclicity.top_sorted_cons",
     "top_sorted_abs ?R (?h # ?l) ==> top_sorted_abs ?R ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Acyclicity.individual_weight_less_eq_lp",
     "geq_arg ?g ==> ?w ?x <= wlp ?R ?w ?g ?f ?x ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 5))],
       template_inequation
        (less_equals, template_app (template_var 4, template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 5),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("Acyclicity.top_sorted_abs_mem",
     "[| top_sorted_abs ?R (?h # ?l); ListMem ?x ?l |] ==> ~ ?R ?x ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 0),
                 template_var 2)
               )
           ))),
    ("Acyclicity.wlp_weight_lamda_exp",
     "wlp ?R ?w ?g ?f ?x ?l = wlp ?R ?w ?g ?f ?x ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5), t_empty),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Acyclicity.wlp_ite_weights",
     "[| ALL y. ListMem y ?l1.0 --> ?P y; ?P ?x |]
      ==> wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f ?x ?l1.0 =
          wlp ?R ?w1.0 ?g ?f ?x ?l1.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_var 6, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4), t_empty),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 7),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 7)))),
    ("Acyclicity.weight_fun_leq_imp_lp_leq",
     "[| increasing ?f; increasing ?g;
         ALL y. ListMem y ?l --> ?w1.0 y <= ?w2.0 y; ?w1.0 ?x <= ?w2.0 ?x |]
      ==> wlp ?R ?w1.0 ?g ?f ?x ?l <= wlp ?R ?w2.0 ?g ?f ?x ?l",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 6)),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation
         (less_equals, template_app (template_var 3, template_var 1),
          template_app (template_var 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 5),
               template_var 6),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 5),
               template_var 6),
             template_var 1),
           template_var 4)))),
    ("Acyclicity.img_wlp_ite_weights",
     "[| ALL x. ListMem x ?l --> ?P x; ALL x. x : ?s --> ?P x |]
      ==> (%x. wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f x ?l) `
          ?s =
          (%x. wlp ?R ?w1.0 ?g ?f x ?l) ` ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 5),
         template_app
          (template_app (template_hole 2, t_empty), template_var 5)))),
    ("Acyclicity.map_wlp_ite_weights",
     "[| ALL x. ListMem x ?l1.0 --> ?P x; ALL x. ListMem x ?l2.0 --> ?P x |]
      ==> map (%x. wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f x
                    ?l1.0)
           ?l2.0 =
          map (%x. wlp ?R ?w1.0 ?g ?f x ?l1.0) ?l2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 5),
         template_app
          (template_app (template_hole 2, t_empty), template_var 5)))),
    ("Acyclicity.lp_geq_lp_from_successor",
     "[| geq_arg ?f; geq_arg ?g; ALL vtx. ListMem vtx ?G --> ~ ?R vtx vtx;
         ?R ?vtx2.0 ?vtx1.0; ListMem ?vtx1.0 ?G; top_sorted_abs ?R ?G |]
      ==> ?f (?w ?vtx2.0) (wlp ?R ?w ?g ?f ?vtx1.0 ?G)
          <= wlp ?R ?w ?g ?f ?vtx2.0 ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 6)),
        template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_var 6, template_app (template_var 0, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 5),
                 template_var 6),
               template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 5),
               template_var 6),
             template_var 2),
           template_var 4)))),
    ("Acyclicity.wlp_congruence_rule",
     "[| ?l1.0 = ?l2.0;
         ALL y. ListMem y ?l2.0 --> ?R1.0 ?x1.0 y = ?R2.0 ?x2.0 y;
         ALL y. ListMem y ?l2.0 --> ?R1.0 y ?x1.0 = ?R2.0 y ?x2.0;
         ?w1.0 ?x1.0 = ?w2.0 ?x2.0;
         ALL y1 y2.
            y1 = y2 --> ?f1.0 (?w1.0 ?x1.0) y1 = ?f2.0 (?w2.0 ?x2.0) y2;
         ALL y1 y2 z1 z2.
            y1 = y2 & z1 = z2 -->
            ?g1.0 (?f1.0 (?w1.0 ?x1.0) y1) z1 =
            ?g2.0 (?f2.0 (?w2.0 ?x2.0) y2) z2;
         ALL x y.
            ListMem x ?l2.0 & ListMem y ?l2.0 --> ?R1.0 x y = ?R2.0 x y;
         ALL x. ListMem x ?l2.0 --> ?w1.0 x = ?w2.0 x;
         ALL x y z.
            ListMem x ?l2.0 -->
            ?g1.0 (?f1.0 (?w1.0 x) y) z = ?g2.0 (?f2.0 (?w2.0 x) y) z;
         ALL x y.
            ListMem x ?l2.0 --> ?f1.0 (?w1.0 x) y = ?f2.0 (?w1.0 x) y |]
      ==> wlp ?R1.0 ?w1.0 ?g1.0 ?f1.0 ?x1.0 ?l1.0 =
          wlp ?R2.0 ?w2.0 ?g2.0 ?f2.0 ?x2.0 ?l2.0",
     template_implication
      ([template_equation (template_var 11, template_var 10),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_var 5, template_var 8),
          template_app (template_var 4, template_var 6)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 5),
                 template_var 1),
               template_var 3),
             template_var 8),
           template_var 11),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 6),
           template_var 10))))]
