Loading theory "Draft.Acyclicity" (required by "Draft.AcyclicityTemplates")
Loading theory "HOL-Library.Stream" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.505s cpu time, 0.059s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.906s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Acyclicity"
### 0.531s elapsed time, 2.113s cpu time, 0.303s GC time
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.869s elapsed time, 3.130s cpu time, 0.375s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.825s elapsed time, 2.629s cpu time, 0.425s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.901s elapsed time, 4.501s cpu time, 1.082s GC time
Loading theory "Draft.Templates" (required by "Draft.AcyclicityTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AcyclicityTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.442s cpu time, 0.000s GC time
Loading theory "Draft.AcyclicityTemplates"
val templateLemmas =
   [("Acyclicity.top_sorted_cons",
     "top_sorted_abs ?R (?h # ?l) ==> top_sorted_abs ?R ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Acyclicity.individual_weight_less_eq_lp",
     "geq_arg ?g ==> ?w ?x <= wlp ?R ?w ?g ?f ?x ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 5))],
       template_inequation
        (less_equals, template_app (template_var 4, template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 5),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("Acyclicity.top_sorted_abs_mem",
     "[| top_sorted_abs ?R (?h # ?l); ListMem ?x ?l |] ==> ~ ?R ?x ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 0),
                 template_var 2)
               )
           ))),
    ("Acyclicity.wlp_weight_lamda_exp",
     "wlp ?R ?w ?g ?f ?x ?l = wlp ?R ?w ?g ?f ?x ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5), t_empty),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Acyclicity.wlp_ite_weights",
     "[| ALL y. ListMem y ?l1.0 --> ?P y; ?P ?x |]
      ==> wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f ?x ?l1.0 =
          wlp ?R ?w1.0 ?g ?f ?x ?l1.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_var 6, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4), t_empty),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 7),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 7)))),
    ("Acyclicity.weight_fun_leq_imp_lp_leq",
     "[| increasing ?f; increasing ?g;
         ALL y. ListMem y ?l --> ?w1.0 y <= ?w2.0 y; ?w1.0 ?x <= ?w2.0 ?x |]
      ==> wlp ?R ?w1.0 ?g ?f ?x ?l <= wlp ?R ?w2.0 ?g ?f ?x ?l",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 6)),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation
         (less_equals, template_app (template_var 3, template_var 1),
          template_app (template_var 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 5),
               template_var 6),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 5),
               template_var 6),
             template_var 1),
           template_var 4)))),
    ("Acyclicity.img_wlp_ite_weights",
     "[| ALL x. ListMem x ?l --> ?P x; ALL x. x : ?s --> ?P x |]
      ==> (%x. wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f x ?l) `
          ?s =
          (%x. wlp ?R ?w1.0 ?g ?f x ?l) ` ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 5),
         template_app
          (template_app (template_hole 2, t_empty), template_var 5)))),
    ("Acyclicity.map_wlp_ite_weights",
     "[| ALL x. ListMem x ?l1.0 --> ?P x; ALL x. ListMem x ?l2.0 --> ?P x |]
      ==> map (%x. wlp ?R (%y. if ?P y then ?w1.0 y else ?w2.0 y) ?g ?f x
                    ?l1.0)
           ?l2.0 =
          map (%x. wlp ?R ?w1.0 ?g ?f x ?l1.0) ?l2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 5),
         template_app
          (template_app (template_hole 2, t_empty), template_var 5)))),
    ("Acyclicity.lp_geq_lp_from_successor",
     "[| geq_arg ?f; geq_arg ?g; ALL vtx. ListMem vtx ?G --> ~ ?R vtx vtx;
         ?R ?vtx2.0 ?vtx1.0; ListMem ?vtx1.0 ?G; top_sorted_abs ?R ?G |]
      ==> ?f (?w ?vtx2.0) (wlp ?R ?w ?g ?f ?vtx1.0 ?G)
          <= wlp ?R ?w ?g ?f ?vtx2.0 ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 6)),
        template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_var 6, template_app (template_var 0, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 5),
                 template_var 6),
               template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 5),
               template_var 6),
             template_var 2),
           template_var 4)))),
    ("Acyclicity.wlp_congruence_rule",
     "[| ?l1.0 = ?l2.0;
         ALL y. ListMem y ?l2.0 --> ?R1.0 ?x1.0 y = ?R2.0 ?x2.0 y;
         ALL y. ListMem y ?l2.0 --> ?R1.0 y ?x1.0 = ?R2.0 y ?x2.0;
         ?w1.0 ?x1.0 = ?w2.0 ?x2.0;
         ALL y1 y2.
            y1 = y2 --> ?f1.0 (?w1.0 ?x1.0) y1 = ?f2.0 (?w2.0 ?x2.0) y2;
         ALL y1 y2 z1 z2.
            y1 = y2 & z1 = z2 -->
            ?g1.0 (?f1.0 (?w1.0 ?x1.0) y1) z1 =
            ?g2.0 (?f2.0 (?w2.0 ?x2.0) y2) z2;
         ALL x y.
            ListMem x ?l2.0 & ListMem y ?l2.0 --> ?R1.0 x y = ?R2.0 x y;
         ALL x. ListMem x ?l2.0 --> ?w1.0 x = ?w2.0 x;
         ALL x y z.
            ListMem x ?l2.0 -->
            ?g1.0 (?f1.0 (?w1.0 x) y) z = ?g2.0 (?f2.0 (?w2.0 x) y) z;
         ALL x y.
            ListMem x ?l2.0 --> ?f1.0 (?w1.0 x) y = ?f2.0 (?w1.0 x) y |]
      ==> wlp ?R1.0 ?w1.0 ?g1.0 ?f1.0 ?x1.0 ?l1.0 =
          wlp ?R2.0 ?w2.0 ?g2.0 ?f2.0 ?x2.0 ?l2.0",
     template_implication
      ([template_equation (template_var 11, template_var 10),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_var 5, template_var 8),
          template_app (template_var 4, template_var 6)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 5),
                 template_var 1),
               template_var 3),
             template_var 8),
           template_var 11),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 6),
           template_var 10))))]:
   (string * thm * template) list
### theory "Draft.AcyclicityTemplates"
### 0.278s elapsed time, 0.401s cpu time, 0.063s GC time
val it = (): unit
