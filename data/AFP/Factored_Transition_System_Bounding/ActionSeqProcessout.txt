Loading theory "Draft.HoArithUtils" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess" via "Draft.FactoredSystem")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.HoArithUtils"
### 0.036s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.ListUtils" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess" via "Draft.FactoredSystem" via "Draft.FSSublist")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.511s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.ListUtils"
### 0.123s elapsed time, 0.474s cpu time, 0.054s GC time
Loading theory "Draft.FSSublist" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess" via "Draft.FactoredSystem")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.828s cpu time, 0.054s GC time
Loading theory "Draft.FactoredSystemLib" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.FactoredSystemLib"
### 0.164s elapsed time, 0.643s cpu time, 0.085s GC time
Loading theory "Draft.FmapUtils" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess" via "Draft.FactoredSystem")
### theory "Draft.FSSublist"
### 0.279s elapsed time, 1.088s cpu time, 0.152s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs")
### theory "Draft.FmapUtils"
### 0.077s elapsed time, 0.292s cpu time, 0.067s GC time
Loading theory "Draft.FactoredSystem" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ActionSeqProcess")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.942s elapsed time, 3.724s cpu time, 0.365s GC time
0 <= length ?l
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.035s elapsed time, 3.646s cpu time, 0.846s GC time
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.FactoredSystem"
### 1.636s elapsed time, 4.911s cpu time, 1.066s GC time
Loading theory "Draft.ActionSeqProcess" (required by "Draft.ActionSeqProcessTemplates")
### theory "HOL-Library.Tree"
### 2.024s elapsed time, 6.362s cpu time, 1.218s GC time
Loading theory "Draft.Templates" (required by "Draft.ActionSeqProcessTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ActionSeqProcessTemplates")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.807s elapsed time, 2.003s cpu time, 0.919s GC time
### theory "Draft.ActionSeqProcess"
### 0.906s elapsed time, 2.209s cpu time, 0.919s GC time
Loading theory "Draft.ActionSeqProcessTemplates"
val templateLemmas =
   [("ActionSeqProcess.rem_effectless_works_6",
     "no_effectless_act (rem_effectless_act ?as)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ActionSeqProcess.rem_effectless_works_9",
     "subseq (rem_effectless_act ?as) ?as",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("ActionSeqProcess.rem_condless_valid_2",
     "sat_precond_as ?s (rem_condless_act ?s [] ?as)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0))
         )),
    ("ActionSeqProcess.rem_condless_act_pair",
     "rem_condless_act ?s ?pfx_a [] = ?pfx_a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("ActionSeqProcess.rem_effectless_works_3",
     "length (rem_effectless_act ?as) <= length ?as",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ActionSeqProcess.rem_condless_valid_8",
     "subseq (rem_condless_act ?s [] ?as) ?as",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("ActionSeqProcess.rem_effectless_works_1",
     "exec_plan ?s ?as = exec_plan ?s (rem_effectless_act ?as)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ActionSeqProcess.rem_condless_valid_3",
     "length (rem_condless_act ?s [] ?as) <= length ?as",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("ActionSeqProcess.rem_effectless_works_10",
     "no_effectless_act ?as ==> no_effectless_act (filter ?P ?as)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ActionSeqProcess.rem_condless_valid_9",
     "no_effectless_act ?as ==>
      no_effectless_act (rem_condless_act ?s [] ?as)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 1))
           ))),
    ("ActionSeqProcess.rem_effectless_works_2",
     "sat_precond_as ?s ?as ==> sat_precond_as ?s (rem_effectless_act ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ActionSeqProcess.rem_effectless_works_8",
     "list_all ?P ?as ==> list_all ?P (rem_effectless_act ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ActionSeqProcess.rem_effectless_works_12",
     "no_effectless_act (?as1.0 @ ?as2.0) =
      (no_effectless_act ?as1.0 & no_effectless_act ?as2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ActionSeqProcess.varset_action_pair",
     "varset_action (?p, ?e) ?vs = (fmdom' ?e <= ?vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("ActionSeqProcess.rem_condless_valid_1",
     "exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("ActionSeqProcess.rem_effectless_works_5",
     "length (filter ?P (rem_effectless_act ?as))
      <= length (filter ?P ?as)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ActionSeqProcess.sat_precond_as_pfx",
     "sat_precond_as ?s (?as @ ?as') ==> sat_precond_as ?s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("ActionSeqProcess.sat_precond_drest_sat_precond",
     "sat_precond_as (fmrestrict_set ?vs ?s) ?as ==> sat_precond_as ?s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("ActionSeqProcess.rem_effectless_act_set_no_empty_actions_thm",
     "rem_effectless_act_set ?A <= {a. fmdom' (snd a) ~= {}}",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("ActionSeqProcess.rem_effectless_works_4",
     "set ?as <= ?A ==> set (rem_effectless_act ?as) <= ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("ActionSeqProcess.rem_effectless_works_4'",
     "?as : valid_plans ?A ==> rem_effectless_act ?as : valid_plans ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("ActionSeqProcess.rem_effectless_works_11",
     "subseq ?as1.0 (rem_effectless_act ?as2.0) ==> subseq ?as1.0 ?as2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)
           ))),
    ("ActionSeqProcess.rem_effectless_works_7",
     "no_effectless_act ?as = list_all (%a. fmdom' (snd a) ~= {}) ?as",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app (template_hole 5, t_empty), template_var 0))),
    ("ActionSeqProcess.list_all_list_mem",
     "list_all ?P ?l = (ALL e. ListMem e ?l --> ?P e)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ActionSeqProcess.rem_condless_valid_6",
     "length (filter ?P (rem_condless_act ?s [] ?as))
      <= length (filter ?P ?as)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ActionSeqProcess.rem_effectless_act_subset_rem_effectless_act_set_thm",
     "set ?as <= ?A ==>
      set (rem_effectless_act ?as) <= rem_effectless_act_set ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ActionSeqProcess.empty_replace_proj_dual7",
     "sat_precond_as ?s (?as @ ?as') ==>
      sat_precond_as (exec_plan ?s ?as) ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("ActionSeqProcess.rem_effectless_works_13_i",
     "[| ListMem ?x ?l; list_all ?P ?l |] ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("ActionSeqProcess.rem_effectless_works_13",
     "[| subseq ?as1.0 ?as2.0; no_effectless_act ?as2.0 |]
      ==> no_effectless_act ?as1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ActionSeqProcess.rem_condless_valid_4",
     "set ?as <= ?A ==> set (rem_condless_act ?s [] ?as) <= ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_var 2)),
         template_var 1))),
    ("ActionSeqProcess.rem_condless_valid_10",
     "?as : valid_plans ?PROB ==>
      rem_condless_act ?s [] ?as : valid_plans ?PROB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0),
                 template_var 2)),
             template_app (template_hole 2, template_var 1))
           ))),
    ("ActionSeqProcess.submap_sat_precond_submap",
     "[| ?s1.0 \<subseteq>\<^sub>f ?s2.0; sat_precond_as ?s1.0 ?as |]
      ==> sat_precond_as ?s2.0 ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("ActionSeqProcess.n_replace_proj_le_n_as_1",
     "[| ?vs <= ?vs'; varset_action ?a ?vs |] ==> varset_action ?a ?vs'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("ActionSeqProcess.vset_disj_eff_diff",
     "varset_action ?a ?vs ==> fmdom' (snd ?a) Int (?s - ?vs) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("ActionSeqProcess.eq_effect_eq_vset",
     "snd ?x = snd ?y ==> varset_action ?x ?vs = varset_action ?y ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ActionSeqProcess.vset_diff_union_vset_diff",
     "varset_action ?a (?s - (?vs Un ?vs')) ==>
      varset_action ?a (?s - ?vs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("ActionSeqProcess.varset_act_diff_un_imp_varset_diff",
     "varset_action ?a (?vs'' - (?vs' Un ?vs)) ==>
      varset_action ?a (?vs'' - ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("ActionSeqProcess.rem_condless_act_cons",
     "rem_condless_act ?s (?h' # ?pfx) ?as =
      ?h' # rem_condless_act (state_succ ?s ?h') ?pfx ?as",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("ActionSeqProcess.no_effectless_act_works",
     "no_effectless_act ?as ==>
      filter (%a. fmdom' (snd a) ~= {}) ?as = ?as",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 0),
         template_var 0))),
    ("ActionSeqProcess.vset_disj_dom_eff_diff",
     "varset_action ?a ?vs ==>
      fmdom' (snd ?a) Int (prob_dom ?PROB - ?vs) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_hole 0))),
    ("ActionSeqProcess.valid_filter_vset_dom_idempot",
     "?as : valid_plans ?PROB ==>
      filter (%a. varset_action a (prob_dom ?PROB)) ?as = ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 1))),
    ("ActionSeqProcess.vset_diff_disj_eff_vs",
     "varset_action ?a (prob_dom ?PROB - ?vs) ==>
      fmdom' (snd ?a) Int ?vs = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2))),
           template_var 0),
         template_hole 0))),
    ("ActionSeqProcess.rem_condless_valid_7",
     "list_all ?P ?as & list_all ?P ?as2.0 ==>
      list_all ?P (rem_condless_act ?s ?as2.0 ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("ActionSeqProcess.submap_init_submap_exec",
     "[| ?s1.0 \<subseteq>\<^sub>f ?s2.0; sat_precond_as ?s1.0 ?as |]
      ==> exec_plan ?s1.0 ?as \<subseteq>\<^sub>f exec_plan ?s2.0 ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ActionSeqProcess.sat_precond_as_pair",
     "sat_precond_as ?s ((?p, ?e) # ?as) =
      (?p \<subseteq>\<^sub>f ?s &
       sat_precond_as (state_succ ?s (?p, ?e)) ?as)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 3)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_var 0)))),
    ("ActionSeqProcess.exec_remcondless_cons",
     "exec_plan ?s (rem_condless_act ?s (?h # ?pfx) ?as) =
      exec_plan (state_succ ?s ?h)
       (rem_condless_act (state_succ ?s ?h) ?pfx ?as)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("ActionSeqProcess.submap_init_submap_exec_i",
     "[| ?s1.0 \<subseteq>\<^sub>f ?s2.0; sat_precond_as ?s1.0 (?a # ?as) |]
      ==> state_succ ?s1.0 ?a \<subseteq>\<^sub>f state_succ ?s2.0 ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("ActionSeqProcess.every_vset_imp_drestrict_exec_eq",
     "list_all (%a. varset_action a (prob_dom ?PROB - ?vs)) ?as ==>
      fmrestrict_set ?vs ?s = fmrestrict_set ?vs (exec_plan ?s ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("ActionSeqProcess.vset_nempty_efff_not_disj_eff_vs",
     "[| varset_action ?a ?vs; fmdom' (snd ?a) ~= {} |]
      ==> fmdom' (snd ?a) Int ?vs ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1))),
               template_var 0),
             template_hole 1)
           ))),
    ("ActionSeqProcess.graph_plan_lemma_17",
     "[| ?as_1.0 @ ?as_2.0 = ?as; sat_precond_as ?s ?as |]
      ==> sat_precond_as ?s ?as_1.0 &
          sat_precond_as (exec_plan ?s ?as_1.0) ?as_2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2))
           ))),
    ("ActionSeqProcess.not_vset_not_disj_eff_prod_dom_diff",
     "[| ?a : ?PROB; ~ varset_action ?a ?vs |]
      ==> fmdom' (snd ?a) Int (prob_dom ?PROB - ?vs) ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_hole 0)
           ))),
    ("ActionSeqProcess.rem_condless_act_cons_prefix",
     "prefix (?h' # ?as') (rem_condless_act ?s [?h] ?as) ==>
      prefix ?as' (rem_condless_act (state_succ ?s ?h) [] ?as) & ?h' = ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 3)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)),
                     template_hole 3),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("ActionSeqProcess.nempty_eff_every_nempty_act",
     "[| no_effectless_act ?as; ALL x. fmdom' (snd (?f x)) ~= {} |]
      ==> list_all (%a. ?f a ~= (fmempty, fmempty)) ?as",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 1)
           ))),
    ("ActionSeqProcess.rem_condless_act_pair",
     "rem_condless_act ?s ?pfx_a ((?p, ?e) # ?as) =
      (if ?p \<subseteq>\<^sub>f exec_plan ?s ?pfx_a
       then rem_condless_act ?s (?pfx_a @ [(?p, ?e)]) ?as
       else rem_condless_act ?s ?pfx_a ?as)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_hole 0))),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 4),
             template_var 3),
           template_var 0)))),
    ("ActionSeqProcess.rem_effectless_works",
     "[| exec_plan ?s ?as = exec_plan ?s (rem_effectless_act ?as);
         sat_precond_as ?s ?as -->
         sat_precond_as ?s (rem_effectless_act ?as);
         length (rem_effectless_act ?as) <= length ?as;
         set ?as <= ?A --> set (rem_effectless_act ?as) <= ?A;
         no_effectless_act (rem_effectless_act ?as) |]
      ==> ALL P.
             length (filter P (rem_effectless_act ?as))
             <= length (filter P ?as)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 10, template_var 2),
            template_app (template_hole 9, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 9, template_var 1)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 9, template_var 1)),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 9, template_var 1))),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 9, template_var 1))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ActionSeqProcess.rem_condless_valid",
     "[| exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as);
         sat_precond_as ?s (rem_condless_act ?s [] ?as);
         length (rem_condless_act ?s [] ?as) <= length ?as;
         set ?as <= ?A --> set (rem_condless_act ?s [] ?as) <= ?A |]
      ==> ALL P.
             length (filter P (rem_condless_act ?s [] ?as))
             <= length (filter P ?as)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 10, template_var 2),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_hole 8),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8),
                template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_hole 8),
              template_var 1)),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 2),
                        template_hole 8),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ActionSeqProcess.graph_plan_lemma_4",
     "[| ALL a. ListMem a ?as & ?P a --> fmdom' (snd a) Int ?vs = {};
         sat_precond_as ?s ?as;
         sat_precond_as ?s' (filter (%a. ~ ?P a) ?as);
         fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s' |]
      ==> fmrestrict_set ?vs (exec_plan ?s ?as) =
          fmrestrict_set ?vs (exec_plan ?s' (filter (%a. ~ ?P a) ?as))",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, t_empty), template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 4, t_empty),
               template_var 4))))))]:
   (string * thm * template) list
### theory "Draft.ActionSeqProcessTemplates"
### 0.397s elapsed time, 0.568s cpu time, 0.083s GC time
val it = (): unit
