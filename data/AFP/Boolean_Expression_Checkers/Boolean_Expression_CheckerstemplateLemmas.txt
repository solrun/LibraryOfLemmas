   [("Boolean_Expression_Checkers.agree_Nil", "agree ?s Mapping.empty",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Boolean_Expression_Checkers.reduced_ifex", "reduced (ifex_of ?b) {}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Boolean_Expression_Checkers.reduced_reduce",
     "reduced (reduce ?env ?t) (Mapping.keys ?env)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("Boolean_Expression_Checkers.reduced_normif",
     "reduced (normif ?env ?t ?t1.0 ?t2.0) (Mapping.keys ?env)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 3))
         )),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_sat_test ?b = (EX s. val_bool_expr ?b s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_taut_test ?b = (ALL s. val_bool_expr ?b s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.taut_test_ifex",
     "taut_test_ifex ?t = (ALL s. val_ifex ?t s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.val_ifex",
     "val_ifex (ifex_of ?b) ?s = val_bool_expr ?b ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_equiv_test ?b1.0 ?b2.0 =
      (ALL s. val_bool_expr ?b1.0 s = val_bool_expr ?b2.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_impl_test ?b1.0 ?b2.0 =
      (ALL s. val_bool_expr ?b1.0 s --> val_bool_expr ?b2.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Boolean_Expression_Checkers.taut_test_rec",
     "taut_test_rec ?t ?env = (ALL s. agree s ?env --> val_ifex ?t s)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Boolean_Expression_Checkers.val_mkIF",
     "val_ifex (mkIF ?x ?t1.0 ?t2.0) ?s = val_ifex (IF ?x ?t1.0 ?t2.0) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Boolean_Expression_Checkers.reduced_antimono",
     "[| ?X <= ?Y; reduced ?t ?Y |] ==> reduced ?t ?X",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Boolean_Expression_Checkers.val_reduce",
     "agree ?s ?env ==> val_ifex (reduce ?env ?t) ?s = val_ifex ?t ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Boolean_Expression_Checkers.agreeDT",
     "[| agree ?s ?env; Mapping.lookup ?env ?x = Some True |] ==> ?s ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Boolean_Expression_Checkers.lookup_update_unfold",
     "Mapping.lookup (Mapping.update ?k ?v ?m) ?k' =
      (if ?k = ?k' then Some ?v else Mapping.lookup ?m ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Boolean_Expression_Checkers.agreeDF",
     "[| agree ?s ?env; Mapping.lookup ?env ?x = Some False |] ==> ~ ?s ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_negation
        (
           template_predicate
            (template_app (template_var 2, template_var 0))
           ))),
    ("Boolean_Expression_Checkers.val_normif",
     "agree ?s ?env ==>
      val_ifex (normif ?env ?t ?t1.0 ?t2.0) ?s =
      val_ifex (if val_ifex ?t ?s then ?t1.0 else ?t2.0) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 4)),
                 template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Boolean_Expression_Checkers.agree_Cons",
     "?x ~: Mapping.keys ?env ==>
      agree ?s (Mapping.update ?x ?b ?env) =
      ((if ?b then ?s ?x else ~ ?s ?x) & agree ?s ?env)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_var 1, template_var 3)),
               template_app
                (template_hole 7,
                 template_app (template_var 1, template_var 3)))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))))),
    ("Boolean_Expression_Checkers.reduced_mkIF",
     "[| ?x ~: ?X; reduced ?t1.0 (insert ?x ?X);
         reduced ?t2.0 (insert ?x ?X) |]
      ==> reduced (mkIF ?x ?t1.0 ?t2.0) ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           )))]
