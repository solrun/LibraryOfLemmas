Loading theory "HOL-Library.AList" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.Boolean_Expression_Checkers" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.572s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.914s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.307s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.AList"
### 1.190s elapsed time, 4.543s cpu time, 0.943s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.Boolean_Expression_Checkers")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.983s elapsed time, 3.698s cpu time, 0.905s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.091s elapsed time, 3.967s cpu time, 0.907s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 1.964s elapsed time, 6.164s cpu time, 1.163s GC time
Loading theory "Draft.Templates" (required by "Draft.Boolean_Expression_CheckersMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Boolean_Expression_CheckersMoreTemplates")
### theory "HOL-Library.Mapping"
### 0.950s elapsed time, 2.226s cpu time, 0.257s GC time
Loading theory "Draft.Boolean_Expression_Checkers" (required by "Draft.Boolean_Expression_CheckersMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.552s elapsed time, 1.189s cpu time, 0.141s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif :: "('a, bool) mapping => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale reduced_bdt_checkers
  fixes ifex_of :: "'b => 'a ifex"
    and val :: "'b => ('a => bool) => bool"
  assumes "reduced_bdt_checkers ifex_of val"
consts
  val_bool_expr :: "'a bool_expr => ('a => bool) => bool"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Boolean_Expression_Checkers"
### 2.556s elapsed time, 3.911s cpu time, 1.134s GC time
Loading theory "Draft.Boolean_Expression_CheckersMoreTemplates"
val templateLemmas =
   [("Boolean_Expression_Checkers.agree_Nil", "agree ?s Mapping.empty",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Boolean_Expression_Checkers.reduced_ifex", "reduced (ifex_of ?b) {}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Boolean_Expression_Checkers.reduced_reduce",
     "reduced (reduce ?env ?t) (Mapping.keys ?env)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("Boolean_Expression_Checkers.reduced_normif",
     "reduced (normif ?env ?t ?t1.0 ?t2.0) (Mapping.keys ?env)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 3))
         )),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_sat_test ?b = (EX s. val_bool_expr ?b s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_taut_test ?b = (ALL s. val_bool_expr ?b s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.taut_test_ifex",
     "taut_test_ifex ?t = (ALL s. val_ifex ?t s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.val_ifex",
     "val_ifex (ifex_of ?b) ?s = val_bool_expr ?b ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_equiv_test ?b1.0 ?b2.0 =
      (ALL s. val_bool_expr ?b1.0 s = val_bool_expr ?b2.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Boolean_Expression_Checkers.bool_tests",
     "bool_impl_test ?b1.0 ?b2.0 =
      (ALL s. val_bool_expr ?b1.0 s --> val_bool_expr ?b2.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Boolean_Expression_Checkers.taut_test_rec",
     "taut_test_rec ?t ?env = (ALL s. agree s ?env --> val_ifex ?t s)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Boolean_Expression_Checkers.val_mkIF",
     "val_ifex (mkIF ?x ?t1.0 ?t2.0) ?s = val_ifex (IF ?x ?t1.0 ?t2.0) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Boolean_Expression_Checkers.reduced_antimono",
     "[| ?X <= ?Y; reduced ?t ?Y |] ==> reduced ?t ?X",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Boolean_Expression_Checkers.val_reduce",
     "agree ?s ?env ==> val_ifex (reduce ?env ?t) ?s = val_ifex ?t ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Boolean_Expression_Checkers.agreeDT",
     "[| agree ?s ?env; Mapping.lookup ?env ?x = Some True |] ==> ?s ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Boolean_Expression_Checkers.lookup_update_unfold",
     "Mapping.lookup (Mapping.update ?k ?v ?m) ?k' =
      (if ?k = ?k' then Some ?v else Mapping.lookup ?m ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Boolean_Expression_Checkers.agreeDF",
     "[| agree ?s ?env; Mapping.lookup ?env ?x = Some False |] ==> ~ ?s ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_negation
        (
           template_predicate
            (template_app (template_var 2, template_var 0))
           ))),
    ("Boolean_Expression_Checkers.val_normif",
     "agree ?s ?env ==>
      val_ifex (normif ?env ?t ?t1.0 ?t2.0) ?s =
      val_ifex (if val_ifex ?t ?s then ?t1.0 else ?t2.0) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 4)),
                 template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Boolean_Expression_Checkers.agree_Cons",
     "?x ~: Mapping.keys ?env ==>
      agree ?s (Mapping.update ?x ?b ?env) =
      ((if ?b then ?s ?x else ~ ?s ?x) & agree ?s ?env)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_var 1, template_var 3)),
               template_app
                (template_hole 7,
                 template_app (template_var 1, template_var 3)))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))))),
    ("Boolean_Expression_Checkers.reduced_mkIF",
     "[| ?x ~: ?X; reduced ?t1.0 (insert ?x ?X);
         reduced ?t2.0 (insert ?x ?X) |]
      ==> reduced (mkIF ?x ?t1.0 ?t2.0) ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.Boolean_Expression_CheckersMoreTemplates"
### 0.332s elapsed time, 0.516s cpu time, 0.062s GC time
val it = (): unit
