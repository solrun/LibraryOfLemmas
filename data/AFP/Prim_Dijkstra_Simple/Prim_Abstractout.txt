Loading theory "HOL-Library.Stream" (required by "Draft.Prim_AbstractTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Prim_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Prim_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Prim_AbstractTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.355s cpu time, 0.000s GC time
Loading theory "Draft.Common" (required by "Draft.Prim_AbstractTemplates" via "Draft.Prim_Abstract")
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.508s cpu time, 0.040s GC time
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.720s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Prim_AbstractTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "{}"
  Proving monotonicity ...
### theory "Draft.Common"
### 0.368s elapsed time, 1.139s cpu time, 0.124s GC time
Loading theory "Draft.Undirected_Graph" (required by "Draft.Prim_AbstractTemplates" via "Draft.Prim_Abstract")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.810s elapsed time, 2.587s cpu time, 0.274s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.699s elapsed time, 2.061s cpu time, 0.234s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Prim_AbstractTemplates")
### theory "Draft.Undirected_Graph"
### 0.676s elapsed time, 1.777s cpu time, 0.217s GC time
Loading theory "Draft.Prim_Abstract" (required by "Draft.Prim_AbstractTemplates")
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim_Invar1_loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and A :: "('v * 'v) set"
  assumes "Prim_Invar1_loc w g r A"
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim_Invar2_ctd_Presentation_Loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and Q :: "'v => enat"
    and \<pi> :: "'v => 'v option"
    and A :: "('v * 'v) set"
    and S :: "'v set"
    and rg :: "'v ugraph"
    and cE :: "('v * 'v) set"
  assumes "Prim_Invar2_ctd_Presentation_Loc w g r Q \<pi>"
  defines "A == Prim2.A Q \<pi>"
    and "S == Prim.S r A"
    and "rg == Prim.rg g r"
    and "cE == edges rg Int (- S) \<times> S"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.715s elapsed time, 1.710s cpu time, 0.686s GC time
locale Prim_Invar2_ctd_loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and Q :: "'v => enat"
    and \<pi> :: "'v => 'v option"
  assumes "Prim_Invar2_ctd_loc w g r Q \<pi>"
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
### theory "Draft.Prim_Abstract"
### 0.642s elapsed time, 1.376s cpu time, 0.619s GC time
Loading theory "Draft.Prim_AbstractTemplates"
val templateLemmas =
   [("Prim_Abstract.is_subset_MST_empty",
     "Undirected_Graph.connected ?g ==> is_subset_MST ?w ?g {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Prim_AbstractTemplates"
### 0.378s elapsed time, 0.505s cpu time, 0.052s GC time
val it = (): unit
