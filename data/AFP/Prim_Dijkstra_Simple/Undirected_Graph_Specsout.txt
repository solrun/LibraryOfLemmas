Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.109s elapsed time, 0.448s cpu time, 0.041s GC time
Loading theory "Draft.Common" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.Undirected_Graph_Specs" via "Draft.Undirected_Graph")
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.545s cpu time, 0.041s GC time
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.731s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.Common"
### 0.347s elapsed time, 1.077s cpu time, 0.078s GC time
Loading theory "Draft.Undirected_Graph" (required by "Draft.Undirected_Graph_SpecsTemplates" via "Draft.Undirected_Graph_Specs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.827s elapsed time, 2.647s cpu time, 0.257s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.737s elapsed time, 2.146s cpu time, 0.216s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Undirected_Graph_SpecsTemplates")
### theory "Draft.Undirected_Graph"
### 0.736s elapsed time, 1.899s cpu time, 0.201s GC time
Loading theory "Draft.Undirected_Graph_Specs" (required by "Draft.Undirected_Graph_SpecsTemplates")
locale adt_wgraph
  fixes \<alpha>w :: "'g => 'v set => nat"
    and \<alpha>g :: "'g => 'v ugraph"
    and invar :: "'g => bool"
    and adj :: "'g => 'v => ('v * nat) list"
    and empty :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
  assumes "adt_wgraph \<alpha>w \<alpha>g invar adj empty add_edge"
locale adt_wgraph
  fixes \<alpha>w :: "'g => 'v set => nat"
    and \<alpha>g :: "'g => 'v ugraph"
    and invar :: "'g => bool"
    and adj :: "'g => 'v => ('v * nat) list"
    and empty :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
  assumes "adt_wgraph \<alpha>w \<alpha>g invar adj empty add_edge"
### theory "Draft.Undirected_Graph_Specs"
### 0.319s elapsed time, 0.850s cpu time, 0.537s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.739s elapsed time, 1.585s cpu time, 0.636s GC time
Loading theory "Draft.Undirected_Graph_SpecsTemplates"
val templateLemmas =
   [("Undirected_Graph_Specs.graph_from_list_foldl",
     "graph_from_list ?l = fold ins_edge ?l graph_empty",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Undirected_Graph_Specs.nodes_of_graph_from_list",
     "nodes (graph_from_list ?l) = fst ` set ?l Un snd ` set ?l",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_app (template_hole 1, template_var 0))))),
    ("Undirected_Graph_Specs.graph_from_list_simps",
     "graph_from_list ((?u, ?v) # ?l) =
      ins_edge (?u, ?v) (graph_from_list ?l)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Undirected_Graph_Specs.valid_graph_repr_simps",
     "valid_graph_repr ((?u, ?v) # ?xs) =
      (?u ~= ?v & valid_graph_repr ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_app (template_hole 5, template_var 0))
           ))),
    ("Undirected_Graph_Specs.edges_of_graph_from_list",
     "valid_graph_repr ?l ==>
      edges (graph_from_list ?l) = set ?l Un (set ?l)^-1",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Undirected_Graph_Specs.weight_from_list_simps",
     "weight_from_list (((?u, ?v), ?d) # ?xs) = (weight_from_list ?xs)
      ({?u, ?v} := ?d)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_var 1))),
    ("Undirected_Graph_Specs.weight_from_list_correct",
     "[| valid_weight_repr ?l; ((?u, ?v), ?d) : set ?l |]
      ==> weight_from_list ?l {?u, ?v} = ?d",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Undirected_Graph_Specs.valid_weight_repr_simps",
     "valid_weight_repr (((?u, ?v), ?w) # ?xs) =
      (uedge (?u, ?v) ~: uedge ` fst ` set ?xs & valid_weight_repr ?xs)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, template_hole 4),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 0)))))),
         template_app (template_hole 11, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Undirected_Graph_SpecsTemplates"
### 0.336s elapsed time, 0.437s cpu time, 0.000s GC time
val it = (): unit
