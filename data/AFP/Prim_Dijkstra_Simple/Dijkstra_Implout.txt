Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Stream" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.090s elapsed time, 0.383s cpu time, 0.000s GC time
Loading theory "Draft.Common" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.Dijkstra_Impl" via "Draft.Dijkstra_Abstract" via "Draft.Directed_Graph")
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.603s cpu time, 0.039s GC time
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 0.901s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.Common"
### 0.375s elapsed time, 1.174s cpu time, 0.109s GC time
Loading theory "Draft.Directed_Graph" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.Dijkstra_Impl" via "Draft.Dijkstra_Abstract")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale WGraph
  fixes w :: "'v * 'v => enat"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Directed_Graph"
### 0.158s elapsed time, 0.482s cpu time, 0.048s GC time
Loading theory "Draft.Dijkstra_Abstract" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.Dijkstra_Impl")
Loading theory "Draft.Directed_Graph_Specs" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.Dijkstra_Impl" via "Draft.Directed_Graph_Impl")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale adt_wgraph
  fixes \<alpha> :: "'g => 'v * 'v => enat"
    and invar :: "'g => bool"
    and succ :: "'g => 'v => (nat * 'v) list"
    and empty_graph :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
  assumes "adt_wgraph \<alpha> invar succ empty_graph add_edge"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale Dijkstra
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
locale adt_finite_wgraph
  fixes invar :: "'g => bool"
    and succ :: "'g => 'v => (nat * 'v) list"
    and empty_graph :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
    and \<alpha> :: "'g => 'v * 'v => enat"
  assumes "adt_finite_wgraph invar succ empty_graph add_edge \<alpha>"
consts
  flat :: "'a list stream => 'a stream"
locale wgraph_from_list_algo
  fixes \<alpha> :: "'a => 'b * 'b => enat"
    and invar :: "'a => bool"
    and succ :: "'a => 'b => (nat * 'b) list"
    and empty_graph :: "'a"
    and add_edge :: "'b * 'b => nat => 'a => 'a"
  assumes "wgraph_from_list_algo \<alpha> invar succ empty_graph add_edge"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale Dijkstra_Invar
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
    and D :: "'v => enat"
    and S :: "'v set"
  assumes "Dijkstra_Invar w s D S"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Directed_Graph_Specs"
### 0.216s elapsed time, 0.855s cpu time, 0.071s GC time
Loading theory "Draft.Directed_Graph_Impl" (required by "Draft.Dijkstra_ImplTemplates" via "Draft.Dijkstra_Impl")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.874s elapsed time, 3.018s cpu time, 0.229s GC time
Found termination order: "{}"
locale Dijkstra
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
### theory "HOL-Library.BigO"
### 0.729s elapsed time, 2.467s cpu time, 0.242s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dijkstra_ImplTemplates")
### theory "Draft.Dijkstra_Abstract"
### 0.405s elapsed time, 1.476s cpu time, 0.124s GC time
locale wgraph_by_map
  fixes M_empty :: "'m"
    and M_update :: "'v => (nat * 'v) list => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => (nat * 'v) list option"
    and M_invar :: "'m => bool"
  assumes "wgraph_by_map M_empty M_update M_delete M_lookup M_invar"
### theory "Draft.Directed_Graph_Impl"
### 0.270s elapsed time, 0.790s cpu time, 0.053s GC time
Loading theory "Draft.Dijkstra_Impl" (required by "Draft.Dijkstra_ImplTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.636s elapsed time, 1.486s cpu time, 0.433s GC time
locale Dijkstra_Impl_Adts
  fixes G_\<alpha> :: "'g => 'v * 'v => enat"
    and G_invar :: "'g => bool"
    and G_succ :: "'g => 'v => (nat * 'v) list"
    and G_empty :: "'g"
    and G_add :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'m"
    and M_update :: "'v => nat => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => nat option"
    and M_invar :: "'m => bool"
    and Q_empty :: "'q"
    and Q_update :: "'v => nat => 'q => 'q"
    and Q_delete :: "'v => 'q => 'q"
    and Q_invar :: "'q => bool"
    and Q_lookup :: "'q => 'v => nat option"
    and Q_is_empty :: "'q => bool"
    and Q_getmin :: "'q => 'v * nat"
  assumes
    "Dijkstra_Impl_Adts G_\<alpha> G_invar G_succ G_empty G_add M_empty
      M_update M_delete M_lookup M_invar Q_empty Q_update Q_delete Q_invar
      Q_lookup Q_is_empty Q_getmin"
locale PrioMap
  fixes empty :: "'m"
    and update :: "'a => 'b => 'm => 'm"
    and delete :: "'a => 'm => 'm"
    and invar :: "'m => bool"
    and lookup :: "'m => 'a => 'b option"
    and is_empty :: "'m => bool"
    and getmin :: "'m => 'a * 'b"
  assumes "PrioMap empty update delete invar lookup is_empty getmin"
locale Dijkstra_Impl_Defs
  fixes G_invar :: "'g => bool"
    and G_succ :: "'g => 'v => (nat * 'v) list"
    and G_empty :: "'g"
    and G_add :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'a"
    and M_update :: "'v => nat => 'a => 'a"
    and M_delete :: "'v => 'a => 'a"
    and M_lookup :: "'a => 'v => nat option"
    and M_invar :: "'a => bool"
    and Q_empty :: "'b"
    and Q_update :: "'v => nat => 'b => 'b"
    and Q_delete :: "'v => 'b => 'b"
    and Q_invar :: "'b => bool"
    and Q_lookup :: "'b => 'v => nat option"
    and Q_is_empty :: "'b => bool"
    and Q_getmin :: "'b => 'v * nat"
    and G_\<alpha> :: "'g => 'v * 'v => enat"
    and g :: "'g"
    and s :: "'v"
  assumes
    "Dijkstra_Impl_Defs G_invar G_succ G_empty G_add M_empty M_update
      M_delete M_lookup M_invar Q_empty Q_update Q_delete Q_invar Q_lookup
      Q_is_empty Q_getmin G_\<alpha>"
locale Dijkstra_Impl
  fixes G_invar :: "'g => bool"
    and G_succ :: "'g => 'v => (nat * 'v) list"
    and G_empty :: "'g"
    and G_add :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'a"
    and M_update :: "'v => nat => 'a => 'a"
    and M_delete :: "'v => 'a => 'a"
    and M_lookup :: "'a => 'v => nat option"
    and M_invar :: "'a => bool"
    and Q_empty :: "'b"
    and Q_update :: "'v => nat => 'b => 'b"
    and Q_delete :: "'v => 'b => 'b"
    and Q_invar :: "'b => bool"
    and Q_lookup :: "'b => 'v => nat option"
    and Q_is_empty :: "'b => bool"
    and Q_getmin :: "'b => 'v * nat"
    and g :: "'g"
    and s :: "'v"
    and G_\<alpha> :: "'g => 'v * 'v => enat"
  assumes
    "Dijkstra_Impl G_invar G_succ G_empty G_add M_empty M_update M_delete
      M_lookup M_invar Q_empty Q_update Q_delete Q_invar Q_lookup Q_is_empty
      Q_getmin g G_\<alpha>"
"Q_getmin"
  :: "'b => 'v * nat"
### theory "Draft.Dijkstra_Impl"
### 1.898s elapsed time, 2.673s cpu time, 0.564s GC time
*** Failed to load theory "Draft.Dijkstra_ImplTemplates" (unresolved "Draft.Dijkstra_Impl")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "20")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 279 of "$AFP/Prim_Dijkstra_Simple/Dijkstra_Impl.thy")
Exception- TOPLEVEL_ERROR raised
