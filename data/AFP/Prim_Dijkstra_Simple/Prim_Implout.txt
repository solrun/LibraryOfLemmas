Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Prim_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Prim_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Prim_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Prim_ImplTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.410s cpu time, 0.000s GC time
Loading theory "Draft.Common" (required by "Draft.Prim_ImplTemplates" via "Draft.Prim_Impl" via "Draft.Prim_Abstract")
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.616s cpu time, 0.037s GC time
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.839s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Prim_ImplTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "{}"
  Proving monotonicity ...
### theory "Draft.Common"
### 0.358s elapsed time, 1.122s cpu time, 0.106s GC time
Loading theory "Draft.Undirected_Graph" (required by "Draft.Prim_ImplTemplates" via "Draft.Prim_Impl" via "Draft.Prim_Abstract")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.816s elapsed time, 2.628s cpu time, 0.233s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.710s elapsed time, 2.051s cpu time, 0.196s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Prim_ImplTemplates")
### theory "Draft.Undirected_Graph"
### 0.710s elapsed time, 1.847s cpu time, 0.189s GC time
Loading theory "Draft.Prim_Abstract" (required by "Draft.Prim_ImplTemplates" via "Draft.Prim_Impl")
Loading theory "Draft.Undirected_Graph_Specs" (required by "Draft.Prim_ImplTemplates" via "Draft.Prim_Impl" via "Draft.Undirected_Graph_Impl")
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale adt_wgraph
  fixes \<alpha>w :: "'g => 'v set => nat"
    and \<alpha>g :: "'g => 'v ugraph"
    and invar :: "'g => bool"
    and adj :: "'g => 'v => ('v * nat) list"
    and empty :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
  assumes "adt_wgraph \<alpha>w \<alpha>g invar adj empty add_edge"
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim_Invar1_loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and A :: "('v * 'v) set"
  assumes "Prim_Invar1_loc w g r A"
locale adt_wgraph
  fixes \<alpha>w :: "'g => 'v set => nat"
    and \<alpha>g :: "'g => 'v ugraph"
    and invar :: "'g => bool"
    and adj :: "'g => 'v => ('v * nat) list"
    and empty :: "'g"
    and add_edge :: "'v * 'v => nat => 'g => 'g"
  assumes "adt_wgraph \<alpha>w \<alpha>g invar adj empty add_edge"
locale Prim
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
### theory "Draft.Undirected_Graph_Specs"
### 0.330s elapsed time, 1.027s cpu time, 0.522s GC time
Loading theory "Draft.Undirected_Graph_Impl" (required by "Draft.Prim_ImplTemplates" via "Draft.Prim_Impl")
locale Prim_Invar2_ctd_Presentation_Loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and Q :: "'v => enat"
    and \<pi> :: "'v => 'v option"
    and A :: "('v * 'v) set"
    and S :: "'v set"
    and rg :: "'v ugraph"
    and cE :: "('v * 'v) set"
  assumes "Prim_Invar2_ctd_Presentation_Loc w g r Q \<pi>"
  defines "A == Prim2.A Q \<pi>"
    and "S == Prim.S r A"
    and "rg == Prim.rg g r"
    and "cE == edges rg Int (- S) \<times> S"
locale Prim_Invar2_ctd_loc
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
    and Q :: "'v => enat"
    and \<pi> :: "'v => 'v option"
  assumes "Prim_Invar2_ctd_loc w g r Q \<pi>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.766s elapsed time, 2.138s cpu time, 0.584s GC time
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
locale Prim2
  fixes w :: "'v set => nat"
    and g :: "'v ugraph"
    and r :: "'v"
### theory "Draft.Prim_Abstract"
### 0.684s elapsed time, 1.973s cpu time, 0.586s GC time
locale wgraph_by_map
  fixes M_empty :: "'m"
    and M_update :: "'v => ('v * nat) list => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => ('v * nat) list option"
    and M_invar :: "'m => bool"
  assumes "wgraph_by_map M_empty M_update M_delete M_lookup M_invar"
### theory "Draft.Undirected_Graph_Impl"
### 0.491s elapsed time, 1.086s cpu time, 0.064s GC time
Loading theory "Draft.Prim_Impl" (required by "Draft.Prim_ImplTemplates")
locale Prim_Impl_Adts
  fixes typG :: "'g itself"
    and typM :: "'m itself"
    and typQ :: "'q itself"
    and G_\<alpha>w :: "'g => 'v set => nat"
    and G_\<alpha>g :: "'g => 'v ugraph"
    and G_invar :: "'g => bool"
    and G_adj :: "'g => 'v => ('v * nat) list"
    and G_empty :: "'g"
    and G_add_edge :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'m"
    and M_update :: "'v => 'v => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => 'v option"
    and M_invar :: "'m => bool"
    and Q_empty :: "'q"
    and Q_update :: "'v => nat => 'q => 'q"
    and Q_delete :: "'v => 'q => 'q"
    and Q_invar :: "'q => bool"
    and Q_lookup :: "'q => 'v => nat option"
    and Q_is_empty :: "'q => bool"
    and Q_getmin :: "'q => 'v * nat"
  assumes
    "Prim_Impl_Adts G_\<alpha>w G_\<alpha>g G_invar G_adj G_empty G_add_edge
      M_empty M_update M_delete M_lookup M_invar Q_empty Q_update Q_delete
      Q_invar Q_lookup Q_is_empty Q_getmin"
locale Prim_Impl_Defs
  fixes G_invar :: "'g => bool"
    and G_adj :: "'g => 'v => ('v * nat) list"
    and G_empty :: "'g"
    and G_add_edge :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'m"
    and M_update :: "'v => 'v => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => 'v option"
    and M_invar :: "'m => bool"
    and Q_empty :: "'q"
    and Q_update :: "'v => nat => 'q => 'q"
    and Q_delete :: "'v => 'q => 'q"
    and Q_invar :: "'q => bool"
    and Q_lookup :: "'q => 'v => nat option"
    and Q_is_empty :: "'q => bool"
    and Q_getmin :: "'q => 'v * nat"
    and typG :: "'g itself"
    and typM :: "'m itself"
    and typQ :: "'q itself"
    and G_\<alpha>w :: "'g => 'v set => nat"
    and G_\<alpha>g :: "'g => 'v ugraph"
    and g :: "'g"
    and r :: "'v"
  assumes
    "Prim_Impl_Defs G_invar G_adj G_empty G_add_edge M_empty M_update
      M_delete M_lookup M_invar Q_empty Q_update Q_delete Q_invar Q_lookup
      Q_is_empty Q_getmin G_\<alpha>w G_\<alpha>g"
"M_lookup"
  :: "'m => 'v => 'v option"
locale Prim_Impl
  fixes G_invar :: "'g => bool"
    and G_adj :: "'g => 'v => ('v * nat) list"
    and G_empty :: "'g"
    and G_add_edge :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'m"
    and M_update :: "'v => 'v => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => 'v option"
    and M_invar :: "'m => bool"
    and Q_empty :: "'q"
    and Q_update :: "'v => nat => 'q => 'q"
    and Q_delete :: "'v => 'q => 'q"
    and Q_invar :: "'q => bool"
    and Q_lookup :: "'q => 'v => nat option"
    and Q_is_empty :: "'q => bool"
    and Q_getmin :: "'q => 'v * nat"
    and g :: "'g"
    and r :: "'v"
    and typG :: "'g itself"
    and typM :: "'m itself"
    and typQ :: "'q itself"
    and G_\<alpha>w :: "'g => 'v set => nat"
    and G_\<alpha>g :: "'g => 'v ugraph"
  assumes
    "Prim_Impl G_invar G_adj G_empty G_add_edge M_empty M_update M_delete
      M_lookup M_invar Q_empty Q_update Q_delete Q_invar Q_lookup Q_is_empty
      Q_getmin g G_\<alpha>w G_\<alpha>g"
locale Prim_Impl
  fixes G_invar :: "'g => bool"
    and G_adj :: "'g => 'v => ('v * nat) list"
    and G_empty :: "'g"
    and G_add_edge :: "'v * 'v => nat => 'g => 'g"
    and M_empty :: "'m"
    and M_update :: "'v => 'v => 'm => 'm"
    and M_delete :: "'v => 'm => 'm"
    and M_lookup :: "'m => 'v => 'v option"
    and M_invar :: "'m => bool"
    and Q_empty :: "'q"
    and Q_update :: "'v => nat => 'q => 'q"
    and Q_delete :: "'v => 'q => 'q"
    and Q_invar :: "'q => bool"
    and Q_lookup :: "'q => 'v => nat option"
    and Q_is_empty :: "'q => bool"
    and Q_getmin :: "'q => 'v * nat"
    and g :: "'g"
    and r :: "'v"
    and typG :: "'g itself"
    and typM :: "'m itself"
    and typQ :: "'q itself"
    and G_\<alpha>w :: "'g => 'v set => nat"
    and G_\<alpha>g :: "'g => 'v ugraph"
  assumes
    "Prim_Impl G_invar G_adj G_empty G_add_edge M_empty M_update M_delete
      M_lookup M_invar Q_empty Q_update Q_delete Q_invar Q_lookup Q_is_empty
      Q_getmin g G_\<alpha>w G_\<alpha>g"
### theory "Draft.Prim_Impl"
### 1.608s elapsed time, 1.706s cpu time, 0.136s GC time
*** Failed to load theory "Draft.Prim_ImplTemplates" (unresolved "Draft.Prim_Impl")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "20")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 451 of "$AFP/Prim_Dijkstra_Simple/Prim_Impl.thy")
Exception- TOPLEVEL_ERROR raised
