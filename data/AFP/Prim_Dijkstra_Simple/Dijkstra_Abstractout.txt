Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.094s elapsed time, 0.399s cpu time, 0.000s GC time
Loading theory "Draft.Common" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.Dijkstra_Abstract" via "Draft.Directed_Graph")
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.518s cpu time, 0.051s GC time
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.736s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.Common"
### 0.369s elapsed time, 1.133s cpu time, 0.084s GC time
Loading theory "Draft.Directed_Graph" (required by "Draft.Dijkstra_AbstractTemplates" via "Draft.Dijkstra_Abstract")
consts
  snth :: "'a stream => nat => 'a"
locale WGraph
  fixes w :: "'v * 'v => enat"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Directed_Graph"
### 0.169s elapsed time, 0.516s cpu time, 0.063s GC time
Loading theory "Draft.Dijkstra_Abstract" (required by "Draft.Dijkstra_AbstractTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale Dijkstra
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale Dijkstra_Invar
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
    and D :: "'v => enat"
    and S :: "'v set"
  assumes "Dijkstra_Invar w s D S"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.867s elapsed time, 2.757s cpu time, 0.290s GC time
Found termination order: "{}"
locale Dijkstra
  fixes w :: "'v * 'v => enat"
    and s :: "'v"
### theory "HOL-Library.BigO"
### 0.731s elapsed time, 2.179s cpu time, 0.239s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dijkstra_AbstractTemplates")
### theory "Draft.Dijkstra_Abstract"
### 0.339s elapsed time, 0.927s cpu time, 0.092s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.497s elapsed time, 0.600s cpu time, 0.067s GC time
Loading theory "Draft.Dijkstra_AbstractTemplates"
val templateLemmas =
   [("Dijkstra_Abstract.enat_of_option_simps",
     "(\<infinity> = Dijkstra_Abstract.enat_of_option ?x) = (?x = None)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Dijkstra_Abstract.enat_of_option_simps",
     "(Dijkstra_Abstract.enat_of_option ?x = \<infinity>) = (?x = None)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Dijkstra_Abstract.enat_of_option_inj",
     "(Dijkstra_Abstract.enat_of_option ?x =
       Dijkstra_Abstract.enat_of_option ?y) =
      (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Dijkstra_Abstract.enat_of_option_simps",
     "(Dijkstra_Abstract.enat_of_option ?x = enat ?n) = (?x = Some ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Dijkstra_Abstract.enat_of_option_simps",
     "(enat ?n = Dijkstra_Abstract.enat_of_option ?x) = (?x = Some ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Dijkstra_Abstract.enat_of_option_le_conv",
     "(Dijkstra_Abstract.enat_of_option ?m
       <= Dijkstra_Abstract.enat_of_option ?n) =
      (case (?m, ?n) of (None, None) => True | (None, Some aa) => False
       | (Some aa, None) => True | (Some aa, Some b) => aa <= b)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Dijkstra_AbstractTemplates"
### 0.465s elapsed time, 0.900s cpu time, 0.486s GC time
val it = (): unit
