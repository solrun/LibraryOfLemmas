Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.BNF_Axiomatization" (required by "Draft.ComposeMoreTemplates" via "Draft.Compose")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature BNF_AXIOMATIZATION =
  sig
    val bnf_axiomatization:
       (string -> bool) ->
         (binding option * (typ * sort)) list ->
           binding ->
             mixfix ->
               binding ->
                 binding ->
                   binding ->
                     typ list -> local_theory -> BNF_Def.bnf * local_theory
  end
structure BNF_Axiomatization: BNF_AXIOMATIZATION
### theory "HOL-Library.BNF_Axiomatization"
### 0.111s elapsed time, 0.468s cpu time, 0.032s GC time
Loading theory "Draft.Compose" (required by "Draft.ComposeMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.538s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.872s cpu time, 0.032s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.361s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.Compose"
### 0.826s elapsed time, 3.259s cpu time, 0.327s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.028s elapsed time, 3.755s cpu time, 0.948s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.077s elapsed time, 3.650s cpu time, 0.895s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.915s elapsed time, 5.216s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.ComposeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.074s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ComposeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.506s cpu time, 0.067s GC time
Loading theory "Draft.ComposeMoreTemplates"
val templateLemmas =
   [("Compose.Hrel_unfold",
     "Hrel ?R1.0 ?R2.0 =
      Grel (F1rel ?R1.0 ?R2.0) (F2rel ?R1.0 ?R2.0) (F3rel ?R1.0 ?R2.0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Compose.Grel_cong",
     "[| ?R1.0 = ?S1.0; ?R2.0 = ?S2.0; ?R3.0 = ?S3.0 |]
      ==> Grel ?R1.0 ?R2.0 ?R3.0 = Grel ?S1.0 ?S2.0 ?S3.0",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Compose.Hwit1", "?x : Hset1 (Hwit1 ?b ?c) ==> ?x = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Compose.Hwit21", "?x : Hset1 (Hwit21 ?b ?c) ==> ?x = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Compose.Hwit22", "?x : Hset1 (Hwit22 ?b ?c) ==> ?x = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Compose.Hwit1", "?x : Hset2 (Hwit1 ?b ?c) ==> ?x = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Compose.Hwit21", "?x : Hset2 (Hwit21 ?b ?c) ==> ?x = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Compose.Hwit22", "?x : Hset2 (Hwit22 ?b ?c) ==> ?x = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, t_empty),
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app
                             (template_hole 10, template_hole 8),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 7),
                              template_hole 6)))))),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_hole 3),
                    template_hole 2)),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Compose.Hset1_bd", "|Hset1 ?x| \<le>o Hbd",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 23,
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 20,
                         template_app
                          (template_app (template_hole 19, t_empty),
                           template_app
                            (template_hole 17,
                             template_app
                              (template_app
                                (template_hole 16, template_hole 15),
                               template_app
                                (template_app
                                  (template_hole 16, template_hole 14),
                                 template_app
                                  (template_app
                                    (template_hole 16, template_hole 13),
                                   template_hole 12)))))),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11, template_hole 10),
                           template_hole 9),
                         template_hole 8)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_hole 2))),
                 template_hole 1))),
           template_hole 0)
         )),
    ("Compose.Hset2_bd", "|Hset2 ?x| \<le>o Hbd",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 23,
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 20,
                         template_app
                          (template_app (template_hole 19, t_empty),
                           template_app
                            (template_hole 17,
                             template_app
                              (template_app
                                (template_hole 16, template_hole 15),
                               template_app
                                (template_app
                                  (template_hole 16, template_hole 14),
                                 template_app
                                  (template_app
                                    (template_hole 16, template_hole 13),
                                   template_hole 12)))))),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11, template_hole 10),
                           template_hole 9),
                         template_hole 8)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_hole 2))),
                 template_hole 1))),
           template_hole 0)
         )),
    ("Compose.Hmap_comp",
     "Hmap (?f1.0 o ?g1.0) (?f2.0 o ?g2.0) =
      Hmap ?f1.0 ?f2.0 o Hmap ?g1.0 ?g2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 11, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 12, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 11, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Compose.Hset1_natural",
     "Hset1 o Hmap ?f1.0 ?f2.0 = (`) ?f1.0 o Hset1",
     template_equation
      (template_app
        (template_app
          (template_hole 32,
           template_app
            (template_app
              (template_hole 31,
               template_app
                (template_app (template_hole 30, t_empty),
                 template_app
                  (template_hole 28,
                   template_app
                    (template_app (template_hole 27, template_hole 26),
                     template_app
                      (template_app (template_hole 27, template_hole 25),
                       template_app
                        (template_app (template_hole 27, template_hole 24),
                         template_hole 23)))))),
             template_app
              (template_app
                (template_app (template_hole 22, template_hole 21),
                 template_hole 20),
               template_hole 19))),
         template_app
          (template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 17, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 16, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 15, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 1)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty),
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 8, template_hole 6),
                     template_app
                      (template_app (template_hole 8, template_hole 5),
                       template_hole 4)))))),
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 0))))),
    ("Compose.Hset2_natural",
     "Hset2 o Hmap ?f1.0 ?f2.0 = (`) ?f2.0 o Hset2",
     template_equation
      (template_app
        (template_app
          (template_hole 32,
           template_app
            (template_app
              (template_hole 31,
               template_app
                (template_app (template_hole 30, t_empty),
                 template_app
                  (template_hole 28,
                   template_app
                    (template_app (template_hole 27, template_hole 26),
                     template_app
                      (template_app (template_hole 27, template_hole 25),
                       template_app
                        (template_app (template_hole 27, template_hole 24),
                         template_hole 23)))))),
             template_app
              (template_app
                (template_app (template_hole 22, template_hole 21),
                 template_hole 20),
               template_hole 19))),
         template_app
          (template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 17, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 16, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 15, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty),
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 8, template_hole 6),
                     template_app
                      (template_app (template_hole 8, template_hole 5),
                       template_hole 4)))))),
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 0))))),
    ("Compose.Hmap_cong",
     "[| !!z. z : Hset1 ?x ==> ?f1.0 z = ?g1.0 z;
         !!z. z : Hset2 ?x ==> ?f2.0 z = ?g2.0 z |]
      ==> Hmap ?f1.0 ?f2.0 ?x = Hmap ?g1.0 ?g2.0 ?x",
     template_implication
      ([template_predicate (template_app (template_hole 37, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 4)))),
    ("Compose.Hin_alt",
     "Hin ?A1.0 ?A2.0 =
      Gin (F1in ?A1.0 ?A2.0) (F2in ?A1.0 ?A2.0) (F3in ?A1.0 ?A2.0)",
     template_equation
      (template_app (template_hole 38, t_empty),
       template_app (template_hole 38, t_empty)))]:
   (string * thm * template) list
### theory "Draft.ComposeMoreTemplates"
### 0.300s elapsed time, 0.401s cpu time, 0.000s GC time
val it = (): unit
