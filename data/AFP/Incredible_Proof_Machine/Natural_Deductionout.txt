Loading theory "Draft.Entailment" (required by "Draft.Natural_DeductionTemplates" via "Draft.Natural_Deduction")
Loading theory "Draft.Indexed_FSet" (required by "Draft.Natural_DeductionTemplates" via "Draft.Natural_Deduction" via "Draft.Abstract_Rules" via "Draft.Abstract_Formula")
Loading theory "Draft.Templates" (required by "Draft.Natural_DeductionTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "indexed_fmember"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
  Proving monotonicity ...
### theory "Draft.Templates"
### 0.080s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Natural_DeductionTemplates")
Found termination order: "{}"
### theory "Draft.Entailment"
### 0.092s elapsed time, 0.313s cpu time, 0.000s GC time
### theory "Draft.Indexed_FSet"
### 0.151s elapsed time, 0.438s cpu time, 0.032s GC time
Loading theory "Draft.Abstract_Formula" (required by "Draft.Natural_DeductionTemplates" via "Draft.Natural_Deduction" via "Draft.Abstract_Rules")
locale Abstract_Formulas
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
  assumes
    "Abstract_Formulas freshenLC renameLCs lconsts closed subst
      subst_lconsts subst_renameLCs anyP"
### theory "Draft.Abstract_Formula"
### 0.353s elapsed time, 0.705s cpu time, 0.000s GC time
Loading theory "Draft.Abstract_Rules" (required by "Draft.Natural_DeductionTemplates" via "Draft.Natural_Deduction")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.616s elapsed time, 1.277s cpu time, 0.107s GC time
locale Abstract_Rules
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and antecedent :: "'rule => ('form, 'var) antecedent list"
    and consequent :: "'rule => 'form list"
    and rules :: "'rule stream"
  assumes
    "Abstract_Rules freshenLC renameLCs lconsts closed subst subst_lconsts
      subst_renameLCs anyP antecedent consequent rules"
locale Abstract_Task
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and antecedent :: "'rule => ('form, 'var) antecedent list"
    and consequent :: "'rule => 'form list"
    and rules :: "'rule stream"
    and assumptions :: "'form list"
    and conclusions :: "'form list"
  assumes
    "Abstract_Task freshenLC renameLCs lconsts closed subst subst_lconsts
      subst_renameLCs anyP antecedent consequent rules assumptions
      conclusions"
### theory "Draft.Abstract_Rules"
### 0.604s elapsed time, 0.865s cpu time, 0.137s GC time
Loading theory "Draft.Natural_Deduction" (required by "Draft.Natural_DeductionTemplates")
### theory "Draft.Natural_Deduction"
### 0.384s elapsed time, 0.390s cpu time, 0.000s GC time
*** Failed to load theory "Draft.Natural_DeductionTemplates" (unresolved "Draft.Natural_Deduction")
*** Unknown ancestor theory "Incredible_Proof_Machine.Abstract_Formula" (line 11 of "$AFP/Incredible_Proof_Machine/Natural_Deduction.thy")
*** At command "text" (line 8 of "$AFP/Incredible_Proof_Machine/Natural_Deduction.thy")
Exception- TOPLEVEL_ERROR raised
