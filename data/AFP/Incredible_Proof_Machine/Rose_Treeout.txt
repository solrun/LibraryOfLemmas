Loading theory "Draft.Rose_Tree" (required by "Draft.Rose_TreeTemplates")
Loading theory "Draft.Templates" (required by "Draft.Rose_TreeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.168s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rose_TreeTemplates")
Proofs for inductive predicate(s) "it_pathsP"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Rose_Tree"
### 0.454s elapsed time, 0.940s cpu time, 0.035s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 0.979s cpu time, 0.094s GC time
Loading theory "Draft.Rose_TreeTemplates"
val templateLemmas =
   [("Rose_Tree.finite_it_paths", "finite (it_paths ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Rose_Tree.it_paths_intros", "[] : it_paths ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Rose_Tree.it_paths_eq", "it_pathsP ?t = (%x. x : it_paths ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("Rose_Tree.it_paths_RNode_Nil", "it_paths (RNode ?r []) = {[]}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Rose_Tree.it_paths_butlast",
     "?is : it_paths ?t ==> butlast ?is : it_paths ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Rose_Tree.it_paths_prefix",
     "[| ?is : it_paths ?t; prefix ?is' ?is |] ==> ?is' : it_paths ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Rose_Tree.it_paths_strict_prefix",
     "[| ?is : it_paths ?t; strict_prefix ?is' ?is |]
      ==> ?is' : it_paths ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Rose_Tree.it_paths_Union",
     "it_paths ?t
      <= insert []
          (UN (i, t):set (enumerate 0 (children ?t)). (#) i ` it_paths t)",
     template_inequation
      (less_equals, template_app (template_hole 11, template_var 0),
       template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0)))))))),
    ("Rose_Tree.it_path_SnocI",
     "[| ?is : it_paths ?t; ?i < length (children (tree_at ?t ?is)) |]
      ==> ?is @ [?i] : it_paths ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app (template_hole 7, template_var 1))
           ))),
    ("Rose_Tree.it_pathP_ConsE",
     "[| it_pathsP ?t (?i # ?is);
         [| ?i < length (children ?t); it_pathsP (children ?t ! ?i) ?is |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_than, template_var 2,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 1, template_var 3)),
                       template_var 2)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Rose_Tree.it_paths_SnocE",
     "[| ?is @ [?i] : it_paths ?t;
         ?is : it_paths ?t & ?i < length (children (tree_at ?t ?is)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_hole 6))),
              template_app (template_hole 5, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app (template_hole 5, template_var 1))),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 3)))))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rose_Tree.it_paths_intros",
     "[| ?i < length (children ?t); children ?t ! ?i = ?t';
         ?is : it_paths ?t' |]
      ==> ?i # ?is : it_paths ?t",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2))),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 2)),
            template_var 3),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Rose_Tree.it_paths_ConsE",
     "[| ?i # ?is : it_paths ?t;
         [| ?i < length (children ?t); ?is : it_paths (children ?t ! ?i) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_than, template_var 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 1, template_var 1)),
                       template_var 3)))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Rose_Tree.it_pathP_RNodeE",
     "[| it_pathsP (RNode ?r ?ants) ?is; ?is = [] ==> ?P;
         !!i is.
            [| ?is = i # is; i < length (children (RNode ?r ?ants));
               it_pathsP (children (RNode ?r ?ants) ! i) is |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 7)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Rose_Tree.it_paths_simps",
     "(?a2.0 : it_paths ?a1.0) =
      ((EX t. ?a1.0 = t & ?a2.0 = []) |
       (EX i t t' is.
           ?a1.0 = t &
           ?a2.0 = i # is &
           i < length (children t) &
           children t ! i = t' & is : it_paths t'))",
     template_equation
      (template_app
        (template_app (template_hole 14, template_var 1),
         template_app (template_hole 13, template_var 0)),
       template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app (template_hole 6, t_empty)))),
    ("Rose_Tree.it_paths_RNodeE",
     "[| ?is : it_paths (RNode ?r ?ants); ?is = [] ==> ?P;
         !!i is.
            [| ?is = i # is; i < length (children (RNode ?r ?ants));
               is : it_paths (children (RNode ?r ?ants) ! i) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_equation (template_var 3, template_hole 7)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Rose_Tree.it_paths_induct",
     "[| ?x2.0 : it_paths ?x1.0; !!t. ?P t [];
         !!i t t' is.
            [| i < length (children t); children t ! i = t';
               is : it_paths t'; ?P t' is |]
            ==> ?P t (i # is) |]
      ==> ?P ?x1.0 ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 1), template_var 2)
           ))),
    ("Rose_Tree.it_paths_cases",
     "[| ?a2.0 : it_paths ?a1.0; !!t. [| ?a1.0 = t; ?a2.0 = [] |] ==> ?P;
         !!i t t' is.
            [| ?a1.0 = t; ?a2.0 = i # is; i < length (children t);
               children t ! i = t'; is : it_paths t' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Rose_TreeTemplates"
### 0.324s elapsed time, 0.427s cpu time, 0.000s GC time
val it = (): unit
