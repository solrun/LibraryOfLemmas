Loading theory "Draft.Indexed_FSet" (required by "Draft.Indexed_FSetTemplates")
Loading theory "Draft.Templates" (required by "Draft.Indexed_FSetTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "indexed_fmember"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.183s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Indexed_FSetTemplates")
### theory "Draft.Indexed_FSet"
### 0.116s elapsed time, 0.260s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.547s cpu time, 0.028s GC time
Loading theory "Draft.Indexed_FSetTemplates"
val templateLemmas =
   [("Indexed_FSet.distinct_list_of_fset", "distinct (list_of_fset ?s)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Indexed_FSet.inj_on_fidx", "inj_on (fidx ?vertices) (fset ?vertices)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Indexed_FSet.fset_from_list_of_fset",
     "fset_from_list (list_of_fset ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Indexed_FSet.length_list_of_fset",
     "length (list_of_fset ?s) = size ?s",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Indexed_FSet.fset_fset_from_list",
     "fset (fset_from_list ?l) = set ?l",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Indexed_FSet.mem_fset_from_list",
     "(?x |\<in>| fset_from_list ?l) = (?x : set ?l)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Indexed_FSet.fimage_fset_from_list",
     "?f |`| fset_from_list ?l = fset_from_list (map ?f ?l)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Indexed_FSet.fset_simps",
     "fset_from_list (?x21.0 # ?x22.0) =
      finsert ?x21.0 (fset_from_list ?x22.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Indexed_FSet.indexed_fmember_is_fmember",
     "?x |\<in>|\<^bsub>?i\<^esub> ?s ==> ?x |\<in>| ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Indexed_FSet.size_fset_from_list",
     "distinct ?l ==> size (fset_from_list ?l) = length ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Indexed_FSet.fmember_is_indexed_fmember",
     "?x |\<in>| ?s ==> EX i. ?x |\<in>|\<^bsub>i\<^esub> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Indexed_FSet.fidx_eq",
     "?x |\<in>|\<^bsub>?i\<^esub> ?s ==> fidx ?s ?x = ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Indexed_FSet.mem_set_indexed_members'",
     "(?t : set (indexed_members ?s)) =
      (snd ?t |\<in>|\<^bsub>fst ?t\<^esub> ?s)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Indexed_FSet.mem_set_indexed_members",
     "((?i, ?x) : set (indexed_members ?s)) =
      (?x |\<in>|\<^bsub>?i\<^esub> ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Indexed_FSet.nth_list_of_fset_mem",
     "?i < size ?s ==> list_of_fset ?s ! ?i |\<in>| ?s",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)),
             template_var 0)
           ))),
    ("Indexed_FSet.fnth_indexed_fmember",
     "?i < size ?s ==> ?s |!| ?i |\<in>|\<^bsub>?i\<^esub> ?s",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 1),
             template_var 0)
           ))),
    ("Indexed_FSet.indexed_fmember_fnth",
     "(?x |\<in>|\<^bsub>?i\<^esub> ?s) = (?s |!| ?i = ?x & ?i < size ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Indexed_FSet.indexed_fmember_unique",
     "[| ?x |\<in>|\<^bsub>?i\<^esub> ?s; ?y |\<in>|\<^bsub>?j\<^esub> ?s |]
      ==> (?x = ?y) = (?i = ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_bimplication
        (template_equation (template_var 4, template_var 1),
         template_equation (template_var 3, template_var 0)))),
    ("Indexed_FSet.fidx_inj",
     "[| ?x |\<in>| ?s; ?y |\<in>| ?s |]
      ==> (fidx ?s ?x = fidx ?s ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_equation (template_var 2, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Indexed_FSetTemplates"
### 0.396s elapsed time, 0.528s cpu time, 0.060s GC time
val it = (): unit
