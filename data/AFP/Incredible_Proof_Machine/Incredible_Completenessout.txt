Loading theory "Draft.Entailment" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Natural_Deduction")
Loading theory "Draft.Rose_Tree" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Build_Incredible_Tree" via "Draft.Incredible_Trees")
Loading theory "Draft.Indexed_FSet" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Natural_Deduction" via "Draft.Abstract_Rules" via "Draft.Abstract_Formula")
Loading theory "Draft.Templates" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "indexed_fmember"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.364s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Incredible_CompletenessTemplates")
Found termination order: "{}"
### theory "Draft.Entailment"
### 0.104s elapsed time, 0.421s cpu time, 0.029s GC time
### theory "Draft.Indexed_FSet"
### 0.122s elapsed time, 0.477s cpu time, 0.029s GC time
Loading theory "Draft.Abstract_Formula" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Natural_Deduction" via "Draft.Abstract_Rules")
Proofs for inductive predicate(s) "it_pathsP"
  Proving monotonicity ...
locale Abstract_Formulas
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
  assumes
    "Abstract_Formulas freshenLC renameLCs lconsts closed subst
      subst_lconsts subst_renameLCs anyP"
### theory "Draft.Abstract_Formula"
### 0.327s elapsed time, 0.989s cpu time, 0.074s GC time
Loading theory "Draft.Abstract_Rules" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Natural_Deduction")
Loading theory "Draft.Incredible_Signatures" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Incredible_Deduction")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Rose_Tree"
### 0.475s elapsed time, 1.563s cpu time, 0.103s GC time
locale Port_Graph_Signature
  fixes nodes :: "'node stream"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
locale Port_Graph_Signature_Scoped
  fixes nodes :: "'node stream"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and hyps :: "'node => 'outPort => 'inPort option"
  assumes "Port_Graph_Signature_Scoped inPorts outPorts hyps"
Proofs for inductive predicate(s) "hyps_for'p"
  Proving monotonicity ...
locale Labeled_Signature
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and hyps :: "'a => 'c => 'b option"
    and labelsIn :: "'node => 'inPort => 'form"
    and labelsOut :: "'node => 'outPort => 'form"
  assumes "Labeled_Signature inPorts outPorts hyps"
locale Port_Graph_Signature_Scoped_Vars
  fixes nodes :: "'node stream"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and local_vars :: "'node => 'inPort => 'var set"
  assumes
    "Port_Graph_Signature_Scoped_Vars freshenLC renameLCs lconsts closed
      subst subst_lconsts subst_renameLCs anyP"
### theory "Draft.Incredible_Signatures"
### 0.141s elapsed time, 0.452s cpu time, 0.055s GC time
Loading theory "Draft.Incredible_Deduction" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.579s elapsed time, 1.765s cpu time, 0.158s GC time
locale Vertex_Graph
  fixes nodes :: "'node stream"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and vertices :: "'v fset"
    and nodeOf :: "'v => 'node"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale Pre_Port_Graph
  fixes nodes :: "'node stream"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and vertices :: "'v fset"
    and nodeOf :: "'v => 'node"
    and edges :: "(('v * 'outPort) * 'v * 'inPort) set"
locale Abstract_Rules
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and antecedent :: "'rule => ('form, 'var) antecedent list"
    and consequent :: "'rule => 'form list"
    and rules :: "'rule stream"
  assumes
    "Abstract_Rules freshenLC renameLCs lconsts closed subst subst_lconsts
      subst_renameLCs anyP antecedent consequent rules"
Found termination order: "{}"
locale Abstract_Task
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and antecedent :: "'rule => ('form, 'var) antecedent list"
    and consequent :: "'rule => 'form list"
    and rules :: "'rule stream"
    and assumptions :: "'form list"
    and conclusions :: "'form list"
  assumes
    "Abstract_Task freshenLC renameLCs lconsts closed subst subst_lconsts
      subst_renameLCs anyP antecedent consequent rules assumptions
      conclusions"
Found termination order: "{}"
Proofs for inductive predicate(s) "path"
### theory "Draft.Abstract_Rules"
### 0.576s elapsed time, 1.417s cpu time, 0.112s GC time
Loading theory "Draft.Natural_Deduction" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness")
  Proving monotonicity ...
Proofs for inductive predicate(s) "scopep"
  Proving monotonicity ...
locale Port_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
  assumes "Port_Graph nodes inPorts outPorts vertices nodeOf edges"
locale Pruned_Port_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
  assumes "Pruned_Port_Graph nodes inPorts outPorts vertices nodeOf edges"
locale Scoped_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
  assumes "Scoped_Graph nodes inPorts outPorts vertices nodeOf edges hyps"
### theory "Draft.Natural_Deduction"
### 0.581s elapsed time, 1.330s cpu time, 0.471s GC time
locale Well_Scoped_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
  assumes
    "Well_Scoped_Graph nodes inPorts outPorts vertices nodeOf edges hyps"
locale Scoped_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
  assumes "Scoped_Graph nodes inPorts outPorts vertices nodeOf edges hyps"
Proofs for inductive predicate(s) "terminal_path"
  Proving monotonicity ...
locale Acyclic_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
  assumes "Acyclic_Graph nodes inPorts outPorts vertices nodeOf edges hyps"
locale Saturated_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
  assumes "Saturated_Graph nodes inPorts outPorts vertices nodeOf edges"
locale Well_Shaped_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
  assumes
    "Well_Shaped_Graph nodes inPorts outPorts vertices nodeOf edges hyps"
locale Instantiation
  fixes inPorts :: "'node => 'a fset"
    and outPorts :: "'node => 'b fset"
    and nodeOf :: "'vertex => 'node"
    and hyps :: "'node => 'b => 'a option"
    and nodes :: "'node stream"
    and edges :: "(('vertex * 'outPort) * 'vertex * 'inPort) set"
    and vertices :: "'vertex fset"
    and labelsIn :: "'node => 'inPort => 'form"
    and labelsOut :: "'node => 'outPort => 'form"
    and freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and vidx :: "'vertex => nat"
    and inst :: "'vertex => 'subst"
  assumes
    "Instantiation inPorts outPorts hyps vertices freshenLC renameLCs
      lconsts closed subst subst_lconsts subst_renameLCs anyP vidx"
locale Solution
  fixes inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and nodeOf :: "'vertex => 'a"
    and hyps :: "'a => 'c => 'b option"
    and nodes :: "'a stream"
    and vertices :: "'vertex fset"
    and labelsIn :: "'a => 'inPort => 'd"
    and labelsOut :: "'a => 'outPort => 'd"
    and freshenLC :: "nat => 'e => 'e"
    and renameLCs :: "('e => 'e) => 'd => 'd"
    and lconsts :: "'d => 'e set"
    and closed :: "'d => bool"
    and subst :: "'f => 'd => 'd"
    and subst_lconsts :: "'f => 'e set"
    and subst_renameLCs :: "('e => 'e) => 'f => 'f"
    and anyP :: "'d"
    and vidx :: "'vertex => nat"
    and inst :: "'vertex => 'f"
    and edges :: "(('vertex * 'outPort) * 'vertex * 'inPort) set"
  assumes
    "Solution inPorts outPorts nodeOf hyps vertices labelsIn labelsOut
      freshenLC renameLCs lconsts closed subst subst_lconsts subst_renameLCs
      anyP vidx inst edges"
locale Proof_Graph
  fixes nodes :: "'a stream"
    and inPorts :: "'a => 'b fset"
    and outPorts :: "'a => 'c fset"
    and vertices :: "'d fset"
    and nodeOf :: "'d => 'a"
    and edges :: "(('d * 'c) * 'd * 'b) set"
    and hyps :: "'a => 'c => 'b option"
    and labelsIn :: "'a => 'b => 'e"
    and labelsOut :: "'a => 'c => 'e"
    and freshenLC :: "nat => 'f => 'f"
    and renameLCs :: "('f => 'f) => 'e => 'e"
    and lconsts :: "'e => 'f set"
    and closed :: "'e => bool"
    and subst :: "'g => 'e => 'e"
    and subst_lconsts :: "'g => 'f set"
    and subst_renameLCs :: "('f => 'f) => 'g => 'g"
    and anyP :: "'e"
    and vidx :: "'d => nat"
    and inst :: "'d => 'g"
  assumes
    "Proof_Graph nodes inPorts outPorts vertices nodeOf edges hyps labelsIn
      labelsOut freshenLC renameLCs lconsts closed subst subst_lconsts
      subst_renameLCs anyP vidx inst"
locale Well_Scoped_Instantiation
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and nodeOf :: "'vertex => 'node"
    and hyps :: "'node => 'outPort => 'inPort option"
    and nodes :: "'node stream"
    and vertices :: "'vertex fset"
    and labelsIn :: "'node => 'inPort => 'form"
    and labelsOut :: "'node => 'outPort => 'form"
    and vidx :: "'vertex => nat"
    and inst :: "'vertex => 'subst"
    and edges :: "(('vertex * 'outPort) * 'vertex * 'inPort) set"
    and local_vars :: "'node => 'inPort => 'var set"
  assumes
    "Well_Scoped_Instantiation freshenLC renameLCs lconsts closed subst
      subst_lconsts subst_renameLCs anyP inPorts outPorts nodeOf hyps
      vertices vidx inst edges local_vars"
locale Scoped_Proof_Graph
  fixes freshenLC :: "nat => 'var => 'var"
    and renameLCs :: "('var => 'var) => 'form => 'form"
    and lconsts :: "'form => 'var set"
    and closed :: "'form => bool"
    and subst :: "'subst => 'form => 'form"
    and subst_lconsts :: "'subst => 'var set"
    and subst_renameLCs :: "('var => 'var) => 'subst => 'subst"
    and anyP :: "'form"
    and inPorts :: "'node => 'inPort fset"
    and outPorts :: "'node => 'outPort fset"
    and nodeOf :: "'vertex => 'node"
    and hyps :: "'node => 'outPort => 'inPort option"
    and nodes :: "'node stream"
    and vertices :: "'vertex fset"
    and labelsIn :: "'node => 'inPort => 'form"
    and labelsOut :: "'node => 'outPort => 'form"
    and vidx :: "'vertex => nat"
    and inst :: "'vertex => 'subst"
    and edges :: "(('vertex * 'outPort) * 'vertex * 'inPort) set"
    and local_vars :: "'node => 'inPort => 'var set"
  assumes
    "Scoped_Proof_Graph freshenLC renameLCs lconsts closed subst
      subst_lconsts subst_renameLCs anyP inPorts outPorts nodeOf hyps nodes
      vertices labelsIn labelsOut vidx inst edges local_vars"
### theory "Draft.Incredible_Deduction"
### 2.093s elapsed time, 3.417s cpu time, 0.617s GC time
Loading theory "Draft.Abstract_Rules_To_Incredible" (required by "Draft.Incredible_CompletenessTemplates" via "Draft.Incredible_Completeness" via "Draft.Build_Incredible_Tree" via "Draft.Incredible_Trees")
### theory "Draft.Abstract_Rules_To_Incredible"
### 0.112s elapsed time, 0.114s cpu time, 0.000s GC time
*** Failed to load theory "Draft.Incredible_Trees" (unresolved "Draft.Abstract_Rules_To_Incredible")
*** Failed to load theory "Draft.Build_Incredible_Tree" (unresolved "Draft.Incredible_Trees", "Draft.Natural_Deduction")
*** Failed to load theory "Draft.Incredible_Completeness" (unresolved "Draft.Build_Incredible_Tree", "Draft.Natural_Deduction")
*** Failed to load theory "Draft.Incredible_CompletenessTemplates" (unresolved "Draft.Incredible_Completeness")
*** Unknown ancestor theory "Incredible_Proof_Machine.Abstract_Rules" (line 10 of "$AFP/Incredible_Proof_Machine/Abstract_Rules_To_Incredible.thy")
*** At command "text" (line 10 of "$AFP/Incredible_Proof_Machine/Abstract_Rules_To_Incredible.thy")
*** Unknown ancestor theory "Incredible_Proof_Machine.Abstract_Formula" (line 11 of "$AFP/Incredible_Proof_Machine/Natural_Deduction.thy")
*** At command "text" (line 8 of "$AFP/Incredible_Proof_Machine/Natural_Deduction.thy")
Exception- TOPLEVEL_ERROR raised
