Loading theory "Draft.CIMP_pred" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.617s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CIMP_pred"
### 0.153s elapsed time, 0.631s cpu time, 0.038s GC time
Loading theory "Draft.Infinite_Sequences" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP" via "Draft.CIMP_lang" via "Draft.LTL")
consts
  stake :: "nat => (nat => 'a) => 'a list"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.084s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Infinite_Sequences"
### 0.209s elapsed time, 0.822s cpu time, 0.083s GC time
Loading theory "Draft.LTL" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP" via "Draft.CIMP_lang")
### theory "HOL-Library.Nat_Bijection"
### 0.431s elapsed time, 1.726s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.LTL"
### 0.339s elapsed time, 1.336s cpu time, 0.126s GC time
Loading theory "Draft.CIMP_lang" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.878s cpu time, 0.907s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.110s elapsed time, 3.991s cpu time, 0.930s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.998s elapsed time, 6.420s cpu time, 1.194s GC time
Loading theory "Draft.Templates" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.187s cpu time, 0.079s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CIMP_localesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.778s elapsed time, 1.843s cpu time, 0.756s GC time
Proofs for inductive predicate(s) "small_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "system_step"
  Proving monotonicity ...
consts
  atC :: "('answer, 'location, 'question, 'state) com => 'location set"
consts
  atCs ::
    "('answer, 'location, 'question, 'state) com list => 'location set"
### theory "Draft.CIMP_lang"
### 4.035s elapsed time, 8.131s cpu time, 2.024s GC time
Loading theory "Draft.CIMP_vcg" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "basic_com"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctxtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "vcg"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.CIMP_vcg"
### 3.007s elapsed time, 3.980s cpu time, 1.157s GC time
Loading theory "Draft.CIMP_vcg_rules" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales" via "Draft.CIMP")
### theory "Draft.CIMP_vcg_rules"
### 0.267s elapsed time, 0.323s cpu time, 0.058s GC time
Loading theory "Draft.CIMP" (required by "Draft.CIMP_localesMoreTemplates" via "Draft.CIMP_locales")
val ss_only = fn: thm list -> Proof.context -> Proof.context
val HOL_ss_only = fn: thm list -> Proof.context -> Proof.context
signature CIMP =
  sig
    val com_locs_fold: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_fold_no_response: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_map: (term -> 'a) -> term -> 'a list
    val com_locs_map_no_response: (term -> 'a) -> term -> 'a list
    val def_locset: thm -> local_theory -> local_theory
    val intern_com: Facts.ref -> local_theory -> local_theory
  end
structure Cimp: CIMP
### theory "Draft.CIMP"
### 0.122s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.CIMP_locales" (required by "Draft.CIMP_localesMoreTemplates")
locale P1
B : loop
A ~: loop
theorems:
  P1.com_interned:
    com = \<lbrace>A\<rbrace> WHILE (<) 0
    DO \<lbrace>B\<rbrace> LocalOp (%s. {s - 1}) OD
  P1.loc_defs:
    B == ''B''
    A == ''A''
P1.B : P1.loop
P1.A ~: P1.loop
locale P2
P1.B : P1.loop
P1.A ~: P1.loop
theorems:
  P1.loop.memb:
    B : loop
    A ~: loop
  P1.loop_def: loop = {B}
P1.B : P1.loop
P1.A ~: P1.loop
P2.A : P2.loop
P2.C ~: P2.loop
consts
  coms :: "bool => (unit, char list, unit, nat) com"
### theory "Draft.CIMP_locales"
### 0.065s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Draft.CIMP_localesMoreTemplates"
theorems:
  P2.loop.memb:
    A : loop
    C ~: loop
  P2.loop_def: loop = {A}
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CIMP_localesMoreTemplates"
### 0.387s elapsed time, 0.544s cpu time, 0.056s GC time
val it = (): unit
