   [("CIMP_vcg.prerun_valid_TrueI",
     "?sys \<Turnstile>\<^bsub>pre\<^esub> %s. True",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)
         )),
    ("CIMP_vcg.atS_simps", "~ atS ?p {} ?s",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 0)
             )
         )),
    ("CIMP_vcg.atC_not_empty", "atC ?c ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("CIMP_vcg.decompose_com_non_empty", "decompose_com ?c ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("CIMP_vcg.small_step_stuck",
     "~ ([], ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?c'",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1),
               template_var 0)
             )
         )),
    ("CIMP_vcg.vcg_fragments'_fragments",
     "vcg_fragments' ?c' ?aft' <= fragments ?c' ?aft'",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CIMP_vcg.atCs_empty", "(atCs ?cs = {}) = (?cs = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("CIMP_vcg.prerun_reachable_state",
     "prerun ?sys ?\<sigma> ==> reachable_state ?sys (?\<sigma> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("CIMP_vcg.valid_prerun_lift",
     "?sys \<Turnstile>\<^bsub>pre\<^esub> ?I ==>
      ?sys \<Turnstile> \<box>\<lceil>?I\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg.system_step_pls_nonempty",
     "system_step ?pls ?sh' ?sh ==> ?pls ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("CIMP_vcg.fragmentsL_basic_com",
     "(?c', ?aft') : fragmentsL ?cs ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP_vcg.decomposeLS_basic_com",
     "(?c', ?ctxts) : decomposeLS ?s ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP_vcg.decompose_com_basic_com",
     "(?c', ?ctxts) : decompose_com ?c ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP_vcg.decompose_com_ctxt",
     "(?c', ?ctxts) : decompose_com ?c ==> ?ctxts : ctxt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("CIMP_vcg.fragments_basic_com",
     "(?c', ?aft') : fragments ?c ?aft ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 3)))),
    ("CIMP_vcg.atS_simps", "atS ?p {?l} ?s = CIMP_lang.at ?p ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("CIMP_vcg.prerun_validE",
     "[| reachable_state ?sys ?s; ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I |]
      ==> ?I ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg.small_step_fragmentsLS",
     "?s \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' ==>
      fragmentsLS ?s' <= fragmentsLS ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("CIMP_vcg.decompose_com_ictxt",
     "(?c', ?ictxt, ?fctxt) : decompose_com ?c ==> ?ictxt ?c' = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_app (template_var 2, template_var 3), template_var 0))),
    ("CIMP_vcg.prerun_validI",
     "(!!s. reachable_state ?sys s ==> ?I s) ==>
      ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace> LOOP DO ?c OD
         \<lbrace>?post\<rbrace>;
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.at_decompose",
     "(?c, ?ictxt, ?fctxt) : decompose_com ?c0.0 ==> atC ?c <= atC ?c0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("CIMP_vcg.atS_mono",
     "[| atS ?p ?ls ?s; ?ls <= ?ls' |] ==> atS ?p ?ls' ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         ?c1.0 \<oplus> ?c2.0 \<lbrace>?post\<rbrace>;
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> Response ?action \<lbrace>?post\<rbrace>;
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace> ?c1.0 ;; ?c2.0
         \<lbrace>?post\<rbrace>;
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.atLs_disj_union",
     "(%s. atLs ?p ?label0.0 s | atLs ?p ?label1.0 s) =
      atLs ?p (?label0.0 Un ?label1.0)",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CIMP_vcg.atS_un",
     "atS ?p (?l Un ?l') ?s = (atS ?p ?l ?s | atS ?p ?l' ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("CIMP_vcg.reachable_state_fragmentsLS",
     "reachable_state ?sys ?sh ==>
      fragmentsLS (GST ?sh ?p) <= fragments (PGMs ?sys ?p) {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("CIMP_vcg.at_decomposeLS",
     "(?c, ?ictxt, ?fctxt) : decomposeLS ?s ==> atC ?c <= atCs (cPGM ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 3),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("CIMP_vcg.atS_simps",
     "[| CIMP_lang.at ?p ?l ?s; ?l : ?ls |] ==> atS ?p ?ls ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("CIMP_vcg.terminated_no_commands",
     "atLs ?p {{}} ?sh ==> EX s. GST ?sh ?p = ([], s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_hole 5)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("CIMP_vcg.ctxt_inj",
     "[| (?E, ?fctxt) : ctxt; ?E ?x = ?E ?y |] ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_hole 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("CIMP_vcg.atLs_insert_disj",
     "atLs ?p (insert ?l ?label0.0) =
      (%s. atLs ?p {?l} s | atLs ?p ?label0.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("CIMP_vcg.atS_state_weak_cong",
     "AT ?s ?p = AT ?s' ?p ==> atS ?p ?ls ?s = atS ?p ?ls ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("CIMP_vcg.prerun_valid_conjI",
     "[| ?sys \<Turnstile>\<^bsub>pre\<^esub> ?P;
         ?sys \<Turnstile>\<^bsub>pre\<^esub> ?Q |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> %s. ?P s & ?Q s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("CIMP_vcg.small_step_terminated",
     "[| ?s \<rightarrow>\<^bsub>?x\<^esub> ?s'; atCs (cPGM ?s) = {} |]
      ==> atCs (cPGM ?s') = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 2)),
          template_hole 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("CIMP_vcg.lcond_split",
     "?Q (lcond ?lp ?lp' ?b ?s) =
      ((?b ?s --> ?Q ?lp) & (~ ?b ?s --> ?Q ?lp'))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app (template_var 4, template_var 3))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0))),
           template_app (template_var 4, template_var 2))))),
    ("CIMP_vcg.atS_simps",
     "ALL l. CIMP_lang.at ?p l ?s --> l ~: ?ls ==> ~ atS ?p ?ls ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("CIMP_vcg.system_step_no_change",
     "[| system_step ?ps ?sh' ?sh; ?p ~: ?ps |]
      ==> GST ?sh' ?p = GST ?sh ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CIMP_vcg.initial_states_initial",
     "initial_state ?sys ?s ==>
      CIMP_lang.at ?p ?l (| GST = ?s, HST = [] |) =
      (?l : atC (PGMs ?sys ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3),
                 template_hole 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)))))),
    ("CIMP_vcg.terminated_stable",
     "[| system_step ?q ?sh' ?sh; atLs ?p {{}} ?sh |]
      ==> atLs ?p {{}} ?sh'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_var 2)
           ))),
    ("CIMP_vcg.reachable_stateE",
     "[| reachable_state ?sys ?sh;
         !!\<sigma> i. prerun ?sys \<sigma> ==> ?P (\<sigma> i) |]
      ==> ?P ?sh",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg.terminated_GST_stable",
     "[| system_step ?q ?sh' ?sh; atLs ?p {{}} ?sh |]
      ==> GST ?sh ?p = GST ?sh' ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CIMP_vcg.fragments_vcg_fragments'",
     "[| (?c, ?aft) : fragments ?c' ?aft'; ~ isResponse ?c |]
      ==> (?c, ?aft) : vcg_fragments' ?c' ?aft'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CIMP_vcg.lcond_split_asm",
     "?Q (lcond ?lp ?lp' ?b ?s) =
      (~ (?b ?s & ~ ?Q ?lp | ~ ?b ?s & ~ ?Q ?lp'))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_var 4, template_var 3)))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_var 4, template_var 2))))))),
    ("CIMP_vcg.decompose_fragments",
     "(?c, ?ictxt, ?fctxt) : decompose_com ?c0.0 ==>
      (?c, loc_compC ?c (?fctxt ?c @ ?cs)) : fragments ?c0.0 (atCs ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_var 2, template_var 4)),
                     template_var 0)))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg.small_step_loc_compC",
     "[| basic_com ?c;
         (?c # ?cs, ?ls) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ls' |]
      ==> loc_compC ?c ?cs (snd ?ls) = atCs (cPGM ?ls')",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("CIMP_vcg.decomposeLS_fragmentsLS",
     "(?c, ?ictxt, ?fctxt) : decomposeLS ?s ==>
      (?c, loc_compC ?c (?fctxt ?c @ tl (cPGM ?s))) : fragmentsLS ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_var 1, template_var 3)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)))))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("CIMP_vcg.decompose_com_small_step",
     "[| (?c' # ?fctxt ?c' @ ?cs,
          ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s';
         (?c', ?ictxt, ?fctxt) : decompose_com ?c |]
      ==> (?c # ?cs, ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_app
                         (template_app
                           (template_hole 4,
                            template_app (template_var 6, template_var 7)),
                          template_var 5))),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 7),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 6))),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 5)),
                   template_var 4)),
               template_var 3),
             template_var 2)
           ))),
    ("CIMP_vcg.prerun_valid_induct",
     "[| !!\<sigma>. prerun ?sys \<sigma> ==> \<lceil>?I\<rceil> \<sigma>;
         !!\<sigma>.
            prerun ?sys \<sigma> ==>
            (\<box>(%s. \<lceil>?I\<rceil> s -->
                        (\<circle>\<lceil>?I\<rceil>) s))
             \<sigma> |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.initial_stateD",
     "initial_state ?sys ?s ==>
      AT (| GST = ?s, HST = [] |) = atC o PGMs ?sys &
      INIT ?sys (| GST = ?s, HST = [] |)\<down> &
      (ALL p l. ~ taken p l (| GST = ?s, HST = [] |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 0),
                         template_hole 10),
                       template_hole 9))),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app (template_hole 6, template_var 1)))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 0),
                         template_hole 10),
                       template_hole 9)))),
               template_app (template_hole 3, t_empty)))
           ))),
    ("CIMP_vcg.VCG",
     "[| ALL s. initial_state ?sys s --> ?I (| GST = s, HST = [] |);
         !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.VCG_step_inv_stable",
     "[| !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c;
         prerun ?sys ?\<sigma> |]
      ==> (\<box>(%s. \<lceil>?I\<rceil> s -->
                      (\<circle>\<lceil>?I\<rceil>) s))
           ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("CIMP_vcg.VCG_step",
     "[| !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?pre\<rbrace> c
                 \<lbrace>?post\<rbrace>;
         system_step ?p ?sh' ?sh; reachable_state ?sys ?sh; ?pre ?sh |]
      ==> ?post ?sh'",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 0)
            ),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_predicate (template_app (template_var 3, template_var 1)))),
    ("CIMP_vcg.VCG_valid",
     "[| ALL s. initial_state ?sys s --> ?I (| GST = s, HST = [] |);
         !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c |]
      ==> ?sys \<Turnstile> \<box>\<lceil>?I\<rceil>",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg.small_step_inv",
     "[| (LOOP DO ?c OD # ?cs, ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!cs' s'.
            [| ?s' = (cs', s');
               (?c # LOOP DO ?c OD # ?cs,
                ?ls) \<rightarrow>\<^bsub>?a\<^esub> (cs', s') |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> LocalOp ?R # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s' s uw_.
            [| ?ls = (uw_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s');
               s' : ?R s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.context_decompose",
     "?s \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' =
      (EX (c, ictxt, fctxt):decomposeLS ?s.
          cPGM ?s = ictxt c # tl (cPGM ?s) &
          (c # fctxt c @ tl (cPGM ?s), cTKN ?s,
           cLST ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' &
          (ALL l:atC c. cTKN ?s' = Some l))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 19, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 18,
           template_app (template_hole 17, template_var 2)),
         template_app (template_hole 16, t_empty)))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> Request ?action ?val # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s s' \<beta> uu_.
            [| ?ls = (uu_, s);
               ?a = \<guillemotleft>?action s, \<beta>\<guillemotright>;
               ?s' = (?cs, Some ?l, s'); s' : ?val \<beta> s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> Response ?action # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s' \<beta> \<alpha> s uv_.
            [| ?ls = (uv_, s);
               ?a = \<guillemotright>\<alpha>, \<beta>\<guillemotleft>;
               ?s' = (?cs, Some ?l, s');
               (s', \<beta>) : ?action \<alpha> s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 12, template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> IF ?b THEN ?t FI \<lbrace>?post\<rbrace>;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> WHILE ?b DO ?c OD \<lbrace>?post\<rbrace>;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> IF ?b THEN ?c FI # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s ux_.
            [| ?ls = (ux_, s); ?a = \<tau>; ?s' = (?c # ?cs, Some ?l, s);
               ?b s |]
            ==> ?P;
         !!s uy_.
            [| ?ls = (uy_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> IF ?b THEN ?t ELSE ?e FI
         \<lbrace>?post\<rbrace>;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 16, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> IF ?b THEN ?c1.0 ELSE ?c2.0 FI # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s uz_.
            [| ?ls = (uz_, s); ?a = \<tau>; ?s' = (?c1.0 # ?cs, Some ?l, s);
               ?b s |]
            ==> ?P;
         !!s va_.
            [| ?ls = (va_, s); ?a = \<tau>; ?s' = (?c2.0 # ?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 9, template_var 8),
                                template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.decompose_small_step",
     "[| GST ?sh ?p \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ps';
         reachable_state ?sys ?sh;
         !!c cs aft.
            [| (c, aft) : fragments (PGMs ?sys ?p) {};
               atC c <= atCs (cPGM (GST ?sh ?p));
               aft (cLST (GST ?sh ?p)) = atCs (cPGM ?ps');
               (c # cs, cTKN (GST ?sh ?p),
                cLST
                 (GST ?sh ?p)) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ps';
               ALL l:atC c. cTKN ?ps' = Some l |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app
                   (template_app (template_hole 23, template_var 5),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> WHILE ?b DO ?c OD # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s vb_.
            [| ?ls = (vb_, s); ?a = \<tau>;
               ?s' =
               (?c # \<lbrace>?l\<rbrace> WHILE ?b DO ?c OD # ?cs, Some ?l,
                s);
               ?b s |]
            ==> ?P;
         !!s vc_.
            [| ?ls = (vc_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> LocalOp ?f \<lbrace>?post\<rbrace>;
         (!!s ps' s'.
             [| ?pre s; ps' : ?f (s\<down> ?p); CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>(?p := ps'); taken ?p ?l s';
                HST s' = HST s; ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 20, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 18, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.reachable_state_induct",
     "[| reachable_state ?sys ?sh;
         !!s. initial_state ?sys s ==> ?P (| GST = s, HST = [] |);
         !!sh ls' p.
            [| reachable_state ?sys sh; ?P sh;
               GST sh p \<rightarrow>\<^bsub>\<tau>\<^esub> ls' |]
            ==> ?P (| GST = (GST sh)(p := ls'), HST = HST sh |);
         !!sh ls1' ls2' p1 p2 \<alpha> \<beta>.
            [| reachable_state ?sys sh; ?P sh;
               GST sh
                p1 \<rightarrow>\<^bsub>\<guillemotleft>\<alpha>, \<beta>\<guillemotright>\<^esub> ls1';
               GST sh
                p2 \<rightarrow>\<^bsub>\<guillemotright>\<alpha>, \<beta>\<guillemotleft>\<^esub> ls2';
               p1 ~= p2 |]
            ==> ?P (| GST = (GST sh)(p1 := ls1', p2 := ls2'),
                      HST = HST sh @ [(\<alpha>, \<beta>)] |) |]
      ==> ?P ?sh",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg.vcg_inv",
     "[| ?coms, ?p, ?aft \<turnstile> \<lbrace>?pre\<rbrace>
         \<lbrace>?l\<rbrace> Request ?action ?val \<lbrace>?post\<rbrace>;
         (!!aft' action' s ps' p's' l' \<beta> s' p'.
             [| ?pre s;
                (\<lbrace>l'\<rbrace> Response action', aft')
                : fragments (?coms p') {};
                ?p ~= p'; ps' : ?val \<beta> (s\<down> ?p);
                (p's', \<beta>)
                : action' (?action (s\<down> ?p)) (s\<down> p');
                CIMP_lang.at ?p ?l s; CIMP_lang.at p' l' s;
                AT s' = (AT s)
                (?p := ?aft (s\<down> ?p), p' := aft' (s\<down> p'));
                s'\<down> = s\<down>(?p := ps', p' := p's'); taken ?p ?l s';
                HST s' = HST s @ [(?action (s\<down> ?p), \<beta>)];
                ALL p'':- {?p, p'}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 38, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 37, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 36, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]
