Loading theory "Draft.CIMP_pred" (required by "Draft.LTLMoreTemplates" via "Draft.LTL")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.513s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CIMP_pred"
### 0.149s elapsed time, 0.609s cpu time, 0.038s GC time
Loading theory "Draft.Infinite_Sequences" (required by "Draft.LTLMoreTemplates" via "Draft.LTL")
consts
  stake :: "nat => (nat => 'a) => 'a list"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.987s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.313s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Infinite_Sequences"
### 0.230s elapsed time, 0.909s cpu time, 0.081s GC time
Loading theory "Draft.LTL" (required by "Draft.LTLMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.LTL"
### 0.390s elapsed time, 1.541s cpu time, 0.143s GC time
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.015s elapsed time, 3.550s cpu time, 0.813s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.034s elapsed time, 3.463s cpu time, 0.775s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.923s elapsed time, 5.059s cpu time, 0.968s GC time
Loading theory "Draft.Templates" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LTLMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.436s elapsed time, 0.442s cpu time, 0.000s GC time
Loading theory "Draft.LTLMoreTemplates"
val templateLemmas =
   [("LTL.safety_state_prop", "safety \<lceil>?P\<rceil>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL.norm", "\<box>\<box>?P = \<box>?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LTL.norm", "\<diamond>\<diamond>?P = \<diamond>?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LTL.norm", "((%s. True) \<R> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("LTL.norm", "((%s. False) \<U> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("LTL.defs", "\<diamond>?P = ((%s. True) \<U> ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("LTL.defs", "\<lceil>?P\<rceil> = (%\<sigma>. ?P (\<sigma> 0))",
     template_equation
      (template_app (template_hole 1, template_var 0), t_empty)),
    ("LTL.eventually_until_eventually",
     "\<diamond>(?P \<U> ?Q) = \<diamond>?Q",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL.norm", "(?P \<R> (%s. False)) = (%s. False)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       t_empty)),
    ("LTL.norm", "(?P \<R> (%s. True)) = (%s. True)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       t_empty)),
    ("LTL.norm", "((%s. False) \<R> ?P) = \<box>?P",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("LTL.norm", "(?P \<W> (%s. False)) = \<box>?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       template_app (template_hole 0, template_var 0))),
    ("LTL.norm", "(?P \<U> (%s. False)) = (%s. False)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       t_empty)),
    ("LTL.norm", "(?P \<U> (%s. True)) = (%s. True)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       t_empty)),
    ("LTL.norm", "((%s. True) \<U> ?P) = \<diamond>?P",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("LTL.safety_always", "safety ?P ==> safety (\<box>?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("LTL.safety_Next", "safety ?P ==> safety (\<circle>?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("LTL.defs", "\<circle>?P = (%\<sigma>. ?P (\<sigma> |\<^sub>s 1))",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("LTL.always_strongly_fair",
     "\<box>strongly_fair ?enabled ?taken = strongly_fair ?enabled ?taken",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.always_weakly_fair",
     "\<box>weakly_fair ?enabled ?taken = weakly_fair ?enabled ?taken",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.always_eventually_always",
     "\<diamond>\<box>\<diamond>?P = \<box>\<diamond>?P",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("LTL.eventually_strongly_fair",
     "\<diamond>strongly_fair ?enabled ?taken =
      strongly_fair ?enabled ?taken",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.eventually_weakly_fair",
     "\<diamond>weakly_fair ?enabled ?taken = weakly_fair ?enabled ?taken",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.until_imp_eventually",
     "(?P \<U> ?Q) ?\<sigma> --> (\<diamond>?Q) ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LTL.always_imp_refl", "(\<box>(%s. ?P s --> ?P s)) ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("LTL.always_eventually",
     "(\<box>?P) ?\<sigma> ==> (\<diamond>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.eventually_until", "\<diamond>?P = ((%s. ~ ?P s) \<U> ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("LTL.norm", "(?P \<U> ?P \<U> ?Q) = (?P \<U> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.suffix_state_prop",
     "\<lceil>?P\<rceil> (?\<sigma> |\<^sub>s ?i) = ?P (?\<sigma> ?i)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_var 2, template_app (template_var 1, template_var 0)))),
    ("LTL.leads_to_refl",
     "(\<box>(%s. ?P s --> (\<diamond>?P) s)) ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)
         )),
    ("LTL.unless_alwaysI",
     "(\<box>?P) ?\<sigma> ==> (?P \<W> ?Q) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("LTL.alwaysD", "(\<box>?P) ?\<sigma> ==> ?P (?\<sigma> |\<^sub>s ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.eventuallyI",
     "?P (?\<sigma> |\<^sub>s ?i) ==> (\<diamond>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("LTL.necessitation", "(!!s. ?P s) ==> (\<box>?P) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.necessitation", "(!!s. ?P s) ==> (\<diamond>?P) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.defs", "\<box>?P = (%\<sigma>. ALL i. ?P (\<sigma> |\<^sub>s i))",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("LTL.until_next_distrib",
     "\<circle>(?P \<U> ?Q) = (\<circle>?P \<U> \<circle>?Q)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("LTL.eventually_always_imp_always_eventually",
     "(\<diamond>\<box>?P) ?\<sigma> ==> (\<box>\<diamond>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("LTL.strongly_fair_imp_weakly_fair",
     "strongly_fair ?enabled ?taken ?\<sigma> ==>
      weakly_fair ?enabled ?taken ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("LTL.necessitation", "(!!s. ?P s) ==> (?P \<W> ?Q) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("LTL.necessitation", "(!!s. ?Q s) ==> (?P \<U> ?Q) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("LTL.nextI",
     "?P (?\<sigma> |\<^sub>s Suc 0) ==> (\<circle>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.norm", "(%s. ~ (\<diamond>?P) s) = \<box>(%s. ~ ?P s)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("LTL.norm",
     "(%s. ~ \<lceil>?p\<rceil> s) = \<lceil>%s. ~ ?p s\<rceil>",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("LTL.unfold",
     "(\<box>?P) ?\<sigma> =
      (?P ?\<sigma> & (\<circle>\<box>?P) ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL.unfold",
     "(\<diamond>?P) ?\<sigma> =
      (?P ?\<sigma> | (\<circle>\<diamond>?P) ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL.norm",
     "(~ (\<box>?P) ?\<sigma>) = (\<diamond>(%s. ~ ?P s)) ?\<sigma>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("LTL.alwaysI",
     "(!!i. ?P (?\<sigma> |\<^sub>s i)) ==> (\<box>?P) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.absolute_liveness_eventually",
     "absolute_liveness ?P =
      ((EX \<sigma>. ?P \<sigma>) & ?P = \<diamond>?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LTL.stable_always",
     "stable ?P = ((EX \<sigma>. ?P \<sigma>) & ?P = \<box>?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("LTL.fairness_strongly_fair",
     "EX s. ?taken s ==>
      fairness
       (strongly_fair \<lceil>?enabled\<rceil> \<lceil>?taken\<rceil>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("LTL.fairness_weakly_fair",
     "EX s. ?taken s ==>
      fairness
       (weakly_fair \<lceil>?enabled\<rceil> \<lceil>?taken\<rceil>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("LTL.safety_unless",
     "[| safety ?P; safety ?Q |] ==> safety (?P \<W> ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.defs", "(?P \<W> ?Q) = (%s. (?P \<U> ?Q) s | (\<box>?P) s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("LTL.eventually_unless_until",
     "(%s. (?P \<W> ?Q) s & (\<diamond>?Q) s) = (?P \<U> ?Q)",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.seq_comp",
     "(\<box>?P) (?f o ?\<sigma>) =
      (\<box>(%\<sigma>. ?P (?f o \<sigma>))) ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("LTL.seq_comp",
     "(\<diamond>?P) (?f o ?\<sigma>) =
      (\<diamond>(%\<sigma>. ?P (?f o \<sigma>))) ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("LTL.always_enabled_weakly_fair_strongly_fair",
     "(\<box>?enabled) ?\<sigma> ==>
      weakly_fair ?enabled ?taken ?\<sigma> =
      strongly_fair ?enabled ?taken ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("LTL.cong",
     "(!!\<sigma>. ?P \<sigma> = ?P' \<sigma>) ==> \<box>?P = \<box>?P'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.cong",
     "(!!\<sigma>. ?P \<sigma> = ?P' \<sigma>) ==>
      \<diamond>?P = \<diamond>?P'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.cong",
     "(!!\<sigma>. ?P \<sigma> = ?P' \<sigma>) ==>
      \<circle>?P = \<circle>?P'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.cong",
     "(!!s. ?P s = ?P' s) ==> \<lceil>?P\<rceil> = \<lceil>?P'\<rceil>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.mp_weakly_fair",
     "[| weakly_fair ?enabled ?taken ?\<sigma>;
         (\<box>?enabled) ?\<sigma> |]
      ==> (\<diamond>?taken) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.alwaysE",
     "[| (\<box>?P) ?\<sigma>; ?P (?\<sigma> |\<^sub>s ?i) ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("LTL.defs",
     "(?P \<R> ?Q) = (%s. ~ ((%s. ~ ?P s) \<U> (%s. ~ ?Q s)) s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("LTL.always_conj_distrib",
     "\<box>(%s. ?P s & ?Q s) = (%s. (\<box>?P) s & (\<box>?Q) s)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("LTL.eventually_disj_distrib",
     "\<diamond>(%s. ?P s | ?Q s) =
      (%s. (\<diamond>?P) s | (\<diamond>?Q) s)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("LTL.eventually_imp_distrib",
     "\<diamond>(%s. ?P s --> ?Q s) =
      (%s. (\<box>?P) s --> (\<diamond>?Q) s)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("LTL.next_conj_distrib",
     "\<circle>(%s. ?P s & ?Q s) = (%s. (\<circle>?P) s & (\<circle>?Q) s)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("LTL.next_disj_distrib",
     "\<circle>(%s. ?P s | ?Q s) = (%s. (\<circle>?P) s | (\<circle>?Q) s)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("LTL.norm",
     "(%s. \<lceil>?p\<rceil> s & \<lceil>?q\<rceil> s) =
      \<lceil>%s. ?p s & ?q s\<rceil>",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("LTL.norm",
     "(%s. \<lceil>?p\<rceil> s | \<lceil>?q\<rceil> s) =
      \<lceil>%s. ?p s | ?q s\<rceil>",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("LTL.norm",
     "(%s. \<lceil>?p\<rceil> s --> \<lceil>?q\<rceil> s) =
      \<lceil>%s. ?p s --> ?q s\<rceil>",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("LTL.unfold",
     "(?P \<R> ?Q) ?\<sigma> =
      (?Q ?\<sigma> & (?P ?\<sigma> | (\<circle>(?P \<R> ?Q)) ?\<sigma>))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("LTL.unfold",
     "(?P \<W> ?Q) ?\<sigma> =
      (?Q ?\<sigma> | ?P ?\<sigma> & (\<circle>(?P \<W> ?Q)) ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("LTL.unfold",
     "(?P \<U> ?Q) ?\<sigma> =
      (?Q ?\<sigma> | ?P ?\<sigma> & (\<circle>(?P \<U> ?Q)) ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("LTL.norm",
     "(~ (?P \<R> ?Q) ?\<sigma>) =
      ((%s. ~ ?P s) \<U> (%s. ~ ?Q s)) ?\<sigma>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("LTL.norm",
     "(~ (?P \<U> ?Q) ?\<sigma>) =
      ((%s. ~ ?P s) \<R> (%s. ~ ?Q s)) ?\<sigma>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("LTL.norm",
     "(\<lceil>?p\<rceil> ?\<sigma> & \<lceil>?q\<rceil> ?\<sigma>) =
      \<lceil>%s. ?p s & ?q s\<rceil> ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("LTL.norm",
     "(\<lceil>?p\<rceil> ?\<sigma> | \<lceil>?q\<rceil> ?\<sigma>) =
      \<lceil>%s. ?p s | ?q s\<rceil> ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("LTL.norm",
     "(\<lceil>?p\<rceil> ?\<sigma> --> \<lceil>?q\<rceil> ?\<sigma>) =
      \<lceil>%s. ?p s --> ?q s\<rceil> ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("LTL.always_imp_mp",
     "[| (\<box>(%s. ?P s --> ?Q s)) ?\<sigma>; ?P ?\<sigma> |]
      ==> ?Q ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 0)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("LTL.unless_unless_disj",
     "(?P \<W> ?Q \<W> ?R) ?\<sigma> ==>
      ((%s. ?P s | ?Q s) \<W> ?R) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0)
           ))),
    ("LTL.until_until_disj",
     "(?P \<U> ?Q \<U> ?R) ?\<sigma> ==>
      ((%s. ?P s | ?Q s) \<U> ?R) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0)
           ))),
    ("LTL.eventuallyE",
     "[| (\<diamond>?P) ?\<sigma>;
         !!i. ?P (?\<sigma> |\<^sub>s i) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("LTL.always_induct",
     "[| ?P ?\<sigma>; (\<box>(%s. ?P s --> (\<circle>?P) s)) ?\<sigma> |]
      ==> (\<box>?P) ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), template_var 0)
           ))),
    ("LTL.always_imp_mono",
     "[| (\<box>?P) ?\<sigma>; (\<box>(%s. ?P s --> ?P' s)) ?\<sigma> |]
      ==> (\<box>?P') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("LTL.mono",
     "[| (\<box>?P) ?\<sigma>; !!\<sigma>. ?P \<sigma> ==> ?P' \<sigma> |]
      ==> (\<box>?P') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("LTL.always_imp_mono",
     "[| (\<diamond>?P) ?\<sigma>; (\<box>(%s. ?P s --> ?P' s)) ?\<sigma> |]
      ==> (\<diamond>?P') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("LTL.mono",
     "[| (\<diamond>?P) ?\<sigma>;
         !!\<sigma>. ?P \<sigma> ==> ?P' \<sigma> |]
      ==> (\<diamond>?P') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("LTL.eventually_imp_conv_disj",
     "\<diamond>(%s. ?P s --> ?Q s) =
      (%s. (\<diamond>(%s. ~ ?P s)) s | (\<diamond>?Q) s)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("LTL.strongly_fair_disj_distrib",
     "strongly_fair (%s. ?enabled1.0 s | ?enabled2.0 s) ?taken =
      (%s. strongly_fair ?enabled1.0 ?taken s &
           strongly_fair ?enabled2.0 ?taken s)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       t_empty)),
    ("LTL.until_disj_distrib",
     "(?P \<U> (%s. ?Q s | ?R s)) = (%s. (?P \<U> ?Q) s | (?P \<U> ?R) s)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       t_empty)),
    ("LTL.until_conj_distrib",
     "((%s. ?P s & ?Q s) \<U> ?R) = (%s. (?P \<U> ?R) s & (?Q \<U> ?R) s)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       t_empty)),
    ("LTL.seq_comp",
     "(?P \<W> ?Q) (?f o ?\<sigma>) =
      ((%\<sigma>. ?P (?f o \<sigma>)) \<W> (%\<sigma>. ?Q (?f o \<sigma>)))
       ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("LTL.seq_comp",
     "(?P \<U> ?Q) (?f o ?\<sigma>) =
      ((%\<sigma>. ?P (?f o \<sigma>)) \<U> (%\<sigma>. ?Q (?f o \<sigma>)))
       ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("LTL.leads_to_eventually",
     "(\<box>(%s. ?P s -->
                  (\<diamond>(%s. ?Q s -->
                                  (\<diamond>?P) s --> (\<diamond>?Q) s))
                   s))
       ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)
         )),
    ("LTL.next_stable_imp_eventually_always",
     "(\<box>(%s. ?P s --> (\<circle>?P) s)) ?\<sigma> ==>
      (\<diamond>?P) ?\<sigma> --> (\<diamond>\<box>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_var 0))
           ))),
    ("LTL.leads_to_eventuallyE",
     "[| (\<box>(%s. ?P s --> (\<diamond>?Q) s)) ?\<sigma>;
         (\<diamond>?P) ?\<sigma> |]
      ==> (\<diamond>?Q) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL.leads_to_leads_to_viaE",
     "(\<box>(%s. ?P s --> (?P \<U> ?Q) s)) ?\<sigma> -->
      (\<box>(%s. ?P s --> (\<diamond>?Q) s)) ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))
         )),
    ("LTL.eventually_always_next_stable",
     "[| (\<diamond>?P) ?\<sigma>;
         (\<box>(%s. ?P s --> (\<circle>?P) s)) ?\<sigma> |]
      ==> (\<diamond>\<box>?P) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)
           ))),
    ("LTL.always_imp_mp_suffix",
     "[| (\<box>(%s. ?P s --> ?Q s)) ?\<sigma>;
         ?P (?\<sigma> |\<^sub>s ?i) |]
      ==> ?Q (?\<sigma> |\<^sub>s ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.defs",
     "(?P \<U> ?Q) =
      (%\<sigma>.
          EX i. ?Q (\<sigma> |\<^sub>s i) &
                (ALL k<i. ?P (\<sigma> |\<^sub>s k)))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("LTL.untilI",
     "[| ?Q (?\<sigma> |\<^sub>s ?i);
         ALL k<?i. ?P (?\<sigma> |\<^sub>s k) |]
      ==> (?P \<U> ?Q) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("LTL.unless_untilI",
     "[| ?Q (?\<sigma> |\<^sub>s ?j);
         !!i. i < ?j ==> ?P (?\<sigma> |\<^sub>s i) |]
      ==> (?P \<W> ?Q) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("LTL.cong",
     "[| !!\<sigma>. ?P \<sigma> = ?P' \<sigma>;
         !!\<sigma>. ?Q \<sigma> = ?Q' \<sigma> |]
      ==> (?P \<W> ?Q) = (?P' \<W> ?Q')",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("LTL.cong",
     "[| !!\<sigma>. ?P \<sigma> = ?P' \<sigma>;
         !!\<sigma>. ?Q \<sigma> = ?Q' \<sigma> |]
      ==> (?P \<U> ?Q) = (?P' \<U> ?Q')",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("LTL.weakly_fair_unless_until",
     "(%s. weakly_fair ?enabled ?taken s &
           (\<box>(%s. ?enabled s --> (?enabled \<W> ?taken) s)) s) =
      \<box>(%s. ?enabled s --> (?enabled \<U> ?taken) s)",
     template_equation (t_empty, template_app (template_hole 3, t_empty))),
    ("LTL.stable_unless",
     "(\<box>(%s. ?P s --> (\<circle>(%s. ?P s | ?Q s)) s)) ?\<sigma> ==>
      (\<box>(%s. ?P s --> (?P \<W> ?Q) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("LTL.always_imp_trans",
     "[| (\<box>(%s. ?P s --> ?Q s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> ?R s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s --> ?R s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("LTL.stable_leads_to_eventually",
     "(\<box>(%s. ?enabled s --> (\<circle>(%s. ?enabled s | ?taken s)) s))
       ?\<sigma> ==>
      (\<box>(%s. ?enabled s --> (\<box>?enabled) s | (\<diamond>?taken) s))
       ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("LTL.untilE",
     "[| (?P \<U> ?Q) ?\<sigma>;
         !!i. [| ?Q (?\<sigma> |\<^sub>s i);
                 ALL k<i. ?P (?\<sigma> |\<^sub>s k) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("LTL.always_imp_mono",
     "[| (?P \<W> ?Q) ?\<sigma>; (\<box>(%s. ?P s --> ?P' s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> ?Q' s)) ?\<sigma> |]
      ==> (?P' \<W> ?Q') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("LTL.mono",
     "[| (?P \<W> ?Q) ?\<sigma>; !!\<sigma>. ?P \<sigma> ==> ?P' \<sigma>;
         !!\<sigma>. ?Q \<sigma> ==> ?Q' \<sigma> |]
      ==> (?P' \<W> ?Q') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("LTL.always_imp_mono",
     "[| (?P \<U> ?Q) ?\<sigma>; (\<box>(%s. ?P s --> ?P' s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> ?Q' s)) ?\<sigma> |]
      ==> (?P' \<U> ?Q') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("LTL.mono",
     "[| (?P \<U> ?Q) ?\<sigma>; !!\<sigma>. ?P \<sigma> ==> ?P' \<sigma>;
         !!\<sigma>. ?Q \<sigma> ==> ?Q' \<sigma> |]
      ==> (?P' \<U> ?Q') ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("LTL.weakly_fair_stable_leads_to",
     "[| weakly_fair ?enabled ?taken ?\<sigma>;
         (\<box>(%s. ?enabled s -->
                     (\<circle>(%s. ?enabled s | ?taken s)) s))
          ?\<sigma> |]
      ==> (\<box>(%s. ?enabled s --> (\<diamond>?taken) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("LTL.leads_to_trans",
     "[| (\<box>(%s. ?P s --> (\<diamond>?Q) s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> (\<diamond>?R) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s --> (\<diamond>?R) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("LTL.weakly_fair_stable_leads_to_via",
     "[| weakly_fair ?enabled ?taken ?\<sigma>;
         (\<box>(%s. ?enabled s -->
                     (\<circle>(%s. ?enabled s | ?taken s)) s))
          ?\<sigma> |]
      ==> (\<box>(%s. ?enabled s --> (?enabled \<U> ?taken) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)
           ))),
    ("LTL.leads_to_via_concl_weaken",
     "[| (\<box>(%s. ?R s --> ?R' s)) ?\<sigma>;
         (\<box>(%s. ?P s --> (?Q \<U> ?R) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s --> (?Q \<U> ?R') s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)
           ))),
    ("LTL.weakly_fair_weaken",
     "[| (\<box>(%s. ?enabled' s --> ?enabled s)) ?\<sigma>;
         (\<box>(%s. ?taken s --> ?taken' s)) ?\<sigma> |]
      ==> (\<box>(%s. weakly_fair ?enabled ?taken s -->
                      weakly_fair ?enabled' ?taken' s))
           ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_disj",
     "[| (\<box>(%s. ?P s --> (\<diamond>?R) s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> (\<diamond>?R) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s | ?Q s --> (\<diamond>?R) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("LTL.leads_to_via_trans",
     "[| (\<box>(%s. ?A s --> (?B \<U> ?C) s)) ?\<sigma>;
         (\<box>(%s. ?C s --> (?D \<U> ?E) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?A s --> ((%s. ?B s | ?D s) \<U> ?E) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_mono",
     "[| (\<box>(%s. ?P' s --> ?P s)) ?\<sigma>;
         (\<box>(%s. ?Q s --> ?Q' s)) ?\<sigma>;
         (\<box>(%s. ?P s --> (\<diamond>?Q) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P' s --> (\<diamond>?Q') s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_via_disj'",
     "[| (\<box>(%s. ?A s --> (?B \<U> ?C) s)) ?\<sigma>;
         (\<box>(%s. ?C s --> (?D \<U> ?E) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?A s | ?C s --> ((%s. ?B s | ?D s) \<U> ?E) s))
           ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_via_disj",
     "[| (\<box>(%s. ?P s --> (?Q \<U> ?R) s)) ?\<sigma>;
         (\<box>(%s. ?P' s --> (?Q' \<U> ?R) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s | ?P' s --> ((%s. ?Q s | ?Q' s) \<U> ?R) s))
           ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_via_stable_augmentation",
     "[| (\<box>(%s. ?P s & ?Q s --> (\<circle>?Q) s)) ?\<sigma>;
         (\<box>(%s. ?A s --> (?P \<U> ?C) s)) ?\<sigma> |]
      ==> (\<box>(%s. ?A s & ?Q s --> (?P \<U> (%s. ?C s & ?Q s)) s))
           ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 2)
           ))),
    ("LTL.unless_induct",
     "[| (\<box>(%s. ?I s --> (\<circle>(%s. ?I s | ?R s)) s)) ?\<sigma>;
         (\<box>(%s. ?P s --> ?I s | ?R s)) ?\<sigma>;
         (\<box>(%s. ?I s --> ?Q s)) ?\<sigma> |]
      ==> (\<box>(%s. ?P s --> (?Q \<W> ?R) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 2)
           ))),
    ("LTL.leads_to_via_wf",
     "[| wf ?R;
         !!t. (\<box>(%s. ?A s & \<lceil>%s. ?\<delta> s = t\<rceil> s -->
                          (?B \<U>
                           (%s. ?A s &
                                \<lceil>%s. (?\<delta> s, t) : ?R\<rceil>
                                 s |
                                ?C s))
                           s))
               ?\<sigma> |]
      ==> (\<box>(%s. ?A s --> (?B \<U> ?C) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, t_empty), template_var 0)
           ))),
    ("LTL.leads_to_wf",
     "[| wf ?R;
         (\<box>(%s. EX x. \<lceil>%s. x : fst ` ?Is\<rceil> s &
                           (?P s --> x s)))
          ?\<sigma>;
         ALL (\<phi>, \<delta>):?Is.
            EX (\<phi>', \<delta>'):insert (?Q, ?\<delta>0.0) ?Is.
               ALL t.
                  (\<box>(%s. \<phi> s &
                              \<lceil>%s. \<delta> s = t\<rceil> s -->
                              (\<diamond>(%s.
       \<phi>' s & \<lceil>%s. (\<delta>' s, t) : ?R\<rceil> s))
                               s))
                   ?\<sigma> |]
      ==> (\<box>(%s. ?P s --> (\<diamond>?Q) s)) ?\<sigma>",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app (template_hole 8, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 17, t_empty), template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.LTLMoreTemplates"
### 0.339s elapsed time, 0.485s cpu time, 0.059s GC time
val it = (): unit
