Loading theory "Draft.CIMP_pred" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.CIMP_vcg_rules" via "Draft.CIMP_vcg" via "Draft.CIMP_lang")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.CIMP_pred"
### 0.131s elapsed time, 0.536s cpu time, 0.036s GC time
Loading theory "Draft.Infinite_Sequences" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.CIMP_vcg_rules" via "Draft.CIMP_vcg" via "Draft.CIMP_lang" via "Draft.LTL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.618s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  stake :: "nat => (nat => 'a) => 'a list"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.822s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Infinite_Sequences"
### 0.183s elapsed time, 0.717s cpu time, 0.096s GC time
Loading theory "Draft.LTL" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.CIMP_vcg_rules" via "Draft.CIMP_vcg" via "Draft.CIMP_lang")
### theory "HOL-Library.Nat_Bijection"
### 0.373s elapsed time, 1.484s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.LTL"
### 0.387s elapsed time, 1.528s cpu time, 0.175s GC time
Loading theory "Draft.CIMP_lang" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.CIMP_vcg_rules" via "Draft.CIMP_vcg")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.057s elapsed time, 3.938s cpu time, 1.045s GC time
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.062s cpu time, 1.037s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.099s elapsed time, 6.548s cpu time, 1.398s GC time
Loading theory "Draft.Templates" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CIMP_vcg_rulesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.799s elapsed time, 1.907s cpu time, 0.807s GC time
Proofs for inductive predicate(s) "small_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "system_step"
  Proving monotonicity ...
consts
  atC :: "('answer, 'location, 'question, 'state) com => 'location set"
consts
  atCs ::
    "('answer, 'location, 'question, 'state) com list => 'location set"
### theory "Draft.CIMP_lang"
### 4.093s elapsed time, 8.221s cpu time, 2.144s GC time
Loading theory "Draft.CIMP_vcg" (required by "Draft.CIMP_vcg_rulesMoreTemplates" via "Draft.CIMP_vcg_rules")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "basic_com"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctxtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "vcg"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.CIMP_vcg"
### 2.669s elapsed time, 3.080s cpu time, 0.335s GC time
Loading theory "Draft.CIMP_vcg_rules" (required by "Draft.CIMP_vcg_rulesMoreTemplates")
### theory "Draft.CIMP_vcg_rules"
### 0.266s elapsed time, 0.308s cpu time, 0.047s GC time
Loading theory "Draft.CIMP_vcg_rulesMoreTemplates"
val templateLemmas =
   [("CIMP_vcg_rules.vcg_True", "valid_syn ?coms ?p ?aft ?P ?c (%s. True)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           t_empty)
         )),
    ("CIMP_vcg_rules.vcg_prop",
     "?coms, ?p, ?aft \<turnstile> \<lbrace>%s. ?P\<rbrace> ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               t_empty),
             template_var 0),
           t_empty)
         )),
    ("CIMP_vcg_rules.curry_forall_eq",
     "(ALL f. ?P f) = (ALL f. ?P (%(x, y). f x y))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 1, t_empty))),
    ("CIMP_vcg_rules.vcg_drop_imp",
     "valid_syn ?coms ?p ?aft ?P ?c ?Q ==>
      valid_syn ?coms ?p ?aft ?P ?c (%s. ?R s --> ?Q s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg_rules.eq_impD",
     "[| eq_imp ?f ?g; ALL x. ?f x ?s = ?f x ?s' |] ==> ?g ?s = ?g ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("CIMP_vcg_rules.vcg_name_pre_state",
     "(!!s. ?P s ==> valid_syn ?coms ?p ?aft ((=) s) ?c ?Q) ==>
      valid_syn ?coms ?p ?aft ?P ?c ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("CIMP_vcg_rules.vcg_pre",
     "[| valid_syn ?coms ?p ?aft ?Q ?c ?R; !!s. ?P s ==> ?Q s |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("CIMP_vcg_rules.vcg_pre_imp",
     "[| !!s. ?P s ==> ?Q s; valid_syn ?coms ?p ?aft ?Q ?c ?R |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("CIMP_vcg_rules.vcg_post_imp",
     "[| !!s. ?Q s ==> ?R s; valid_syn ?coms ?p ?aft ?P ?c ?Q |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)
           ))),
    ("CIMP_vcg_rules.eq_imp_fun_upd",
     "[| eq_imp ?f ?g; ALL x. ?f x (?s(?fld := ?val)) = ?f x ?s |]
      ==> ?g (?s(?fld := ?val)) = ?g ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_var 3, template_var 2)))),
    ("CIMP_vcg_rules.vcg_all_lift",
     "(!!x. valid_syn ?coms ?p ?aft (?P x) ?c (?Q x)) ==>
      valid_syn ?coms ?p ?aft (%s. ALL x. ?P x s) ?c (%s. ALL x. ?Q x s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 t_empty),
               template_var 1),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_ex_lift",
     "(!!x. valid_syn ?coms ?p ?aft (?P x) ?c (?Q x)) ==>
      valid_syn ?coms ?p ?aft (%s. EX x. ?P x s) ?c (%s. EX x. ?Q x s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 t_empty),
               template_var 1),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_conj",
     "[| valid_syn ?coms ?p ?aft ?I ?c ?Q;
         valid_syn ?coms ?p ?aft ?I ?c ?R |]
      ==> valid_syn ?coms ?p ?aft ?I ?c (%s. ?Q s & ?R s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg_rules.eq_imp_vcg",
     "[| eq_imp ?f ?g;
         ALL x P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f x\<rbrace>
            ?c |]
      ==> ?coms, ?p, ?aft \<turnstile> \<lbrace>?P o ?g\<rbrace> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 5))
           ))),
    ("CIMP_vcg_rules.vcg_conj_lift",
     "[| valid_syn ?coms ?p ?aft ?P ?c ?Q;
         valid_syn ?coms ?p ?aft ?P' ?c ?Q' |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P s & ?P' s) ?c (%s. ?Q s & ?Q' s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_disj_lift",
     "[| valid_syn ?coms ?p ?aft ?P ?c ?Q;
         valid_syn ?coms ?p ?aft ?P' ?c ?Q' |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P s | ?P' s) ?c (%s. ?Q s | ?Q' s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_imp_lift",
     "[| valid_syn ?coms ?p ?aft ?P' ?c (%s. ~ ?P s);
         valid_syn ?coms ?p ?aft ?Q' ?c ?Q |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P' s | ?Q' s) ?c
           (%s. ?P s --> ?Q s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg_rules.eq_imp_vcg_LST",
     "[| eq_imp ?f ?g;
         ALL x P. ?coms, ?p, ?aft \<turnstile>
            \<lbrace>P o ?f x o LST\<rbrace> ?c |]
      ==> ?coms, ?p, ?aft \<turnstile> \<lbrace>?P o ?g o LST\<rbrace> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5)),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_hole 1))
           ))),
    ("CIMP_vcg_rules.vcg_lift_comp",
     "[| !!P. ?coms, ?p, ?aft \<turnstile> \<lbrace>%s. P (?f s)\<rbrace>
              ?c;
         !!x. valid_syn ?coms ?p ?aft (?Q x) ?c (?P x) |]
      ==> valid_syn ?coms ?p ?aft (%s. ?Q (?f s) s) ?c (%s. ?P (?f s) s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 t_empty),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg_rules.pres_tuple_vcg",
     "(ALL P. ?coms, ?p, ?aft \<turnstile>
          \<lbrace>P o (%s. (?f s, ?g s))\<rbrace> ?c) =
      ((ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f\<rbrace> ?c) &
       (ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?g\<rbrace> ?c))",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("CIMP_vcg_rules.pres_tuple_vcg_LST",
     "(ALL P. ?coms, ?p, ?aft \<turnstile>
          \<lbrace>P o (%s. (?f s, ?g s)) o LST\<rbrace> ?c) =
      ((ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f o LST\<rbrace>
           ?c) &
       (ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?g o LST\<rbrace>
           ?c))",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.CIMP_vcg_rulesMoreTemplates"
### 0.380s elapsed time, 0.498s cpu time, 0.000s GC time
val it = (): unit
