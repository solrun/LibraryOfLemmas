Loading theory "Draft.CIMP_pred" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.Infinite_Sequences")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.CIMP_pred"
### 0.123s elapsed time, 0.516s cpu time, 0.042s GC time
Loading theory "Draft.Infinite_Sequences" (required by "Draft.Infinite_SequencesMoreTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.524s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  stake :: "nat => (nat => 'a) => 'a list"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.861s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Infinite_Sequences"
### 0.190s elapsed time, 0.747s cpu time, 0.095s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.294s cpu time, 0.137s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.738s elapsed time, 2.337s cpu time, 0.336s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.957s elapsed time, 2.771s cpu time, 0.783s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.854s elapsed time, 4.315s cpu time, 0.958s GC time
Loading theory "Draft.Templates" (required by "Draft.Infinite_SequencesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Infinite_SequencesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.510s cpu time, 0.071s GC time
Loading theory "Draft.Infinite_SequencesMoreTemplates"
val templateLemmas =
   [("Infinite_Sequences.live", "liveness (Live ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Infinite_Sequences.safe", "safety (Safe ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Infinite_Sequences.suffix_zero", "?\<sigma> |\<^sub>s 0 = ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Infinite_Sequences.safety_state_prop",
     "safety (%\<sigma>. ?P (\<sigma> 0))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.length_stake",
     "length (Infinite_Sequences.stake ?n ?s) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Infinite_Sequences.absolute_liveness_liveness",
     "absolute_liveness ?P ==> liveness ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.safety_invariant",
     "safety (%\<sigma>. ALL i. ?P (\<sigma> i))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.suffix_eval",
     "(?\<sigma> |\<^sub>s ?i) ?j = ?\<sigma> (?j + ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Infinite_Sequences.stake_suffix_id",
     "Infinite_Sequences.stake ?i ?\<sigma> @- (?\<sigma> |\<^sub>s ?i) =
      ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("Infinite_Sequences.stake_nil",
     "(Infinite_Sequences.stake ?i ?\<sigma> = []) = (?i = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Infinite_Sequences.decomp", "?P = (%s. Safe ?P s & Live ?P s)",
     template_equation (template_var 0, t_empty)),
    ("Infinite_Sequences.comp_suffix",
     "?f o ?\<sigma> |\<^sub>s ?i = (?f o ?\<sigma>) |\<^sub>s ?i",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Infinite_Sequences.suffix_plus_com",
     "?\<sigma> |\<^sub>s ?m |\<^sub>s ?n = ?\<sigma> |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Infinite_Sequences.suffix_plus",
     "?\<sigma> |\<^sub>s ?n |\<^sub>s ?m = ?\<sigma> |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Infinite_Sequences.suffix_commute",
     "?\<sigma> |\<^sub>s ?n |\<^sub>s ?m =
      ?\<sigma> |\<^sub>s ?m |\<^sub>s ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Infinite_Sequences.livenessI",
     "(!!\<alpha>. EX \<sigma>. ?P (\<alpha> @- \<sigma>)) ==> liveness ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.shift_simps",
     "(?xs @- ?\<sigma>) 0 = (if ?xs = [] then ?\<sigma> 0 else hd ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app (template_var 0, template_hole 4)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Infinite_Sequences.stake_suffix_drop",
     "?\<sigma>(?j \<rightarrow> ?i) =
      drop ?j (Infinite_Sequences.stake (?i + ?j) ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Infinite_Sequences.safety_transition_relation",
     "safety (%\<sigma>. ALL i. (\<sigma> i, \<sigma> (i + 1)) : ?R)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Infinite_Sequences.stake_nth",
     "?i < ?j ==> Infinite_Sequences.stake ?j ?s ! ?i = ?s ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Infinite_Sequences.shift_snth_less",
     "?i < length ?xs ==> (?xs @- ?\<sigma>) ?i = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Infinite_Sequences.id_stake_snth_suffix",
     "?\<sigma> =
      (Infinite_Sequences.stake ?i ?\<sigma> @ [?\<sigma> ?i]) @-
      (?\<sigma> |\<^sub>s Suc ?i)",
     template_equation
      (template_var 1,
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 1, template_var 0)),
               template_hole 2))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Infinite_Sequences.stake_add",
     "Infinite_Sequences.stake ?i ?\<sigma> @
      ?\<sigma>(?i \<rightarrow> ?j) =
      Infinite_Sequences.stake (?i + ?j) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Infinite_Sequences.safety_conj",
     "[| safety ?P; safety ?Q |] ==> safety (%s. ?P s & ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.safety_disj",
     "[| safety ?P; safety ?Q |] ==> safety (%s. ?P s | ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.suffix_shift",
     "?xs @- ?\<sigma> |\<^sub>s ?i =
      drop ?i ?xs @- (?\<sigma> |\<^sub>s ?i - length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Infinite_Sequences.stake_shift",
     "Infinite_Sequences.stake ?i (?w @- ?\<sigma>) =
      take ?i ?w @ Infinite_Sequences.stake (?i - length ?w) ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Infinite_Sequences.shift_snth_ge",
     "length ?xs <= ?i ==>
      (?xs @- ?\<sigma>) ?i = ?\<sigma> (?i - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 2)))))),
    ("Infinite_Sequences.stable_absolute_liveness",
     "[| ?P ?\<sigma>; ~ ?P ?\<sigma>' |]
      ==> stable ?P = absolute_liveness (%s. ~ ?P s)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, t_empty)))),
    ("Infinite_Sequences.shift_snth",
     "(?xs @- ?\<sigma>) ?i =
      (if ?i < length ?xs then ?xs ! ?i else ?\<sigma> (?i - length ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 2, template_var 2)))))),
    ("Infinite_Sequences.shift_simps",
     "?xs @- ?\<sigma> |\<^sub>s Suc 0 =
      (if ?xs = [] then ?\<sigma> |\<^sub>s Suc 0
       else tl ?xs @- ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 5, template_hole 4))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Infinite_Sequences.stake_shift_stake_shift",
     "Infinite_Sequences.stake ?i ?\<sigma> @-
      ?\<sigma>(?i \<rightarrow> ?j) @- ?\<beta> =
      Infinite_Sequences.stake (?i + ?j) ?\<sigma> @- ?\<beta>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Infinite_Sequences.stake_append",
     "Infinite_Sequences.stake ?n (?u @- ?s) =
      take (min (length ?u) ?n) ?u @
      Infinite_Sequences.stake (?n - length ?u) ?s",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)))),
    ("Infinite_Sequences.safetyI2",
     "(!!\<sigma>.
          (!!i. EX \<beta>.
                   ?P (Infinite_Sequences.stake i \<sigma> @- \<beta>)) ==>
          ?P \<sigma>) ==>
      safety ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.fairness_safety",
     "[| safety ?P; fairness ?F |]
      ==> (ALL \<sigma>. ?F \<sigma> --> ?P \<sigma>) =
          (ALL \<sigma>. ?P \<sigma>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.stake_suffix",
     "?i <= ?j ==>
      Infinite_Sequences.stake ?j ?\<sigma> @- ?u |\<^sub>s ?i =
      ?\<sigma>(?i \<rightarrow> ?j - ?i) @- ?u",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3))),
           template_var 0)))),
    ("Infinite_Sequences.safetyI",
     "(!!\<sigma>.
          ~ ?P \<sigma> ==>
          EX i. ALL \<beta>.
                   ~ ?P (Infinite_Sequences.stake i \<sigma> @-
                         \<beta>)) ==>
      safety ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.safety_always_eventually",
     "[| safety ?P;
         ALL i.
            EX j>=i.
               EX \<beta>.
                  ?P (Infinite_Sequences.stake j ?\<sigma> @- \<beta>) |]
      ==> ?P ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Infinite_SequencesMoreTemplates"
### 0.297s elapsed time, 0.385s cpu time, 0.000s GC time
val it = (): unit
