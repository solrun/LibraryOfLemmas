   [("Infinite_Sequences.live", "liveness (Live ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Infinite_Sequences.safe", "safety (Safe ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Infinite_Sequences.suffix_zero", "?\<sigma> |\<^sub>s 0 = ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Infinite_Sequences.safety_state_prop",
     "safety (%\<sigma>. ?P (\<sigma> 0))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.length_stake",
     "length (Infinite_Sequences.stake ?n ?s) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Infinite_Sequences.absolute_liveness_liveness",
     "absolute_liveness ?P ==> liveness ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.safety_invariant",
     "safety (%\<sigma>. ALL i. ?P (\<sigma> i))",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.suffix_eval",
     "(?\<sigma> |\<^sub>s ?i) ?j = ?\<sigma> (?j + ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Infinite_Sequences.stake_suffix_id",
     "Infinite_Sequences.stake ?i ?\<sigma> @- (?\<sigma> |\<^sub>s ?i) =
      ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("Infinite_Sequences.stake_nil",
     "(Infinite_Sequences.stake ?i ?\<sigma> = []) = (?i = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Infinite_Sequences.decomp", "?P = (%s. Safe ?P s & Live ?P s)",
     template_equation (template_var 0, t_empty)),
    ("Infinite_Sequences.comp_suffix",
     "?f o ?\<sigma> |\<^sub>s ?i = (?f o ?\<sigma>) |\<^sub>s ?i",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Infinite_Sequences.suffix_plus_com",
     "?\<sigma> |\<^sub>s ?m |\<^sub>s ?n = ?\<sigma> |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Infinite_Sequences.suffix_plus",
     "?\<sigma> |\<^sub>s ?n |\<^sub>s ?m = ?\<sigma> |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Infinite_Sequences.suffix_commute",
     "?\<sigma> |\<^sub>s ?n |\<^sub>s ?m =
      ?\<sigma> |\<^sub>s ?m |\<^sub>s ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Infinite_Sequences.livenessI",
     "(!!\<alpha>. EX \<sigma>. ?P (\<alpha> @- \<sigma>)) ==> liveness ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.shift_simps",
     "(?xs @- ?\<sigma>) 0 = (if ?xs = [] then ?\<sigma> 0 else hd ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app (template_var 0, template_hole 4)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Infinite_Sequences.stake_suffix_drop",
     "?\<sigma>(?j \<rightarrow> ?i) =
      drop ?j (Infinite_Sequences.stake (?i + ?j) ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Infinite_Sequences.safety_transition_relation",
     "safety (%\<sigma>. ALL i. (\<sigma> i, \<sigma> (i + 1)) : ?R)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Infinite_Sequences.stake_nth",
     "?i < ?j ==> Infinite_Sequences.stake ?j ?s ! ?i = ?s ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Infinite_Sequences.shift_snth_less",
     "?i < length ?xs ==> (?xs @- ?\<sigma>) ?i = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Infinite_Sequences.id_stake_snth_suffix",
     "?\<sigma> =
      (Infinite_Sequences.stake ?i ?\<sigma> @ [?\<sigma> ?i]) @-
      (?\<sigma> |\<^sub>s Suc ?i)",
     template_equation
      (template_var 1,
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 1, template_var 0)),
               template_hole 2))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Infinite_Sequences.stake_add",
     "Infinite_Sequences.stake ?i ?\<sigma> @
      ?\<sigma>(?i \<rightarrow> ?j) =
      Infinite_Sequences.stake (?i + ?j) ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Infinite_Sequences.safety_conj",
     "[| safety ?P; safety ?Q |] ==> safety (%s. ?P s & ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.safety_disj",
     "[| safety ?P; safety ?Q |] ==> safety (%s. ?P s | ?Q s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.suffix_shift",
     "?xs @- ?\<sigma> |\<^sub>s ?i =
      drop ?i ?xs @- (?\<sigma> |\<^sub>s ?i - length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Infinite_Sequences.stake_shift",
     "Infinite_Sequences.stake ?i (?w @- ?\<sigma>) =
      take ?i ?w @ Infinite_Sequences.stake (?i - length ?w) ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Infinite_Sequences.shift_snth_ge",
     "length ?xs <= ?i ==>
      (?xs @- ?\<sigma>) ?i = ?\<sigma> (?i - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 2)))))),
    ("Infinite_Sequences.stable_absolute_liveness",
     "[| ?P ?\<sigma>; ~ ?P ?\<sigma>' |]
      ==> stable ?P = absolute_liveness (%s. ~ ?P s)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, t_empty)))),
    ("Infinite_Sequences.shift_snth",
     "(?xs @- ?\<sigma>) ?i =
      (if ?i < length ?xs then ?xs ! ?i else ?\<sigma> (?i - length ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 2, template_var 2)))))),
    ("Infinite_Sequences.shift_simps",
     "?xs @- ?\<sigma> |\<^sub>s Suc 0 =
      (if ?xs = [] then ?\<sigma> |\<^sub>s Suc 0
       else tl ?xs @- ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 5, template_hole 4))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Infinite_Sequences.stake_shift_stake_shift",
     "Infinite_Sequences.stake ?i ?\<sigma> @-
      ?\<sigma>(?i \<rightarrow> ?j) @- ?\<beta> =
      Infinite_Sequences.stake (?i + ?j) ?\<sigma> @- ?\<beta>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Infinite_Sequences.stake_append",
     "Infinite_Sequences.stake ?n (?u @- ?s) =
      take (min (length ?u) ?n) ?u @
      Infinite_Sequences.stake (?n - length ?u) ?s",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0)))),
    ("Infinite_Sequences.safetyI2",
     "(!!\<sigma>.
          (!!i. EX \<beta>.
                   ?P (Infinite_Sequences.stake i \<sigma> @- \<beta>)) ==>
          ?P \<sigma>) ==>
      safety ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.fairness_safety",
     "[| safety ?P; fairness ?F |]
      ==> (ALL \<sigma>. ?F \<sigma> --> ?P \<sigma>) =
          (ALL \<sigma>. ?P \<sigma>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Infinite_Sequences.stake_suffix",
     "?i <= ?j ==>
      Infinite_Sequences.stake ?j ?\<sigma> @- ?u |\<^sub>s ?i =
      ?\<sigma>(?i \<rightarrow> ?j - ?i) @- ?u",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3))),
           template_var 0)))),
    ("Infinite_Sequences.safetyI",
     "(!!\<sigma>.
          ~ ?P \<sigma> ==>
          EX i. ALL \<beta>.
                   ~ ?P (Infinite_Sequences.stake i \<sigma> @-
                         \<beta>)) ==>
      safety ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Infinite_Sequences.safety_always_eventually",
     "[| safety ?P;
         ALL i.
            EX j>=i.
               EX \<beta>.
                  ?P (Infinite_Sequences.stake j ?\<sigma> @- \<beta>) |]
      ==> ?P ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
