Loading theory "Draft.CIMP_pred" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.497s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CIMP_pred"
### 0.128s elapsed time, 0.530s cpu time, 0.041s GC time
Loading theory "Draft.Infinite_Sequences" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP" via "Draft.CIMP_lang" via "Draft.LTL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  stake :: "nat => (nat => 'a) => 'a list"
consts
  shift :: "'a list => (nat => 'a) => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.288s elapsed time, 1.151s cpu time, 0.118s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Infinite_Sequences"
### 0.186s elapsed time, 0.724s cpu time, 0.078s GC time
Loading theory "Draft.LTL" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP" via "Draft.CIMP_lang")
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.510s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.LTL"
### 0.370s elapsed time, 1.452s cpu time, 0.138s GC time
Loading theory "Draft.CIMP_lang" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.006s elapsed time, 3.746s cpu time, 0.896s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.159s elapsed time, 4.137s cpu time, 0.978s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.045s elapsed time, 6.524s cpu time, 1.273s GC time
Loading theory "Draft.Templates" (required by "Draft.CIMPMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CIMPMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.143s cpu time, 0.128s GC time
Proofs for inductive predicate(s) "small_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "system_step"
  Proving monotonicity ...
consts
  atC :: "('answer, 'location, 'question, 'state) com => 'location set"
consts
  atCs ::
    "('answer, 'location, 'question, 'state) com list => 'location set"
### theory "Draft.CIMP_lang"
### 3.763s elapsed time, 7.344s cpu time, 1.375s GC time
Loading theory "Draft.CIMP_vcg" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "basic_com"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctxtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "vcg"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.CIMP_vcg"
### 3.025s elapsed time, 4.134s cpu time, 1.316s GC time
Loading theory "Draft.CIMP_vcg_rules" (required by "Draft.CIMPMoreTemplates" via "Draft.CIMP")
### theory "Draft.CIMP_vcg_rules"
### 0.262s elapsed time, 0.303s cpu time, 0.041s GC time
Loading theory "Draft.CIMP" (required by "Draft.CIMPMoreTemplates")
val ss_only = fn: thm list -> Proof.context -> Proof.context
val HOL_ss_only = fn: thm list -> Proof.context -> Proof.context
signature CIMP =
  sig
    val com_locs_fold: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_fold_no_response: (term * 'a -> 'a) -> 'a -> term -> 'a
    val com_locs_map: (term -> 'a) -> term -> 'a list
    val com_locs_map_no_response: (term -> 'a) -> term -> 'a list
    val def_locset: thm -> local_theory -> local_theory
    val intern_com: Facts.ref -> local_theory -> local_theory
  end
structure Cimp: CIMP
### theory "Draft.CIMP"
### 0.122s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.CIMPMoreTemplates"
val templateLemmas =
   [("CIMP_vcg.prerun_valid_TrueI",
     "?sys \<Turnstile>\<^bsub>pre\<^esub> %s. True",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)
         )),
    ("CIMP_pred.triv", "?P ==> ?P",
     template_implication
      ([template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP.cleanup_simps", "EX x. x = ?t",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("CIMP.cleanup_simps", "EX x. ?t = x",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("CIMP_vcg.atS_simps", "~ atS ?p {} ?s",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 0)
             )
         )),
    ("CIMP_vcg.atC_not_empty", "atC ?c ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("CIMP_vcg.decompose_com_non_empty", "decompose_com ?c ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("CIMP.cleanup_simps", "?P ~= (~ ?P)",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 1, template_var 0))
         )),
    ("CIMP.cleanup_simps", "(~ ?P) ~= ?P",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_var 0)
         )),
    ("CIMP.cleanup_simps", "(ALL x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("CIMP.cleanup_simps", "(EX x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("CIMP.cleanup_simps", "(~ ~ ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CIMP.cleanup_simps", "(False & ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(True & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?P & False) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(?P & True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?P & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(False | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(True | ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(?P | False) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?P | True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(?P | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?x = ?x) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(True = ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?P = True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(False --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(True --> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("CIMP.cleanup_simps", "(?P --> True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(?P --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(False = ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("CIMP.cleanup_simps", "(?P = False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("CIMP.cleanup_simps", "(?P --> False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("CIMP.cleanup_simps", "(?P & ~ ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(~ ?P & ?P) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(?P | ~ ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("CIMP.cleanup_simps", "(~ ?P | ?P) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("CIMP_vcg.small_step_stuck",
     "~ ([], ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?c'",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1),
               template_var 0)
             )
         )),
    ("CIMP.cleanup_simps", "(?P --> ~ ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("CIMP_vcg.vcg_fragments'_fragments",
     "vcg_fragments' ?c' ?aft' <= fragments ?c' ?aft'",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CIMP_vcg_rules.vcg_True", "valid_syn ?coms ?p ?aft ?P ?c (%s. True)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           t_empty)
         )),
    ("CIMP_vcg.atCs_empty", "(atCs ?cs = {}) = (?cs = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("CIMP.cleanup_simps", "(ALL x. x ~= ?t) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("CIMP.cleanup_simps", "(ALL x. ?t ~= x) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("CIMP_vcg_rules.vcg_prop",
     "?coms, ?p, ?aft \<turnstile> \<lbrace>%s. ?P\<rbrace> ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               t_empty),
             template_var 0),
           t_empty)
         )),
    ("CIMP.cleanup_simps", "(?P ~= ?Q) = (?P = (~ ?Q))",
     template_bimplication
      (template_negation
        (template_equation (template_var 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("CIMP.cleanup_simps", "(?P & ?P & ?Q) = (?P & ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CIMP.cleanup_simps", "(?P | ?P | ?Q) = (?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CIMP.cleanup_simps", "((~ ?P) = (~ ?Q)) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("CIMP_vcg.prerun_reachable_state",
     "prerun ?sys ?\<sigma> ==> reachable_state ?sys (?\<sigma> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("CIMP_vcg_rules.curry_forall_eq",
     "(ALL f. ?P f) = (ALL f. ?P (%(x, y). f x y))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 1, t_empty))),
    ("CIMP_vcg.valid_prerun_lift",
     "?sys \<Turnstile>\<^bsub>pre\<^esub> ?I ==>
      ?sys \<Turnstile> \<box>\<lceil>?I\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg.system_step_pls_nonempty",
     "system_step ?pls ?sh' ?sh ==> ?pls ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("CIMP_vcg.fragmentsL_basic_com",
     "(?c', ?aft') : fragmentsL ?cs ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP_vcg.decomposeLS_basic_com",
     "(?c', ?ctxts) : decomposeLS ?s ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP_vcg.decompose_com_basic_com",
     "(?c', ?ctxts) : decompose_com ?c ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("CIMP.cleanup_simps", "(ALL x. x = ?t --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("CIMP.cleanup_simps", "(ALL x. ?t = x --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("CIMP.cleanup_simps", "(EX x. x = ?t & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("CIMP.cleanup_simps", "(EX x. ?t = x & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("CIMP_vcg.decompose_com_ctxt",
     "(?c', ?ctxts) : decompose_com ?c ==> ?ctxts : ctxt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("CIMP_vcg.fragments_basic_com",
     "(?c', ?aft') : fragments ?c ?aft ==> basic_com ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 3)))),
    ("CIMP_vcg.atS_simps", "atS ?p {?l} ?s = CIMP_lang.at ?p ?l ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("CIMP_vcg.prerun_validE",
     "[| reachable_state ?sys ?s; ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I |]
      ==> ?I ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg.small_step_fragmentsLS",
     "?s \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' ==>
      fragmentsLS ?s' <= fragmentsLS ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("CIMP_vcg.decompose_com_ictxt",
     "(?c', ?ictxt, ?fctxt) : decompose_com ?c ==> ?ictxt ?c' = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_app (template_var 2, template_var 3), template_var 0))),
    ("CIMP_vcg.prerun_validI",
     "(!!s. reachable_state ?sys s ==> ?I s) ==>
      ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre (LOOP DO ?c OD) ?post; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.at_decompose",
     "(?c, ?ictxt, ?fctxt) : decompose_com ?c0.0 ==> atC ?c <= atC ?c0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("CIMP_vcg.atS_mono",
     "[| atS ?p ?ls ?s; ?ls <= ?ls' |] ==> atS ?p ?ls' ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre (?c1.0 \<oplus> ?c2.0) ?post; ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre
          (\<lbrace>?l\<rbrace> Response ?action) ?post;
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre (?c1.0 ;; ?c2.0) ?post; ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("CIMP_vcg.atLs_disj_union",
     "(%s. atLs ?p ?label0.0 s | atLs ?p ?label1.0 s) =
      atLs ?p (?label0.0 Un ?label1.0)",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CIMP_vcg.atS_un",
     "atS ?p (?l Un ?l') ?s = (atS ?p ?l ?s | atS ?p ?l' ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("CIMP_vcg.reachable_state_fragmentsLS",
     "reachable_state ?sys ?sh ==>
      fragmentsLS (GST ?sh ?p) <= fragments (PGMs ?sys ?p) {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("CIMP_vcg.at_decomposeLS",
     "(?c, ?ictxt, ?fctxt) : decomposeLS ?s ==> atC ?c <= atCs (cPGM ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 3),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("CIMP_vcg.atS_simps",
     "[| CIMP_lang.at ?p ?l ?s; ?l : ?ls |] ==> atS ?p ?ls ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("CIMP_vcg.terminated_no_commands",
     "atLs ?p {{}} ?sh ==> EX s. GST ?sh ?p = ([], s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_hole 5)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("CIMP_vcg.ctxt_inj",
     "[| (?E, ?fctxt) : ctxt; ?E ?x = ?E ?y |] ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_hole 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_var 3, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("CIMP_vcg.atLs_insert_disj",
     "atLs ?p (insert ?l ?label0.0) =
      (%s. atLs ?p {?l} s | atLs ?p ?label0.0 s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("CIMP_vcg.atS_state_weak_cong",
     "AT ?s ?p = AT ?s' ?p ==> atS ?p ?ls ?s = atS ?p ?ls ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("CIMP_vcg.prerun_valid_conjI",
     "[| ?sys \<Turnstile>\<^bsub>pre\<^esub> ?P;
         ?sys \<Turnstile>\<^bsub>pre\<^esub> ?Q |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> %s. ?P s & ?Q s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("CIMP_vcg.small_step_terminated",
     "[| ?s \<rightarrow>\<^bsub>?x\<^esub> ?s'; atCs (cPGM ?s) = {} |]
      ==> atCs (cPGM ?s') = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 2)),
          template_hole 0)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("CIMP_vcg.lcond_split",
     "?Q (lcond ?lp ?lp' ?b ?s) =
      ((?b ?s --> ?Q ?lp) & (~ ?b ?s --> ?Q ?lp'))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app (template_var 4, template_var 3))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0))),
           template_app (template_var 4, template_var 2))))),
    ("CIMP_vcg.atS_simps",
     "ALL l. CIMP_lang.at ?p l ?s --> l ~: ?ls ==> ~ atS ?p ?ls ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("CIMP_vcg.system_step_no_change",
     "[| system_step ?ps ?sh' ?sh; ?p ~: ?ps |]
      ==> GST ?sh' ?p = GST ?sh ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CIMP_vcg.initial_states_initial",
     "initial_state ?sys ?s ==>
      CIMP_lang.at ?p ?l (| GST = ?s, HST = [] |) =
      (?l : atC (PGMs ?sys ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3),
                 template_hole 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)))))),
    ("CIMP_vcg.terminated_stable",
     "[| system_step ?q ?sh' ?sh; atLs ?p {{}} ?sh |]
      ==> atLs ?p {{}} ?sh'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_var 2)
           ))),
    ("CIMP_vcg_rules.vcg_drop_imp",
     "valid_syn ?coms ?p ?aft ?P ?c ?Q ==>
      valid_syn ?coms ?p ?aft ?P ?c (%s. ?R s --> ?Q s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg.reachable_stateE",
     "[| reachable_state ?sys ?sh;
         !!\<sigma> i. prerun ?sys \<sigma> ==> ?P (\<sigma> i) |]
      ==> ?P ?sh",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg_rules.eq_impD",
     "[| eq_imp ?f ?g; ALL x. ?f x ?s = ?f x ?s' |] ==> ?g ?s = ?g ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("CIMP_vcg.terminated_GST_stable",
     "[| system_step ?q ?sh' ?sh; atLs ?p {{}} ?sh |]
      ==> GST ?sh ?p = GST ?sh' ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CIMP_vcg.fragments_vcg_fragments'",
     "[| (?c, ?aft) : fragments ?c' ?aft'; ~ isResponse ?c |]
      ==> (?c, ?aft) : vcg_fragments' ?c' ?aft'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CIMP_vcg.lcond_split_asm",
     "?Q (lcond ?lp ?lp' ?b ?s) =
      (~ (?b ?s & ~ ?Q ?lp | ~ ?b ?s & ~ ?Q ?lp'))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_var 4, template_var 3)))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_hole 2,
               template_app (template_var 4, template_var 2))))))),
    ("CIMP_vcg.decompose_fragments",
     "(?c, ?ictxt, ?fctxt) : decompose_com ?c0.0 ==>
      (?c, loc_compC ?c (?fctxt ?c @ ?cs)) : fragments ?c0.0 (atCs ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_var 2, template_var 4)),
                     template_var 0)))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg_rules.vcg_name_pre_state",
     "(!!s. ?P s ==> valid_syn ?coms ?p ?aft ((=) s) ?c ?Q) ==>
      valid_syn ?coms ?p ?aft ?P ?c ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("CIMP_vcg.small_step_loc_compC",
     "[| basic_com ?c;
         (?c # ?cs, ?ls) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ls' |]
      ==> loc_compC ?c ?cs (snd ?ls) = atCs (cPGM ?ls')",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("CIMP_vcg.decomposeLS_fragmentsLS",
     "(?c, ?ictxt, ?fctxt) : decomposeLS ?s ==>
      (?c, loc_compC ?c (?fctxt ?c @ tl (cPGM ?s))) : fragmentsLS ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_var 1, template_var 3)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)))))),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("CIMP_vcg_rules.vcg_pre",
     "[| valid_syn ?coms ?p ?aft ?Q ?c ?R; !!s. ?P s ==> ?Q s |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("CIMP_vcg_rules.vcg_pre_imp",
     "[| !!s. ?P s ==> ?Q s; valid_syn ?coms ?p ?aft ?Q ?c ?R |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("CIMP_vcg_rules.vcg_post_imp",
     "[| !!s. ?Q s ==> ?R s; valid_syn ?coms ?p ?aft ?P ?c ?Q |]
      ==> valid_syn ?coms ?p ?aft ?P ?c ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)
           ))),
    ("CIMP_vcg_rules.eq_imp_fun_upd",
     "[| eq_imp ?f ?g; ALL x. ?f x (?s(?fld := ?val)) = ?f x ?s |]
      ==> ?g (?s(?fld := ?val)) = ?g ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_var 3, template_var 2)))),
    ("CIMP_vcg_rules.vcg_all_lift",
     "(!!x. valid_syn ?coms ?p ?aft (?P x) ?c (?Q x)) ==>
      valid_syn ?coms ?p ?aft (%s. ALL x. ?P x s) ?c (%s. ALL x. ?Q x s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 t_empty),
               template_var 1),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_ex_lift",
     "(!!x. valid_syn ?coms ?p ?aft (?P x) ?c (?Q x)) ==>
      valid_syn ?coms ?p ?aft (%s. EX x. ?P x s) ?c (%s. EX x. ?Q x s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 t_empty),
               template_var 1),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_conj",
     "[| valid_syn ?coms ?p ?aft ?I ?c ?Q;
         valid_syn ?coms ?p ?aft ?I ?c ?R |]
      ==> valid_syn ?coms ?p ?aft ?I ?c (%s. ?Q s & ?R s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg.decompose_com_small_step",
     "[| (?c' # ?fctxt ?c' @ ?cs,
          ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s';
         (?c', ?ictxt, ?fctxt) : decompose_com ?c |]
      ==> (?c # ?cs, ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_app
                         (template_app
                           (template_hole 4,
                            template_app (template_var 6, template_var 7)),
                          template_var 5))),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 7),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 6))),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 5)),
                   template_var 4)),
               template_var 3),
             template_var 2)
           ))),
    ("CIMP_pred.always_eventually_pigeonhole",
     "(ALL i. EX n>=i. EX m<=?k. ?P m n) =
      (EX m<=?k. ALL i. EX n>=i. ?P m n)",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 2, t_empty))),
    ("CIMP_vcg_rules.eq_imp_vcg",
     "[| eq_imp ?f ?g;
         ALL x P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f x\<rbrace>
            ?c |]
      ==> ?coms, ?p, ?aft \<turnstile> \<lbrace>?P o ?g\<rbrace> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 5))
           ))),
    ("CIMP_vcg_rules.vcg_conj_lift",
     "[| valid_syn ?coms ?p ?aft ?P ?c ?Q;
         valid_syn ?coms ?p ?aft ?P' ?c ?Q' |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P s & ?P' s) ?c (%s. ?Q s & ?Q' s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg_rules.vcg_disj_lift",
     "[| valid_syn ?coms ?p ?aft ?P ?c ?Q;
         valid_syn ?coms ?p ?aft ?P' ?c ?Q' |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P s | ?P' s) ?c (%s. ?Q s | ?Q' s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg.prerun_valid_induct",
     "[| !!\<sigma>. prerun ?sys \<sigma> ==> \<lceil>?I\<rceil> \<sigma>;
         !!\<sigma>.
            prerun ?sys \<sigma> ==>
            (\<box>(%s. \<lceil>?I\<rceil> s -->
                        (\<circle>\<lceil>?I\<rceil>) s))
             \<sigma> |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.initial_stateD",
     "initial_state ?sys ?s ==>
      AT (| GST = ?s, HST = [] |) = atC o PGMs ?sys &
      INIT ?sys (| GST = ?s, HST = [] |)\<down> &
      (ALL p l. ~ taken p l (| GST = ?s, HST = [] |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 0),
                         template_hole 10),
                       template_hole 9))),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app (template_hole 6, template_var 1)))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 11, template_var 0),
                         template_hole 10),
                       template_hole 9)))),
               template_app (template_hole 3, t_empty)))
           ))),
    ("CIMP_vcg.VCG",
     "[| ALL s. initial_state ?sys s --> ?I (| GST = s, HST = [] |);
         !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c |]
      ==> ?sys \<Turnstile>\<^bsub>pre\<^esub> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CIMP_vcg.VCG_step_inv_stable",
     "[| !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c;
         prerun ?sys ?\<sigma> |]
      ==> (\<box>(%s. \<lceil>?I\<rceil> s -->
                      (\<circle>\<lceil>?I\<rceil>) s))
           ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("CIMP_vcg_rules.vcg_imp_lift",
     "[| valid_syn ?coms ?p ?aft ?P' ?c (%s. ~ ?P s);
         valid_syn ?coms ?p ?aft ?Q' ?c ?Q |]
      ==> valid_syn ?coms ?p ?aft (%s. ?P' s | ?Q' s) ?c
           (%s. ?P s --> ?Q s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 6),
                   template_var 5),
                 t_empty),
               template_var 3),
             t_empty)
           ))),
    ("CIMP_vcg.VCG_step",
     "[| !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 valid_syn (PGMs ?sys) p aft ?pre c ?post;
         system_step ?p ?sh' ?sh; reachable_state ?sys ?sh; ?pre ?sh |]
      ==> ?post ?sh'",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 0)
            ),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_predicate (template_app (template_var 3, template_var 1)))),
    ("CIMP_vcg.VCG_valid",
     "[| ALL s. initial_state ?sys s --> ?I (| GST = s, HST = [] |);
         !!p. ALL (c, aft):vcg_fragments (PGMs ?sys p).
                 PGMs ?sys, p, aft \<turnstile> \<lbrace>?I\<rbrace> c |]
      ==> ?sys \<Turnstile> \<box>\<lceil>?I\<rceil>",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CIMP_vcg.small_step_inv",
     "[| (LOOP DO ?c OD # ?cs, ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!cs' s'.
            [| ?s' = (cs', s');
               (?c # LOOP DO ?c OD # ?cs,
                ?ls) \<rightarrow>\<^bsub>?a\<^esub> (cs', s') |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app (template_hole 3, template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg_rules.eq_imp_vcg_LST",
     "[| eq_imp ?f ?g;
         ALL x P. ?coms, ?p, ?aft \<turnstile>
            \<lbrace>P o ?f x o LST\<rbrace> ?c |]
      ==> ?coms, ?p, ?aft \<turnstile> \<lbrace>?P o ?g o LST\<rbrace> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5)),
                   template_hole 1)),
               template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_hole 1))
           ))),
    ("CIMP_vcg_rules.vcg_lift_comp",
     "[| !!P. ?coms, ?p, ?aft \<turnstile> \<lbrace>%s. P (?f s)\<rbrace>
              ?c;
         !!x. valid_syn ?coms ?p ?aft (?Q x) ?c (?P x) |]
      ==> valid_syn ?coms ?p ?aft (%s. ?Q (?f s) s) ?c (%s. ?P (?f s) s)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 t_empty),
               template_var 2),
             t_empty)
           ))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> LocalOp ?R # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s' s uw_.
            [| ?ls = (uw_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s');
               s' : ?R s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg_rules.pres_tuple_vcg",
     "(ALL P. ?coms, ?p, ?aft \<turnstile>
          \<lbrace>P o (%s. (?f s, ?g s))\<rbrace> ?c) =
      ((ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f\<rbrace> ?c) &
       (ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?g\<rbrace> ?c))",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("CIMP_vcg.context_decompose",
     "?s \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' =
      (EX (c, ictxt, fctxt):decomposeLS ?s.
          cPGM ?s = ictxt c # tl (cPGM ?s) &
          (c # fctxt c @ tl (cPGM ?s), cTKN ?s,
           cLST ?s) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?s' &
          (ALL l:atC c. cTKN ?s' = Some l))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 19, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 18,
           template_app (template_hole 17, template_var 2)),
         template_app (template_hole 16, t_empty)))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> Request ?action ?val # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s s' \<beta> uu_.
            [| ?ls = (uu_, s);
               ?a = \<guillemotleft>?action s, \<beta>\<guillemotright>;
               ?s' = (?cs, Some ?l, s'); s' : ?val \<beta> s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> Response ?action # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s' \<beta> \<alpha> s uv_.
            [| ?ls = (uv_, s);
               ?a = \<guillemotright>\<alpha>, \<beta>\<guillemotleft>;
               ?s' = (?cs, Some ?l, s');
               (s', \<beta>) : ?action \<alpha> s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 12, template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg_rules.pres_tuple_vcg_LST",
     "(ALL P. ?coms, ?p, ?aft \<turnstile>
          \<lbrace>P o (%s. (?f s, ?g s)) o LST\<rbrace> ?c) =
      ((ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?f o LST\<rbrace>
           ?c) &
       (ALL P. ?coms, ?p, ?aft \<turnstile> \<lbrace>P o ?g o LST\<rbrace>
           ?c))",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre
          (\<lbrace>?l\<rbrace> IF ?b THEN ?t FI) ?post;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre
          (\<lbrace>?l\<rbrace> WHILE ?b DO ?c OD) ?post;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> IF ?b THEN ?c FI # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s ux_.
            [| ?ls = (ux_, s); ?a = \<tau>; ?s' = (?c # ?cs, Some ?l, s);
               ?b s |]
            ==> ?P;
         !!s uy_.
            [| ?ls = (uy_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre
          (\<lbrace>?l\<rbrace> IF ?b THEN ?t ELSE ?e FI) ?post;
         (!!s s'.
             [| ?pre s; CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>; taken ?p ?l s'; HST s' = HST s;
                ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 16, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> IF ?b THEN ?c1.0 ELSE ?c2.0 FI # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s uz_.
            [| ?ls = (uz_, s); ?a = \<tau>; ?s' = (?c1.0 # ?cs, Some ?l, s);
               ?b s |]
            ==> ?P;
         !!s va_.
            [| ?ls = (va_, s); ?a = \<tau>; ?s' = (?c2.0 # ?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 9, template_var 8),
                                template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.decompose_small_step",
     "[| GST ?sh ?p \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ps';
         reachable_state ?sys ?sh;
         !!c cs aft.
            [| (c, aft) : fragments (PGMs ?sys ?p) {};
               atC c <= atCs (cPGM (GST ?sh ?p));
               aft (cLST (GST ?sh ?p)) = atCs (cPGM ?ps');
               (c # cs, cTKN (GST ?sh ?p),
                cLST
                 (GST ?sh ?p)) \<rightarrow>\<^bsub>?\<alpha>\<^esub> ?ps';
               ALL l:atC c. cTKN ?ps' = Some l |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app
                   (template_app (template_hole 23, template_var 5),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.small_step_inv",
     "[| (\<lbrace>?l\<rbrace> WHILE ?b DO ?c OD # ?cs,
          ?ls) \<rightarrow>\<^bsub>?a\<^esub> ?s';
         !!s vb_.
            [| ?ls = (vb_, s); ?a = \<tau>;
               ?s' =
               (?c # \<lbrace>?l\<rbrace> WHILE ?b DO ?c OD # ?cs, Some ?l,
                s);
               ?b s |]
            ==> ?P;
         !!s vc_.
            [| ?ls = (vc_, s); ?a = \<tau>; ?s' = (?cs, Some ?l, s);
               ~ ?b s |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 7),
                              template_var 6),
                            template_var 5)),
                        template_var 4)),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre (\<lbrace>?l\<rbrace> LocalOp ?f)
          ?post;
         (!!s ps' s'.
             [| ?pre s; ps' : ?f (s\<down> ?p); CIMP_lang.at ?p ?l s;
                AT s' = (AT s)(?p := ?aft (s\<down> ?p));
                s'\<down> = s\<down>(?p := ps'); taken ?p ?l s';
                HST s' = HST s; ALL p'':- {?p}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 20, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 18, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("CIMP_vcg.reachable_state_induct",
     "[| reachable_state ?sys ?sh;
         !!s. initial_state ?sys s ==> ?P (| GST = s, HST = [] |);
         !!sh ls' p.
            [| reachable_state ?sys sh; ?P sh;
               GST sh p \<rightarrow>\<^bsub>\<tau>\<^esub> ls' |]
            ==> ?P (| GST = (GST sh)(p := ls'), HST = HST sh |);
         !!sh ls1' ls2' p1 p2 \<alpha> \<beta>.
            [| reachable_state ?sys sh; ?P sh;
               GST sh
                p1 \<rightarrow>\<^bsub>\<guillemotleft>\<alpha>, \<beta>\<guillemotright>\<^esub> ls1';
               GST sh
                p2 \<rightarrow>\<^bsub>\<guillemotright>\<alpha>, \<beta>\<guillemotleft>\<^esub> ls2';
               p1 ~= p2 |]
            ==> ?P (| GST = (GST sh)(p1 := ls1', p2 := ls2'),
                      HST = HST sh @ [(\<alpha>, \<beta>)] |) |]
      ==> ?P ?sh",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("CIMP_vcg.vcg_inv",
     "[| valid_syn ?coms ?p ?aft ?pre
          (\<lbrace>?l\<rbrace> Request ?action ?val) ?post;
         (!!aft' action' s ps' p's' l' \<beta> s' p'.
             [| ?pre s;
                (\<lbrace>l'\<rbrace> Response action', aft')
                : fragments (?coms p') {};
                ?p ~= p'; ps' : ?val \<beta> (s\<down> ?p);
                (p's', \<beta>)
                : action' (?action (s\<down> ?p)) (s\<down> p');
                CIMP_lang.at ?p ?l s; CIMP_lang.at p' l' s;
                AT s' = (AT s)
                (?p := ?aft (s\<down> ?p), p' := aft' (s\<down> p'));
                s'\<down> = s\<down>(?p := ps', p' := p's'); taken ?p ?l s';
                HST s' = HST s @ [(?action (s\<down> ?p), \<beta>)];
                ALL p'':- {?p, p'}. GST s' p'' = GST s p'' |]
             ==> ?post s') ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 38, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 37, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 36, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.CIMPMoreTemplates"
### 0.812s elapsed time, 1.802s cpu time, 1.213s GC time
val it = (): unit
