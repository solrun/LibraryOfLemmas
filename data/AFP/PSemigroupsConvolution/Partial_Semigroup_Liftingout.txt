Loading theory "Draft.Partial_Semigroups" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.Partial_Semigroup_Lifting")
Loading theory "Draft.Quantales" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.Partial_Semigroup_Lifting" via "Draft.Binary_Modalities")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class partial_times = times +
  fixes D :: "'a => 'a => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.500s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
class partial_semigroup = partial_times +
  assumes
    "add_assocD":
      "!!y z x. (D y z & D x (y \<oplus> z)) = (D x y & D (x \<oplus> y) z)"
    and
    "add_assoc":
      "!!x y z.
          D x y & D (x \<oplus> y) z ==>
          x \<oplus> y \<oplus> z = x \<oplus> (y \<oplus> z)"
class partial_semigroup = partial_times +
  assumes
    "add_assocD":
      "!!y z x. (D y z & D x (y \<oplus> z)) = (D x y & D (x \<oplus> y) z)"
    and
    "add_assoc":
      "!!x y z.
          D x y & D (x \<oplus> y) z ==>
          x \<oplus> y \<oplus> z = x \<oplus> (y \<oplus> z)"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.260s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.801s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class locally_finite_partial_semigroup = partial_semigroup +
  assumes "loc_fin": "!!x. finite (x\<down>)"
class cancellative_partial_semigroup = partial_semigroup +
  assumes
    "add_cancl":
      "!!z x y. [| D z x; D z y; z \<oplus> x = z \<oplus> y |] ==> x = y"
    and
    "add_cancr":
      "!!x z y. [| D x z; D y z; x \<oplus> z = y \<oplus> z |] ==> x = y"
class partial_monoid = partial_semigroup +
  fixes E :: "'a set"
  assumes "unitl_ex": "!!x. EX e:E. D e x & e \<oplus> x = x"
    and "unitr_ex": "!!x. EX e:E. D x e & x \<oplus> e = x"
    and "units_eq": "!!e1 e2. [| e1 : E; e2 : E; D e1 e2 |] ==> e1 = e2"
class partial_monoid = partial_semigroup +
  fixes E :: "'a set"
  assumes "unitl_ex": "!!x. EX e:E. D e x & e \<oplus> x = x"
    and "unitr_ex": "!!x. EX e:E. D x e & x \<oplus> e = x"
    and "units_eq": "!!e1 e2. [| e1 : E; e2 : E; D e1 e2 |] ==> e1 = e2"
class proto_near_quantale = complete_lattice + times +
  assumes
    "Sup_distr":
      "!!X y. \<Squnion>X \<cdot> y = \<Squnion>{x \<cdot> y |x. x : X}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class proto_pre_quantale = proto_near_quantale +
  assumes
    "Sup_subdistl":
      "!!x Y. \<Squnion>{x \<cdot> y |y. y : Y} <= x \<cdot> \<Squnion>Y"
### theory "HOL-Library.Stream"
### 0.996s elapsed time, 3.787s cpu time, 0.675s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class partial_monoid_one = one + partial_semigroup +
  assumes "oneDl": "!!x. D x (1::'a)"
    and "oneDr": "!!x. D (1::'a) x"
    and "oner": "!!x. x \<oplus> (1::'a) = x"
    and "onel": "!!x. (1::'a) \<oplus> x = x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class weak_proto_quantale = proto_near_quantale +
  assumes
    "weak_Sup_distl":
      "!!Y x.
          Y ~= {} ==>
          x \<cdot> \<Squnion>Y = \<Squnion>{x \<cdot> y |y. y : Y}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.863s elapsed time, 3.382s cpu time, 0.327s GC time
Found termination order: "size <*mlex*> {}"
class proto_quantale = proto_near_quantale +
  assumes
    "Sup_distl":
      "!!x Y. x \<cdot> \<Squnion>Y = \<Squnion>{x \<cdot> y |y. y : Y}"
### theory "HOL-Library.Tree"
### 2.081s elapsed time, 7.848s cpu time, 1.093s GC time
Loading theory "Draft.Templates" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.183s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Partial_Semigroup_LiftingTemplates")
class positive_partial_monoid = partial_monoid +
  assumes "posl": "!!x y. [| D x y; x \<oplus> y : E |] ==> x : E"
    and "posr": "!!x y. [| D x y; x \<oplus> y : E |] ==> y : E"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.614s elapsed time, 1.841s cpu time, 0.103s GC time
class pas = partial_semigroup +
  assumes "add_comm": "!!x y. D x y ==> D y x & x \<oplus> y = y \<oplus> x"
class pas_alt = partial_times +
  assumes
    "pas_alt_assoc":
      "!!x y z.
          D x y & D (x \<oplus> y) z ==>
          D y z &
          D x (y \<oplus> z) &
          x \<oplus> y \<oplus> z = x \<oplus> (y \<oplus> z)"
    and
    "pas_alt_comm": "!!x y. D x y ==> D y x & x \<oplus> y = y \<oplus> x"
class pam_pos_alt = pam +
  assumes
    "pos_alt": "!!x y e. [| D x y; e : E; x \<oplus> y = e |] ==> x = e"
instantiation
  prod :: (type, partial_semigroup) partial_semigroup
  D_prod == D :: 'a * 'b => 'a * 'b => bool
  times_prod == times :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (type, partial_monoid) partial_monoid
  E_prod == E :: ('a * 'b) set
locale partial_sg_laction
  fixes Dla :: "'a => 'b => bool"
    and act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
  assumes "partial_sg_laction Dla \<alpha>"
locale partial_sg_sg_laction
  fixes Dla :: "'a => 'b => bool"
    and act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
  assumes "partial_sg_sg_laction Dla \<alpha>"
locale partial_mon_sg_laction
  fixes act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
    and Dla :: "'a => 'b => bool"
  assumes "partial_mon_sg_laction \<alpha> Dla"
locale partial_mon_mon_laction
  fixes act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
    and Dla :: "'a => 'b => bool"
  assumes "partial_mon_mon_laction \<alpha> Dla"
### theory "Draft.Partial_Semigroups"
### 7.745s elapsed time, 21.039s cpu time, 2.700s GC time
instantiation
  bool :: bool_ab_unital_quantale
  one_bool == one_class.one :: bool
  times_bool == times :: bool => bool => bool
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter>(Sup ` A)
            <= \<Squnion>(Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
### Partially applied constant "Quantales.inf_prod" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin inf_prod (set (?x # ?xs)) == fold inf_prod ?xs ?x
### Partially applied constant "Quantales.sup_prod" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin sup_prod (set (?x # ?xs)) == fold sup_prod ?xs ?x
### Partially applied constant "Quantales.times_prod'" on left hand side of equation, in theorem:
### monoid_mult.prod_list one_prod times_prod' ?xs ==
### foldr times_prod' ?xs one_prod
locale unital_quantale_module
  fixes act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
  assumes "unital_quantale_module \<alpha>"
locale unital_quantale_module
  fixes act :: "'a => 'b => 'b"  (\<open>\<alpha>\<close>)
  assumes "unital_quantale_module \<alpha>"
### theory "Draft.Quantales"
### 11.131s elapsed time, 24.810s cpu time, 2.954s GC time
Loading theory "Draft.Binary_Modalities" (required by "Draft.Partial_Semigroup_LiftingTemplates" via "Draft.Partial_Semigroup_Lifting")
class rel_magma = type +
  fixes \<rho> :: "'a => 'a => 'a => bool"
class rel_semigroup = rel_magma +
  assumes
    "rel_assoc":
      "!!u v x w.
          (EX y. \<rho> y u v & \<rho> x y w) =
          (EX z. \<rho> z v w & \<rho> x u z)"
class rel_monoid = rel_semigroup +
  fixes \<xi> :: "'a set"
  assumes "unitl_ex": "!!x. EX e:\<xi>. \<rho> x e x"
    and "unitr_ex": "!!x. EX e:\<xi>. \<rho> x x e"
    and "unitl_eq": "!!e x y. [| e : \<xi>; \<rho> x e y |] ==> x = y"
    and "unitr_eq": "!!e x y. [| e : \<xi>; \<rho> x y e |] ==> x = y"
class rel_ab_semigroup = rel_semigroup +
  assumes "rel_comm": "!!x y z. \<rho> x y z ==> \<rho> x z y"
### Partially applied constant "Binary_Modalities.rel_monoid_class.pid" on left hand side of equation, in theorem:
### monoid_mult.prod_list \<delta> (\<star>) ?xs == foldr (\<star>) ?xs \<delta>
### theory "Draft.Binary_Modalities"
### 1.222s elapsed time, 2.018s cpu time, 0.997s GC time
Loading theory "Draft.Partial_Semigroup_Lifting" (required by "Draft.Partial_Semigroup_LiftingTemplates")
class partial_semigroup = partial_times +
  assumes
    "add_assocD":
      "!!y z x. (D y z & D x (y \<oplus> z)) = (D x y & D (x \<oplus> y) z)"
    and
    "add_assoc":
      "!!x y z.
          D x y & D (x \<oplus> y) z ==>
          x \<oplus> y \<oplus> z = x \<oplus> (y \<oplus> z)"
class partial_monoid = partial_semigroup +
  fixes E :: "'a set"
  assumes "unitl_ex": "!!x. EX e:E. D e x & e \<oplus> x = x"
    and "unitr_ex": "!!x. EX e:E. D x e & x \<oplus> e = x"
    and "units_eq": "!!e1 e2. [| e1 : E; e2 : E; D e1 e2 |] ==> e1 = e2"
class pas = partial_semigroup +
  assumes "add_comm": "!!x y. D x y ==> D y x & x \<oplus> y = y \<oplus> x"
instantiation
  fun :: (partial_semigroup, weak_quantale) weak_proto_quantale
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (partial_monoid, unital_quantale) unital_quantale
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Partial_Semigroup_Lifting"
### 0.544s elapsed time, 0.599s cpu time, 0.063s GC time
Loading theory "Draft.Partial_Semigroup_LiftingTemplates"
### theory "Draft.Partial_Semigroup_LiftingTemplates"
### 0.102s elapsed time, 0.160s cpu time, 0.000s GC time
*** Clash of specifications for one_class.one:
***   "Partial_Semigroup_Lifting.one_fun_inst.one_fun_def" (line 111 of "$AFP/PSemigroupsConvolution/Partial_Semigroup_Lifting.thy")
***   "Function_Algebras.one_fun_inst.one_fun_def" (line 52 of "~~/src/HOL/Library/Function_Algebras.thy")
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/PSemigroupsConvolution/Partial_Semigroup_LiftingTemplates.thy")
Exception- TOPLEVEL_ERROR raised
