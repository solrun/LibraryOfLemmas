Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Geometric_PMFTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Pi_pmf" (required by "Draft.Geometric_PMFTemplates" via "Draft.Geometric_PMF")
Loading theory "Draft.Templates" (required by "Draft.Geometric_PMFTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.279s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.389s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Geometric_PMFTemplates" via "Draft.ExtrEqs")
### theory "Draft.Pi_pmf"
### 0.290s elapsed time, 0.704s cpu time, 0.043s GC time
Loading theory "Draft.Geometric_PMF" (required by "Draft.Geometric_PMFTemplates")
### theory "Draft.Geometric_PMF"
### 0.311s elapsed time, 0.649s cpu time, 0.073s GC time
### theory "HOL-Library.BigO"
### 0.602s elapsed time, 1.092s cpu time, 0.073s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Geometric_PMFTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.552s cpu time, 0.092s GC time
Loading theory "Draft.Geometric_PMFTemplates"
val templateLemmas =
   [("Geometric_PMF.bernoulli_pmf_Not",
     "?p : {0..1} ==>
      bernoulli_pmf ?p = map_pmf Not (bernoulli_pmf (1 - ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_hole 5),
               template_var 0)))))),
    ("Geometric_PMF.geometric_pmf_prob_atLeast",
     "?p : {0<..1} ==>
      measure_pmf.prob (geometric_pmf ?p) {?n..} = (1 - ?p) ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 7),
               template_var 1)),
           template_var 0)))),
    ("Geometric_PMF.geometric_pmf_prob_greaterThan",
     "?p : {0<..1} ==>
      measure_pmf.prob (geometric_pmf ?p) {?n<..} = (1 - ?p) ^ (?n + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1))),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 9),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Geometric_PMF.geometric_pmf_prob_lessThan",
     "?p : {0<..1} ==>
      measure_pmf.prob (geometric_pmf ?p) {..<?n} = 1 - (1 - ?p) ^ ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 7),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_hole 7),
                 template_var 1)),
             template_var 0))))),
    ("Geometric_PMF.nn_integral_geometric_pmf",
     "?p : {0<..1} ==>
      \<integral>\<^sup>+ x. ennreal (real x)
                         \<partial>measure_pmf (geometric_pmf ?p) =
      ennreal ((1 - ?p) / ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 8),
                 template_var 0)),
             template_var 0))))),
    ("Geometric_PMF.geometric_pmf_prob_atMost",
     "?p : {0<..1} ==>
      measure_pmf.prob (geometric_pmf ?p) {..?n} = 1 - (1 - ?p) ^ (?n + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1))),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 9),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_hole 9),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Geometric_PMF.bernoulli_pmf_of_set'",
     "finite ?A ==>
      map_pmf (%b. {x: ?A. ~ b x})
       (Pi_pmf.Pi_pmf ?A ?P (%_. bernoulli_pmf (1 / 2))) =
      pmf_of_set (Pow ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 13, t_empty),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0),
             t_empty)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Geometric_PMF.binomial_pmf_altdef''",
     "?p : {0..1} ==>
      binomial_pmf ?n ?p =
      map_pmf (%f. card {x. x < ?n & f x})
       (Pi_pmf.Pi_pmf {..<?n} ?dflt (%_. bernoulli_pmf ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_hole 10))
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             t_empty))))),
    ("Geometric_PMF.Pi_pmf_pmf_of_set_Suc",
     "finite ?A ==>
      Pi_pmf.Pi_pmf ?A 0 (%_. geometric_pmf (1 / 2)) =
      pmf_of_set (Pow ?A) >>=
      (%B. Pi_pmf.Pi_pmf B 0 (%_. map_pmf Suc (geometric_pmf (1 / 2))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 0),
             template_hole 11),
           t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           t_empty)))),
    ("Geometric_PMF.binomial_pmf_altdef'",
     "[| finite ?A; card ?A = ?n; ?p : {0..1} |]
      ==> binomial_pmf ?n ?p =
          map_pmf (%f. card {x: ?A. f x})
           (Pi_pmf.Pi_pmf ?A ?dflt (%_. bernoulli_pmf ?p))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_equation
         (template_app (template_hole 12, template_var 3), template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             t_empty))))),
    ("Geometric_PMF.Pi_pmf_geometric_filter",
     "[| finite ?A; ?p : {0<..1} |]
      ==> Pi_pmf.Pi_pmf ?A 0 (%_. geometric_pmf ?p) =
          Pi_pmf.Pi_pmf ?A ?dflt (%_. bernoulli_pmf ?p) >>=
          (%fb. Pi_pmf.Pi_pmf {x: ?A. ~ fb x} 0
                 (%_. map_pmf Suc (geometric_pmf ?p)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_hole 13))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_var 2),
             template_hole 10),
           t_empty),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 0),
               t_empty)),
           t_empty)))),
    ("Geometric_PMF.Pi_pmf_geometric_filter'",
     "[| finite ?A; ?p : {0<..1} |]
      ==> Pi_pmf.Pi_pmf ?A 0 (%_. geometric_pmf ?p) =
          Pi_pmf.Pi_pmf ?A ?dflt (%_. bernoulli_pmf (1 - ?p)) >>=
          (%fb. Pi_pmf.Pi_pmf {x: ?A. fb x} 0
                 (%_. map_pmf Suc (geometric_pmf ?p)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_hole 13))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_var 2),
             template_hole 10),
           t_empty),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 0),
               t_empty)),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.Geometric_PMFTemplates"
### 1.212s elapsed time, 1.518s cpu time, 0.159s GC time
val it = (): unit
