Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Misc" (required by "Draft.MiscTemplates")
Loading theory "Draft.Templates" (required by "Draft.MiscTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.244s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.109s elapsed time, 0.325s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MiscTemplates" via "Draft.ExtrEqs")
### theory "Draft.Misc"
### 0.129s elapsed time, 0.375s cpu time, 0.045s GC time
### theory "HOL-Library.BigO"
### 0.562s elapsed time, 0.567s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MiscTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.513s cpu time, 0.073s GC time
Loading theory "Draft.MiscTemplates"
val templateLemmas =
   [("Misc.sorted_list_of_set_length",
     "length (sorted_list_of_set ?A) = card ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Misc.bij_mono_map_set_to_nat",
     "finite ?A ==> mono_on (bij_mono_map_set_to_nat ?A) ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Misc.rev_removeAll_removeAll_rev",
     "rev (removeAll ?x ?xs) = removeAll ?x (rev ?xs)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Misc.bij_mono_map_set_to_nat",
     "finite ?A ==> bij_betw (bij_mono_map_set_to_nat ?A) ?A {..<card ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Misc.bij_mono_map_set_to_nat",
     "finite ?A ==> bij_mono_map_set_to_nat ?A ` ?A = {..<card ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Misc.sorted_list_of_set_mono_on",
     "finite ?A ==> mono_on ((!) (sorted_list_of_set ?A)) {..<card ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Misc.sorted_list_of_set_bij_betw",
     "finite ?A ==> bij_betw ((!) (sorted_list_of_set ?A)) {..<card ?A} ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_var 0)
           ))),
    ("Misc.bij_betw_mono_on_the_inv_into",
     "[| bij_betw ?f ?A ?B; mono_on ?f ?A |]
      ==> mono_on (the_inv_into ?A ?f) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Misc.sorted_list_of_set_filter",
     "finite ?A ==>
      sorted_list_of_set {x: ?A. ?P x} = filter ?P (sorted_list_of_set ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 4, template_var 1))))),
    ("Misc.sorted_list_of_set_image",
     "[| mono_on ?g ?A; inj_on ?g ?A |]
      ==> sorted_list_of_set (?g ` ?A) = map ?g (sorted_list_of_set ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Misc.sorted_list_of_set_Min_Cons",
     "[| finite ?A; ?A ~= {} |]
      ==> sorted_list_of_set ?A =
          Min ?A # sorted_list_of_set (?A - {Min ?A})",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 6))))))),
    ("Misc.nth_mono_on",
     "[| sorted ?xs; distinct ?xs; set ?xs = ?A |]
      ==> mono_on ((!) ?xs) {..<card ?A}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Misc.sorted_list_of_set_Max_snoc",
     "[| finite ?A; ?A ~= {} |]
      ==> sorted_list_of_set ?A =
          sorted_list_of_set (?A - {Max ?A}) @ [Max ?A]",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 8)))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_hole 0)))))]:
   (string * thm * template) list
### theory "Draft.MiscTemplates"
### 0.977s elapsed time, 1.267s cpu time, 0.138s GC time
val it = (): unit
