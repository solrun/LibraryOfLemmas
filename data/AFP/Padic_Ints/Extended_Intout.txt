Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int" via "HOL-Library.Countable")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.506s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.296s elapsed time, 1.189s cpu time, 0.118s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.802s cpu time, 0.073s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.426s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.444s elapsed time, 1.782s cpu time, 0.190s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "finite_item"
consts
  flat :: "'a list stream => 'a stream"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.693s elapsed time, 2.736s cpu time, 0.241s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.912s elapsed time, 3.402s cpu time, 0.729s GC time
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.137s elapsed time, 3.720s cpu time, 0.735s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.344s elapsed time, 0.719s cpu time, 0.062s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.Tree"
### 1.767s elapsed time, 5.308s cpu time, 0.918s GC time
Loading theory "Draft.Templates" (required by "Draft.Extended_IntMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.136s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Extended_IntMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.100s cpu time, 0.105s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.536s elapsed time, 2.393s cpu time, 0.213s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int")
### theory "HOL-Library.Order_Continuity"
### 0.405s elapsed time, 0.469s cpu time, 0.064s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Extended_IntMoreTemplates" via "Draft.Extended_Int")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.470s elapsed time, 0.511s cpu time, 0.057s GC time
Loading theory "Draft.Extended_Int" (required by "Draft.Extended_IntMoreTemplates")
### Ignoring duplicate introduction (intro)
### ?f sums (SUP n. sum ?f {..<n})
instantiation
  eint :: infinity
  infinity_eint == infinity :: eint
Found termination order: "{}"
Proofs for inductive predicate(s) "rec_set_eint"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_eint"
consts
  the_eint :: "eint => int"
instantiation
  eint :: zero_neq_one
  one_eint == one_class.one :: eint
  zero_eint == zero_class.zero :: eint
instantiation
  eint :: comm_monoid_add
  plus_eint == plus :: eint => eint => eint
instantiation
  eint :: comm_semiring
  times_eint == times :: eint => eint => eint
instantiation
  eint :: minus
  minus_eint == minus :: eint => eint => eint
instantiation
  eint :: linordered_ab_semigroup_add
  less_eq_eint == less_eq :: eint => eint => bool
  less_eint == less :: eint => eint => bool
instantiation
  eint :: order_top
  top_eint == top :: eint
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  eint :: uminus
  uminus_eint == uminus :: eint => eint
### theory "Draft.Extended_Int"
### 0.463s elapsed time, 0.506s cpu time, 0.059s GC time
Loading theory "Draft.Extended_IntMoreTemplates"
val templateLemmas =
   [("Extended_Int.eint_ord_simps", "?q <= \<infinity>",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("Extended_Int.eint_ord_code", "(\<infinity> < ?q) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Extended_Int.eint_ord_code", "(?q <= \<infinity>) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Extended_Int.idiff_infinity", "\<infinity> - ?n = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Extended_Int.idiff_0_right", "?n - 0 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Extended_Int.plus_eint_simps", "\<infinity> + ?q = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Extended_Int.plus_eint_simps", "?q + \<infinity> = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Extended_Int.mult_one_left", "1 * ?n = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Extended_Int.mult_one_right", "?n * 1 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Extended_Int.max_eint_simps", "max \<infinity> ?q = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Extended_Int.max_eint_simps", "max ?q \<infinity> = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Extended_Int.min_eint_simps", "min \<infinity> ?q = ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Extended_Int.min_eint_simps", "min ?q \<infinity> = ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Extended_Int.ile_eSuc", "?n <= ?n + 1",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Extended_Int.infinity_ne_numeral", "\<infinity> ~= eint (numeral ?k)",
     template_negation
      (
         template_equation
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Extended_Int.numeral_ne_infinity", "eint (numeral ?k) ~= \<infinity>",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Extended_Int.eint_ord_code", "(eint ?m < \<infinity>) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Extended_Int.eint_ord_code", "(\<infinity> <= eint ?n) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Extended_Int.idiff_eint_0_right", "?n - eint 0 = ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Extended_Int.idiff_infinity_right",
     "eint ?a - \<infinity> = \<infinity>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Extended_Int.times_eint_simps", "\<infinity> * eint ?n = \<infinity>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_hole 1)),
    ("Extended_Int.times_eint_simps", "eint ?m * \<infinity> = \<infinity>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Extended_Int.eint_nat_is_pos", "0 < eint (int (Suc ?n))",
     template_inequation
      (less_than, template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Extended_Int.eint_ord_simps",
     "(\<infinity> <= ?q) = (?q = \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Extended_Int.eint_numeral", "eint (numeral ?k) = eint (numeral ?k)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.eSuc_minus_1", "?n + 1 - 1 = ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_hole 0),
       template_var 0)),
    ("Extended_Int.infinity_ilessE", "\<infinity> < eint ?m ==> ?R",
     template_implication
      ([template_inequation
         (less_than, template_hole 1,
          template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("Extended_Int.infinity_ileE", "\<infinity> <= eint ?m ==> ?R",
     template_implication
      ([template_inequation
         (less_equals, template_hole 1,
          template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("Extended_Int.eint_ord_simps",
     "(?q < \<infinity>) = (?q ~= \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("Extended_Int.eint_1_iff", "(1 = eint ?x) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Extended_Int.eint_0_iff", "(0 = eint ?x) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Extended_Int.eint_1_iff", "(eint ?x = 1) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Extended_Int.eint_0_iff", "(eint ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Extended_Int.idiff_0", "0 - eint ?n = eint (- ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.eint_uminus_eq", "?a + - ?a = ?a - ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Extended_Int.eint_ord_code", "(eint ?m < eint ?n) = (?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Extended_Int.eint_ord_code", "(eint ?m <= eint ?n) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Extended_Int.eSuc_eint", "eint ?n + 1 = eint (?n + 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Extended_Int.idiff_eint_0", "eint 0 - eint ?n = eint (- ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.eint_pow_int_is_pos", "0 < ?n ==> 0 < eint ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.idiff_eint_eint", "eint ?a - eint ?b = eint (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Extended_Int.plus_eint_simps", "eint ?m + eint ?n = eint (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Extended_Int.times_eint_simps", "eint ?m * eint ?n = eint (?m * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Extended_Int.max_eint_simps",
     "max (eint ?m) (eint ?n) = eint (max ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Extended_Int.min_eint_simps",
     "min (eint ?m) (eint ?n) = eint (min ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Extended_Int.eint_2_minus_1_mult", "eint 2 * ?b - ?b = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_var 0)),
         template_var 0),
       template_var 0)),
    ("Extended_Int.imult_infinity",
     "0 < ?n ==> \<infinity> * ?n = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Extended_Int.imult_infinity_right",
     "0 < ?n ==> ?n * \<infinity> = \<infinity>",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Extended_Int.eint_minus_le", "?b < ?c ==> 0 < ?c - ?b",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Extended_Int.ileI1", "?m < ?n ==> ?m + 1 <= ?n",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Extended_Int.not_infinity_eq",
     "(?x ~= \<infinity>) = (EX i. ?x = eint i)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Extended_Int.iless_Suc_eq", "(eint ?m < ?n + 1) = (eint ?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Extended_Int.numeral_less_eint_iff",
     "(eint (numeral ?m) < eint ?n) = (numeral ?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Extended_Int.numeral_le_eint_iff",
     "(eint (numeral ?m) <= eint ?n) = (numeral ?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Extended_Int.Suc_ile_eq", "(eint (?m + 1) <= ?n) = (eint ?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Extended_Int.not_eint_eq",
     "(ALL y. ?x ~= eint y) = (?x = \<infinity>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Extended_Int.eSuc_inject", "(?m + 1 = ?n + 1) = (?m = ?n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_equation (template_var 1, template_var 0))),
    ("Extended_Int.eSuc_mono", "(?n + 1 < ?m + 1) = (?n < ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Extended_Int.eSuc_ile_mono", "(?n + 1 <= ?m + 1) = (?n <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Extended_Int.eint_minus_comm", "?d + ?b - ?c = ?d - ?c + ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Extended_Int.iadd_Suc_right", "?m + (?n + 1) = ?m + ?n + 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Extended_Int.iadd_Suc", "?m + 1 + ?n = ?m + ?n + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Extended_Int.mult_eSuc_right'", "?m * (?n + 1) = ?m + ?m * ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Extended_Int.mult_eSuc_right", "?m * (?n + 1) = ?m * ?n + ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Extended_Int.mult_eSuc'", "(?m + 1) * ?n = ?n + ?m * ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Extended_Int.mult_eSuc", "(?m + 1) * ?n = ?m * ?n + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Extended_Int.eSuc_minus_eSuc", "?n + 1 - (?m + 1) = ?n - ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Extended_Int.idiff_self", "?n ~= \<infinity> ==> ?n - ?n = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("Extended_Int.sums_SUP", "?f sums (SUP n. sum ?f {..<n})",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 0)))
         )),
    ("Extended_Int.eint_ord_Suc", "?x < ?y ==> ?x + 1 < ?y + 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Extended_Int.eint_iless", "?n < eint ?m ==> EX k. ?n = eint k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Extended_Int.eint_ile", "?n <= eint ?m ==> EX k. ?n = eint k",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Extended_Int.sum_finite_imp_summands_finite",
     "?a + ?b ~= \<infinity> ==> ?a ~= \<infinity>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Extended_Int.sum_finite_imp_summands_finite",
     "?a + ?b ~= \<infinity> ==> ?b ~= \<infinity>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Extended_Int.suminf_eq_SUP", "suminf ?f = (SUP n. sum ?f {..<n})",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Extended_Int.eint_ex_split",
     "(EX c. ?P c) = (?P \<infinity> | (EX x. ?P (eint x)))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Extended_Int.plus_eq_infty_iff_eint",
     "(?m + ?n = \<infinity>) = (?m = \<infinity> | ?n = \<infinity>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Extended_Int.eint_ord_number",
     "(eint (numeral ?m) < eint (numeral ?n)) = (numeral ?m < numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.eint_ord_number",
     "(eint (numeral ?m) <= eint (numeral ?n)) =
      (numeral ?m <= numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Extended_Int.eSuc_max", "max ?x ?y + 1 = max (?x + 1) (?y + 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Extended_Int.eint_nat_times",
     "0 < ?c ==> 0 < eint (int (Suc ?n)) * ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 1)))),
    ("Extended_Int.nat_mult_not_infty",
     "?c ~= \<infinity> ==> eint ?n * ?c ~= \<infinity>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1),
             template_hole 2)
           ))),
    ("Extended_Int.eint_add_cancel_fact",
     "?c ~= \<infinity> ==> ?c + (?b - ?c) = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Extended_Int.add_diff_cancel_eint",
     "?x ~= \<infinity> ==> ?x + ?y - ?x = ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Extended_Int.eint_nat_times'",
     "0 <= eint (int ?c) ==> 0 <= Suc ?n * ?c",
     template_implication
      ([template_inequation
         (less_equals, template_hole 6,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 1)))],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Extended_Int.sum_infinity_imp_summand_infinity",
     "?a + ?b = \<infinity> ==> ?a = \<infinity> | ?b = \<infinity>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Extended_Int.eint_add_left_cancel",
     "(?a + ?b = ?a + ?c) = (?a = \<infinity> | ?b = ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Extended_Int.eint_add_left_cancel_le",
     "(?a + ?b <= ?a + ?c) = (?a = \<infinity> | ?b <= ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Extended_Int.eint_pos_times_is_pos",
     "[| 0 < ?c; 0 < ?b |] ==> 0 < ?b * ?c",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Extended_Int.eint_add_left_cancel_less",
     "(?a + ?b < ?a + ?c) = (?a ~= \<infinity> & ?b < ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("Extended_Int.eint_int_minus_distr",
     "eint ?n * ?c - eint ?m * ?c = eint (?n - ?m) * ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_var 1))),
    ("Extended_Int.add_diff_assoc_eint",
     "?z <= ?y ==> ?x + (?y - ?z) = ?x + ?y - ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Extended_Int.eint_pos_int_times_ge",
     "[| 0 <= ?c; 0 < ?n |] ==> ?c <= eint ?n * ?c",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Extended_Int.less_infinityE",
     "[| ?n < \<infinity>; !!k. ?n = eint k ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 3),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Extended_Int.eint_ord_plus_one",
     "[| eint ?n <= ?x; ?x < ?y |] ==> eint (?n + 1) <= ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 0))),
    ("Extended_Int.chain_incr",
     "ALL i. EX j. ?Y i < ?Y j ==> EX j. eint ?k < ?Y j",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Extended_Int.eint_minus_ineq",
     "[| ?c ~= \<infinity>; ?d <= ?b |] ==> ?d - ?c <= ?b - ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Extended_Int.enat_eSuc_iff",
     "(eint ?y = ?x + 1) = (EX n. ?y = n + 1 & eint n = ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app (template_hole 4, t_empty))),
    ("Extended_Int.eSuc_eint_iff",
     "(?x + 1 = eint ?y) = (EX n. ?y = n + 1 & ?x = eint n)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_hole 6)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Extended_Int.eint_minus_distr",
     "?b ~= ?d ==> ?c * (?b - ?d) = ?c * ?b - ?c * ?d",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Extended_Int.eint_minus_distl",
     "?b ~= ?d ==> ?b * ?c - ?d * ?c = (?b - ?d) * ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Extended_Int.finite_eint_bounded",
     "(!!y. y : ?A ==> eint ?m <= y & y <= eint ?n) ==> finite ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Extended_Int.eSuc_Max",
     "[| finite ?A; ?A ~= {} |] ==> Max ?A + 1 = Max ((+) 1 ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 1)),
             template_var 0))))),
    ("Extended_Int.eint_min_ineq",
     "[| min ?c ?d <= ?b; ?e < ?c; ?e < ?d |] ==> ?e < ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_var 1),
        template_inequation (less_than, template_var 0, template_var 3),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_inequation (less_than, template_var 0, template_var 1))),
    ("Extended_Int.ge_plus_pos_imp_gt",
     "[| ?c ~= \<infinity>; 0 < ?b; ?c + ?b <= ?d |] ==> ?c < ?d",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0)],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Extended_Int.eint_mult_mono",
     "[| 0 < ?c & ?c ~= \<infinity>; ?n < ?k |] ==> ?n * ?c < ?k * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Extended_Int.eint_mult_mono'",
     "[| 0 <= ?c & ?c ~= \<infinity>; ?n < ?k |] ==> ?n * ?c <= ?k * ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Extended_Int.eint_pos_int_times_gt",
     "[| 0 < ?c; ?c ~= \<infinity>; 1 < ?n |] ==> ?c < eint ?n * ?c",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Extended_Int.less_eintE",
     "[| ?n < eint ?m; !!k. [| ?n = eint k; k < ?m |] ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Extended_Int.iadd_le_eint_iff",
     "(?x + ?y <= eint ?n) =
      (EX y' x'. ?x = eint x' & ?y = eint y' & x' + y' <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Extended_Int.eint_plus_times",
     "[| 0 <= ?d; ?c + eint ?k * ?d <= ?b; ?l <= ?k |]
      ==> ?c + eint ?l * ?d <= ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 4),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 4)),
          template_var 1),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 4)),
         template_var 1))),
    ("Extended_Int.eint_minus_ineq'",
     "[| ?c ~= \<infinity>; ?d <= ?b; 0 < ?e; ?e ~= \<infinity> |]
      ==> ?e * (?d - ?c) <= ?e * (?b - ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Extended_Int.eint_minus_ineq''",
     "[| ?c ~= \<infinity>; ?d <= ?b; 0 < ?e; ?e ~= \<infinity> |]
      ==> ?e * ?d - ?e * ?c <= ?e * (?b - ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3))))),
    ("Extended_Int.eint2_cases",
     "[| !!int inta. [| ?y = eint int; ?ya = eint inta |] ==> ?P;
         !!int. [| ?y = eint int; ?ya = \<infinity> |] ==> ?P;
         !!int. [| ?y = \<infinity>; ?ya = eint int |] ==> ?P;
         [| ?y = \<infinity>; ?ya = \<infinity> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Extended_Int.eint3_cases",
     "[| !!int inta intb.
            [| ?y = eint int; ?ya = eint inta; ?yb = eint intb |] ==> ?P;
         !!int inta.
            [| ?y = eint int; ?ya = eint inta; ?yb = \<infinity> |] ==> ?P;
         !!int inta.
            [| ?y = eint int; ?ya = \<infinity>; ?yb = eint inta |] ==> ?P;
         !!int.
            [| ?y = eint int; ?ya = \<infinity>; ?yb = \<infinity> |]
            ==> ?P;
         !!int inta.
            [| ?y = \<infinity>; ?ya = eint int; ?yb = eint inta |] ==> ?P;
         !!int.
            [| ?y = \<infinity>; ?ya = eint int; ?yb = \<infinity> |]
            ==> ?P;
         !!int.
            [| ?y = \<infinity>; ?ya = \<infinity>; ?yb = eint int |]
            ==> ?P;
         [| ?y = \<infinity>; ?ya = \<infinity>; ?yb = \<infinity> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 0)],
          template_implication
           ([template_equation (template_var 2, template_hole 0)],
            template_implication
             ([template_equation (template_var 1, template_hole 0)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Extended_IntMoreTemplates"
### 0.375s elapsed time, 0.528s cpu time, 0.068s GC time
val it = (): unit
