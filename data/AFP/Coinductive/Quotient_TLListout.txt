Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.524s cpu time, 0.050s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.197s elapsed time, 0.807s cpu time, 0.050s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.077s elapsed time, 0.294s cpu time, 0.051s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "HOL-Library.Infinite_Set"
### 0.301s elapsed time, 1.204s cpu time, 0.101s GC time
Loading theory "HOL-Library.Quotient_Syntax" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "HOL-Library.Quotient_Product")
### theory "HOL-Library.Quotient_Syntax"
### 0.025s elapsed time, 0.096s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Product" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList")
Found termination order: "size_list size <*mlex*> {}"
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Quotient_Product"
### 0.103s elapsed time, 0.402s cpu time, 0.071s GC time
Loading theory "HOL-Library.Quotient_Set" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.303s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Quotient_Set"
### 0.071s elapsed time, 0.284s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Sum" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Quotient_Sum"
### 0.086s elapsed time, 0.331s cpu time, 0.071s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.425s elapsed time, 1.672s cpu time, 0.142s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.905s cpu time, 0.072s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  prefixes :: "'a list => 'a list list"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  stake :: "nat => 'a stream => 'a list"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  left :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 1.227s elapsed time, 4.572s cpu time, 1.092s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat")
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.753s elapsed time, 6.635s cpu time, 1.284s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.695s elapsed time, 10.350s cpu time, 1.629s GC time
### theory "HOL-Library.Countable"
### 1.212s elapsed time, 4.772s cpu time, 0.433s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.324s elapsed time, 8.705s cpu time, 1.501s GC time
Loading theory "Draft.Templates" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.201s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.867s elapsed time, 2.990s cpu time, 0.357s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Quotient_TLListMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.445s elapsed time, 1.292s cpu time, 0.187s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.125s cpu time, 0.108s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.522s elapsed time, 2.141s cpu time, 0.182s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.399s elapsed time, 0.447s cpu time, 0.041s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.479s elapsed time, 0.516s cpu time, 0.052s GC time
Loading theory "Draft.Coinductive_Nat" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList" via "Draft.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Draft.Coinductive_Nat"
### 0.512s elapsed time, 0.580s cpu time, 0.095s GC time
Loading theory "Draft.Coinductive_List" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList" via "Draft.TLList")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Draft.Coinductive_List"
### 3.851s elapsed time, 5.937s cpu time, 2.890s GC time
Loading theory "Draft.TLList" (required by "Draft.Quotient_TLListMoreTemplates" via "Draft.Quotient_TLList")
overloading
  terminal0 \<equiv> terminal0 :: ('a, 'b) tllist => 'b
consts
  unfold_tllist ::
    "('a => bool)
     => ('a => 'b) => ('a => 'c) => ('a => 'a) => 'a => ('c, 'b) tllist"
consts
  tllist_of_llist :: "'a llist => ('a, 'b) tllist"
consts
  llist_of_tllist :: "('a, 'b) tllist => 'a llist"
### theory "Draft.TLList"
### 1.294s elapsed time, 1.452s cpu time, 0.184s GC time
Loading theory "Draft.Quotient_TLList" (required by "Draft.Quotient_TLListMoreTemplates")
### theory "Draft.Quotient_TLList"
### 0.596s elapsed time, 0.623s cpu time, 0.036s GC time
Loading theory "Draft.Quotient_TLListMoreTemplates"
val templateLemmas =
   [("Quotient_TLList.TNil_respect",
     "(?B ===> tllist_all2 ?A ?B) TNil TNil",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("Quotient_TLList.TCons_respect",
     "(?A ===> tllist_all2 ?A ?B ===> tllist_all2 ?A ?B) TCons TCons",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Quotient_TLList.id_preserve",
     "Quotient3 ?R ?Abs ?Rep ==> (?Rep ---> ?Abs) id = id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tllist_equivp",
     "[| equivp ?R; equivp ?S |] ==> equivp (tllist_all2 ?R ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Quotient_TLList.reflp_tllist_all2",
     "[| reflp ?R; reflp ?Q |] ==> reflp (tllist_all2 ?R ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Quotient_TLList.symp_tllist_all2",
     "[| symp ?R; symp ?S |] ==> symp (tllist_all2 ?R ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Quotient_TLList.transp_tllist_all2",
     "[| transp ?R; transp ?S |] ==> transp (tllist_all2 ?R ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Quotient_TLList.TNil_preserve",
     "Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 ==>
      (?Rep2.0 ---> tmap ?Abs1.0 ?Abs2.0) TNil = TNil",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tmap_respect",
     "((?A ===> ?B) ===>
       (?C ===> ?D) ===> tllist_all2 ?A ?C ===> tllist_all2 ?B ?D)
       tmap tmap",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Quotient_TLList.case_prod_preserve2",
     "Quotient3 ?R ?Abs ?Rep ==>
      ((id ---> id ---> ?Rep) ---> id ---> ?Abs) case_prod = case_prod",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.case_sum_preserve2",
     "Quotient3 ?R ?Abs ?Rep ==>
      ((id ---> ?Rep) ---> (id ---> ?Rep) ---> id ---> ?Abs) case_sum =
      case_sum",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.Quotient3_tmap_Abs_Rep",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> tmap ?Abs1.0 ?Abs2.0 (tmap ?Rep1.0 ?Rep2.0 ?ts) = ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Quotient_TLList.tllist_quotient",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> Quotient3 (tllist_all2 ?R1.0 ?R2.0) (tmap ?Abs1.0 ?Abs2.0)
           (tmap ?Rep1.0 ?Rep2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Quotient_TLList.Quotient3_tllist_all2_tmap_tmapI",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> tllist_all2 ?R1.0 ?R2.0 (tmap ?Rep1.0 ?Rep2.0 ?ts)
           (tmap ?Rep1.0 ?Rep2.0 ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0))
           ))),
    ("Quotient_TLList.TCons_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> (?Rep1.0 ---> tmap ?Rep1.0 ?Rep2.0 ---> tmap ?Abs1.0 ?Abs2.0)
           TCons =
          TCons",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tllist_all2_preserve2",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> tllist_all2 ((?Rep1.0 ---> ?Rep1.0 ---> id) ?R1.0)
           ((?Rep2.0 ---> ?Rep2.0 ---> id) ?R2.0) =
          (=)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_hole 3)),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 0),
                    template_app
                     (template_app (template_hole 1, template_var 0),
                      template_hole 3)),
                  template_var 2))
              )],
         template_predicate (template_hole 0)))),
    ("Quotient_TLList.case_prod_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0;
         Quotient3 ?R3.0 ?Abs3.0 ?Rep3.0 |]
      ==> ((?Abs1.0 ---> ?Abs2.0 ---> ?Rep3.0) --->
           map_prod ?Rep1.0 ?Rep2.0 ---> ?Abs3.0)
           case_prod =
          case_prod",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 7),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 3)),
               template_var 1)),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.case_sum_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0;
         Quotient3 ?R3.0 ?Abs3.0 ?Rep3.0 |]
      ==> ((?Abs1.0 ---> ?Rep2.0) --->
           (?Abs3.0 ---> ?Rep2.0) ---> map_sum ?Rep1.0 ?Rep3.0 ---> ?Abs2.0)
           case_sum =
          case_sum",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 7),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 0)),
                 template_var 4))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tllist_all2_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> ((?Abs1.0 ---> ?Abs1.0 ---> id) --->
           (?Abs2.0 ---> ?Abs2.0 ---> id) --->
           tmap ?Rep1.0 ?Rep2.0 ---> tmap ?Rep1.0 ?Rep2.0 ---> id)
           tllist_all2 =
          tllist_all2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 4),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_hole 8))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 8))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 0)),
                   template_hole 8)))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tllist_all2_rel",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> tllist_all2 ?R1.0 ?R2.0 ?r ?s =
          (tllist_all2 ?R1.0 ?R2.0 ?r ?r &
           tllist_all2 ?R1.0 ?R2.0 ?s ?s &
           tmap ?Abs1.0 ?Abs2.0 ?r = tmap ?Abs1.0 ?Abs2.0 ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 4),
                  template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 4),
                     template_var 1),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 7),
                         template_var 4),
                       template_var 0),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 3),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 3),
                     template_var 0))))
             )))),
    ("Quotient_TLList.tllist_all2_prs",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0 |]
      ==> tllist_all2 ((?Abs1.0 ---> ?Abs1.0 ---> id) ?P)
           ((?Abs2.0 ---> ?Abs2.0 ---> id) ?Q) (tmap ?Rep1.0 ?Rep2.0 ?ts)
           (tmap ?Rep1.0 ?Rep2.0 ?ts') =
          tllist_all2 ?P ?Q ?ts ?ts'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_app
                      (template_app (template_hole 5, template_var 8),
                       template_hole 4)),
                   template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_hole 4)),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 4),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Quotient_TLList.tmap_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0;
         Quotient3 ?R3.0 ?Abs3.0 ?Rep3.0; Quotient3 ?R4.0 ?Abs4.0 ?Rep4.0 |]
      ==> ((?Abs1.0 ---> id) --->
           (?Abs2.0 ---> id) ---> tmap ?Rep1.0 ?Rep2.0 ---> id)
           tmap =
          tmap",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 10),
                 template_hole 8)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 7),
                   template_hole 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 9),
                     template_var 6)),
                 template_hole 2))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.tmap_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0;
         Quotient3 ?R3.0 ?Abs3.0 ?Rep3.0; Quotient3 ?R4.0 ?Abs4.0 ?Rep4.0 |]
      ==> ((?Abs1.0 ---> ?Rep2.0) --->
           (?Abs3.0 ---> ?Rep4.0) --->
           tmap ?Rep1.0 ?Rep3.0 ---> tmap ?Abs2.0 ?Abs4.0)
           tmap =
          tmap",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 10),
                 template_var 6)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 9),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 1)))),
           template_hole 1),
         template_hole 0))),
    ("Quotient_TLList.corec_tllist_preserve",
     "[| Quotient3 ?R1.0 ?Abs1.0 ?Rep1.0; Quotient3 ?R2.0 ?Abs2.0 ?Rep2.0;
         Quotient3 ?R3.0 ?Abs3.0 ?Rep3.0 |]
      ==> ((?Abs1.0 ---> id) --->
           (?Abs1.0 ---> ?Rep2.0) --->
           (?Abs1.0 ---> ?Rep3.0) --->
           (?Abs1.0 ---> id) --->
           (?Abs1.0 ---> tmap ?Rep3.0 ?Rep2.0) --->
           (?Abs1.0 ---> ?Rep1.0) ---> ?Rep1.0 ---> tmap ?Abs3.0 ?Abs2.0)
           corec_tllist =
          corec_tllist",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_var 7),
                 template_hole 14)),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 7),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 7),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 15, template_var 7),
                       template_hole 14)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 7),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_var 3))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 7),
                           template_var 6)),
                       template_app
                        (template_app (template_hole 3, template_var 6),
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 4)))))))),
           template_hole 1),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.Quotient_TLListMoreTemplates"
### 0.439s elapsed time, 0.671s cpu time, 0.087s GC time
val it = (): unit
