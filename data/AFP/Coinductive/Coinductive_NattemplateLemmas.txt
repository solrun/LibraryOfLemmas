   [("Coinductive_Nat.inj_enat", "inj_on enat ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Coinductive_Nat.epred_eSuc", "epred (eSuc ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Coinductive_Nat.enat_le_plus_same", "?x <= ?x + ?y",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Nat.enat_le_plus_same", "?x <= ?y + ?x",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Coinductive_Nat.enat_cocase_0",
     "(case 0 of 0 => ?z | eSuc x => ?s x) = ?z",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Coinductive_Nat.epred_conv_minus", "epred ?n = ?n - 1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Coinductive_Nat.numeral_eq_eSuc",
     "numeral ?k = eSuc (epred_numeral ?k)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.epred_numeral",
     "epred (numeral ?i) = epred_numeral ?i",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Nat.monotone_enat_minus1",
     "monotone (<=) (<=) (%n. n - ?m)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.monotone_eadd1", "monotone (<=) (<=) (%x. x + ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.monotone_eadd2", "monotone (<=) (<=) ((+) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.monotone_max_enat1",
     "monotone (<=) (<=) (%x. max x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.monotone_max_enat2", "monotone (<=) (<=) (max ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.case_enat_0",
     "(case 0 of enat x => ?f x | \<infinity> => ?i) = ?f 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app (template_var 1, template_hole 0))),
    ("Coinductive_Nat.epred_numeral_simps",
     "epred_numeral (num.Bit0 ?k) = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.epred_numeral_simps",
     "epred_numeral (num.Bit1 ?k) = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.enat_cocase_eSuc",
     "(case eSuc ?n of 0 => ?z | eSuc x => ?s x) = ?s ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Coinductive_Nat.finite_lessThan_enat_iff",
     "finite {..<?m} = (?m ~= \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Coinductive_Nat.infinity_eq_eSuc_iff",
     "(\<infinity> = eSuc ?n) = (?n = \<infinity>)",
     template_bimplication
      (template_equation
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_equation (template_var 0, template_hole 1))),
    ("Coinductive_Nat.eSuc_eq_infinity_iff",
     "(eSuc ?n = \<infinity>) = (?n = \<infinity>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Coinductive_Nat.epred_Sup",
     "epred (\<Squnion> ?A) = \<Squnion> (epred ` ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Coinductive_Nat.epred_enat", "epred (enat ?m) = enat (?m - 1)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Coinductive_Nat.eSuc_Inf",
     "eSuc (\<Sqinter> ?A) = \<Sqinter> (eSuc ` ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Coinductive_Nat.mcont_eadd1", "mcont Sup (<=) Sup (<=) (%x. x + ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.mcont_eadd2", "mcont Sup (<=) Sup (<=) ((+) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.mcont_max_enat1",
     "mcont Sup (<=) Sup (<=) (%x. max x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.mcont_max_enat2", "mcont Sup (<=) Sup (<=) (max ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           t_empty)
         )),
    ("Coinductive_Nat.enat_cocase_inf",
     "(case \<infinity> of 0 => ?a | eSuc b => ?f b) = ?f \<infinity>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), t_empty),
         template_hole 0),
       template_app (template_var 0, template_hole 0))),
    ("Coinductive_Nat.Le_enat_eq_ile", "((?m, ?n) : Le_enat) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Nat.enat_unfold_eq_0",
     "(enat_unfold ?stop ?next ?a = 0) = ?stop ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0),
       template_app (template_var 2, template_var 0))),
    ("Coinductive_Nat.eSuc_plus", "eSuc ?m + ?n = eSuc (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.finite_lessThan_enatI",
     "?m ~= \<infinity> ==> finite {..<?m}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Coinductive_Nat.Suc_eq_numeral",
     "(eSuc ?n = numeral ?k) = (?n = epred_numeral ?k)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.eq_numeral_eSuc",
     "(numeral ?k = eSuc ?n) = (epred_numeral ?k = ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Nat.less_eSuc_numeral",
     "(eSuc ?n < numeral ?k) = (?n < epred_numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.less_numeral_Suc",
     "(numeral ?k < eSuc ?n) = (epred_numeral ?k < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.le_eSuc_numeral",
     "(eSuc ?n <= numeral ?k) = (?n <= epred_numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.le_numeral_eSuc",
     "(numeral ?k <= eSuc ?n) = (epred_numeral ?k <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.epred_max",
     "epred (max ?x ?y) = max (epred ?x) (epred ?y)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Coinductive_Nat.epred_min",
     "epred (min ?a ?b) = min (epred ?a) (epred ?b)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Coinductive_Nat.diff_eSuc_numeral",
     "eSuc ?n - numeral ?k = ?n - epred_numeral ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.diff_numeral_eSuc",
     "numeral ?k - eSuc ?n = epred_numeral ?k - ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.max_eSuc_eSuc",
     "max (eSuc ?n) (eSuc ?m) = eSuc (max ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.min_eSuc_eSuc",
     "min (eSuc ?n) (eSuc ?m) = eSuc (min ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.enat_unfold_stop",
     "?stop ?a ==> enat_unfold ?stop ?next ?a = 0",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_hole 0))),
    ("Coinductive_Nat.ile_into_Le_enat", "?m <= ?n ==> (?m, ?n) : Le_enat",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Coinductive_Nat.epred_le_epredI", "?n <= ?m ==> epred ?n <= epred ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.Le_enat_imp_ile", "(?m, ?n) : Le_enat ==> ?m <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Coinductive_Nat.neq_zero_conv_eSuc",
     "(?n ~= 0) = (EX n'. ?n = eSuc n')",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Coinductive_Nat.max_eSuc_numeral",
     "max (eSuc ?n) (numeral ?k) = eSuc (max ?n (epred_numeral ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Coinductive_Nat.max_numeral_eSuc",
     "max (numeral ?k) (eSuc ?n) = eSuc (max (epred_numeral ?k) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.min_eSuc_numeral",
     "min (eSuc ?n) (numeral ?k) = eSuc (min ?n (epred_numeral ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Coinductive_Nat.min_numeral_eSuc",
     "min (numeral ?k) (eSuc ?n) = eSuc (min (epred_numeral ?k) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.enat_the_enat",
     "?n ~= \<infinity> ==> enat (the_enat ?n) = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Coinductive_Nat.eSuc_epred", "?n ~= 0 ==> eSuc (epred ?n) = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Coinductive_Nat.enat_cocase_numeral",
     "(case numeral ?v of 0 => ?a | eSuc x => ?f x) =
      Let (epred_numeral ?v) ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Nat.case_enat_numeral",
     "(case numeral ?v of enat x => ?f x | \<infinity> => ?i) =
      Let (numeral ?v) ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Nat.enat_less_enat_plusI",
     "?x < ?y ==> enat ?x < enat ?y + ?z",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.enat_minus_mono1", "?x <= ?y ==> ?x - ?m <= ?y - ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.plus_enat_eq_0_conv",
     "(?m + ?n = 0) = (?m = 0 & ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Coinductive_Nat.enat_min_eq_0_iff",
     "(min ?a ?b = 0) = (?a = 0 | ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Coinductive_Nat.enat_add2_eq",
     "(?y + enat ?x = ?z + enat ?x) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))),
       template_equation (template_var 2, template_var 0))),
    ("Coinductive_Nat.enat_add1_eq",
     "(enat ?x + ?y = enat ?x + ?z) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_Nat.enat_add_mono",
     "(enat ?x + ?y < enat ?x + ?z) = (?y < ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Coinductive_Nat.min_enat2_conv_enat",
     "min ?a (enat ?b) =
      enat (case ?a of enat a' => min a' ?b | \<infinity> => ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_var 1)))),
    ("Coinductive_Nat.min_enat1_conv_enat",
     "min (enat ?a) ?b =
      enat (case ?b of enat b' => min ?a b' | \<infinity> => ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.max_enat_minus1",
     "max ?n ?m - ?k = max (?n - ?k) (?m - ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.enat_add_sub_same",
     "?a ~= \<infinity> ==> ?a + ?b - ?a = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Coinductive_Nat.the_enat_eSuc",
     "?n ~= \<infinity> ==> the_enat (eSuc ?n) = Suc (the_enat ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Coinductive_Nat.eSuc_le_iff",
     "(eSuc ?x <= ?y) = (EX y'. ?y = eSuc y' & ?x <= y')",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Coinductive_Nat.enat_unfold",
     "enat_unfold ?stop ?next ?a =
      (if ?stop ?a then 0 else eSuc (enat_unfold ?stop ?next (?next ?a)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_hole 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app (template_var 1, template_var 0)))))),
    ("Coinductive_Nat.epred_enat_unfold",
     "epred (enat_unfold ?stop ?next ?a) =
      (if ?stop ?a then 0 else enat_unfold ?stop ?next (?next ?a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_var 1, template_var 0))))),
    ("Coinductive_Nat.epred_iadd1",
     "?a ~= 0 ==> epred (?a + ?b) = epred ?a + ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.mcont_enat_minus",
     "?m ~= \<infinity> ==> mcont Sup (<=) Sup (<=) (%n. n - ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.epred_minus_epred",
     "?m ~= 0 ==> epred ?n - epred ?m = ?n - ?m",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Coinductive_Nat.enat_less_enat_plusI2",
     "enat ?y < ?z ==> enat (?x + ?y) < enat ?x + ?z",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_var 2),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Coinductive_Nat.eSuc_mono",
     "monotone (fun_ord (<=)) (<=) ?f ==>
      monotone (fun_ord (<=)) (<=) (%x. eSuc (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mono2mono_epred",
     "monotone ?orda (<=) ?t ==> monotone ?orda (<=) (%x. epred (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mono2mono_eSuc",
     "monotone ?orda (<=) ?t ==> monotone ?orda (<=) (%x. eSuc (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.monotone_fun_eSuc", "gfp.mono_body (%f. eSuc (f ?x))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             t_empty),
           t_empty)
         )),
    ("Coinductive_Nat.enat_cocase_add_eq_if",
     "(case numeral ?v + ?n of 0 => ?a | eSuc x => ?f x) =
      (let pv = epred_numeral ?v in ?f (pv + ?n))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("Coinductive_Nat.enat_unfold_next",
     "~ ?stop ?a ==>
      enat_unfold ?stop ?next ?a =
      eSuc (enat_unfold ?stop ?next (?next ?a))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_app (template_var 0, template_var 1)))))),
    ("Coinductive_Nat.mono2mono_enat_minus1",
     "monotone ?orda (<=) ?t ==> monotone ?orda (<=) (%x. ?t x - ?m1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.chain_epredI",
     "Complete_Partial_Order.chain (<=) ?Y ==>
      Complete_Partial_Order.chain (<=) (epred ` (?Y Int {x. x ~= 0}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, t_empty))))
           ))),
    ("Coinductive_Nat.enat_less_imp_le",
     "(!!k. ?n < enat k ==> ?m < enat k) ==> ?m <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Coinductive_Nat.Le_enat_imp_ile_enat_k",
     "[| (?m, ?n) : Le_enat; ?n < enat ?l |] ==> ?m < enat ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_hole 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.max_Sup_enat2",
     "?Y ~= {} ==> max ?x (\<Squnion> ?Y) = \<Squnion> (max ?x ` ?Y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Coinductive_Nat.max_Sup_enat1",
     "?Y ~= {} ==> max (\<Squnion> ?Y) ?x = (\<Squnion>y\<in>?Y. max y ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Coinductive_Nat.Sup_image_eadd1",
     "?Y ~= {} ==> (\<Squnion>y\<in>?Y. y + ?x) = \<Squnion> ?Y + ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.Sup_image_eadd2",
     "?Y ~= {} ==> \<Squnion> ((+) ?x ` ?Y) = ?x + \<Squnion> ?Y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Coinductive_Nat.Sup_enat_minus1",
     "?m ~= \<infinity> ==>
      \<Squnion> ?A - ?m = (\<Squnion>n\<in>?A. n - ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Coinductive_Nat.epred_Max",
     "[| finite ?A; ?A ~= {} |] ==> epred (Max ?A) = Max (epred ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 0))))),
    ("Coinductive_Nat.mcont2mcont_epred",
     "mcont ?lub ?ord Sup (<=) ?t ==>
      mcont ?lub ?ord Sup (<=) (%x. epred (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mcont2mcont_eSuc",
     "mcont ?lub ?ord Sup (<=) ?t ==>
      mcont ?lub ?ord Sup (<=) (%x. eSuc (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.finite_imageD2",
     "[| finite (?f ` ?A); inj_on ?f (?A - ?B); finite ?B |] ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Coinductive_Nat.enat_coexhaust",
     "[| ?n = 0 ==> ?thesis; !!n'. ?n = eSuc n' ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Coinductive_Nat.enat_diff_cancel_left",
     "[| ?m <= ?x; ?m <= ?y |] ==> (?x - ?m = ?y - ?m) = (?x = ?y)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_equation (template_var 1, template_var 0)))),
    ("Coinductive_Nat.epred_inject",
     "[| ?x ~= 0; ?y ~= 0 |] ==> (epred ?x = epred ?y) = (?x = ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_bimplication
        (template_equation
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Coinductive_Nat.enat_unfold_unique",
     "(!!x. ?h x = (if ?stop x then 0 else eSuc (?h (?next x)))) ==>
      ?h ?x = enat_unfold ?stop ?next ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.Max_enat_minus1",
     "[| finite ?A; ?A ~= {} |] ==> Max ?A - ?m = (MAX n\<in>?A. n - ?m)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Coinductive_Nat.enat_cosplit",
     "?P (case ?n of 0 => ?c | eSuc x => ?d x) =
      ((?n = 0 --> ?P ?c) & (ALL m. ?n = eSuc m --> ?P (?d m)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_app (template_var 3, template_var 2))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Coinductive_Nat.eadd_partial_function_mono",
     "[| monotone (fun_ord (<=)) (<=) ?f; monotone (fun_ord (<=)) (<=) ?g |]
      ==> monotone (fun_ord (<=)) (<=) (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.max_enat_partial_function_mono",
     "[| monotone (fun_ord (<=)) (<=) ?f; monotone (fun_ord (<=)) (<=) ?g |]
      ==> monotone (fun_ord (<=)) (<=) (%x. max (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mono2mono_eadd",
     "[| monotone ?orda (<=) ?t; monotone ?orda (<=) ?t' |]
      ==> monotone ?orda (<=) (%x. ?t x + ?t' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mono2mono_max_enat",
     "[| monotone ?orda (<=) ?t; monotone ?orda (<=) ?t' |]
      ==> monotone ?orda (<=) (%x. max (?t x) (?t' x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.enat_cosplit_asm",
     "?P (case ?n of 0 => ?c | eSuc x => ?d x) =
      (~ (?n = 0 & ~ ?P ?c | (EX m. ?n = eSuc m & ~ ?P (?d m))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)),
                     template_app
                      (template_hole 6,
                       template_app (template_var 3, template_var 2)))),
                 template_app (template_hole 1, t_empty))
               )
           ))),
    ("Coinductive_Nat.mcont2mcont_enat_minus",
     "[| ?m1 ~= \<infinity>; mcont ?lub ?ord Sup (<=) ?t |]
      ==> mcont ?lub ?ord Sup (<=) (%x. ?t x - ?m1)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.enat_cocase_mono",
     "[| monotone ?orda ?ordb ?zero;
         !!n. monotone ?orda ?ordb (%f. ?esuc f n) |]
      ==> monotone ?orda ?ordb
           (%f. case ?x of 0 => ?zero f | eSuc x => ?esuc f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             t_empty)
           ))),
    ("Coinductive_Nat.mcont2mcont_eadd",
     "[| mcont ?lub ?ord Sup (<=) ?f; mcont ?lub ?ord Sup (<=) ?g |]
      ==> mcont ?lub ?ord Sup (<=) (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.mcont2mcont_max_enat",
     "[| mcont ?lub ?ord Sup (<=) ?f; mcont ?lub ?ord Sup (<=) ?g |]
      ==> mcont ?lub ?ord Sup (<=) (%x. max (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("Coinductive_Nat.enat_cocase_mcont",
     "[| mcont ?luba ?orda ?lubb ?ordb ?zero;
         !!n. mcont ?luba ?orda ?lubb ?ordb (%f. ?esuc f n) |]
      ==> mcont ?luba ?orda ?lubb ?ordb
           (%f. case ?x of 0 => ?zero f | eSuc x => ?esuc f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             t_empty)
           ))),
    ("Coinductive_Nat.monotone_enat_le_case",
     "[| monotone (<=) ?ord (%x. ?f x (eSuc x));
         !!x. ?ord ?bot (?f x (eSuc x)); ?ord ?bot ?bot |]
      ==> monotone (<=) ?ord
           (%x. case x of 0 => ?bot | eSuc x' => ?f x' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              t_empty)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 0), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2),
             t_empty)
           ))),
    ("Coinductive_Nat.mcont_enat_le_case",
     "[| class.ccpo ?lub ?ord (mk_less ?ord);
         mcont Sup (<=) ?lub ?ord (%x. ?f x (eSuc x));
         !!x. ?ord ?bot (?f x (eSuc x)) |]
      ==> mcont Sup (<=) ?lub ?ord
           (%x. case x of 0 => ?bot | eSuc x' => ?f x' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_hole 3),
                  template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3),
                 template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("Coinductive_Nat.enat_coinduct",
     "[| ?P ?m ?n;
         !!m n.
            ?P m n ==>
            (m = 0) = (n = 0) &
            (m ~= 0 -->
             n ~= 0 --> ?P (epred m) (epred n) | epred m = epred n) |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_Nat.enat_equalityI",
     "[| (?m, ?n) : ?X;
         !!m n.
            (m, n) : ?X ==>
            m = 0 & n = 0 |
            (EX m' n'.
                m = eSuc m' & n = eSuc n' & ((m', n') : ?X | m' = n')) |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 2, template_var 1))),
    ("Coinductive_Nat.enat_le_coinduct",
     "[| ?P ?m ?n;
         !!m n.
            ?P m n ==>
            (n = 0 --> m = 0) &
            (m ~= 0 -->
             n ~= 0 -->
             (EX k n'. ?P (epred m) n' & epred n = n' + k) |
             epred m <= epred n) |]
      ==> ?m <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Coinductive_Nat.enat_leI",
     "[| (?m, ?n) : ?X;
         !!m n.
            (m, n) : ?X ==>
            m = 0 |
            (EX m' n' k.
                m = eSuc m' &
                n = n' + enat k & k ~= 0 & ((m', n') : ?X | m' <= n')) |]
      ==> ?m <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation (less_equals, template_var 2, template_var 1))),
    ("Coinductive_Nat.enat_coinduct2",
     "[| ?P ?m ?n; !!m n. ?P m n ==> (m = 0) = (n = 0);
         !!m n.
            [| ?P m n; m ~= 0; n ~= 0 |]
            ==> ?P (epred m) (epred n) | epred m = epred n |]
      ==> ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0)))]
