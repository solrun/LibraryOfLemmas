Loading theory "HOL-Library.Case_Converter" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.620s cpu time, 0.047s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.186s elapsed time, 0.762s cpu time, 0.047s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.112s elapsed time, 0.438s cpu time, 0.052s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
Found termination order: "size_list size <*mlex*> {}"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Infinite_Set"
### 0.398s elapsed time, 1.588s cpu time, 0.099s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.325s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Set_Algebras"
### 0.274s elapsed time, 1.064s cpu time, 0.161s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.518s elapsed time, 2.022s cpu time, 0.253s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.176s elapsed time, 4.428s cpu time, 0.933s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat")
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Proofs for inductive predicate(s) "list_emb"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.729s elapsed time, 6.592s cpu time, 1.172s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.723s elapsed time, 10.505s cpu time, 1.553s GC time
### theory "HOL-Library.Countable"
### 1.221s elapsed time, 4.792s cpu time, 0.494s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.300s elapsed time, 8.656s cpu time, 1.292s GC time
Loading theory "Draft.Templates" (required by "Draft.TLListMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.289s cpu time, 0.083s GC time
### theory "HOL-Library.BigO"
### 0.818s elapsed time, 2.883s cpu time, 0.294s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TLListMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.737s elapsed time, 2.220s cpu time, 1.103s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.865s elapsed time, 2.160s cpu time, 1.046s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.536s elapsed time, 2.065s cpu time, 0.101s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.412s elapsed time, 0.463s cpu time, 0.036s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List" via "Draft.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.497s elapsed time, 0.546s cpu time, 0.068s GC time
Loading theory "Draft.Coinductive_Nat" (required by "Draft.TLListMoreTemplates" via "Draft.TLList" via "Draft.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Draft.Coinductive_Nat"
### 0.794s elapsed time, 1.547s cpu time, 1.052s GC time
Loading theory "Draft.Coinductive_List" (required by "Draft.TLListMoreTemplates" via "Draft.TLList")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Draft.Coinductive_List"
### 3.482s elapsed time, 4.927s cpu time, 1.977s GC time
Loading theory "Draft.TLList" (required by "Draft.TLListMoreTemplates")
overloading
  terminal0 \<equiv> terminal0 :: ('a, 'b) tllist => 'b
consts
  unfold_tllist ::
    "('a => bool)
     => ('a => 'b) => ('a => 'c) => ('a => 'a) => 'a => ('c, 'b) tllist"
consts
  tllist_of_llist :: "'a llist => ('a, 'b) tllist"
consts
  llist_of_tllist :: "('a, 'b) tllist => 'a llist"
### theory "Draft.TLList"
### 1.288s elapsed time, 1.498s cpu time, 0.245s GC time
Loading theory "Draft.TLListMoreTemplates"
val templateLemmas =
   [("TLList.terminal_TNil", "terminal (TNil ?x1.0) = ?x1.0",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TLList.lappendt_LNil", "lappendt LNil ?tr = ?tr",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("TLList.tappend_TNil2", "tappend ?xs TNil = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("TLList.tdropn_0", "tdropn 0 ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("TLList.tlength_TNil", "tlength (TNil ?b) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("TLList.llist_of_tllist_TNil", "llist_of_tllist (TNil ?x) = LNil",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("TLList.terminal_ttl", "terminal (ttl ?xs) = terminal ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TLList.lnth_llist_of_tllist", "lnth (llist_of_tllist ?xs) = tnth ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.lset_llist_of_tllist", "lset (llist_of_tllist ?xs) = tset ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tllist_of_llist_LNil", "tllist_of_llist ?b LNil = TNil ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("TLList.llength_llist_of_tllist",
     "llength (llist_of_tllist ?xs) = tlength ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tllist_of_llist_inverse",
     "llist_of_tllist (tllist_of_llist ?b ?xs) = ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("TLList.tset_ttl", "tset (ttl ?xs) <= tset ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TLList.TNil_transfer2", "rel_fun ?B (tllist_all2 ?A ?B) TNil TNil",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.is_TNil_transfer2",
     "rel_fun (tllist_all2 ?A ?B) (=) is_TNil is_TNil",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 2),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tlength_transfer",
     "rel_fun (tllist_all2 ?A ?B) (=) tlength tlength",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 2),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.llist_of_tllist_transfer",
     "rel_fun (pcr_tllist (=) ?B) (=) fst llist_of_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_hole 2),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.terminal_TCons", "terminal (TCons ?x ?xs) = terminal ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TLList.thd_tllist_of_llist", "thd (tllist_of_llist ?b ?xs) = lhd ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tnth_TNil", "tnth (TNil ?b) ?n = undefined ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tnth_0", "tnth (TCons ?x ?xs) 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("TLList.tset_tllist_of_llist",
     "tset (tllist_of_llist ?b ?xs) = lset ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.llist_of_tllist_eq_LNil",
     "(llist_of_tllist ?xs = LNil) = is_TNil ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tappend_TNil", "tappend (TNil ?b) ?f = ?f ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("TLList.tconcat_TNil", "tconcat ?b (TNil ?b') = TNil ?b'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tconcat'_code", "TLList.tconcat' ?b (TNil ?b') = TNil ?b'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tdropn_TNil", "tdropn ?n (TNil ?b) = TNil ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.llist_of_tllist_inverse",
     "tllist_of_llist (terminal ?b) (llist_of_tllist ?b) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TLList.gen_tlength_code", "gen_tlength ?n (TNil ?b) = enat ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("TLList.ltl_llist_of_tllist",
     "ltl (llist_of_tllist ?xs) = llist_of_tllist (ttl ?xs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("TLList.is_TNil_tfinite", "is_TNil ?xs ==> tfinite ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.is_TNil_ttl", "is_TNil ?xs ==> is_TNil (ttl ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.TNil_transfer",
     "rel_fun ?B (pcr_tllist ?A ?B) (Pair LNil) TNil",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("TLList.tset_transfer2",
     "rel_fun (tllist_all2 ?A ?B) (rel_set ?A) tset tset",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.llist_of_tllist_transfer2",
     "rel_fun (tllist_all2 ?A ?B) (llist_all2 ?A) llist_of_tllist
       llist_of_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tfilter_TNil", "tfilter ?b' ?P (TNil ?b) = TNil ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tfilter'_code", "TLList.tfilter' ?b' ?P (TNil ?b) = TNil ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.tlength_TCons", "tlength (TCons ?x ?xs) = eSuc (tlength ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("TLList.tlength_tmap", "tlength (tmap ?f ?g ?xs) = tlength ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TLList.llist_of_tllist_tconcat",
     "llist_of_tllist (tconcat ?b ?trs) = lconcat (llist_of_tllist ?trs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("TLList.set2_pre_tllist_transfer",
     "rel_fun (rel_pre_tllist ?A ?B ?C) (rel_set ?B) set2_pre_tllist
       set2_pre_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 1)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.set1_pre_tllist_transfer",
     "rel_fun (rel_pre_tllist ?A ?B ?C) (rel_set ?A) set1_pre_tllist
       set1_pre_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 2)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.set3_pre_tllist_transfer",
     "rel_fun (rel_pre_tllist ?A ?B ?C) (rel_set ?C) set3_pre_tllist
       set3_pre_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.ttl_transfer2",
     "rel_fun (tllist_all2 ?A ?B) (tllist_all2 ?A ?B) ttl ttl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.ttl_tllist_of_llist",
     "ttl (tllist_of_llist ?b ?xs) = tllist_of_llist ?b (ltl ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.llist_of_tllist_lappendt",
     "llist_of_tllist (lappendt ?xs ?tr) =
      lappend ?xs (llist_of_tllist ?tr)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("TLList.llist_of_tllist_tdropn",
     "llist_of_tllist (tdropn ?n ?xs) = ldropn ?n (llist_of_tllist ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("TLList.llist_of_tllist_TCons",
     "llist_of_tllist (TCons ?xa ?x) = LCons ?xa (llist_of_tllist ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("TLList.tllist_of_llist_transfer2",
     "rel_fun ?B (rel_fun (llist_all2 ?A) (tllist_all2 ?A ?B))
       tllist_of_llist tllist_of_llist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.ttl_transfer",
     "rel_fun (pcr_tllist ?A ?B) (pcr_tllist ?A ?B) (apfst ltl) ttl",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("TLList.terminal_tllist_of_llist",
     "terminal (tllist_of_llist ?y ?xs) =
      (if lfinite ?xs then ?y else undefined)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("TLList.tnth_Suc_TCons", "tnth (TCons ?x ?xs) (Suc ?n) = tnth ?xs ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("TLList.tdropn_Suc_TCons",
     "tdropn (Suc ?n) (TCons ?x ?xs) = tdropn ?n ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("TLList.tlength_tdropn",
     "tlength (tdropn ?n ?xs) = tlength ?xs - enat ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("TLList.llist_of_tllist_tfilter",
     "llist_of_tllist (tfilter ?b ?P ?tr) =
      lfilter ?P (llist_of_tllist ?tr)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("TLList.llist_of_tllist_tmap",
     "llist_of_tllist (tmap ?f ?g ?xs) = lmap ?f (llist_of_tllist ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.terminal_tllist_of_llist_lfinite",
     "lfinite ?xs ==> terminal (tllist_of_llist ?b ?xs) = ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("TLList.terminal_tllist_of_llist_lnull",
     "lnull ?xs ==> terminal (tllist_of_llist ?b ?xs) = ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("TLList.TCons_transfer2",
     "rel_fun ?A (rel_fun (tllist_all2 ?A ?B) (tllist_all2 ?A ?B)) TCons
       TCons",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tdropn_transfer",
     "rel_fun (=) (rel_fun (tllist_all2 ?A ?B) (tllist_all2 ?A ?B)) tdropn
       tdropn",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tllist_all2_TNil",
     "tllist_all2 ?R1.0 ?R2.0 (TNil ?x1.0) (TNil ?y1.0) =
      ?R2.0 ?x1.0 ?y1.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("TLList.lappendt_LCons",
     "lappendt (LCons ?x ?xs) ?tr = TCons ?x (lappendt ?xs ?tr)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TLList.tappend_TCons",
     "tappend (TCons ?a ?tr) ?f = TCons ?a (tappend ?tr ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TLList.tconcat_TCons",
     "tconcat ?b (TCons ?a ?tr) = lappendt ?a (tconcat ?b ?tr)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("TLList.ttl_tmap", "ttl (tmap ?f ?g ?xs) = tmap ?f ?g (ttl ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.tllist_of_llist_LCons",
     "tllist_of_llist ?b (LCons ?xa ?x) =
      TCons ?xa (tllist_of_llist ?b ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("TLList.lappendt_ltake_tdropn",
     "lappendt (ltake (enat ?n) (llist_of_tllist ?xs)) (tdropn ?n ?xs) =
      ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("TLList.tconcat'_code",
     "TLList.tconcat' ?b (TCons ?a ?tr) =
      lappendt ?a (TLList.tconcat' ?b ?tr)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("TLList.gen_tlength_code",
     "gen_tlength ?n (TCons ?x ?xs) = gen_tlength (?n + 1) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 0))),
    ("TLList.terminal_lappendt_lfinite",
     "lfinite ?xs ==> terminal (lappendt ?xs ?ys) = terminal ?ys",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("TLList.lhd_llist_of_tllist",
     "~ is_TNil ?xs ==> lhd (llist_of_tllist ?xs) = thd ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.in_tset_ttlD", "?x : tset (ttl ?xs) ==> ?x : tset ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("TLList.tconcat_transfer",
     "rel_fun ?B
       (rel_fun (tllist_all2 (llist_all2 ?A) ?B) (tllist_all2 ?A ?B))
       tconcat tconcat",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.lappendt_transfer",
     "rel_fun (llist_all2 ?A)
       (rel_fun (tllist_all2 ?A ?B) (tllist_all2 ?A ?B)) lappendt lappendt",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.set2_tllist_tllist_of_llist",
     "set2_tllist (tllist_of_llist ?b ?xs) =
      (if lfinite ?xs then {?b} else {})",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_hole 0))),
    ("TLList.llist_of_tllist_tappend",
     "llist_of_tllist (tappend ?xs ?f) =
      lappend (llist_of_tllist ?xs) (llist_of_tllist (?f (terminal ?xs)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("TLList.tappend_inf", "~ tfinite ?xs ==> tappend ?xs ?f = tcast ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("TLList.tllist_all2_is_TNilD",
     "tllist_all2 ?P ?Q ?xs ?ys ==> is_TNil ?xs = is_TNil ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.tllist_all2_tlengthD",
     "tllist_all2 ?P ?Q ?xs ?ys ==> tlength ?xs = tlength ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TLList.TCons_transfer",
     "rel_fun ?A (rel_fun (pcr_tllist ?A ?B) (pcr_tllist ?A ?B))
       (apfst o LCons) TCons",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_hole 0)
         )),
    ("TLList.tnth_TCons",
     "tnth (TCons ?x ?xs) ?n =
      (case ?n of 0 => ?x | Suc n' => tnth ?xs n')",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0))),
    ("TLList.is_TNil_tfilter",
     "is_TNil (tfilter ?y ?P ?xs) = (ALL x:tset ?xs. ~ ?P x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("TLList.tappend_assoc",
     "tappend (tappend ?xs ?f) ?g = tappend ?xs (%b. tappend (?f b) ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("TLList.tmap_tllist_of_llist",
     "tmap ?f ?g (tllist_of_llist ?b ?xs) =
      tllist_of_llist (?g ?b) (lmap ?f ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("TLList.tmap_is_TNil",
     "is_TNil ?xs ==> tmap ?f ?g ?xs = TNil (?g (terminal ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 2)))))),
    ("TLList.llist_all2_tllist_of_llistI",
     "tllist_all2 ?A ?B ?xs ?ys ==>
      llist_all2 ?A (llist_of_tllist ?xs) (llist_of_tllist ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.tllist_all2D_llist_all2_llist_of_tllist",
     "tllist_all2 ?P ?Q ?xs ?ys ==>
      llist_all2 ?P (llist_of_tllist ?xs) (llist_of_tllist ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.terminal_transfer",
     "rel_fun (pcr_tllist ?A (=)) (=)
       (%(xs, b). if lfinite xs then b else undefined) terminal",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5)),
               template_hole 5),
             template_app (template_hole 4, t_empty)),
           template_hole 0)
         )),
    ("TLList.TNil_eq_tllist_of_llist",
     "(TNil ?b = tllist_of_llist ?b' ?xs) = (?b = ?b' & ?xs = LNil)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("TLList.tllist_of_llist_eq",
     "(tllist_of_llist ?b' ?xs = TNil ?b) = (?b = ?b' & ?xs = LNil)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("TLList.tset_lappendt_lfinite",
     "lfinite ?xs ==> tset (lappendt ?xs ?ys) = lset ?xs Un tset ?ys",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("TLList.terminal_tmap",
     "tfinite ?xs ==> terminal (tmap ?f ?g ?xs) = ?g (terminal ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 2))))),
    ("TLList.tllist_all2_tfiniteD",
     "tllist_all2 ?P ?Q ?xs ?ys ==> tfinite ?xs = tfinite ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("TLList.tfilter_transfer",
     "rel_fun ?B
       (rel_fun (rel_fun ?A (=))
         (rel_fun (tllist_all2 ?A ?B) (tllist_all2 ?A ?B)))
       tfilter tfilter",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tappend_transfer",
     "rel_fun (tllist_all2 ?A ?B)
       (rel_fun (rel_fun ?B (tllist_all2 ?A ?C)) (tllist_all2 ?A ?C))
       tappend tappend",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.terminal_tappend",
     "terminal (tappend ?xs ?f) =
      (if tfinite ?xs then terminal (?f (terminal ?xs)) else terminal ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_var 0,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 4, template_var 1)))),
    ("TLList.tfinite_tappend",
     "tfinite (tappend ?xs ?f) =
      (tfinite ?xs & tfinite (?f (terminal ?xs)))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_var 0,
               template_app (template_hole 0, template_var 1))))))),
    ("TLList.tdropn_Suc",
     "tdropn (Suc ?n) ?xs =
      (case ?xs of TNil b => TNil b | TCons x xs' => tdropn ?n xs')",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 1, t_empty), t_empty),
         template_var 0))),
    ("TLList.split_fst", "?R (fst ?p) = (ALL x y. ?p = (x, y) --> ?R x)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("TLList.tmap_transfer2",
     "rel_fun (rel_fun ?A ?B)
       (rel_fun (rel_fun ?C ?D)
         (rel_fun (tllist_all2 ?A ?C) (tllist_all2 ?B ?D)))
       tmap tmap",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.set2_tllist_transfer",
     "rel_fun (pcr_tllist ?A ?B) (rel_set ?B)
       (%(xs, b). if lfinite xs then {b} else {}) set2_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_app (template_hole 6, template_var 0)),
             template_app (template_hole 5, t_empty)),
           template_hole 0)
         )),
    ("TLList.tllist_all2_TNil2",
     "tllist_all2 ?P ?Q ?ts (TNil ?b') = (EX b. ?ts = TNil b & ?Q b ?b')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("TLList.tllist_all2_TNil1",
     "tllist_all2 ?P ?Q (TNil ?b) ?ts = (EX b'. ?ts = TNil b' & ?Q ?b b')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("TLList.TNil_eq_unfold_tllist",
     "(TNil ?b = unfold_tllist ?IS_TNIL ?TNIL ?THD ?TTL ?a) =
      (?IS_TNIL ?a & ?b = ?TNIL ?a)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 4, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_app (template_var 3, template_var 0)))
           ))),
    ("TLList.unfold_tllist_eq_TNil",
     "(unfold_tllist ?IS_TNIL ?TNIL ?THD ?TTL ?a = TNil ?b) =
      (?IS_TNIL ?a & ?b = ?TNIL ?a)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 5, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_var 4, template_var 1)))
           ))),
    ("TLList.tllist_all2_tfinite1_terminalD",
     "[| tllist_all2 ?P ?Q ?xs ?ys; tfinite ?xs |]
      ==> ?Q (terminal ?xs) (terminal ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.tllist_all2_tfinite2_terminalD",
     "[| tllist_all2 ?P ?Q ?xs ?ys; tfinite ?ys |]
      ==> ?Q (terminal ?xs) (terminal ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.tset_conv_tnth",
     "tset ?xs = {tnth ?xs n |n. enat n < tlength ?xs}",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("TLList.split_fst_asm",
     "?R (fst ?p) = (\<nexists>x y. ?p = (x, y) & ~ ?R x)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("TLList.in_tset_conv_tnth",
     "(?x : tset ?xs) = (EX n. enat n < tlength ?xs & tnth ?xs n = ?x)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("TLList.tllist_of_llist_inject",
     "(tllist_of_llist ?b ?xs = tllist_of_llist ?c ?ys) =
      (?xs = ?ys & (lfinite ?ys --> ?b = ?c))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))
           ))),
    ("TLList.tnth_tmap",
     "enat ?n < tlength ?xs ==>
      tnth (tmap ?f ?g ?xs) ?n = ?f (tnth ?xs ?n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3))))),
    ("TLList.case_tllist_transfer",
     "rel_fun (rel_fun ?B ?C)
       (rel_fun (rel_fun ?A (rel_fun (tllist_all2 ?A ?B) ?C))
         (rel_fun (tllist_all2 ?A ?B) ?C))
       case_tllist case_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2)),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2)),
                   template_var 1))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.TNil_eq_tmap_conv",
     "(TNil ?y = tmap ?f ?g ?xs) = (EX y'. ?xs = TNil y' & ?g y' = ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("TLList.tmap_eq_TNil_conv",
     "(tmap ?f ?g ?xs = TNil ?y) = (EX y'. ?xs = TNil y' & ?g y' = ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("TLList.tllist_all2_TCons",
     "tllist_all2 ?R1.0 ?R2.0 (TCons ?x21.0 ?x22.0) (TCons ?y21.0 ?y22.0) =
      (?R1.0 ?x21.0 ?y21.0 & tllist_all2 ?R1.0 ?R2.0 ?x22.0 ?y22.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 2),
           template_var 0)))),
    ("TLList.tdropn_Suc_conv_tdropn",
     "enat ?n < tlength ?xs ==>
      TCons (tnth ?xs ?n) (tdropn (Suc ?n) ?xs) = tdropn ?n ?xs",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("TLList.tllist_all2_tmap1",
     "tllist_all2 ?P ?Q (tmap ?f ?g ?xs) ?ys =
      tllist_all2 (%x. ?P (?f x)) (%x. ?Q (?g x)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_app (template_hole 0, t_empty), t_empty),
           template_var 1),
         template_var 0))),
    ("TLList.tfilter_TCons",
     "tfilter ?b ?P (TCons ?a ?tr) =
      (if ?P ?a then TCons ?a (tfilter ?b ?P ?tr) else tfilter ?b ?P ?tr)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TLList.tfilter'_code",
     "TLList.tfilter' ?b' ?P (TCons ?a ?tr) =
      (if ?P ?a then TCons ?a (TLList.tfilter' ?b' ?P ?tr)
       else TLList.tfilter' ?b' ?P ?tr)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TLList.tnth_tdropn",
     "enat (?n + ?m) < tlength ?xs ==>
      tnth (tdropn ?n ?xs) ?m = tnth ?xs (?m + ?n)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2))))),
    ("TLList.tllist_all2_tllist_of_llist",
     "tllist_all2 ?A ?B (tllist_of_llist ?b ?xs) (tllist_of_llist ?c ?ys) =
      (llist_all2 ?A ?xs ?ys & (lfinite ?xs --> ?B ?b ?c))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1))))),
    ("TLList.ttl_unfold_tllist",
     "ttl (unfold_tllist ?IS_TNIL ?TNIL ?THD ?TTL ?a) =
      (if ?IS_TNIL ?a then TNil (?TNIL ?a)
       else unfold_tllist ?IS_TNIL ?TNIL ?THD ?TTL (?TTL ?a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 4, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_var 3, template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_var 1, template_var 0))))),
    ("TLList.tllist_of_llist_cong",
     "[| ?xs = ?xs'; lfinite ?xs' ==> ?b = ?b' |]
      ==> tllist_of_llist ?b ?xs = tllist_of_llist ?b' ?xs'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate
            (template_app (template_hole 3, template_var 2))],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("TLList.tllist_all2_tnthD",
     "[| tllist_all2 ?P ?Q ?xs ?ys; enat ?n < tlength ?xs |]
      ==> ?P (tnth ?xs ?n) (tnth ?ys ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("TLList.tllist_all2_tnthD2",
     "[| tllist_all2 ?P ?Q ?xs ?ys; enat ?n < tlength ?ys |]
      ==> ?P (tnth ?xs ?n) (tnth ?ys ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("TLList.tllist_all2_thdD",
     "[| tllist_all2 ?P ?Q ?xs ?ys; ~ is_TNil ?xs | ~ is_TNil ?ys |]
      ==> ?P (thd ?xs) (thd ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.tllist_all2_transfer2",
     "rel_fun (rel_fun ?R1.0 (rel_fun ?R1.0 (=)))
       (rel_fun (rel_fun ?R2.0 (rel_fun ?R2.0 (=)))
         (rel_fun (tllist_all2 ?R1.0 ?R2.0)
           (rel_fun (tllist_all2 ?R1.0 ?R2.0) (=))))
       tllist_all2 tllist_all2",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_hole 8))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_hole 8))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0)),
                     template_hole 8)))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.unfold_tllist_transfer",
     "rel_fun (rel_fun ?A (=))
       (rel_fun (rel_fun ?A ?B)
         (rel_fun (rel_fun ?A ?C)
           (rel_fun (rel_fun ?A ?A) (rel_fun ?A (tllist_all2 ?C ?B)))))
       unfold_tllist unfold_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 2),
                   template_hole 10)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)))))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tllist_all2_refl",
     "tllist_all2 ?P ?Q ?xs ?xs =
      ((ALL x:tset ?xs. ?P x x) &
       (tfinite ?xs --> ?Q (terminal ?xs) (terminal ?xs)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_var 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 0)))))),
    ("TLList.tllist_all2_ttlI",
     "[| tllist_all2 ?P ?Q ?xs ?ys; ~ is_TNil ?xs | ~ is_TNil ?ys |]
      ==> tllist_all2 ?P ?Q (ttl ?xs) (ttl ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TLList.tllist_all2_tmap2",
     "tllist_all2 ?P ?Q ?xs (tmap ?f ?g ?ys) =
      tllist_all2 (%x y. ?P x (?f y)) (%x y. ?Q x (?g y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_app (template_hole 0, t_empty), t_empty),
           template_var 3),
         template_var 0))),
    ("TLList.llist_of_tllist_eq_lappend_conv",
     "(llist_of_tllist ?xs = lappend ?us ?vs) =
      (EX ys.
          ?xs = lappendt ?us ys &
          ?vs = llist_of_tllist ys & terminal ?xs = terminal ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("TLList.tfilter_empty_conv",
     "(tfilter ?y ?P ?xs = TNil ?y') =
      ((ALL x:tset ?xs. ~ ?P x) &
       (if tfinite ?xs then terminal ?xs = ?y' else ?y = ?y'))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 t_empty)),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)))
           ))),
    ("TLList.tllist_all2_TCons2",
     "tllist_all2 ?P ?Q ?ts' (TCons ?x ?ts) =
      (EX x' ts''.
          ?ts' = TCons x' ts'' & ?P x' ?x & tllist_all2 ?P ?Q ts'' ?ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("TLList.tllist_all2_TCons1",
     "tllist_all2 ?P ?Q (TCons ?x ?ts) ?ts' =
      (EX x' ts''.
          ?ts' = TCons x' ts'' & ?P ?x x' & tllist_all2 ?P ?Q ?ts ts'')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("TLList.tmap_eq_tmap_conv_tllist_all2",
     "(tmap ?f ?g ?xs = tmap ?f' ?g' ?ys) =
      tllist_all2 (%x y. ?f x = ?f' y) (%x y. ?g x = ?g' y) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_app (template_hole 2, t_empty), t_empty),
           template_var 3),
         template_var 0))),
    ("TLList.tllist_all2_trans",
     "[| tllist_all2 ?P ?Q ?xs ?ys; tllist_all2 ?P ?Q ?ys ?zs; transp ?P;
         transp ?Q |]
      ==> tllist_all2 ?P ?Q ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 4)),
        template_predicate
         (template_app (template_hole 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("TLList.tllist_of_llist_eq_lappendt_conv",
     "(tllist_of_llist ?a ?xs = lappendt ?ys ?zs) =
      (EX xs' a'.
          ?xs = lappend ?ys xs' &
          ?zs = tllist_of_llist a' xs' & (lfinite ?ys --> ?a = a'))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("TLList.TCons_eq_tmap_conv",
     "(TCons ?y ?ys = tmap ?f ?g ?xs) =
      (EX z zs. ?xs = TCons z zs & ?f z = ?y & tmap ?f ?g zs = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("TLList.tmap_eq_TCons_conv",
     "(tmap ?f ?g ?xs = TCons ?y ?ys) =
      (EX z zs. ?xs = TCons z zs & ?f z = ?y & tmap ?f ?g zs = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("TLList.tllist_all2_reflI",
     "[| !!x. x : tset ?xs ==> ?P x x;
         tfinite ?xs ==> ?Q (terminal ?xs) (terminal ?xs) |]
      ==> tllist_all2 ?P ?Q ?xs ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 0,
                  template_app (template_hole 1, template_var 2)),
                template_app (template_hole 1, template_var 2))
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2),
             template_var 2)
           ))),
    ("TLList.corec_tllist_transfer",
     "rel_fun (rel_fun ?A (=))
       (rel_fun (rel_fun ?A ?B)
         (rel_fun (rel_fun ?A ?C)
           (rel_fun (rel_fun ?A (=))
             (rel_fun (rel_fun ?A (tllist_all2 ?C ?B))
               (rel_fun (rel_fun ?A ?A)
                 (rel_fun ?A (tllist_all2 ?C ?B)))))))
       corec_tllist corec_tllist",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 2),
                   template_hole 12)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 13, template_var 2),
                         template_hole 12)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 2),
                           template_app
                            (template_app (template_hole 4, template_var 0),
                             template_var 1))),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 2)),
                         template_app
                          (template_app (template_hole 5, template_var 2),
                           template_app
                            (template_app (template_hole 4, template_var 0),
                             template_var 1)))))))),
             template_hole 1),
           template_hole 0)
         )),
    ("TLList.tfinite_induct",
     "[| tfinite ?xs; !!y. ?P (TNil y);
         !!x xs. [| tfinite xs; ?P xs |] ==> ?P (TCons x xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("TLList.tllist_all2_conv_all_tnth",
     "tllist_all2 ?P ?Q ?xs ?ys =
      (tlength ?xs = tlength ?ys &
       (ALL n. enat n < tlength ?xs --> ?P (tnth ?xs n) (tnth ?ys n)) &
       (tfinite ?xs --> ?Q (terminal ?xs) (terminal ?ys)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 1)),
                 template_app (template_hole 10, template_var 0))),
             template_app
              (template_app
                (template_hole 13, template_app (template_hole 9, t_empty)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1))),
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("TLList.tllist_all2_mono",
     "[| tllist_all2 ?P ?Q ?xs ?ys; !!x y. ?P x y ==> ?P' x y;
         !!x y. ?Q x y ==> ?Q' x y |]
      ==> tllist_all2 ?P' ?Q' ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("TLList.tfilter_eq_TConsD",
     "tfilter ?a ?P ?ys = TCons ?x ?xs ==>
      EX us vs.
         ?ys = lappendt us (TCons ?x vs) &
         lfinite us &
         (ALL u:lset us. ~ ?P u) & ?P ?x & ?xs = tfilter ?a ?P vs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TLList.tset_induct",
     "[| ?x : tset ?xs; !!xs. ?P (TCons ?x xs);
         !!x' xs.
            [| ?x : tset xs; ?x ~= x'; ?P xs |] ==> ?P (TCons x' xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("TLList.tllist_all2_tappendI",
     "[| tllist_all2 ?P ?Q ?xs ?ys;
         [| tfinite ?xs; tfinite ?ys; ?Q (terminal ?xs) (terminal ?ys) |]
         ==> tllist_all2 ?P ?R (?xs' (terminal ?xs))
              (?ys' (terminal ?ys)) |]
      ==> tllist_all2 ?P ?R (tappend ?xs ?xs') (tappend ?ys ?ys')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 4))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 3))
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_var 5,
                       template_app (template_hole 4, template_var 4)),
                     template_app (template_hole 3, template_var 3))
                   )],
              template_predicate
               (
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 2),
                      template_app
                       (template_var 1,
                        template_app (template_hole 4, template_var 4))),
                    template_app
                     (template_var 0,
                      template_app (template_hole 3, template_var 3)))
                  ))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("TLList.set2_tllist_induct",
     "[| ?x : set2_tllist ?xs; !!xs. is_TNil xs ==> ?P (terminal xs) xs;
         !!xs y.
            [| ~ is_TNil xs; y : set2_tllist (ttl xs); ?P y (ttl xs) |]
            ==> ?P y xs |]
      ==> ?P ?x ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("TLList.tllist_set_induct",
     "[| ?x : tset ?xs; !!xs. ~ is_TNil xs ==> ?P (thd xs) xs;
         !!xs y.
            [| ~ is_TNil xs; y : tset (ttl xs); ?P y (ttl xs) |]
            ==> ?P y xs |]
      ==> ?P ?x ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("TLList.tllist_all2_coinduct",
     "[| ?X ?xs ?ys;
         !!xs ys.
            ?X xs ys ==>
            is_TNil xs = is_TNil ys &
            (is_TNil xs --> is_TNil ys --> ?R (terminal xs) (terminal ys)) &
            (~ is_TNil xs -->
             ~ is_TNil ys -->
             ?P (thd xs) (thd ys) &
             (?X (ttl xs) (ttl ys) |
              tllist_all2 ?P ?R (ttl xs) (ttl ys))) |]
      ==> tllist_all2 ?P ?R ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 2)
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3),
             template_var 2)
           ))),
    ("TLList.tllist_all2_cases",
     "[| tllist_all2 ?P ?Q ?xs ?ys;
         !!b b'. [| ?xs = TNil b; ?ys = TNil b'; ?Q b b' |] ==> ?thesis;
         !!x xs' y ys'.
            [| ?xs = TCons x xs'; ?ys = TCons y ys'; ?P x y;
               tllist_all2 ?P ?Q xs' ys' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("TLList.tllist_all2_rsp",
     "[| ALL x y. ?R1.0 x y --> (ALL a b. ?R1.0 a b --> ?S x a = ?T y b);
         ALL x y. ?R2.0 x y --> (ALL a b. ?R2.0 a b --> ?S' x a = ?T' y b);
         tllist_all2 ?R1.0 ?R2.0 ?xs ?ys;
         tllist_all2 ?R1.0 ?R2.0 ?xs' ?ys' |]
      ==> tllist_all2 ?S ?S' ?xs ?xs' = tllist_all2 ?T ?T' ?ys ?ys'",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 9),
                  template_var 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 9),
                  template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 8),
               template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 4),
             template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.TLListMoreTemplates"
### 0.465s elapsed time, 0.708s cpu time, 0.085s GC time
val it = (): unit
