   [("Coinductive_Nat.epred_eSuc", "epred (eSuc ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Coinductive_Nat.enat_cocase_0",
     "(case 0 of 0 => ?z | eSuc x => ?s x) = ?z",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Coinductive_Nat.epred_conv_minus", "epred ?n = ?n - 1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Coinductive_Nat.numeral_eq_eSuc",
     "numeral ?k = eSuc (epred_numeral ?k)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.epred_numeral",
     "epred (numeral ?i) = epred_numeral ?i",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Nat.case_enat_0",
     "(case 0 of enat x => ?f x | \<infinity> => ?i) = ?f 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app (template_var 1, template_hole 0))),
    ("Coinductive_Nat.epred_numeral_simps",
     "epred_numeral (num.Bit0 ?k) = numeral (Num.BitM ?k)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.epred_numeral_simps",
     "epred_numeral (num.Bit1 ?k) = numeral (num.Bit0 ?k)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.enat_cocase_eSuc",
     "(case eSuc ?n of 0 => ?z | eSuc x => ?s x) = ?s ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Coinductive_Nat.finite_lessThan_enat_iff",
     "finite {..<?m} = (?m ~= \<infinity>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Coinductive_Nat.infinity_eq_eSuc_iff",
     "(\<infinity> = eSuc ?n) = (?n = \<infinity>)",
     template_bimplication
      (template_equation
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_equation (template_var 0, template_hole 1))),
    ("Coinductive_Nat.eSuc_eq_infinity_iff",
     "(eSuc ?n = \<infinity>) = (?n = \<infinity>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Coinductive_Nat.epred_Sup",
     "epred (\<Squnion> ?A) = \<Squnion> (epred ` ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Coinductive_Nat.epred_enat", "epred (enat ?m) = enat (?m - 1)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Coinductive_Nat.eSuc_Inf",
     "eSuc (\<Sqinter> ?A) = \<Sqinter> (eSuc ` ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Coinductive_Nat.enat_cocase_inf",
     "(case \<infinity> of 0 => ?a | eSuc b => ?f b) = ?f \<infinity>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), t_empty),
         template_hole 0),
       template_app (template_var 0, template_hole 0))),
    ("Coinductive_Nat.Le_enat_eq_ile", "((?m, ?n) : Le_enat) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Nat.enat_unfold_eq_0",
     "(enat_unfold ?stop ?next ?a = 0) = ?stop ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0),
       template_app (template_var 2, template_var 0))),
    ("Coinductive_Nat.eSuc_plus", "eSuc ?m + ?n = eSuc (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.Suc_eq_numeral",
     "(eSuc ?n = numeral ?k) = (?n = epred_numeral ?k)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.eq_numeral_eSuc",
     "(numeral ?k = eSuc ?n) = (epred_numeral ?k = ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Nat.less_eSuc_numeral",
     "(eSuc ?n < numeral ?k) = (?n < epred_numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.less_numeral_Suc",
     "(numeral ?k < eSuc ?n) = (epred_numeral ?k < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.le_eSuc_numeral",
     "(eSuc ?n <= numeral ?k) = (?n <= epred_numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.le_numeral_eSuc",
     "(numeral ?k <= eSuc ?n) = (epred_numeral ?k <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.epred_max",
     "epred (max ?x ?y) = max (epred ?x) (epred ?y)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Coinductive_Nat.epred_min",
     "epred (min ?a ?b) = min (epred ?a) (epred ?b)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Coinductive_Nat.diff_eSuc_numeral",
     "eSuc ?n - numeral ?k = ?n - epred_numeral ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Nat.diff_numeral_eSuc",
     "numeral ?k - eSuc ?n = epred_numeral ?k - ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Coinductive_Nat.max_eSuc_eSuc",
     "max (eSuc ?n) (eSuc ?m) = eSuc (max ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.min_eSuc_eSuc",
     "min (eSuc ?n) (eSuc ?m) = eSuc (min ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.neq_zero_conv_eSuc",
     "(?n ~= 0) = (EX n'. ?n = eSuc n')",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Coinductive_Nat.max_eSuc_numeral",
     "max (eSuc ?n) (numeral ?k) = eSuc (max ?n (epred_numeral ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Coinductive_Nat.max_numeral_eSuc",
     "max (numeral ?k) (eSuc ?n) = eSuc (max (epred_numeral ?k) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.min_eSuc_numeral",
     "min (eSuc ?n) (numeral ?k) = eSuc (min ?n (epred_numeral ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Coinductive_Nat.min_numeral_eSuc",
     "min (numeral ?k) (eSuc ?n) = eSuc (min (epred_numeral ?k) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Coinductive_Nat.enat_cocase_numeral",
     "(case numeral ?v of 0 => ?a | eSuc x => ?f x) =
      Let (epred_numeral ?v) ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Nat.case_enat_numeral",
     "(case numeral ?v of enat x => ?f x | \<infinity> => ?i) =
      Let (numeral ?v) ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Nat.plus_enat_eq_0_conv",
     "(?m + ?n = 0) = (?m = 0 & ?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Coinductive_Nat.enat_min_eq_0_iff",
     "(min ?a ?b = 0) = (?a = 0 | ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Coinductive_Nat.enat_add2_eq",
     "(?y + enat ?x = ?z + enat ?x) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))),
       template_equation (template_var 2, template_var 0))),
    ("Coinductive_Nat.enat_add1_eq",
     "(enat ?x + ?y = enat ?x + ?z) = (?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_Nat.enat_add_mono",
     "(enat ?x + ?y < enat ?x + ?z) = (?y < ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Coinductive_Nat.min_enat2_conv_enat",
     "min ?a (enat ?b) =
      enat (case ?a of enat a' => min a' ?b | \<infinity> => ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_var 1)))),
    ("Coinductive_Nat.min_enat1_conv_enat",
     "min (enat ?a) ?b =
      enat (case ?b of enat b' => min ?a b' | \<infinity> => ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.max_enat_minus1",
     "max ?n ?m - ?k = max (?n - ?k) (?m - ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Nat.eSuc_le_iff",
     "(eSuc ?x <= ?y) = (EX y'. ?y = eSuc y' & ?x <= y')",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Coinductive_Nat.enat_unfold",
     "enat_unfold ?stop ?next ?a =
      (if ?stop ?a then 0 else eSuc (enat_unfold ?stop ?next (?next ?a)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_hole 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app (template_var 1, template_var 0)))))),
    ("Coinductive_Nat.epred_enat_unfold",
     "epred (enat_unfold ?stop ?next ?a) =
      (if ?stop ?a then 0 else enat_unfold ?stop ?next (?next ?a))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_var 1, template_var 0))))),
    ("Coinductive_Nat.enat_cocase_add_eq_if",
     "(case numeral ?v + ?n of 0 => ?a | eSuc x => ?f x) =
      (let pv = epred_numeral ?v in ?f (pv + ?n))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("Coinductive_Nat.enat_cosplit",
     "?P (case ?n of 0 => ?c | eSuc x => ?d x) =
      ((?n = 0 --> ?P ?c) & (ALL m. ?n = eSuc m --> ?P (?d m)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Coinductive_Nat.enat_cosplit_asm",
     "?P (case ?n of 0 => ?c | eSuc x => ?d x) =
      (~ (?n = 0 & ~ ?P ?c | (EX m. ?n = eSuc m & ~ ?P (?d m))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation template_dunno))]
