   [("LList_CCPO_Topology.ldistinct_lup'", "ldistinct (lup' ?x ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LList_CCPO_Topology.lsorted_lup", "lsorted (lup ?a ?l)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LList_CCPO_Topology.lsorted_lup'", "lsorted (lup' ?x ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LList_CCPO_Topology.eventually_lfinite",
     "eventually lfinite (at' ?x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.monotone_lup'2",
     "monotone lprefix lprefix (lup' ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.ldropWhile'_LNil", "ldropWhile' ?P LNil = LNil",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("LList_CCPO_Topology.lfilter'_LNil", "lfilter' ?P LNil = LNil",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("LList_CCPO_Topology.lup'_simps", "lup' ?a LNil = LNil",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("LList_CCPO_Topology.lup_LNil", "lup ?a LNil = LNil",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("LList_CCPO_Topology.sorted_up", "sorted (up ?a ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LList_CCPO_Topology.length_f", "length (f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LList_CCPO_Topology.mcont_lup'2",
     "mcont lSup lprefix lSup lprefix (lup' ?a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_f'",
     "(f' \<longlongrightarrow> f' ?l) (at' ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_lconcat'",
     "(lconcat' \<longlongrightarrow> lconcat' ?xss) (at' ?xss)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.open_singleton_iff_lfinite",
     "open {?x} = lfinite ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("LList_CCPO_Topology.lfilter'_eq_lfilter",
     "lfilter' ?P ?xs = lfilter ?P ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LList_CCPO_Topology.closed_in_lset", "closed {l. ?x : lset l}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("LList_CCPO_Topology.open_Ici", "lfinite ?xs ==> open {?xs..}",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_CCPO_Topology.ldistinct_lfilter'",
     "ldistinct ?l ==> ldistinct (lfilter' ?P ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LList_CCPO_Topology.open_lfinite", "lfinite ?x ==> open {?x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("LList_CCPO_Topology.tendsto_ldrop'",
     "(ldrop' ?n \<longlongrightarrow> ldrop' ?n ?l) (at' ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_ldropWhile'",
     "(ldropWhile' ?P \<longlongrightarrow> ldropWhile' ?P ?xs) (at' ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_lfilter",
     "(lfilter' ?P \<longlongrightarrow> lfilter' ?P ?xs) (at' ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_lup",
     "(lup ?a \<longlongrightarrow> lup ?a ?xs) (at' ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_lextdown",
     "(lextdown ?i \<longlongrightarrow> lextdown ?i ?xs) (at' ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.tendsto_lextup",
     "(lextup ?i \<longlongrightarrow> lextup ?i ?xs) (at' ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("LList_CCPO_Topology.lconcat'_LCons",
     "lconcat' (LCons ?l ?xs) = lappend ?l (lconcat' ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("LList_CCPO_Topology.mono_edrop",
     "edrop ?n ?xs <= edrop ?n (?xs @ ?ys)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("LList_CCPO_Topology.prefix_up",
     "prefix (up ?a ?xs) (up ?a (?xs @ ?ys))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("LList_CCPO_Topology.prefix_ext",
     "prefix (extdown ?a ?xs) (extdown ?a (?xs @ ?ys))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("LList_CCPO_Topology.prefix_ext",
     "prefix (extup ?a ?xs) (extup ?a (?xs @ ?ys))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("LList_CCPO_Topology.closed_llist_all2",
     "closed {(x, y). llist_all2 ?R x y}",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))
         )),
    ("LList_CCPO_Topology.at_botI_lfinite",
     "lfinite ?l ==> at ?l = \<bottom>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("LList_CCPO_Topology.open_LCons'", "open ?A ==> open (LCons ?x ` ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("LList_CCPO_Topology.at_eq_lfinite",
     "at ?l = (if lfinite ?l then \<bottom> else at' ?l)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("LList_CCPO_Topology.lmap_iterate",
     "lmap ?f (iterate ?f ?x) = iterate ?f (?f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 1, template_var 0)))),
    ("LList_CCPO_Topology.lmap_lconcat",
     "lmap ?f (lconcat' ?xss) = lconcat' (lmap (lmap ?f) ?xss)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("LList_CCPO_Topology.esum_list_lfinite",
     "lfinite ?xs ==> esum_list ?xs = sum_list (list_of ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("LList_CCPO_Topology.f_mono", "?xs <= ?ys ==> f ?xs <= f ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LList_CCPO_Topology.f_mono'", "EX ys'. f (?xs @ ?ys) = f ?xs @ ys'",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("LList_CCPO_Topology.lhd_lfilter'",
     "lhd (lfilter' ?P ?xs) = lhd (ldropWhile' (Not o ?P) ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("LList_CCPO_Topology.lnull_ldropWhile'",
     "lnull (ldropWhile' ?P ?xs) = (ALL x:lset ?xs. ?P x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LList_CCPO_Topology.set_ext",
     "set (extdown ?a ?xs) <= {?a} Un set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 4, template_var 0)))),
    ("LList_CCPO_Topology.set_ext", "set (extup ?a ?xs) <= {?a} Un set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 4, template_var 0)))),
    ("LList_CCPO_Topology.open_lhd", "open {l. ~ lnull l & lhd l = ?x}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("LList_CCPO_Topology.nhds_lfinite",
     "lfinite ?l ==> nhds ?l = principal {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("LList_CCPO_Topology.Lim_at'_lfinite",
     "lfinite ?xs ==> Lim (at' ?xs) ?f = ?f ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app (template_var 0, template_var 1)))),
    ("LList_CCPO_Topology.f'_lfinite",
     "lfinite ?xs ==> f' ?xs = llist_of (f (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("LList_CCPO_Topology.lset_lfilter'",
     "lset (lfilter' ?P ?xs) = lset ?xs Int {x. ?P x}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, t_empty)))),
    ("LList_CCPO_Topology.lconcat'_lfinite",
     "lfinite ?xs ==> lconcat' ?xs = foldr lappend (list_of ?xs) LNil",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("LList_CCPO_Topology.edrop_mono",
     "?xs <= ?ys ==> edrop ?n ?xs <= edrop ?n ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LList_CCPO_Topology.mono_up", "?xs <= ?ys ==> up ?a ?xs <= up ?a ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LList_CCPO_Topology.mono_ext",
     "?xs <= ?ys ==> extdown ?a ?xs <= extdown ?a ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LList_CCPO_Topology.mono_ext",
     "?xs <= ?ys ==> extup ?a ?xs <= extup ?a ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LList_CCPO_Topology.lfilter'_eq_LNil_iff",
     "(lfilter' ?P ?xs = LNil) = (ALL x:lset ?xs. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("LList_CCPO_Topology.lfilter'_lmap",
     "lfilter' ?P (lmap ?f ?xs) = lmap ?f (lfilter' (?P o ?f) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("LList_CCPO_Topology.lset_lup",
     "lset (lup ?x ?xs) <= lset ?xs Int {y. ?x < y}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("LList_CCPO_Topology.lset_lup'_subset",
     "lset (lup' ?x ?xs) <= lset ?xs Int {y. ?x < y}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("LList_CCPO_Topology.ldrop'_lfinite",
     "lfinite ?xs ==> ldrop' ?n ?xs = llist_of (edrop ?n (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.ldropWhile'_lfinite",
     "lfinite ?xs ==>
      ldropWhile' ?P ?xs = llist_of (dropWhile ?P (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.lfilter'_lfinite",
     "lfinite ?xs ==> lfilter' ?P ?xs = llist_of (filter ?P (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.lup_lfinite",
     "lfinite ?xs ==> lup ?a ?xs = llist_of (up ?a (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.lextdown_lfinite",
     "lfinite ?xs ==>
      lextdown ?i ?xs = llist_of (extdown ?i (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.lextup_lfinite",
     "lfinite ?xs ==> lextup ?i ?xs = llist_of (extup ?i (list_of ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("LList_CCPO_Topology.ldropWhile'_LNil_I",
     "ALL x:lset ?xs. ?P x ==> ldropWhile' ?P ?xs = LNil",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("LList_CCPO_Topology.lfilter'_lfilter'",
     "lfilter' ?P (lfilter' ?Q ?xs) = lfilter' (%x. ?Q x & ?P x) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("LList_CCPO_Topology.lfilter'_LNil_I",
     "ALL x:lset ?xs. ~ ?P x ==> lfilter' ?P ?xs = LNil",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("LList_CCPO_Topology.ldropWhile'_LCons",
     "ldropWhile' ?P (LCons ?l ?xs) =
      (if ?P ?l then ldropWhile' ?P ?xs else LCons ?l ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("LList_CCPO_Topology.isCont_lset",
     "isCont ?f ?a ==> isCont (%x. lset (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_f'",
     "isCont ?f ?a ==> isCont (%x. f' (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lconcat'",
     "isCont ?f ?a ==> isCont (%x. lconcat' (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.tendsto_mcont_llist'",
     "mcont lSup lprefix lSup lprefix ?f ==>
      (?f \<longlongrightarrow> ?f ?x) (at' ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5),
                  template_hole 4),
                template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_CCPO_Topology.filterlim_at'_list",
     "(?f \<longlongrightarrow> ?y) (at' ?x) ==>
      ?f \<midarrow>?x\<rightarrow> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("LList_CCPO_Topology.closed_ldistinct'",
     "(!!x. isCont ?f x) ==> closed {xs. ldistinct (?f xs)}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("LList_CCPO_Topology.closed_lsorted'",
     "(!!x. isCont ?f x) ==> closed {xs. lsorted (?f xs)}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("LList_CCPO_Topology.distinct_ext",
     "[| distinct ?xs; ?a ~: set ?xs |] ==> distinct (extdown ?a ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LList_CCPO_Topology.distinct_ext",
     "[| distinct ?xs; ?a ~: set ?xs |] ==> distinct (extup ?a ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LList_CCPO_Topology.tendsto_lset",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. lset (?f x)) \<longlongrightarrow> lset ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("LList_CCPO_Topology.tendsto_llength",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. llength (?f x)) \<longlongrightarrow> llength ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("LList_CCPO_Topology.tendsto_ltl",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. ltl (?f x)) \<longlongrightarrow> ltl ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("LList_CCPO_Topology.isCont_lappend",
     "isCont ?f ?a ==> isCont (%x. lappend ?xs1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_LCons",
     "isCont ?f ?a ==> isCont (%x. LCons ?x1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_ldrop'",
     "isCont ?f ?a ==> isCont (%x. ldrop' ?n1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_ldropWhile'",
     "isCont ?f ?a ==> isCont (%x. ldropWhile' ?P1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lfilter",
     "isCont ?f ?a ==> isCont (%x. lfilter' ?P1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lmap",
     "isCont ?f ?a ==> isCont (%x. lmap ?f1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lup",
     "isCont ?f ?a ==> isCont (%x. lup ?a1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lextdown",
     "isCont ?f ?a ==> isCont (%x. lextdown ?a1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.isCont_lextup",
     "isCont ?f ?a ==> isCont (%x. lextup ?a1 (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("LList_CCPO_Topology.mono2mono_lup'2",
     "monotone ?orda lprefix ?t ==>
      monotone ?orda lprefix (%x. lup' ?a1 (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty)
           ))),
    ("LList_CCPO_Topology.tendsto_mcont_llist",
     "mcont lSup lprefix lSup lprefix ?f ==>
      ?f \<midarrow>?l\<rightarrow> ?f ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_hole 6),
                  template_hole 5),
                template_hole 4),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("LList_CCPO_Topology.set_upD",
     "?x : set (up ?y ?xs) ==> ?x : set ?xs & ?y < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("LList_CCPO_Topology.in_lset_lup'D",
     "?y : lset (lup' ?x ?xs) ==> ?y : lset ?xs & ?x < ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("LList_CCPO_Topology.lfilter'_LCons",
     "lfilter' ?P (LCons ?a ?xs) =
      (if ?P ?a then LCons ?a (lfilter' ?P ?xs) else lfilter' ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("LList_CCPO_Topology.esum_list_nonneg",
     "(!!x. x : lset ?xs ==> 0 <= x) ==> 0 <= esum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("LList_CCPO_Topology.lup'_simps",
     "lup' ?a (LCons ?xa ?x) =
      (if ?a < ?xa then LCons ?xa (lup' ?xa ?x) else lup' ?a ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("LList_CCPO_Topology.lup_LCons",
     "lup ?a (LCons ?x ?xs) =
      (if ?a < ?x then LCons ?x (lup ?x ?xs) else lup ?a ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("LList_CCPO_Topology.tendsto_lappend2",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. lappend ?l1 (?f x)) \<longlongrightarrow> lappend ?l1 ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("LList_CCPO_Topology.tendsto_LCons",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. LCons ?x1 (?f x)) \<longlongrightarrow> LCons ?x1 ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("LList_CCPO_Topology.tendsto_lmap",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. lmap ?f1 (?f x)) \<longlongrightarrow> lmap ?f1 ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("LList_CCPO_Topology.isCont_esum_list",
     "(!!x. x : lset ?xs ==> 0 <= x) ==> isCont esum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("LList_CCPO_Topology.eventually_at'_llistI",
     "(!!xs. [| lfinite xs; xs <= ?l |] ==> ?P xs) ==>
      eventually ?P (at' ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("LList_CCPO_Topology.mcont2mcont_lup'2",
     "mcont ?lub ?ord lSup lprefix ?t ==>
      mcont ?lub ?ord lSup lprefix (%x. lup' ?a1 (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2),
                template_hole 1),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_hole 2),
               template_hole 1),
             t_empty)
           ))),
    ("LList_CCPO_Topology.tendsto_esum_list",
     "(!!x. x : lset ?xs ==> 0 <= x) ==>
      (esum_list \<longlongrightarrow> esum_list ?xs) (at' ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_CCPO_Topology.tendsto_Sup",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. \<Squnion> (?g ` ?f x)) \<longlongrightarrow>
       \<Squnion> (?g ` ?l))
       ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 2)))),
             template_var 1)
           ))),
    ("LList_CCPO_Topology.esum_list_lfilter'",
     "(!!x. x : lset ?xs ==> 0 <= x) ==>
      esum_list (lfilter' (%x. x ~= 0) ?xs) = esum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("LList_CCPO_Topology.tendsto_closed",
     "[| closed {x. ?P x}; !!ys. [| lfinite ys; ys <= ?x |] ==> ?P ys |]
      ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("LList_CCPO_Topology.eventually_nhds_llist",
     "eventually ?P (nhds ?l) =
      (EX xs<=?l. lfinite xs & (ALL ys>=xs. ys <= ?l --> ?P ys))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LList_CCPO_Topology.closed_Collect_eq_isCont",
     "[| !!x. isCont ?f x; !!x. isCont ?g x |] ==> closed {x. ?f x = ?g x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("LList_CCPO_Topology.esum_list_LCons",
     "[| 0 <= ?x; !!x. x : lset ?xs ==> 0 <= x |]
      ==> esum_list (LCons ?x ?xs) = ?x + esum_list ?xs",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("LList_CCPO_Topology.closed_list_all2",
     "[| !!x. isCont ?f x; !!x. isCont ?g x |]
      ==> closed {x. llist_all2 ?R (?f x) (?g x)}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("LList_CCPO_Topology.eventually_at'_llist",
     "eventually ?P (at' ?l) =
      (EX xs<=?l.
          lfinite xs & (ALL ys>=xs. lfinite ys --> ys <= ?l --> ?P ys))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LList_CCPO_Topology.esum_list_tendsto_SUP",
     "(!!x. x : lset ?xs ==> 0 <= x) ==>
      ((sum_list o list_of) \<longlongrightarrow>
       \<Squnion> (esum_list ` {ys. lfinite ys & ys <= ?xs}))
       (at' ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_hole 9)),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app (template_hole 4, t_empty))))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_CCPO_Topology.closure_eq_lfinite",
     "[| closed {xs. ?Q xs};
         !!xs ys. [| ?Q xs; lprefix ys xs |] ==> ?Q ys |]
      ==> {xs. ?Q xs} = closure {xs. lfinite xs & ?Q xs}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app
          (template_hole 2, template_app (template_hole 6, t_empty))))),
    ("LList_CCPO_Topology.tendsto_Sup_at'",
     "(!!x y. [| x <= y; lfinite x; lfinite y |] ==> ?f x <= ?f y) ==>
      (?f \<longlongrightarrow>
       \<Squnion> (?f ` {xs. lfinite xs & xs <= ?l}))
       (at' ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, t_empty))))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LList_CCPO_Topology.tendsto_Lim_at'",
     "[| !!l. ?f l = Lim (at' l) ?f';
         !!x y. [| x <= y; lfinite x; lfinite y |] ==> ?f' x <= ?f' y |]
      ==> (?f \<longlongrightarrow> ?f ?l) (at' ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0))),
             template_app (template_hole 5, template_var 0))
           )))]
