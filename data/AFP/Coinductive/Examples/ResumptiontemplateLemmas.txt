   [("Resumption.RESUMPTION_corec_type",
     "RESUMPTION_corec ?f ?e : resumption",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Resumption.Rep_resumption_Terminal",
     "Rep_resumption (Terminal ?a) = TERMINAL ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Resumption.TERMINAL_not_BRANCH", "TERMINAL ?a ~= BRANCH ?c ?rs",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.TERMINAL_not_LINEAR", "TERMINAL ?a ~= LINEAR ?b ?r",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.BRANCH_not_TERMINAL", "BRANCH ?c ?rs ~= TERMINAL ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.LINEAR_not_TERMINAL", "LINEAR ?b ?R ~= TERMINAL ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.Termina_not_Branch", "Terminal ?a ~= Branch ?c ?rs",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Terminal_not_Linear", "Terminal ?a ~= Linear ?b ?r",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Branch_not_Terminal", "Branch ?c ?rs ~= Terminal ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.Linear_not_Terminal", "Linear ?b ?R ~= Terminal ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.DTBranch_Lim", "DTBranch ?f (Old_Datatype.Lim ?M) = ?f ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Resumption.BRANCH_not_LINEAR", "BRANCH ?c ?rs ~= LINEAR ?b ?r",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.LINEAR_not_BRANCH", "LINEAR ?b ?r ~= BRANCH ?c ?rs",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Branch_not_Linear", "Branch ?c ?rs ~= Linear ?b ?r",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Linear_not_Branch", "Linear ?b ?r ~= Branch ?c ?rs",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Eq_RESUMPTION_into_resumption",
     "Eq_RESUMPTION ?r ?r ==> ?r : resumption",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Resumption.Eq_RESUMPTION_refl",
     "?r : resumption ==> Eq_RESUMPTION ?r ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Resumption.case_RESUMPTION_TERMINAL",
     "case_RESUMPTION ?t ?l ?br (TERMINAL ?a) = ?t ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 3, template_var 0))),
    ("Resumption.case_resumption_Terminal",
     "(case Terminal ?a of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?t ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 3, template_var 0))),
    ("Resumption.ndepth_Push_Node_Inl",
     "ndepth (Push_Node (Inl ?a) ?n) = Suc (ndepth ?n)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Resumption.Rep_resumption_Linear",
     "Rep_resumption (Linear ?b ?r) = LINEAR ?b (Rep_resumption ?r)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Resumption.TERMINAL_inject",
     "(TERMINAL ?a = TERMINAL ?a') = (?a = ?a')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Resumption.Terminal_inject",
     "(Terminal ?a = Terminal ?a') = (?a = ?a')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Resumption.case_RESUMPTION_BRANCH",
     "case_RESUMPTION ?t ?l ?br (BRANCH ?c ?rs) = ?br ?c ?rs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Resumption.case_RESUMPTION_LINEAR",
     "case_RESUMPTION ?t ?l ?br (LINEAR ?b ?r) = ?l ?b ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Resumption.case_resumption_Branch",
     "(case Branch ?c ?rs of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?br ?c ?rs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Resumption.case_resumption_Linear",
     "(case Linear ?b ?r of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?l ?b ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Resumption.Rep_resumption_Branch",
     "Rep_resumption (Branch ?c ?rs) =
      BRANCH ?c (%d. Rep_resumption (?rs d))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Resumption.Eq_RESUMPTION_eq",
     "Eq_RESUMPTION ?r ?r' = (?r = ?r' & ?r : resumption)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Resumption.ntrunc_Lim",
     "ntrunc (Suc ?k) (Old_Datatype.Lim ?rs) =
      Old_Datatype.Lim (%x. ntrunc ?k (?rs x))",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Resumption.LINEAR_mono",
     "?r <= ?r' ==> LINEAR ?b ?r <= LINEAR ?b ?r'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.Eq_RESUMPTION_implies_ntrunc_equality",
     "Eq_RESUMPTION ?r ?r' ==> ntrunc ?k ?r = ntrunc ?k ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.Lim_mono",
     "(!!d. ?rs d <= ?rs' d) ==>
      Old_Datatype.Lim ?rs <= Old_Datatype.Lim ?rs'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Resumption.BRANCH_inject",
     "(BRANCH ?c ?rs = BRANCH ?c' ?rs') = (?c = ?c' & ?rs = ?rs')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Resumption.LINEAR_inject",
     "(LINEAR ?b ?r = LINEAR ?b' ?r') = (?b = ?b' & ?r = ?r')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Resumption.Branch_inject",
     "(Branch ?c ?rs = Branch ?c' ?rs') = (?c = ?c' & ?rs = ?rs')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Resumption.Linear_inject",
     "(Linear ?b ?r = Linear ?b' ?r') = (?b = ?b' & ?r = ?r')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Resumption.BRANCH_mono",
     "(!!d. ?rs d <= ?rs' d) ==> BRANCH ?c ?rs <= BRANCH ?c ?rs'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.LINEAR_UN",
     "LINEAR ?b (\<Union> (range ?f)) = (UN x. LINEAR ?b (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.Lim_UN1",
     "Old_Datatype.Lim (%x. \<Union> (range (?f x))) =
      (UN y. Old_Datatype.Lim (%x. ?f x y))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.ndepth_Push_Node_Inl_aux",
     "(case ?k of 0 => Inl ?n | Suc x => ?f x) = Inr (0::?'b) ==>
      Suc (LEAST x. ?f x = Inr (0::?'b)) <= ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1),
            template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Resumption.BRANCH_UN",
     "BRANCH ?b (%d. \<Union> (range (?f d))) =
      (UN x. BRANCH ?b (%d. ?f d x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.resumption_corec",
     "resumption_corec ?f ?e =
      (case ?f ?e of Terminal_corec a => Terminal a
       | Linear_corec b e' => Linear b (resumption_corec ?f e')
       | Branch_corec c es => Branch c (%d. resumption_corec ?f (es d))
       | Resumption_corec r => r)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, t_empty), t_empty),
             t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Resumption.RESUMPTION_corec",
     "RESUMPTION_corec ?f ?e =
      (case ?f ?e of Terminal_corec a => TERMINAL a
       | Linear_corec b e' => LINEAR b (RESUMPTION_corec ?f e')
       | Branch_corec c es => BRANCH c (%d. RESUMPTION_corec ?f (es d))
       | Resumption_corec r => Rep_resumption r)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Resumption.equals_resumption_corec",
     "(!!x. ?h x =
            (case ?f x of Terminal_corec a => Terminal a
             | Linear_corec b x' => Linear b (?h x')
             | Branch_corec c xs => Branch c (%d. ?h (xs d))
             | Resumption_corec r => r)) ==>
      ?h = resumption_corec ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Resumption.equals_RESUMPTION_corec",
     "(!!x. ?h x =
            (case ?f x of Terminal_corec a => TERMINAL a
             | Linear_corec b x' => LINEAR b (?h x')
             | Branch_corec c xs => BRANCH c (%d. ?h (xs d))
             | Resumption_corec r => Rep_resumption r)) ==>
      ?h = RESUMPTION_corec ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Resumption.resumption_exhaust",
     "[| !!a. ?x = Terminal a ==> ?thesis;
         !!b r. ?x = Linear b r ==> ?thesis;
         !!c rs. ?x = Branch c rs ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Resumption.resumption_split",
     "?P (case ?r of Terminal x => ?t x | Linear x xa => ?l x xa
          | Branch x xa => ?br x xa) =
      ((ALL a. ?r = Terminal a --> ?P (?t a)) &
       (ALL b r'. ?r = Linear b r' --> ?P (?l b r')) &
       (ALL c rs. ?r = Branch c rs --> ?P (?br c rs)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 5, t_empty)),
           template_app (template_hole 2, t_empty))))),
    ("Resumption.resumption_split_asm",
     "?P (case ?r of Terminal x => ?t x | Linear x xa => ?l x xa
          | Branch x xa => ?br x xa) =
      (~ ((EX a. ?r = Terminal a & ~ ?P (?t a)) |
          (EX b r'. ?r = Linear b r' & ~ ?P (?l b r')) |
          (EX c rs. ?r = Branch c rs & ~ ?P (?br c rs))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 12, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 5, t_empty)),
             template_app (template_hole 2, t_empty)))))),
    ("Resumption.Eq_RESUMPTION_I",
     "[| ?X ?r ?r';
         !!r r'.
            ?X r r' ==>
            (EX a. r = TERMINAL a & r' = TERMINAL a) |
            (EX R R' b.
                r = LINEAR b R &
                r' = LINEAR b R' & (?X R R' | Eq_RESUMPTION R R')) |
            (EX rs rs' c.
                r = BRANCH c rs &
                r' = BRANCH c rs' &
                (ALL d.
                    ?X (rs d) (rs' d) | Eq_RESUMPTION (rs d) (rs' d))) |]
      ==> ?r = ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Resumption.resumption_equalityI",
     "[| ?X ?r ?r';
         !!r r'.
            ?X r r' ==>
            (EX a. r = Terminal a & r' = Terminal a) |
            (EX R R' b.
                r = Linear b R & r' = Linear b R' & (?X R R' | R = R')) |
            (EX rs rs' c.
                r = Branch c rs &
                r' = Branch c rs' &
                (ALL d. ?X (rs d) (rs' d) | rs d = rs' d)) |]
      ==> ?r = ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation (template_var 1, template_var 0)))]
