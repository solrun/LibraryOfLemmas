Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ResumptionMoreTemplates" via "Draft.Resumption")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.570s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.848s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.333s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.420s elapsed time, 1.675s cpu time, 0.122s GC time
Loading theory "Draft.Resumption" (required by "Draft.ResumptionMoreTemplates")
Proofs for coinductive predicate(s) "resumptionp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.018s elapsed time, 3.848s cpu time, 0.911s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.930s cpu time, 0.827s GC time
Found termination order: "size <*mlex*> {}"
consts
  RESUMPTION_corec_aux ::
    "nat
     => ('e => ('a, 'b, 'c, 'd, 'e) resumption_corec)
        => 'e => ('c + 'b + 'a, 'd) Old_Datatype.node set"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "Eq_RESUMPTION"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Resumption"
### 1.214s elapsed time, 4.073s cpu time, 0.903s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.933s elapsed time, 5.694s cpu time, 1.054s GC time
Loading theory "Draft.Templates" (required by "Draft.ResumptionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.111s cpu time, 0.043s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ResumptionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.432s elapsed time, 0.439s cpu time, 0.000s GC time
Loading theory "Draft.ResumptionMoreTemplates"
val templateLemmas =
   [("Resumption.RESUMPTION_corec_type",
     "RESUMPTION_corec ?f ?e : resumption",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Resumption.Rep_resumption_Terminal",
     "Rep_resumption (Terminal ?a) = TERMINAL ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Resumption.TERMINAL_not_BRANCH", "TERMINAL ?a ~= BRANCH ?c ?rs",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.TERMINAL_not_LINEAR", "TERMINAL ?a ~= LINEAR ?b ?r",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.BRANCH_not_TERMINAL", "BRANCH ?c ?rs ~= TERMINAL ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.LINEAR_not_TERMINAL", "LINEAR ?b ?R ~= TERMINAL ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.Termina_not_Branch", "Terminal ?a ~= Branch ?c ?rs",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Terminal_not_Linear", "Terminal ?a ~= Linear ?b ?r",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Branch_not_Terminal", "Branch ?c ?rs ~= Terminal ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.Linear_not_Terminal", "Linear ?b ?R ~= Terminal ?a",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Resumption.DTBranch_Lim", "DTBranch ?f (Old_Datatype.Lim ?M) = ?f ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Resumption.BRANCH_not_LINEAR", "BRANCH ?c ?rs ~= LINEAR ?b ?r",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.LINEAR_not_BRANCH", "LINEAR ?b ?r ~= BRANCH ?c ?rs",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Branch_not_Linear", "Branch ?c ?rs ~= Linear ?b ?r",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Linear_not_Branch", "Linear ?b ?r ~= Branch ?c ?rs",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Resumption.Eq_RESUMPTION_into_resumption",
     "Eq_RESUMPTION ?r ?r ==> ?r : resumption",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Resumption.Eq_RESUMPTION_refl",
     "?r : resumption ==> Eq_RESUMPTION ?r ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("Resumption.case_RESUMPTION_TERMINAL",
     "case_RESUMPTION ?t ?l ?br (TERMINAL ?a) = ?t ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 3, template_var 0))),
    ("Resumption.case_resumption_Terminal",
     "(case Terminal ?a of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?t ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 3, template_var 0))),
    ("Resumption.ndepth_Push_Node_Inl",
     "ndepth (Push_Node (Inl ?a) ?n) = Suc (ndepth ?n)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Resumption.Rep_resumption_Linear",
     "Rep_resumption (Linear ?b ?r) = LINEAR ?b (Rep_resumption ?r)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Resumption.TERMINAL_inject",
     "(TERMINAL ?a = TERMINAL ?a') = (?a = ?a')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Resumption.Terminal_inject",
     "(Terminal ?a = Terminal ?a') = (?a = ?a')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Resumption.case_RESUMPTION_BRANCH",
     "case_RESUMPTION ?t ?l ?br (BRANCH ?c ?rs) = ?br ?c ?rs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Resumption.case_RESUMPTION_LINEAR",
     "case_RESUMPTION ?t ?l ?br (LINEAR ?b ?r) = ?l ?b ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Resumption.case_resumption_Branch",
     "(case Branch ?c ?rs of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?br ?c ?rs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Resumption.case_resumption_Linear",
     "(case Linear ?b ?r of Terminal x => ?t x | Linear x xa => ?l x xa
       | Branch x xa => ?br x xa) =
      ?l ?b ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Resumption.Rep_resumption_Branch",
     "Rep_resumption (Branch ?c ?rs) =
      BRANCH ?c (%d. Rep_resumption (?rs d))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Resumption.Eq_RESUMPTION_eq",
     "Eq_RESUMPTION ?r ?r' = (?r = ?r' & ?r : resumption)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Resumption.ntrunc_Lim",
     "ntrunc (Suc ?k) (Old_Datatype.Lim ?rs) =
      Old_Datatype.Lim (%x. ntrunc ?k (?rs x))",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Resumption.LINEAR_mono",
     "?r <= ?r' ==> LINEAR ?b ?r <= LINEAR ?b ?r'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.Eq_RESUMPTION_implies_ntrunc_equality",
     "Eq_RESUMPTION ?r ?r' ==> ntrunc ?k ?r = ntrunc ?k ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.Lim_mono",
     "(!!d. ?rs d <= ?rs' d) ==>
      Old_Datatype.Lim ?rs <= Old_Datatype.Lim ?rs'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Resumption.BRANCH_inject",
     "(BRANCH ?c ?rs = BRANCH ?c' ?rs') = (?c = ?c' & ?rs = ?rs')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Resumption.LINEAR_inject",
     "(LINEAR ?b ?r = LINEAR ?b' ?r') = (?b = ?b' & ?r = ?r')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Resumption.Branch_inject",
     "(Branch ?c ?rs = Branch ?c' ?rs') = (?c = ?c' & ?rs = ?rs')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Resumption.Linear_inject",
     "(Linear ?b ?r = Linear ?b' ?r') = (?b = ?b' & ?r = ?r')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Resumption.BRANCH_mono",
     "(!!d. ?rs d <= ?rs' d) ==> BRANCH ?c ?rs <= BRANCH ?c ?rs'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Resumption.LINEAR_UN",
     "LINEAR ?b (\<Union> (range ?f)) = (UN x. LINEAR ?b (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.Lim_UN1",
     "Old_Datatype.Lim (%x. \<Union> (range (?f x))) =
      (UN y. Old_Datatype.Lim (%x. ?f x y))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.ndepth_Push_Node_Inl_aux",
     "(case ?k of 0 => Inl ?n | Suc x => ?f x) = Inr (0::?'b) ==>
      Suc (LEAST x. ?f x = Inr (0::?'b)) <= ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1),
            template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Resumption.BRANCH_UN",
     "BRANCH ?b (%d. \<Union> (range (?f d))) =
      (UN x. BRANCH ?b (%d. ?f d x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Resumption.resumption_corec",
     "resumption_corec ?f ?e =
      (case ?f ?e of Terminal_corec a => Terminal a
       | Linear_corec b e' => Linear b (resumption_corec ?f e')
       | Branch_corec c es => Branch c (%d. resumption_corec ?f (es d))
       | Resumption_corec r => r)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, t_empty), t_empty),
             t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Resumption.RESUMPTION_corec",
     "RESUMPTION_corec ?f ?e =
      (case ?f ?e of Terminal_corec a => TERMINAL a
       | Linear_corec b e' => LINEAR b (RESUMPTION_corec ?f e')
       | Branch_corec c es => BRANCH c (%d. RESUMPTION_corec ?f (es d))
       | Resumption_corec r => Rep_resumption r)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, t_empty), t_empty),
             t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Resumption.equals_resumption_corec",
     "(!!x. ?h x =
            (case ?f x of Terminal_corec a => Terminal a
             | Linear_corec b x' => Linear b (?h x')
             | Branch_corec c xs => Branch c (%d. ?h (xs d))
             | Resumption_corec r => r)) ==>
      ?h = resumption_corec ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Resumption.equals_RESUMPTION_corec",
     "(!!x. ?h x =
            (case ?f x of Terminal_corec a => TERMINAL a
             | Linear_corec b x' => LINEAR b (?h x')
             | Branch_corec c xs => BRANCH c (%d. ?h (xs d))
             | Resumption_corec r => Rep_resumption r)) ==>
      ?h = RESUMPTION_corec ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Resumption.resumption_exhaust",
     "[| !!a. ?x = Terminal a ==> ?thesis;
         !!b r. ?x = Linear b r ==> ?thesis;
         !!c rs. ?x = Branch c rs ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Resumption.resumption_split",
     "?P (case ?r of Terminal x => ?t x | Linear x xa => ?l x xa
          | Branch x xa => ?br x xa) =
      ((ALL a. ?r = Terminal a --> ?P (?t a)) &
       (ALL b r'. ?r = Linear b r' --> ?P (?l b r')) &
       (ALL c rs. ?r = Branch c rs --> ?P (?br c rs)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 5, t_empty)),
           template_app (template_hole 2, t_empty))))),
    ("Resumption.resumption_split_asm",
     "?P (case ?r of Terminal x => ?t x | Linear x xa => ?l x xa
          | Branch x xa => ?br x xa) =
      (~ ((EX a. ?r = Terminal a & ~ ?P (?t a)) |
          (EX b r'. ?r = Linear b r' & ~ ?P (?l b r')) |
          (EX c rs. ?r = Branch c rs & ~ ?P (?br c rs))))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 12, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 5, t_empty)),
             template_app (template_hole 2, t_empty)))))),
    ("Resumption.Eq_RESUMPTION_I",
     "[| ?X ?r ?r';
         !!r r'.
            ?X r r' ==>
            (EX a. r = TERMINAL a & r' = TERMINAL a) |
            (EX R R' b.
                r = LINEAR b R &
                r' = LINEAR b R' & (?X R R' | Eq_RESUMPTION R R')) |
            (EX rs rs' c.
                r = BRANCH c rs &
                r' = BRANCH c rs' &
                (ALL d.
                    ?X (rs d) (rs' d) | Eq_RESUMPTION (rs d) (rs' d))) |]
      ==> ?r = ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Resumption.resumption_equalityI",
     "[| ?X ?r ?r';
         !!r r'.
            ?X r r' ==>
            (EX a. r = Terminal a & r' = Terminal a) |
            (EX R R' b.
                r = Linear b R & r' = Linear b R' & (?X R R' | R = R')) |
            (EX rs rs' c.
                r = Branch c rs &
                r' = Branch c rs' &
                (ALL d. ?X (rs d) (rs' d) | rs d = rs' d)) |]
      ==> ?r = ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ResumptionMoreTemplates"
### 0.299s elapsed time, 0.431s cpu time, 0.050s GC time
val it = (): unit
