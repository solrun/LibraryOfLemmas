   [("Prime_Counting_Functions.prime_nth_prime", "prime (nth_prime ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Prime_Counting_Functions.primes_M_nonneg", "0 <= primes_M ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.\<pi>_nonneg", "0 <= primes_pi ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.\<psi>_nonneg", "0 <= primes_psi ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.\<theta>_nonneg", "0 <= primes_theta ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.\<theta>_le_\<psi>",
     "primes_theta ?x <= primes_psi ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.nth_prime_lower_bound",
     "Suc (Suc ?n) <= nth_prime ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.nth_prime_ge_2", "2 <= nth_prime ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.primes_M_floor_cancel",
     "primes_M (real_of_int \<lfloor>?y\<rfloor>) = primes_M ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<pi>_floor_cancel",
     "primes_pi (real_of_int \<lfloor>?y\<rfloor>) = primes_pi ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<psi>_floor_cancel",
     "primes_psi (real_of_int \<lfloor>?y\<rfloor>) = primes_psi ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<theta>_floor_cancel",
     "primes_theta (real_of_int \<lfloor>?y\<rfloor>) = primes_theta ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<pi>_inverse_exists",
     "EX n. primes_pi (real n) = real ?m",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Prime_Counting_Functions.nth_prime_Suc",
     "nth_prime (Suc ?n) = smallest_prime_beyond (Suc (nth_prime ?n))",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))))),
    ("Prime_Counting_Functions.primes_M_nat_cancel",
     "primes_M (real (nat ?x)) = primes_M (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<pi>_nat_cancel",
     "primes_pi (real (nat ?x)) = primes_pi (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<psi>_nat_cancel",
     "primes_psi (real (nat ?x)) = primes_psi (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<theta>_nat_cancel",
     "primes_theta (real (nat ?x)) = primes_theta (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.finite_primes_less",
     "finite {q. prime q & q < ?p}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Prime_Counting_Functions.nth_prime_eq_iff",
     "(nth_prime ?m = nth_prime ?n) = (?m = ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prime_Counting_Functions.nth_prime_less_iff",
     "(nth_prime ?m < nth_prime ?n) = (?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Prime_Counting_Functions.nth_prime_le_iff",
     "(nth_prime ?m <= nth_prime ?n) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Prime_Counting_Functions.\<pi>_nth_prime",
     "primes_pi (real (nth_prime ?n)) = real ?n + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Prime_Counting_Functions.\<pi>_pos_iff",
     "(0 < primes_pi ?x) = (2 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Prime_Counting_Functions.primes_M_mono",
     "?x <= ?y ==> primes_M ?x <= primes_M ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<pi>_mono",
     "?x <= ?y ==> primes_pi ?x <= primes_pi ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<psi>_mono",
     "?x <= ?y ==> primes_psi ?x <= primes_psi ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<theta>_mono",
     "?x <= ?y ==> primes_theta ?x <= primes_theta ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.of_nat_prime_sum_upto",
     "of_nat (prime_sum_upto ?f ?x) =
      prime_sum_upto (%p. of_nat (?f p)) ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Prime_Counting_Functions.primes_M_eq_0", "?x < 2 ==> primes_M ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Prime_Counting_Functions.\<pi>_eq_0", "?x < 2 ==> primes_pi ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Prime_Counting_Functions.\<psi>_eq_0", "?x < 2 ==> primes_psi ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Prime_Counting_Functions.\<theta>_eq_0",
     "?x < 2 ==> primes_theta ?x = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Prime_Counting_Functions.\<pi>_pos", "2 <= ?x ==> 0 < primes_pi ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.card_less_nth_prime",
     "card {q. prime q & q < nth_prime ?n} = ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_var 0)),
    ("Prime_Counting_Functions.\<pi>_smallest_prime_beyond",
     "primes_pi (real (smallest_prime_beyond ?m)) =
      primes_pi (real (?m - 1)) + 1",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("Prime_Counting_Functions.\<theta>_upper_bound_coarse",
     "1 <= ?x ==> primes_theta ?x <= ?x * ln ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Prime_Counting_Functions.prime_sum_upto_eq_0",
     "?x < 2 ==> prime_sum_upto ?f ?x = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Prime_Counting_Functions.integrable_primes_M",
     "2 <= ?x ==> primes_M integrable_on {?x..?y}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.prime_sum_upto_altdef1",
     "prime_sum_upto ?f ?x = sum_upto (%p. ind prime p * ?f p) ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Prime_Counting_Functions.prime_sum_upto_altdef3",
     "prime_sum_upto ?f ?x =
      sum_list (map ?f (primes_upto (nat \<lfloor>?x\<rfloor>)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Prime_Counting_Functions.card_le_nth_prime",
     "card {q. prime q & q <= nth_prime ?n} = Suc ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.le_numeral_iff",
     "(?m <= numeral ?n) = (?m = numeral ?n | ?m <= pred_numeral ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Prime_Counting_Functions.\<theta>_upper_bound",
     "1 <= ?x ==> primes_theta ?x < ln 4 * ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 1, template_hole 0))))),
           template_var 0)))),
    ("Prime_Counting_Functions.nth_prime_exists",
     "EX p. prime p & card {q. prime q & q < p} = ?n",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Prime_Counting_Functions.nth_prime_exists1",
     "EX! p. prime p & card {q. prime q & q < p} = ?n",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Prime_Counting_Functions.between_nth_primes_imp_nonprime",
     "[| nth_prime ?k < ?n; ?n < nth_prime (Suc ?k) |] ==> ~ prime ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Prime_Counting_Functions.\<pi>_upper_bound_coarse",
     "0 <= ?x ==> primes_pi ?x <= ?x / 3 + 2",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_hole 1)))))),
    ("Prime_Counting_Functions.nth_prime_partition",
     "2 <= ?x ==> EX k. ?x : {nth_prime k..<nth_prime (Suc k)}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Prime_Counting_Functions.prime_sum_upto_altdef2",
     "prime_sum_upto ?f ?x =
      (SUM p | prime p & p <= nat \<lfloor>?x\<rfloor>. ?f p)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 5, t_empty)))),
    ("Prime_Counting_Functions.prime_sum_upto_nonneg",
     "(!!n. 0 < n ==> 0 <= ?f n) ==> 0 <= prime_sum_upto ?f ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Prime_Counting_Functions.nth_prime_eqI''",
     "[| prime ?p; primes_pi (real ?p) = real ?n + 1 |]
      ==> nth_prime ?n = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 1)),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 0)),
            template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Prime_Counting_Functions.\<psi>_conv_\<theta>_sum",
     "0 < ?x ==>
      primes_psi ?x = sum_upto (%m. primes_theta (root m ?x)) (log 2 ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Prime_Counting_Functions.floor_floor_div_eq",
     "0 <= ?x ==>
      \<lfloor>real (nat \<lfloor>?x\<rfloor>) / real ?d\<rfloor> =
      \<lfloor>?x / real ?d\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 1)))),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)))))),
    ("Prime_Counting_Functions.nth_prime_partition'",
     "2 <= ?x ==>
      EX k. ?x : {real (nth_prime k)..<real (nth_prime (Suc k))}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Prime_Counting_Functions.\<theta>_conv_\<MM>_integral",
     "2 <= ?x ==>
      (primes_M has_integral primes_M ?x * ?x - primes_theta ?x) {2..?x}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 4, template_var 0)),
                     template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.nth_prime_eqI",
     "[| prime ?p; card {q. prime q & q < ?p} = ?n |]
      ==> nth_prime ?n = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_hole 4, template_app (template_hole 3, t_empty)),
          template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Prime_Counting_Functions.\<psi>_minus_\<theta>_bound",
     "2 <= ?x ==> primes_psi ?x - primes_theta ?x <= 2 * ln ?x * sqrt ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))))),
    ("Prime_Counting_Functions.nth_prime_eqI'",
     "[| prime ?p; card {q. prime q & q <= ?p} = Suc ?n |]
      ==> nth_prime ?n = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_hole 5, template_app (template_hole 4, t_empty)),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Prime_Counting_Functions.prod_primes_upto_less",
     "0 < ?n ==> \<Prod>{p. prime p & p <= ?n} < 4 ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 7, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 0)))),
    ("Prime_Counting_Functions.\<psi>_altdef",
     "0 < ?x ==>
      primes_psi ?x =
      sum_upto (%m. prime_sum_upto (%x. ln (real x)) (root m ?x))
       (log 2 ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Prime_Counting_Functions.nth_prime_partition''",
     "2 <= ?x ==>
      ?x : {real
             (nth_prime
               (nat \<lfloor>primes_pi ?x\<rfloor> -
                1))..<real
                       (nth_prime (nat \<lfloor>primes_pi ?x\<rfloor>))}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 0)))),
                       template_hole 0)))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)))))))
           ))),
    ("Prime_Counting_Functions.prime_sum_upto_mono",
     "[| !!n. 0 < n ==> 0 <= ?f n; ?x <= ?y |]
      ==> prime_sum_upto ?f ?x <= prime_sum_upto ?f ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Prime_Counting_Functions.eval_prime_sum_upto",
     "prime_sum_upto ?f ?x =
      sum_list
       (map ?f
         (map fst
           (filter snd
             (List.enumerate 2
               (sieve 1
                 (replicate (nat \<lfloor>?x\<rfloor> - 1) True))))))",
     template_equation
      (template_app
        (template_app (template_hole 17, template_var 1), template_var 0),
       template_app
        (template_hole 16,
         template_app
          (template_app (template_hole 15, t_empty),
           template_app
            (template_app (template_hole 14, template_hole 13),
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 0))),
                         template_hole 5)),
                     template_hole 0))))))))),
    ("Prime_Counting_Functions.\<theta>_conv_\<pi>_integral",
     "2 <= ?x ==>
      ((%t. primes_pi t / t) has_integral
       primes_pi ?x * ln ?x - primes_theta ?x)
       {2..?x}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 5, template_var 0)),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_hole 8))),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.strict_mono_sequence_partition",
     "[| strict_mono ?f; ?f 0 <= ?x; filterlim ?f at_top sequentially |]
      ==> EX k. ?x : {?f k..<?f (Suc k)}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_hole 7),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5),
              template_hole 4)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Prime_Counting_Functions.stirling_weak",
     "1 <= ?x ==>
      sum_upto (%x. ln (real x)) ?x
      : {?x * ln ?x - ?x - ln ?x + 1..?x * ln ?x}",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, t_empty), template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_app
                                (template_hole 5, template_var 0))),
                           template_var 0)),
                       template_app (template_hole 5, template_var 0))),
                   template_hole 8)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 5, template_var 0))))
           ))),
    ("Prime_Counting_Functions.integrable_weighted_\<theta>",
     "[| 2 <= ?a; ?a <= ?x |]
      ==> (%t. primes_theta t / (t * (ln t)\<^sup>2)) integrable_on
          {?a..?x}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.\<MM>_conv_\<theta>_integral",
     "2 <= ?x ==>
      ((%t. primes_theta t / t\<^sup>2) has_integral
       primes_M ?x - primes_theta ?x / ?x)
       {2..?x}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_hole 8))),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.measurable_prime_sum_upto",
     "[| !!y. (%t. ?f t y) : borel_measurable ?M;
         ?x : borel_measurable ?M |]
      ==> (%t. prime_sum_upto (?f t) (?x t)) : borel_measurable ?M",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))
           ))),
    ("Prime_Counting_Functions.prime_sum_upto_eqI",
     "[| ?a <= ?b;
         !!k. k : {nat \<lfloor>?a\<rfloor><..nat \<lfloor>?b\<rfloor>} ==>
              ~ prime k |]
      ==> prime_sum_upto ?f ?a = prime_sum_upto ?f ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Prime_Counting_Functions.\<pi>_conv_\<theta>_integral",
     "2 <= ?x ==>
      ((%t. primes_theta t / (t * (ln t)\<^sup>2)) has_integral
       primes_pi ?x - primes_theta ?x / ln ?x)
       {2..?x}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 0)),
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 0))
           ))),
    ("Prime_Counting_Functions.\<psi>_minus_\<theta>",
     "2 <= ?x ==>
      primes_psi ?x - primes_theta ?x =
      (SUM i | 2 <= i & real i <= log 2 ?x. primes_theta (root i ?x))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0)),
           template_app (template_hole 8, template_var 0)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 5, t_empty))))),
    ("Prime_Counting_Functions.nth_prime_unique_aux",
     "[| prime ?p; card {q. prime q & q < ?p} = ?n; prime ?p';
         card {q. prime q & q < ?p'} = ?n |]
      ==> ?p = ?p'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_hole 3, template_app (template_hole 2, t_empty)),
          template_var 1),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_hole 3, template_app (template_hole 2, t_empty)),
          template_var 1)],
       template_equation (template_var 2, template_var 0))),
    ("Prime_Counting_Functions.prime_sum_upto_eqI'",
     "[| ?a' <= nat \<lfloor>?a\<rfloor>; ?a <= ?b;
         nat \<lfloor>?b\<rfloor> <= ?b';
         !!k. k : {?a'<..?b'} ==> ~ prime k |]
      ==> prime_sum_upto ?f ?a = prime_sum_upto ?f ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 3))),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 2)),
          template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Prime_Counting_Functions.integral_one_over_log_squared_bound",
     "4 <= ?x ==>
      integral {2..?x} (%t. 1 / (ln t)\<^sup>2)
      <= sqrt ?x / (ln 2)\<^sup>2 + 4 * ?x / (ln ?x)\<^sup>2",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app
             (template_hole 11,
              template_app (template_hole 11, template_hole 10))),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_hole 10))),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_hole 10)))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 11, template_hole 10))))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 11, template_hole 10)))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 11, template_hole 10)))))))),
    ("Prime_Counting_Functions.\<pi>_\<theta>_bound",
     "4 <= ?x ==>
      primes_pi ?x - primes_theta ?x / ln ?x
      : {0..2 / ln 2 * sqrt ?x + 8 * ln 2 * ?x / (ln ?x)\<^sup>2}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 15,
            template_app
             (template_hole 14,
              template_app (template_hole 14, template_hole 13))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)),
                   template_app (template_hole 7, template_var 0)))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 15,
                             template_app
                              (template_hole 14, template_hole 13))),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 15,
                             template_app
                              (template_hole 14, template_hole 13))))),
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 15,
                               template_app
                                (template_hole 14,
                                 template_app
                                  (template_hole 14,
                                   template_app
                                    (template_hole 14,
                                     template_hole 13))))),
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 15,
                               template_app
                                (template_hole 14, template_hole 13))))),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_var 0)),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 14, template_hole 13)))))))
           ))),
    ("Prime_Counting_Functions.\<pi>_upper_bound",
     "4 <= ?x ==>
      primes_pi ?x
      < ln 4 * ?x / ln ?x + 8 * ln 2 * ?x / (ln ?x)\<^sup>2 +
        2 / ln 2 * sqrt ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app (template_hole 10, template_hole 9))),
          template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 10, template_hole 9))))),
                       template_var 0)),
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 10,
                                 template_app
                                  (template_hole 10, template_hole 9))))),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))))),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 10, template_hole 9)))))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9))))),
             template_app (template_hole 0, template_var 0)))))),
    ("Prime_Counting_Functions.sum_upto_primepows",
     "[| !!n. ~ primepow n ==> ?f n = (0::?'a);
         !!p i. [| prime p; 0 < i |] ==> ?f (p ^ i) = ?g p i |]
      ==> sum_upto ?f ?x =
          (SUM (p, i):{(p, i). prime p & 0 < i & real (p ^ i) <= ?x}.
              ?g p i)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))))))]
