   [("Prime_Counting_Functions.primes_M_floor_cancel",
     "primes_M (real_of_int \<lfloor>?y\<rfloor>) = primes_M ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<pi>_floor_cancel",
     "primes_pi (real_of_int \<lfloor>?y\<rfloor>) = primes_pi ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<psi>_floor_cancel",
     "primes_psi (real_of_int \<lfloor>?y\<rfloor>) = primes_psi ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.\<theta>_floor_cancel",
     "primes_theta (real_of_int \<lfloor>?y\<rfloor>) = primes_theta ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Prime_Counting_Functions.nth_prime_Suc",
     "nth_prime (Suc ?n) = smallest_prime_beyond (Suc (nth_prime ?n))",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))))),
    ("Prime_Counting_Functions.primes_M_nat_cancel",
     "primes_M (real (nat ?x)) = primes_M (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<pi>_nat_cancel",
     "primes_pi (real (nat ?x)) = primes_pi (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<psi>_nat_cancel",
     "primes_psi (real (nat ?x)) = primes_psi (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.\<theta>_nat_cancel",
     "primes_theta (real (nat ?x)) = primes_theta (real_of_int ?x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Prime_Counting_Functions.nth_prime_eq_iff",
     "(nth_prime ?m = nth_prime ?n) = (?m = ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prime_Counting_Functions.nth_prime_less_iff",
     "(nth_prime ?m < nth_prime ?n) = (?m < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Prime_Counting_Functions.nth_prime_le_iff",
     "(nth_prime ?m <= nth_prime ?n) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Prime_Counting_Functions.\<pi>_nth_prime",
     "primes_pi (real (nth_prime ?n)) = real ?n + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Prime_Counting_Functions.\<pi>_pos_iff",
     "(0 < primes_pi ?x) = (2 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Prime_Counting_Functions.of_nat_prime_sum_upto",
     "of_nat (prime_sum_upto ?f ?x) =
      prime_sum_upto (%p. of_nat (?f p)) ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Prime_Counting_Functions.card_less_nth_prime",
     "card {q. prime q & q < nth_prime ?n} = ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_var 0)),
    ("Prime_Counting_Functions.\<pi>_smallest_prime_beyond",
     "primes_pi (real (smallest_prime_beyond ?m)) =
      primes_pi (real (?m - 1)) + 1",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("Prime_Counting_Functions.prime_sum_upto_altdef1",
     "prime_sum_upto ?f ?x = sum_upto (%p. ind prime p * ?f p) ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Prime_Counting_Functions.prime_sum_upto_altdef3",
     "prime_sum_upto ?f ?x =
      sum_list (map ?f (primes_upto (nat \<lfloor>?x\<rfloor>)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Prime_Counting_Functions.card_le_nth_prime",
     "card {q. prime q & q <= nth_prime ?n} = Suc ?n",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Counting_Functions.le_numeral_iff",
     "(?m <= numeral ?n) = (?m = numeral ?n | ?m <= pred_numeral ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_dunno)),
    ("Prime_Counting_Functions.prime_sum_upto_altdef2",
     "prime_sum_upto ?f ?x =
      (SUM p | prime p & p <= nat \<lfloor>?x\<rfloor>. ?f p)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 5, t_empty)))),
    ("Prime_Counting_Functions.eval_prime_sum_upto",
     "prime_sum_upto ?f ?x =
      sum_list
       (map ?f
         (map fst
           (filter snd
             (List.enumerate 2
               (sieve 1
                 (replicate (nat \<lfloor>?x\<rfloor> - 1) True))))))",
     template_equation
      (template_app
        (template_app (template_hole 17, template_var 1), template_var 0),
       template_app
        (template_hole 16,
         template_app
          (template_app (template_hole 15, t_empty),
           template_app
            (template_app (template_hole 14, template_hole 13),
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 0))),
                         template_hole 5)),
                     template_hole 0)))))))))]
