Loading theory "Draft.Data" (required by "Draft.RenamingMoreTemplates" via "Draft.Renaming" via "Draft.Occurrences")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.575s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.888s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.349s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.843s cpu time, 0.939s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.925s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.956s elapsed time, 6.174s cpu time, 1.158s GC time
Loading theory "Draft.Templates" (required by "Draft.RenamingMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.175s cpu time, 0.064s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RenamingMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.136s cpu time, 0.126s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "redex"
  Proving monotonicity ...
Proofs for inductive predicate(s) "decompose"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Data"
### 5.995s elapsed time, 12.250s cpu time, 2.587s GC time
Loading theory "Draft.Occurrences" (required by "Draft.RenamingMoreTemplates" via "Draft.Renaming")
### theory "Draft.Occurrences"
### 0.192s elapsed time, 0.210s cpu time, 0.000s GC time
Loading theory "Draft.Renaming" (required by "Draft.RenamingMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Renaming"
### 0.431s elapsed time, 0.478s cpu time, 0.066s GC time
Loading theory "Draft.RenamingMoreTemplates"
val templateLemmas =
   [("Renaming.\<alpha>\<beta>_refl", "?s \<approx> ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Renaming.id_trivial_update", "id(?x := ?x) = id",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0),
       template_hole 0)),
    ("Renaming.\<R>\<^sub>S_id", "\<R>\<^sub>S id id ?\<sigma> = ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Renaming.\<R>\<^sub>G_id", "\<R>\<^sub>G id id ?s = ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Renaming.\<R>\<^sub>L_id", "\<R>\<^sub>L id id ?ls = ?ls",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Renaming.rename_empty",
     "\<R>\<^sub>S ?\<alpha> ?\<beta> \<epsilon> = \<epsilon>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         t_empty),
       t_empty)),
    ("Renaming.rename_empty",
     "\<R>\<^sub>G ?\<alpha> ?\<beta> \<epsilon> = \<epsilon>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         t_empty),
       t_empty)),
    ("Renaming.\<alpha>\<beta>_sym",
     "?s \<approx> ?s' ==> ?s' \<approx> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Renaming.swap_bij", "bij (id(?x := ?x', ?x' := ?x))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 1),
                       template_var 0)),
                   template_var 0),
                 template_var 1)),
             template_hole 0),
           template_hole 0)
         )),
    ("Renaming.\<alpha>\<beta>_trans",
     "[| ?s \<approx> ?s'; ?s' \<approx> ?s'' |] ==> ?s \<approx> ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Renaming.\<R>\<^sub>G_implements_renaming",
     "bij ?\<alpha> ==>
      is_global_renaming ?\<alpha> ?\<beta> ?s
       (\<R>\<^sub>G ?\<alpha> ?\<beta> ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Renaming.\<R>\<^sub>S_implements_renaming",
     "bij ?\<beta> ==>
      is_store_renaming ?\<alpha> ?\<beta> ?\<sigma>
       (\<R>\<^sub>S ?\<alpha> ?\<beta> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Renaming.renaming_distr_combination",
     "\<R>\<^sub>S ?\<alpha> ?\<beta> (?\<sigma>;;?\<tau>) =
      (\<R>\<^sub>S ?\<alpha> ?\<beta>
        ?\<sigma>;;\<R>\<^sub>S ?\<alpha> ?\<beta> ?\<tau>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Renaming.renaming_distr_completion",
     "\<R>\<^sub>E ?\<alpha> ?\<beta> (?\<E> [?e]) =
      (\<R>\<^sub>C ?\<alpha> ?\<beta> ?\<E>)
       [\<R>\<^sub>E ?\<alpha> ?\<beta> ?e]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_hole 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_hole 2),
           template_var 0)))),
    ("Renaming.eliminate_renaming_cntxt",
     "?r ~: RID\<^sub>C ?\<E> ==>
      \<R>\<^sub>C (?\<alpha>(?r := ?r')) ?\<beta> ?\<E> =
      \<R>\<^sub>C ?\<alpha> ?\<beta> ?\<E>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_var 1)),
               template_var 0),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_hole 0),
           template_var 3)))),
    ("Renaming.eliminate_renaming_cntxt",
     "?l ~: LID\<^sub>C ?\<E> ==>
      \<R>\<^sub>C ?\<alpha> (?\<beta>(?l := ?l')) ?\<E> =
      \<R>\<^sub>C ?\<alpha> ?\<beta> ?\<E>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4),
                 template_var 0)),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_hole 0),
           template_var 3)))),
    ("Renaming.eliminate_renaming_val_expr",
     "?l ~: LID\<^sub>E ?e ==>
      \<R>\<^sub>E ?\<alpha> (?\<beta>(?l := ?l')) ?e =
      \<R>\<^sub>E ?\<alpha> ?\<beta> ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4),
                 template_var 0)),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_hole 0),
           template_var 3)))),
    ("Renaming.eliminate_renaming_val_expr",
     "?l ~: LID\<^sub>V ?v ==>
      \<R>\<^sub>V ?\<alpha> (?\<beta>(?l := ?l')) ?v =
      \<R>\<^sub>V ?\<alpha> ?\<beta> ?v",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4),
                 template_var 0)),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_hole 0),
           template_var 3)))),
    ("Renaming.eliminate_renaming_val_expr",
     "?r ~: RID\<^sub>E ?e ==>
      \<R>\<^sub>E (?\<alpha>(?r := ?r')) ?\<beta> ?e =
      \<R>\<^sub>E ?\<alpha> ?\<beta> ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_var 1)),
               template_var 0),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_hole 0),
           template_var 3)))),
    ("Renaming.eliminate_renaming_val_expr",
     "?r ~: RID\<^sub>V ?v ==>
      \<R>\<^sub>V (?\<alpha>(?r := ?r')) ?\<beta> ?v =
      \<R>\<^sub>V ?\<alpha> ?\<beta> ?v",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app (template_hole 4, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_var 1)),
               template_var 0),
             template_hole 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_hole 0),
           template_var 3)))),
    ("Renaming.renaming_distr_global",
     "bij ?\<alpha> ==>
      \<R>\<^sub>G ?\<alpha> ?\<beta> (?s(?r := None)) =
      (\<R>\<^sub>G ?\<alpha> ?\<beta> ?s)(?\<alpha> ?r := None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_var 3, template_var 0)),
           template_hole 0)))),
    ("Renaming.eq_statesI",
     "[| \<R>\<^sub>G ?\<alpha> ?\<beta> ?s = ?s'; bij ?\<alpha>;
         bij ?\<beta> |]
      ==> ?s \<approx> ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_hole 3),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Renaming.eliminate_swap_global_lid",
     "[| ?l ~: LID\<^sub>G ?s; ?l' ~: LID\<^sub>G ?s |]
      ==> \<R>\<^sub>G id (id(?l := ?l', ?l' := ?l)) ?s = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2),
                     template_var 0)),
                 template_var 0),
               template_var 2)),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_store_lid",
     "[| ?l ~: LID\<^sub>S ?\<sigma>; ?l' ~: LID\<^sub>S ?\<sigma> |]
      ==> \<R>\<^sub>S id (id(?l := ?l', ?l' := ?l)) ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2),
                     template_var 0)),
                 template_var 0),
               template_var 2)),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_global_rid",
     "[| ?r ~: RID\<^sub>G ?s; ?r' ~: RID\<^sub>G ?s |]
      ==> \<R>\<^sub>G (id(?r := ?r', ?r' := ?r)) id ?s = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2),
                       template_var 0)),
                   template_var 0),
                 template_var 2)),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_store_rid",
     "[| ?r ~: RID\<^sub>S ?\<sigma>; ?r' ~: RID\<^sub>S ?\<sigma> |]
      ==> \<R>\<^sub>S (id(?r := ?r', ?r' := ?r)) id ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2),
                       template_var 0)),
                   template_var 0),
                 template_var 2)),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.renaming_distr_global",
     "bij ?\<alpha> ==>
      \<R>\<^sub>G ?\<alpha> ?\<beta> (?s(?r |-> ?ls)) =
      \<R>\<^sub>G ?\<alpha> ?\<beta> ?s(?\<alpha> ?r |->
      \<R>\<^sub>L ?\<alpha> ?\<beta> ?ls)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_hole 5),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app (template_var 4, template_var 1)),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 0)))))),
    ("Renaming.eliminate_swap_cntxt",
     "[| ?r ~: RID\<^sub>C ?\<E>; ?r' ~: RID\<^sub>C ?\<E> |]
      ==> \<R>\<^sub>C (id(?r := ?r', ?r' := ?r)) id ?\<E> = ?\<E>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2),
                         template_var 0)),
                     template_var 0),
                   template_var 2)),
               template_hole 1),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_expr",
     "[| ?r ~: RID\<^sub>E ?e; ?r' ~: RID\<^sub>E ?e |]
      ==> \<R>\<^sub>E (id(?r := ?r', ?r' := ?r)) id ?e = ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2),
                         template_var 0)),
                     template_var 0),
                   template_var 2)),
               template_hole 1),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_val",
     "[| ?r ~: RID\<^sub>V ?v; ?r' ~: RID\<^sub>V ?v |]
      ==> \<R>\<^sub>V (id(?r := ?r', ?r' := ?r)) id ?v = ?v",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2),
                         template_var 0)),
                     template_var 0),
                   template_var 2)),
               template_hole 1),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_cntxt",
     "[| ?l ~: LID\<^sub>C ?\<E>; ?l' ~: LID\<^sub>C ?\<E> |]
      ==> \<R>\<^sub>C id (id(?l := ?l', ?l' := ?l)) ?\<E> = ?\<E>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2),
                       template_var 0)),
                   template_var 0),
                 template_var 2)),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_expr",
     "[| ?l ~: LID\<^sub>E ?e; ?l' ~: LID\<^sub>E ?e |]
      ==> \<R>\<^sub>E id (id(?l := ?l', ?l' := ?l)) ?e = ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2),
                       template_var 0)),
                   template_var 0),
                 template_var 2)),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.eliminate_swap_val",
     "[| ?l ~: LID\<^sub>V ?v; ?l' ~: LID\<^sub>V ?v |]
      ==> \<R>\<^sub>V id (id(?l := ?l', ?l' := ?l)) ?v = ?v",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2),
                       template_var 0)),
                   template_var 0),
                 template_var 2)),
             template_hole 0),
           template_var 1),
         template_var 1))),
    ("Renaming.renaming_distr_store",
     "bij ?\<beta> ==>
      \<R>\<^sub>S ?\<alpha> ?\<beta> (?\<sigma>(?l |-> ?v)) =
      \<R>\<^sub>S ?\<alpha> ?\<beta> ?\<sigma>(?\<beta> ?l |->
      \<R>\<^sub>V ?\<alpha> ?\<beta> ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 6),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 4),
                 template_var 2)),
             template_app (template_var 4, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4),
                 template_hole 0),
               template_var 0)))))),
    ("Renaming.\<R>\<^sub>S_comp",
     "[| bij ?\<beta>; bij ?\<beta>' |]
      ==> \<R>\<^sub>S ?\<alpha>' ?\<beta>'
           (\<R>\<^sub>S ?\<alpha> ?\<beta> ?s) =
          \<R>\<^sub>S (?\<alpha>' o ?\<alpha>) (?\<beta>' o ?\<beta>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_hole 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4)),
           template_var 0)))),
    ("Renaming.\<R>\<^sub>L_comp",
     "[| bij ?\<beta>; bij ?\<beta>' |]
      ==> \<R>\<^sub>L ?\<alpha>' ?\<beta>'
           (\<R>\<^sub>L ?\<alpha> ?\<beta> ?ls) =
          \<R>\<^sub>L (?\<alpha>' o ?\<alpha>) (?\<beta>' o ?\<beta>) ?ls",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_hole 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4)),
           template_var 0)))),
    ("Renaming.\<R>\<^sub>G_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>G (inv ?\<alpha>) (inv ?\<beta>) ?s' = ?s) =
          (\<R>\<^sub>G ?\<alpha> ?\<beta> ?s = ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_hole 7),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 7),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_hole 5),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0),
           template_var 1)))),
    ("Renaming.\<R>\<^sub>S_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>S (inv ?\<alpha>) (inv ?\<beta>) ?\<sigma>' =
           ?\<sigma>) =
          (\<R>\<^sub>S ?\<alpha> ?\<beta> ?\<sigma> = ?\<sigma>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_hole 7),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 7),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_hole 5),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0),
           template_var 1)))),
    ("Renaming.\<R>\<^sub>L_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>L (inv ?\<alpha>) (inv ?\<beta>) ?ls' = ?ls) =
          (\<R>\<^sub>L ?\<alpha> ?\<beta> ?ls = ?ls')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_hole 7),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 7),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_hole 5),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0),
           template_var 1)))),
    ("Renaming.\<R>\<^sub>V_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>V (inv ?\<alpha>) (inv ?\<beta>) ?v' = ?v) =
          (\<R>\<^sub>V ?\<alpha> ?\<beta> ?v = ?v')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_hole 8),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_hole 6),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 8),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_hole 6),
                   template_var 2)),
               template_hole 0),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_hole 0),
             template_var 0),
           template_var 1)))),
    ("Renaming.\<R>\<^sub>E_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>E (inv ?\<alpha>) (inv ?\<beta>) ?e' = ?e) =
          (\<R>\<^sub>E ?\<alpha> ?\<beta> ?e = ?e')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_hole 8),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_hole 6),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 8),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_hole 6),
                   template_var 2)),
               template_hole 0),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_hole 0),
             template_var 0),
           template_var 1)))),
    ("Renaming.\<R>\<^sub>C_inv",
     "[| bij ?\<alpha>; bij ?\<beta> |]
      ==> (\<R>\<^sub>C (inv ?\<alpha>) (inv ?\<beta>) ?\<E>' = ?\<E>) =
          (\<R>\<^sub>C ?\<alpha> ?\<beta> ?\<E> = ?\<E>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_hole 8),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_hole 6),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 8),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_hole 6),
                   template_var 2)),
               template_hole 0),
             template_var 1),
           template_var 0),
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_hole 0),
             template_var 0),
           template_var 1)))),
    ("Renaming.eq_statesE",
     "[| ?s \<approx> ?s';
         !!\<alpha> \<beta>.
            [| \<R>\<^sub>G \<alpha> \<beta> ?s = ?s'; bij \<alpha>;
               bij \<beta> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Renaming.\<R>\<^sub>G_comp",
     "[| bij ?\<alpha>; bij ?\<alpha>'; bij ?\<beta>; bij ?\<beta>' |]
      ==> \<R>\<^sub>G ?\<alpha>' ?\<beta>'
           (\<R>\<^sub>G ?\<alpha> ?\<beta> ?s) =
          \<R>\<^sub>G (?\<alpha>' o ?\<alpha>) (?\<beta>' o ?\<beta>) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 6),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_hole 6),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Renaming.\<R>\<^sub>SI",
     "[| bij ?\<beta>;
         !!l. ?\<sigma> l = None ==> ?\<sigma>' (?\<beta> l) = None;
         !!l v.
            ?\<sigma> l = Some v ==>
            ?\<sigma>' (?\<beta> l) =
            Some (\<R>\<^sub>V ?\<alpha> ?\<beta> v) |]
      ==> \<R>\<^sub>S ?\<alpha> ?\<beta> ?\<sigma> = ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_hole 9),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 2),
         template_var 1))),
    ("Renaming.\<R>\<^sub>GI",
     "[| bij ?\<alpha>; !!r. ?s r = None ==> ?s' (?\<alpha> r) = None;
         !!r \<sigma> \<tau> e.
            ?s r = Some (\<sigma>, \<tau>, e) ==>
            ?s' (?\<alpha> r) =
            Some (\<R>\<^sub>L ?\<alpha> ?\<beta> (\<sigma>, \<tau>, e)) |]
      ==> \<R>\<^sub>G ?\<alpha> ?\<beta> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_hole 11),
              template_hole 11)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_var 1)))]:
   (string * thm * template) list
### theory "Draft.RenamingMoreTemplates"
### 0.396s elapsed time, 0.586s cpu time, 0.056s GC time
val it = (): unit
