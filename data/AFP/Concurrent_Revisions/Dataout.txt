Loading theory "Draft.Data" (required by "Draft.DataMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.583s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.818s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.342s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.042s elapsed time, 3.890s cpu time, 0.969s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.143s elapsed time, 4.083s cpu time, 0.926s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.441s cpu time, 1.283s GC time
Loading theory "Draft.Templates" (required by "Draft.DataMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.184s cpu time, 0.076s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DataMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.766s elapsed time, 1.822s cpu time, 0.773s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "redex"
  Proving monotonicity ...
Proofs for inductive predicate(s) "decompose"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Data"
### 6.236s elapsed time, 13.063s cpu time, 3.303s GC time
Loading theory "Draft.DataMoreTemplates"
val templateLemmas =
   [("Data.dom_combination_dom_union",
     "dom (?\<tau>;;?\<tau>') = dom ?\<tau> Un dom ?\<tau>'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Data.injective_cntxt",
     "(?\<E> [?e1.0] = ?\<E> [?e2.0]) = (?e1.0 = ?e2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Data.plugged_redex_not_val", "redex ?r ==> ?\<E> [?r] ~= VE ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Data.plug_decomposition_equivalence",
     "redex ?r ==> decompose ?e ?\<E> ?r = (?\<E> [?r] = ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0),
                template_var 2)
              )],
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Data.VE_empty_cntxt",
     "(VE ?v = ?\<E> [?e]) = (?\<E> = \<box> & VE ?v = ?e)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_var 0))
           ))),
    ("Data.unique_decomposition",
     "[| decompose ?e ?\<E>\<^sub>1 ?r\<^sub>1;
         decompose ?e ?\<E>\<^sub>2 ?r\<^sub>2 |]
      ==> ?\<E>\<^sub>1 = ?\<E>\<^sub>2 & ?r\<^sub>1 = ?r\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Data.completion_eq",
     "[| redex ?r; redex ?r' |]
      ==> (?\<E> [?r] = ?\<E>' [?r']) = (?\<E> = ?\<E>' & ?r = ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2))
             )))),
    ("Data.redex_simps",
     "redex ?e =
      ((EX x e v. ?e = Apply (VE (Lambda x e)) (VE v)) |
       (EX e1 e2. ?e = Ite (VE (CV T)) e1 e2) |
       (EX e1 e2. ?e = Ite (VE (CV F)) e1 e2) |
       (EX v. ?e = Ref (VE v)) |
       (EX l. ?e = Read (VE (Loc l))) |
       (EX l v. ?e = Assign (VE (Loc l)) (VE v)) |
       (EX e. ?e = Rfork e) | (EX r. ?e = Rjoin (VE (Rid r))))",
     template_equation
      (template_app (template_hole 21, template_var 0),
       template_app
        (template_app
          (template_hole 20, template_app (template_hole 19, t_empty)),
         template_app
          (template_app
            (template_hole 20, template_app (template_hole 18, t_empty)),
           template_app
            (template_app
              (template_hole 20, template_app (template_hole 18, t_empty)),
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 17, t_empty)),
               template_app
                (template_app
                  (template_hole 20,
                   template_app (template_hole 7, t_empty)),
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app (template_hole 7, t_empty)),
                   template_app
                    (template_app
                      (template_hole 20,
                       template_app (template_hole 18, t_empty)),
                     template_app (template_hole 2, t_empty)))))))))),
    ("Data.redexE",
     "[| redex ?e; !!x e v. ?e = Apply (VE (Lambda x e)) (VE v) ==> ?P;
         !!e1 e2. ?e = Ite (VE (CV T)) e1 e2 ==> ?P;
         !!e1 e2. ?e = Ite (VE (CV F)) e1 e2 ==> ?P;
         !!v. ?e = Ref (VE v) ==> ?P; !!l. ?e = Read (VE (Loc l)) ==> ?P;
         !!l v. ?e = Assign (VE (Loc l)) (VE v) ==> ?P;
         !!e. ?e = Rfork e ==> ?P; !!r. ?e = Rjoin (VE (Rid r)) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Data.decomposeE",
     "[| decompose ?e ?\<E> ?r;
         [| ?\<E> = \<box>; ?r = ?e;
            (EX x e v. ?e = Apply (VE (Lambda x e)) (VE v)) |
            (EX e1 e2. ?e = Ite (VE (CV T)) e1 e2) |
            (EX e1 e2. ?e = Ite (VE (CV F)) e1 e2) |
            (EX v. ?e = Ref (VE v)) |
            (EX l. ?e = Read (VE (Loc l))) |
            (EX l v. ?e = Assign (VE (Loc l)) (VE v)) |
            (EX e. ?e = Rfork e) | (EX r. ?e = Rjoin (VE (Rid r))) |]
         ==> ?P;
         !!e\<^sub>1 e\<^sub>2 \<E>.
            [| ?e = Apply e\<^sub>1 e\<^sub>2;
               ?\<E> = ApplyL\<^sub>\<E> \<E> e\<^sub>2;
               (ALL x e. e\<^sub>1 ~= VE (Lambda x e)) |
               (ALL v. e\<^sub>2 ~= VE v);
               decompose e\<^sub>1 \<E> ?r |]
            ==> ?P;
         !!v e \<E>.
            [| ?e = Apply (VE v) e; ?\<E> = ApplyR\<^sub>\<E> v \<E>;
               (ALL x e. v ~= Lambda x e) | (ALL v. e ~= VE v);
               decompose e \<E> ?r |]
            ==> ?P;
         !!e\<^sub>1 e\<^sub>2 e\<^sub>3 \<E>.
            [| ?e = Ite e\<^sub>1 e\<^sub>2 e\<^sub>3;
               ?\<E> = Ite\<^sub>\<E> \<E> e\<^sub>2 e\<^sub>3;
               decompose e\<^sub>1 \<E> ?r; e\<^sub>1 ~= VE (CV T);
               e\<^sub>1 ~= VE (CV F) |]
            ==> ?P;
         !!e \<E>.
            [| ?e = Ref e; ?\<E> = Ref\<^sub>\<E> \<E>; ALL v. e ~= VE v;
               decompose e \<E> ?r |]
            ==> ?P;
         !!e \<E>.
            [| ?e = Read e; ?\<E> = Read\<^sub>\<E> \<E>;
               ALL l. e ~= VE (Loc l); decompose e \<E> ?r |]
            ==> ?P;
         !!e\<^sub>1 e\<^sub>2 \<E>.
            [| ?e = Assign e\<^sub>1 e\<^sub>2;
               ?\<E> = AssignL\<^sub>\<E> \<E> e\<^sub>2;
               (ALL l. e\<^sub>1 ~= VE (Loc l)) |
               (ALL v. e\<^sub>2 ~= VE v);
               decompose e\<^sub>1 \<E> ?r |]
            ==> ?P;
         !!l e\<^sub>2 \<E>.
            [| ?e = Assign (VE (Loc l)) e\<^sub>2;
               ?\<E> = AssignR\<^sub>\<E> l \<E>; ALL v. e\<^sub>2 ~= VE v;
               decompose e\<^sub>2 \<E> ?r |]
            ==> ?P;
         !!e \<E>.
            [| ?e = Rjoin e; ?\<E> = Rjoin\<^sub>\<E> \<E>;
               ALL r. e ~= VE (Rid r); decompose e \<E> ?r |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 42, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 40)],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 38,
                       template_app (template_hole 37, t_empty)),
                     template_app
                      (template_app
                        (template_hole 38,
                         template_app (template_hole 36, t_empty)),
                       template_app
                        (template_app
                          (template_hole 38,
                           template_app (template_hole 36, t_empty)),
                         template_app
                          (template_app
                            (template_hole 38,
                             template_app (template_hole 35, t_empty)),
                           template_app
                            (template_app
                              (template_hole 38,
                               template_app (template_hole 26, t_empty)),
                             template_app
                              (template_app
                                (template_hole 38,
                                 template_app (template_hole 26, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 38,
                                   template_app
                                    (template_hole 36, t_empty)),
                                 template_app
                                  (template_hole 21, t_empty))))))))
                   )],
              template_predicate (template_var 0)))),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.DataMoreTemplates"
### 0.377s elapsed time, 0.585s cpu time, 0.063s GC time
val it = (): unit
