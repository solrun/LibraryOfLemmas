Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.572s cpu time, 0.049s GC time
Loading theory "Draft.Residuated_Lattices" (required by "Draft.Action_AlgebraTemplates" via "Draft.Action_Algebra")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.890s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.356s elapsed time, 1.409s cpu time, 0.137s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class pogroupoid = times + order +
  assumes "mult_isor": "!!x y z. x <= y ==> x \<cdot> z <= y \<cdot> z"
    and "mult_isol": "!!x y z. x <= y ==> z \<cdot> x <= z \<cdot> y"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class residual_r_op = type +
  fixes residual_r :: "'a => 'a => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class residual_l_op = type +
  fixes residual_l :: "'a => 'a => 'a"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.905s elapsed time, 3.390s cpu time, 0.750s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class residuated_pogroupoid = times + order + residual_l_op +
  residual_r_op +
  assumes
    "resl_galois": "!!x z y. (x <= z \<leftarrow> y) = (x \<cdot> y <= z)"
    and
    "resr_galois": "!!x y z. (x \<cdot> y <= z) = (y <= x \<rightarrow> z)"
### theory "HOL-Library.Stream"
### 0.950s elapsed time, 3.427s cpu time, 0.662s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.861s elapsed time, 6.008s cpu time, 0.947s GC time
Loading theory "Draft.Templates" (required by "Draft.Action_AlgebraTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Action_AlgebraTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.118s cpu time, 0.099s GC time
### theory "Draft.Residuated_Lattices"
### 6.754s elapsed time, 11.294s cpu time, 1.282s GC time
Loading theory "Draft.Action_Algebra" (required by "Draft.Action_AlgebraTemplates")
class action_algebra = dioid_one_zero + residuated_sup_lgroupoid + star_op +
  assumes
    "star_rtc1":
      "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x\<^sup>\<star> + x
            <= x\<^sup>\<star>"
    and
    "star_rtc2":
      "!!y x. (1::'a) + y \<cdot> y + x <= y ==> x\<^sup>\<star> <= y"
class equational_action_algebra = dioid_one_zero +
  residuated_sup_lgroupoid + star_op +
  assumes
    "star_ax":
      "!!x. (1::'a) + x\<^sup>\<star> \<cdot> x\<^sup>\<star> + x
            <= x\<^sup>\<star>"
    and "star_subdist": "!!x y. x\<^sup>\<star> <= (x + y)\<^sup>\<star>"
    and
    "right_pure_induction":
      "!!x. (x \<rightarrow> x)\<^sup>\<star> <= x \<rightarrow> x"
class action_algebra_var = dioid_one_zero + residuated_sup_lgroupoid +
  star_op +
  assumes
    "star_unfold'":
      "!!x. (1::'a) + x \<cdot> x\<^sup>\<star> <= x\<^sup>\<star>"
    and
    "star_inductl'":
      "!!z x y. z + x \<cdot> y <= y ==> x\<^sup>\<star> \<cdot> z <= y"
    and
    "star_inductr'":
      "!!z y x. z + y \<cdot> x <= y ==> z \<cdot> x\<^sup>\<star> <= y"
### theory "Draft.Action_Algebra"
### 2.590s elapsed time, 2.736s cpu time, 0.180s GC time
Loading theory "Draft.Action_AlgebraTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Action_AlgebraTemplates"
### 0.384s elapsed time, 0.560s cpu time, 0.053s GC time
val it = (): unit
