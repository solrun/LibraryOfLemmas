Loading theory "Draft.Transfer_Ext" (required by "Draft.Transfer_ExtTemplates")
Loading theory "HOL-Library.Stream" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Transfer_Ext"
### 0.117s elapsed time, 0.480s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.540s cpu time, 0.057s GC time
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.758s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.796s elapsed time, 2.539s cpu time, 0.264s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.689s elapsed time, 1.986s cpu time, 0.207s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.704s elapsed time, 3.562s cpu time, 0.719s GC time
Loading theory "Draft.Templates" (required by "Draft.Transfer_ExtTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.083s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Transfer_ExtTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 0.572s cpu time, 0.060s GC time
Loading theory "Draft.Transfer_ExtTemplates"
val templateLemmas =
   [("Transfer_Ext.Domainp_applyI",
     "[| rel_fun ?A ?B ?f ?g; ?A ?x ?y |] ==> Domainp ?B (?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 5, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app (template_var 3, template_var 1))
           ))),
    ("Transfer_Ext.Domainp_fun",
     "left_unique ?A ==>
      Domainp (rel_fun ?A ?B) =
      (%f. f ` Collect (Domainp ?A) <= Collect (Domainp ?B))",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         t_empty))),
    ("Transfer_Ext.bi_unique_intersect",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b' |]
      ==> rel_set ?T (?a Int ?b) (?a' Int ?b')",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transfer_Ext.bi_unique_union",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b' |]
      ==> rel_set ?T (?a Un ?b) (?a' Un ?b')",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Transfer_Ext.Bex_fun_transfer",
     "[| bi_unique ?A; right_total ?B |]
      ==> rel_fun (rel_fun (rel_fun ?A ?B) (=)) (=)
           (Bex {f. f ` Collect (Domainp ?A) <= Collect (Domainp ?B)}) Ex",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_var 0)),
                     template_hole 9)),
                 template_hole 9),
               template_app
                (template_hole 8, template_app (template_hole 7, t_empty))),
             template_hole 0)
           ))),
    ("Transfer_Ext.bi_unique_intersect_l",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b';
         rel_set ?T ?xl (?a' Int ?b') |]
      ==> ?a Int ?b = ?xl",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Transfer_Ext.bi_unique_union_l",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b';
         rel_set ?T ?xl (?a' Un ?b') |]
      ==> ?a Un ?b = ?xl",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Transfer_Ext.bi_unique_intersect_r",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b';
         rel_set ?T (?a Int ?b) ?xr |]
      ==> ?a' Int ?b' = ?xr",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Transfer_Ext.bi_unique_union_r",
     "[| bi_unique ?T; rel_set ?T ?a ?a'; rel_set ?T ?b ?b';
         rel_set ?T (?a Un ?b) ?xr |]
      ==> ?a' Un ?b' = ?xr",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Transfer_Ext.bi_unique_Union_r",
     "[| bi_unique ?T; \<Union> ?K <= Collect (Domainp ?T);
         rel_set ?T (\<Union> ?K) ?xr |]
      ==> \<Union> ({(x, y). rel_set ?T x y} `` ?K) = ?xr",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1, template_app (template_hole 0, t_empty))),
             template_var 1)),
         template_var 0))),
    ("Transfer_Ext.bi_unique_Union_l",
     "[| bi_unique ?T; \<Union> ?K' <= Collect (Rangep ?T);
         rel_set ?T ?xl (\<Union> ?K') |]
      ==> \<Union> ({(x, y). rel_set (%y x. ?T x y) x y} `` ?K') = ?xl",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2, template_app (template_hole 1, t_empty))),
             template_var 1)),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Transfer_ExtTemplates"
### 0.277s elapsed time, 0.374s cpu time, 0.000s GC time
val it = (): unit
