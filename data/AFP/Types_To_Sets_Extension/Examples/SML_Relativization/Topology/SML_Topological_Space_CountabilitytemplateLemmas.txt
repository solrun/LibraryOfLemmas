   [("SML_Topological_Space_Countability.first_countable_topology_transfer",
     "[| bi_unique ?A; right_total ?A |]
      ==> rel_fun (rel_fun (rel_set ?A) (=)) (=)
           (first_countable_topology_ow (Collect (Domainp ?A)))
           class.first_countable_topology",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 0)),
                     template_hole 4)),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("SML_Topological_Space_Countability.second_countable_topology_transfer",
     "[| bi_unique ?A; right_total ?A |]
      ==> rel_fun (rel_fun (rel_set ?A) (=)) (=)
           (second_countable_topology_ow (Collect (Domainp ?A)))
           class.second_countable_topology",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 0)),
                     template_hole 4)),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("SML_Topological_Space_Countability.countable_basis_transfer",
     "[| bi_unique ?A; right_total ?A |]
      ==> rel_fun (rel_fun (rel_set ?A) (=))
           (rel_fun (rel_set (rel_set ?A)) (=))
           (countable_basis_ow (Collect (Domainp ?A))) countable_basis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 0)),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 7, template_var 0))),
                   template_hole 6)),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("SML_Topological_Space_Countability.first_countable_topology_transfer_h",
     "(ALL i. ?B i <= Collect (Domainp ?A) & ?x : ?B i & ?\<tau> (?B i)) =
      (?B ` Collect top <= {Aa. Aa <= Collect (Domainp ?A)} &
       (ALL i. ?x : ?B i & ?\<tau> (?B i)))",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, t_empty))),
         template_app (template_hole 10, t_empty))))]
