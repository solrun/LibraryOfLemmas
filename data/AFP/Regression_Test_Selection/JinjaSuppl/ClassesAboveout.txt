Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "Draft.Subcls" via "JinjaDCI.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.155s elapsed time, 0.635s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.262s elapsed time, 1.067s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.311s elapsed time, 1.245s cpu time, 0.114s GC time
Loading theory "JinjaDCI.Auxiliary" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "Draft.ClassesChanged" via "JinjaDCI.Decl" via "JinjaDCI.Type")
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.313s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "JinjaDCI.Auxiliary"
### 0.122s elapsed time, 0.483s cpu time, 0.000s GC time
Loading theory "JinjaDCI.Type" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "Draft.ClassesChanged" via "JinjaDCI.Decl")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.762s cpu time, 0.772s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.058s elapsed time, 3.913s cpu time, 0.772s GC time
### theory "JinjaDCI.Type"
### 0.967s elapsed time, 3.552s cpu time, 0.772s GC time
Loading theory "JinjaDCI.Decl" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "Draft.ClassesChanged")
Found termination order: "size <*mlex*> {}"
### theory "JinjaDCI.Decl"
### 0.076s elapsed time, 0.152s cpu time, 0.000s GC time
Loading theory "Draft.ClassesChanged" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove")
Loading theory "JinjaDCI.TypeRel" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "Draft.Subcls")
Found termination order: "size <*mlex*> {}"
### theory "Draft.ClassesChanged"
### 0.119s elapsed time, 0.370s cpu time, 0.069s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "JinjaDCI.TypeRel"
### 0.672s elapsed time, 1.526s cpu time, 0.194s GC time
Loading theory "Draft.Subcls" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove")
Loading theory "JinjaDCI.Value" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "JinjaDCI.Exceptions" via "JinjaDCI.Objects")
### theory "HOL-Library.Tree"
### 2.072s elapsed time, 6.560s cpu time, 1.092s GC time
Loading theory "Draft.Templates" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Subcls"
### 0.068s elapsed time, 0.209s cpu time, 0.055s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ClassesAboveMoreTemplates")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "JinjaDCI.Value"
### 0.382s elapsed time, 0.878s cpu time, 0.102s GC time
Loading theory "JinjaDCI.Objects" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove" via "JinjaDCI.Exceptions")
consts
  typeof_h :: "heap => val => ty option"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.141s cpu time, 0.104s GC time
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "JinjaDCI.Objects"
### 0.448s elapsed time, 0.765s cpu time, 0.056s GC time
Loading theory "JinjaDCI.Exceptions" (required by "Draft.ClassesAboveMoreTemplates" via "Draft.ClassesAbove")
### theory "JinjaDCI.Exceptions"
### 0.135s elapsed time, 0.164s cpu time, 0.040s GC time
Loading theory "Draft.ClassesAbove" (required by "Draft.ClassesAboveMoreTemplates")
### theory "Draft.ClassesAbove"
### 0.280s elapsed time, 0.280s cpu time, 0.000s GC time
Loading theory "Draft.ClassesAboveMoreTemplates"
val templateLemmas =
   [("ClassesAbove.classes_above_sblank",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      sblank ?P ?C = sblank ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ClassesAbove.classes_above_fields",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      fields ?P ?C = fields ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ClassesAbove.classes_above_ifields",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      ifields ?P ?C = ifields ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ClassesAbove.classes_above_isfields",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      isfields ?P ?C = isfields ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ClassesAbove.classes_above_blank",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      blank ?P ?C = blank ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ClassesAbove.classes_above_field",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      field ?P ?C ?F = field ?P' ?C ?F",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0)))),
    ("ClassesAbove.classes_above_method",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      method ?P ?C ?M = method ?P' ?C ?M",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0)))),
    ("ClassesAbove.classes_above_start_heap",
     "classes_above_xcpts ?P Int classes_changed ?P ?P' = {} ==>
      start_heap ?P = start_heap ?P'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, t_empty),
                  template_hole 4))),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_hole 2)],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ClassesAbove.classes_above_has_fields",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C has_fields ?FDTs |]
      ==> ?P' \<turnstile> ?C has_fields ?FDTs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_sees_methods",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C sees_methods ?Mm |]
      ==> ?P' \<turnstile> ?C sees_methods ?Mm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_subcls_subset",
     "?P \<turnstile> ?C \<preceq>\<^sup>* ?C' ==>
      classes_above ?P ?C' <= classes_above ?P ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("ClassesAbove.classes_above_classes_changed_sym",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      classes_above ?P' ?C Int classes_changed ?P' ?P = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7, template_app (template_hole 6, t_empty)),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("ClassesAbove.classes_above_has_fields_dne",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      (ALL FDTs. ~ ?P \<turnstile> ?C has_fields FDTs) =
      (ALL FDTs. ~ ?P' \<turnstile> ?C has_fields FDTs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11, template_app (template_hole 10, t_empty)),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_hole 4)],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("ClassesAbove.classes_above_class",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C \<preceq>\<^sup>* ?C' |]
      ==> class ?P ?C' = class ?P' ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9, template_app (template_hole 8, t_empty)),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ClassesAbove.classes_above_subcls",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C \<preceq>\<^sup>* ?C' |]
      ==> ?P' \<turnstile> ?C \<preceq>\<^sup>* ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7, template_app (template_hole 6, t_empty)),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_hole 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))
           ))),
    ("ClassesAbove.classes_above_subcls2",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P' \<turnstile> ?C \<preceq>\<^sup>* ?C' |]
      ==> ?P \<turnstile> ?C \<preceq>\<^sup>* ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7, template_app (template_hole 6, t_empty)),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_hole 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)))
           ))),
    ("ClassesAbove.classes_above_has_field",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C has ?F,?b:?t in ?C' |]
      ==> ?P' \<turnstile> ?C has ?F,?b:?t in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 5),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_has_field2",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P' \<turnstile> ?C has ?F,?b:?t in ?C' |]
      ==> ?P \<turnstile> ?C has ?F,?b:?t in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_sees_field",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C sees ?F,?b:?t in ?C' |]
      ==> ?P' \<turnstile> ?C sees ?F,?b:?t in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 5),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_sees_field2",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P' \<turnstile> ?C sees ?F,?b:?t in ?C' |]
      ==> ?P \<turnstile> ?C sees ?F,?b:?t in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 4),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_set",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      classes_above ?P ?C = classes_above ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7, template_app (template_hole 6, t_empty)),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 6, t_empty)))),
    ("ClassesAbove.classes_above_subset",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      classes_above ?P ?C <= classes_above ?P' ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 7, t_empty),
         template_app (template_hole 7, t_empty)))),
    ("ClassesAbove.classes_above_subset2",
     "classes_above ?P ?C Int classes_changed ?P ?P' = {} ==>
      classes_above ?P' ?C <= classes_above ?P ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_hole 1)],
       template_inequation
        (less_equals, template_app (template_hole 7, t_empty),
         template_app (template_hole 7, t_empty)))),
    ("ClassesAbove.classes_above_sees_method",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?C' |]
      ==> ?P' \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 6)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 0, template_var 7),
                          template_var 8),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 8),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_sees_method2",
     "[| classes_above ?P ?C Int classes_changed ?P ?P' = {};
         ?P' \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?C' |]
      ==> ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 6)),
          template_hole 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 0, template_var 6),
                          template_var 8),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 8),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("ClassesAbove.classes_above_sub_classes_between_eq",
     "?P \<turnstile> ?C \<preceq>\<^sup>* ?D ==>
      classes_above ?P ?C =
      classes_between ?P ?C ?D - {?D} Un classes_above ?P ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 5, t_empty)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_app (template_hole 5, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.ClassesAboveMoreTemplates"
### 0.359s elapsed time, 0.477s cpu time, 0.055s GC time
val it = (): unit
