Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.SubclsMoreTemplates" via "Draft.Subcls" via "JinjaDCI.TypeRel")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "rtrancl_path"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.544s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.857s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.315s elapsed time, 1.262s cpu time, 0.116s GC time
Loading theory "JinjaDCI.Auxiliary" (required by "Draft.SubclsMoreTemplates" via "Draft.Subcls" via "JinjaDCI.TypeRel" via "JinjaDCI.Decl" via "JinjaDCI.Type")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.302s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### theory "JinjaDCI.Auxiliary"
### 0.125s elapsed time, 0.497s cpu time, 0.000s GC time
Loading theory "JinjaDCI.Type" (required by "Draft.SubclsMoreTemplates" via "Draft.Subcls" via "JinjaDCI.TypeRel" via "JinjaDCI.Decl")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.853s cpu time, 0.848s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "JinjaDCI.Type"
### 0.912s elapsed time, 3.321s cpu time, 0.778s GC time
Loading theory "JinjaDCI.Decl" (required by "Draft.SubclsMoreTemplates" via "Draft.Subcls" via "JinjaDCI.TypeRel")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 3.958s cpu time, 0.778s GC time
### theory "JinjaDCI.Decl"
### 0.080s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "JinjaDCI.TypeRel" (required by "Draft.SubclsMoreTemplates" via "Draft.Subcls")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "JinjaDCI.TypeRel"
### 0.619s elapsed time, 1.300s cpu time, 0.122s GC time
Loading theory "Draft.Subcls" (required by "Draft.SubclsMoreTemplates")
### theory "HOL-Library.Tree"
### 1.993s elapsed time, 6.252s cpu time, 1.043s GC time
Loading theory "Draft.Templates" (required by "Draft.SubclsMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Subcls"
### 0.044s elapsed time, 0.088s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.125s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SubclsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.468s elapsed time, 0.473s cpu time, 0.000s GC time
Loading theory "Draft.SubclsMoreTemplates"
val templateLemmas =
   [("Subcls.subcls1_single_valued", "single_valued (subcls1 ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Subcls.subcls_self_superclass",
     "[| ?P \<turnstile> ?C \<prec>\<^sup>1 ?C;
         ?P \<turnstile> ?C \<preceq>\<^sup>* ?D |]
      ==> ?D = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 1)))
            )],
       template_equation (template_var 0, template_var 2))),
    ("Subcls.class_subcls1",
     "[| class ?P ?y = class ?P' ?y;
         ?P \<turnstile> ?y \<prec>\<^sup>1 ?z |]
      ==> ?P' \<turnstile> ?y \<prec>\<^sup>1 ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Subcls.subcls_of_Obj",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* Object;
         ?P \<turnstile> ?C \<preceq>\<^sup>* ?D |]
      ==> ?P \<turnstile> ?D \<preceq>\<^sup>* Object",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Subcls.subcls1_confluent",
     "[| ?P \<turnstile> ?a \<prec>\<^sup>1 ?b;
         ?P \<turnstile> ?a \<preceq>\<^sup>* ?c; ?a ~= ?c |]
      ==> ?P \<turnstile> ?b \<preceq>\<^sup>* ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 1)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 1)))
           ))),
    ("Subcls.subcls_class_ex",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* ?C'; ?C ~= ?C' |]
      ==> EX D' fs ms. class ?P ?C = \<lfloor>(D', fs, ms)\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Subcls.subcls_of_Obj_acyclic",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* Object; ?C ~= ?D |]
      ==> ~ (?P \<turnstile> ?C \<preceq>\<^sup>* ?D &
             ?P \<turnstile> ?D \<preceq>\<^sup>* ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 5)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0)),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1))))
               )
           ))),
    ("Subcls.subcls_confluent",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* ?C';
         ?P \<turnstile> ?C \<preceq>\<^sup>* ?C'' |]
      ==> ?P \<turnstile> ?C' \<preceq>\<^sup>* ?C'' |
          ?P \<turnstile> ?C'' \<preceq>\<^sup>* ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))))
           )))]:
   (string * thm * template) list
### theory "Draft.SubclsMoreTemplates"
### 0.333s elapsed time, 0.456s cpu time, 0.051s GC time
val it = (): unit
