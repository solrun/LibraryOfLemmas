Loading theory "Draft.RTS_safe" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.CollectionBasedRTS")
Loading theory "Draft.Semantics" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.CollectionBasedRTS" via "Draft.CollectionSemantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale Semantics
  fixes small :: "'prog => 'state => 'state set"
    and endset :: "'state set"
  assumes "Semantics small endset"
locale Semantics
  fixes small :: "'prog => 'state => 'state set"
    and endset :: "'state set"
  assumes "Semantics small endset"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale RTS_safe
  fixes out :: "'prog => 'test => 'prog_out set"
    and equiv_out :: "'prog_out => 'prog_out => bool"
    and deselect :: "'prog => 'prog_out => 'prog => bool"
    and progs :: "'prog set"
    and tests :: "'test set"
  assumes "RTS_safe out equiv_out deselect progs tests"
locale RTS_safe
  fixes out :: "'prog => 'test => 'prog_out set"
    and equiv_out :: "'prog_out => 'prog_out => bool"
    and deselect :: "'prog => 'prog_out => 'prog => bool"
    and progs :: "'prog set"
    and tests :: "'test set"
  assumes "RTS_safe out equiv_out deselect progs tests"
consts
  small_nstep :: "'prog => 'state => nat => 'state set"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.RTS_safe"
### 0.063s elapsed time, 0.287s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.Semantics"
### 0.115s elapsed time, 0.475s cpu time, 0.042s GC time
Loading theory "Draft.CollectionSemantics" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.CollectionBasedRTS")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.535s cpu time, 0.042s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects" via "JinjaDCI.TypeRel")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Proofs for inductive predicate(s) "rtrancl_path"
locale CollectionSemantics
  fixes small :: "'prog => 'state => 'state set"
    and endset :: "'state set"
    and collect :: "'prog => 'state => 'state => 'coll"
    and combine :: "'coll => 'coll => 'coll"
    and collect_id :: "'coll"
  assumes "CollectionSemantics small endset combine collect_id"
locale CollectionSemantics
  fixes small :: "'prog => 'state => 'state set"
    and endset :: "'state set"
    and collect :: "'prog => 'state => 'state => 'coll"
    and combine :: "'coll => 'coll => 'coll"
    and collect_id :: "'coll"
  assumes "CollectionSemantics small endset combine collect_id"
  Proving monotonicity ...
consts
  csmall_nstep :: "'prog => 'state => nat => ('state * 'coll) set"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.927s cpu time, 0.111s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CollectionSemantics"
### 0.203s elapsed time, 0.795s cpu time, 0.069s GC time
Loading theory "Draft.CollectionBasedRTS" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS")
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.350s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.270s elapsed time, 1.069s cpu time, 0.069s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
locale CollectionBasedRTS_base
  fixes out :: "'a => 'b => 'c set"
    and equiv_out :: "'c => 'c => bool"
    and deselect :: "'a => 'c => 'a => bool"
    and progs :: "'a set"
    and tests :: "'b set"
    and small :: "'d => 'e => 'e set"
    and endset :: "'e set"
    and collect :: "'d => 'e => 'e => 'f"
    and combine :: "'f => 'f => 'f"
    and collect_id :: "'f"
  assumes
    "CollectionBasedRTS_base out equiv_out deselect progs tests small endset
      combine collect_id"
locale CollectionBasedRTS
  fixes equiv_out :: "'state * 'coll => 'state * 'coll => bool"
    and deselect :: "'prog => 'state * 'coll => 'prog => bool"
    and progs :: "'prog set"
    and tests :: "'test set"
    and endset :: "'state set"
    and combine :: "'coll => 'coll => 'coll"
    and collect_id :: "'coll"
    and small :: "'prog => 'state => 'state set"
    and collect :: "'prog => 'state => 'state => 'coll"
    and out :: "'prog => 'test => ('state * 'coll) set"
    and make_test_prog :: "'prog => 'test => 'prog"
    and collect_start :: "'prog => 'coll"
  assumes
    "CollectionBasedRTS equiv_out deselect progs tests endset combine
      collect_id small collect out make_test_prog collect_start"
locale CollectionBasedRTS
  fixes equiv_out :: "'state * 'coll => 'state * 'coll => bool"
    and deselect :: "'prog => 'state * 'coll => 'prog => bool"
    and progs :: "'prog set"
    and tests :: "'test set"
    and endset :: "'state set"
    and combine :: "'coll => 'coll => 'coll"
    and collect_id :: "'coll"
    and small :: "'prog => 'state => 'state set"
    and collect :: "'prog => 'state => 'state => 'coll"
    and out :: "'prog => 'test => ('state * 'coll) set"
    and make_test_prog :: "'prog => 'test => 'prog"
    and collect_start :: "'prog => 'coll"
  assumes
    "CollectionBasedRTS equiv_out deselect progs tests endset combine
      collect_id small collect out make_test_prog collect_start"
### theory "Draft.CollectionBasedRTS"
### 0.189s elapsed time, 0.745s cpu time, 0.070s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.427s elapsed time, 1.683s cpu time, 0.203s GC time
Loading theory "Jinja.Semilat" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Jinja.Semilat"
### 0.483s elapsed time, 1.757s cpu time, 0.644s GC time
Loading theory "Jinja.Err" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.083s elapsed time, 4.123s cpu time, 0.892s GC time
Loading theory "JinjaDCI.Auxiliary" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects" via "JinjaDCI.TypeRel" via "JinjaDCI.Decl" via "JinjaDCI.Type")
Found termination order: "size <*mlex*> {}"
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.069s elapsed time, 4.067s cpu time, 0.901s GC time
### theory "JinjaDCI.Auxiliary"
### 0.180s elapsed time, 0.700s cpu time, 0.078s GC time
Loading theory "JinjaDCI.Type" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects" via "JinjaDCI.TypeRel" via "JinjaDCI.Decl")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
Found termination order: "size <*mlex*> {}"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Err"
### 0.637s elapsed time, 2.173s cpu time, 0.190s GC time
Loading theory "Jinja.Listn" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jinja.Opt"
### 0.108s elapsed time, 0.432s cpu time, 0.000s GC time
Loading theory "Jinja.Product" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.125s elapsed time, 0.496s cpu time, 0.080s GC time
Found termination order: "size <*mlex*> {}"
### theory "JinjaDCI.Type"
### 0.723s elapsed time, 2.435s cpu time, 0.291s GC time
Loading theory "JinjaDCI.Decl" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects" via "JinjaDCI.TypeRel")
### theory "Jinja.Listn"
### 0.353s elapsed time, 1.286s cpu time, 0.137s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType")
### theory "JinjaDCI.Decl"
### 0.066s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.ClassesChanged" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.ClassesAbove")
Loading theory "JinjaDCI.TypeRel" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects")
### theory "Draft.ClassesChanged"
### 0.091s elapsed time, 0.353s cpu time, 0.059s GC time
### theory "HOL-Library.Tree"
### 2.189s elapsed time, 7.972s cpu time, 1.320s GC time
Loading theory "Draft.Templates" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JVMCollectionBasedRTSMoreTemplates")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "Jinja.Semilattices"
### 0.297s elapsed time, 1.007s cpu time, 0.113s GC time
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
### theory "JinjaDCI.TypeRel"
### 0.669s elapsed time, 1.717s cpu time, 0.179s GC time
Loading theory "Draft.Subcls" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.ClassesAbove")
Loading theory "JinjaDCI.Value" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState" via "JinjaDCI.Objects")
### theory "Draft.Subcls"
### 0.042s elapsed time, 0.129s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.607s elapsed time, 1.410s cpu time, 0.184s GC time
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "JinjaDCI.Value"
### 0.339s elapsed time, 0.513s cpu time, 0.064s GC time
Loading theory "JinjaDCI.Objects" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions" via "JinjaDCI.JVMState")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "JinjaDCI.Objects"
### 0.396s elapsed time, 0.429s cpu time, 0.046s GC time
Loading theory "JinjaDCI.Exceptions" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMExceptions")
Loading theory "JinjaDCI.JVMState" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr" via "JinjaDCI.JVMInstructions")
### theory "JinjaDCI.Exceptions"
### 0.138s elapsed time, 0.276s cpu time, 0.000s GC time
Loading theory "Draft.ClassesAbove" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics")
Loading theory "JinjaDCI.Conform" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform")
Loading theory "JinjaDCI.SystemClasses" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType" via "JinjaDCI.WellForm")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "JinjaDCI.SystemClasses"
### 0.077s elapsed time, 0.297s cpu time, 0.051s GC time
Loading theory "JinjaDCI.WellForm" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType" via "JinjaDCI.SemiType")
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "JinjaDCI.Conform"
### 0.221s elapsed time, 0.864s cpu time, 0.115s GC time
### theory "JinjaDCI.WellForm"
### 0.274s elapsed time, 0.966s cpu time, 0.120s GC time
Loading theory "JinjaDCI.SemiType" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect" via "JinjaDCI.JVM_SemiType")
### theory "Draft.ClassesAbove"
### 0.434s elapsed time, 1.528s cpu time, 0.251s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
Found termination order: "{}"
### theory "JinjaDCI.SemiType"
### 0.597s elapsed time, 1.781s cpu time, 1.233s GC time
Loading theory "JinjaDCI.JVM_SemiType" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec" via "JinjaDCI.Effect")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "JinjaDCI.JVMState"
### 1.238s elapsed time, 3.644s cpu time, 1.433s GC time
Loading theory "JinjaDCI.JVMInstructions" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr")
### theory "JinjaDCI.JVM_SemiType"
### 0.238s elapsed time, 0.495s cpu time, 0.030s GC time
### theory "JinjaDCI.JVMInstructions"
### 1.426s elapsed time, 1.670s cpu time, 0.198s GC time
Loading theory "JinjaDCI.JVMExceptions" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec" via "JinjaDCI.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "JinjaDCI.JVMExceptions"
### 1.038s elapsed time, 1.909s cpu time, 1.189s GC time
Loading theory "JinjaDCI.JVMExecInstr" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics" via "JinjaDCI.JVMExec")
Loading theory "JinjaDCI.Effect" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform" via "JinjaDCI.BVSpec")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "JinjaDCI.JVMExecInstr"
### 0.863s elapsed time, 1.827s cpu time, 0.155s GC time
Loading theory "JinjaDCI.JVMExec" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics" via "Draft.JVMSemantics")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "JinjaDCI.JVMExec"
### 1.828s elapsed time, 4.375s cpu time, 0.381s GC time
Loading theory "Draft.JVMExecStepInductive" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS")
Loading theory "Draft.JVMSemantics" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "Draft.JVMCollectionSemantics")
Found termination order: "{}"
### theory "Draft.JVMSemantics"
### 0.399s elapsed time, 1.237s cpu time, 0.195s GC time
Loading theory "Draft.JVMCollectionSemantics" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (snd p)) <*mlex*>
   {}"
Proofs for inductive predicate(s) "exec_step_ind"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMCollectionSemantics"
### 4.840s elapsed time, 19.295s cpu time, 1.068s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "JinjaDCI.Effect"
### 9.740s elapsed time, 32.219s cpu time, 2.190s GC time
Loading theory "JinjaDCI.BVSpec" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.BVConform")
### theory "JinjaDCI.BVSpec"
### 0.124s elapsed time, 0.377s cpu time, 0.048s GC time
Loading theory "JinjaDCI.BVConform" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe")
Found termination order: "{}"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "JinjaDCI.BVConform"
### 2.293s elapsed time, 7.053s cpu time, 0.384s GC time
Loading theory "JinjaDCI.ClassAdd" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe" via "JinjaDCI.StartProg")
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###     ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###     ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "JinjaDCI.ClassAdd"
### 0.450s elapsed time, 1.363s cpu time, 0.093s GC time
Loading theory "JinjaDCI.StartProg" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS" via "JinjaDCI.BVSpecTypeSafe")
Found termination order: "{}"
### theory "JinjaDCI.StartProg"
### 0.217s elapsed time, 0.501s cpu time, 0.053s GC time
Loading theory "JinjaDCI.BVSpecTypeSafe" (required by "Draft.JVMCollectionBasedRTSMoreTemplates" via "Draft.JVMCollectionBasedRTS")
### Ambiguous input (line 78 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 626 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 753 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 757 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 809 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 887 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1016 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1019 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1104 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1153 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1375 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1392 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1424 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 1447 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1450 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1521 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1525 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1584 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1588 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1633 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1711 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1715 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1786 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1790 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1827 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1842 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1845 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1901 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1904 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1949 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1982 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1998 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2015 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2031 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2054 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2055 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2204 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2209 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2243 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2288 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2330 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "JinjaDCI.BVSpecTypeSafe"
### 0.912s elapsed time, 1.931s cpu time, 0.249s GC time
Found termination order: "{}"
### theory "Draft.JVMExecStepInductive"
### 11.398s elapsed time, 37.633s cpu time, 2.483s GC time
Loading theory "Draft.JVMCollectionBasedRTS" (required by "Draft.JVMCollectionBasedRTSMoreTemplates")
consts
  jvm_deselect ::
    "jvm_prog => jvm_state * char list set => jvm_prog => bool"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 861 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 959 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1692 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1887 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1913 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" hd) ("_position" frs))
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" C) ("_position" fs))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Ex_binder" ("_position" a)
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs)))))))
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" classes_above)
###                     ("_cargs" ("_position" P) ("_position" C)))
###                   ("_position" cset)))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" C)
###                 ("_idts" ("_position" sfs) ("_position" i)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sh) ("_position" C))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" sfs)
###                         ("_tuple_arg" ("_position" i))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.subset_eq"
###                     ("_applC" ("_position" classes_above)
###                       ("_cargs" ("_position" P) ("_position" C)))
###                     ("_position" cset)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" classes_above_xcpts)
###                     ("_position" P))
###                   ("_position" cset)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.subset_eq"
###                     ("_applC" ("_position" classes_above_frames)
###                       ("_cargs" ("_position" P) ("_position" frs)))
###                     ("_position" cset)))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder" ("_position" C)
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.disj"
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_applC" ("_position" Called)
###                               ("\<^const>List.list.Nil")))
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_position" No_ics))))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" coll_init_class)
###                               ("_cargs" ("_position" P)
###                                 ("\<^const>List.nth"
###                                   ("_applC" ("_position" instrs_of)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_position" M'))))
###                                   ("_position" pc))))
###                             ("_applC" ("_position" Some) ("_position" C))))
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.subset_eq"
###                             ("_applC" ("_position" classes_above)
###                               ("_cargs" ("_position" P) ("_position" C)))
###                             ("_position" cset))))))
###                   ("_asms"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" C') ("_position" Cs'))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_applC" ("_position" Calling)
###                               ("_cargs" ("_position" C')
###                                 ("_position" Cs')))))
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.subset_eq"
###                             ("_applC" ("_position" classes_above)
###                               ("_cargs" ("_position" P) ("_position" C')))
###                             ("_position" cset)))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" \<sigma>')
###                             ("_tuple_arg" ("_position" cset\<^sub>n)))
###                           ("_applC"
###                             ("_position"
###                               JVMNaiveCollectionSemantics.csmall_nstep)
###                             ("_cargs" ("_position" P)
###                               ("_cargs"
###                                 ("_tuple" ("_position" xp)
###                                   ("_tuple_args" ("_position" h)
###                                     ("_tuple_args" ("_position" frs)
### ("_tuple_arg" ("_position" sh)))))
###                                 ("_position" n))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" \<sigma>')
###                               ("_tuple_arg" ("_position" cset\<^sub>s)))
###                             ("_applC"
###                               ("_position"
###                                 JVMSmartCollectionSemantics.csmall_nstep)
###                               ("_cargs" ("_position" P)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" xp)
###                                     ("_tuple_args" ("_position" h)
### ("_tuple_args" ("_position" frs) ("_tuple_arg" ("_position" sh)))))
###                                   ("_position" n))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.subset_eq"
###                               ("_position" cset\<^sub>s)
###                               ("_position" cset)))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Set.member" ("_position" \<sigma>')
###                                 ("_position" JVMendset))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_position" cset\<^sub>n)
###       ("_position" cset))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" hd) ("_position" frs))
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" C) ("_position" fs))
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.Ex_binder" ("_position" a)
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" h) ("_position" a))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs)))))))
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" classes_above)
###                     ("_cargs" ("_position" P) ("_position" C)))
###                   ("_position" cset)))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" C)
###                 ("_idts" ("_position" sfs) ("_position" i)))
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sh) ("_position" C))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" sfs)
###                         ("_tuple_arg" ("_position" i))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.subset_eq"
###                     ("_applC" ("_position" classes_above)
###                       ("_cargs" ("_position" P) ("_position" C)))
###                     ("_position" cset)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.subset_eq"
###                   ("_applC" ("_position" classes_above_xcpts)
###                     ("_position" P))
###                   ("_position" cset)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.subset_eq"
###                     ("_applC" ("_position" classes_above_frames)
###                       ("_cargs" ("_position" P) ("_position" frs)))
###                     ("_position" cset)))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder" ("_position" C)
###                     ("\<^const>Pure.imp"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.disj"
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_applC" ("_position" Called)
###                               ("\<^const>List.list.Nil")))
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_position" No_ics))))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" coll_init_class)
###                               ("_cargs" ("_position" P)
###                                 ("\<^const>List.nth"
###                                   ("_applC" ("_position" instrs_of)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_position" M'))))
###                                   ("_position" pc))))
###                             ("_applC" ("_position" Some) ("_position" C))))
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.subset_eq"
###                             ("_applC" ("_position" classes_above)
###                               ("_cargs" ("_position" P) ("_position" C)))
###                             ("_position" cset))))))
###                   ("_asms"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" C') ("_position" Cs'))
###                       ("\<^const>Pure.imp"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ics)
###                             ("_applC" ("_position" Calling)
###                               ("_cargs" ("_position" C')
###                                 ("_position" Cs')))))
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.subset_eq"
###                             ("_applC" ("_position" classes_above)
###                               ("_cargs" ("_position" P) ("_position" C')))
###                             ("_position" cset)))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" \<sigma>')
###                             ("_tuple_arg" ("_position" cset\<^sub>n)))
###                           ("_applC"
###                             ("_position"
###                               JVMNaiveCollectionSemantics.csmall_nstep)
###                             ("_cargs" ("_position" P)
###                               ("_cargs"
###                                 ("_tuple" ("_position" xp)
###                                   ("_tuple_args" ("_position" h)
###                                     ("_tuple_args" ("_position" frs)
### ("_tuple_arg" ("_position" sh)))))
###                                 ("_position" n))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" \<sigma>')
###                               ("_tuple_arg" ("_position" cset\<^sub>s)))
###                             ("_applC"
###                               ("_position"
###                                 JVMSmartCollectionSemantics.csmall_nstep)
###                               ("_cargs" ("_position" P)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" xp)
###                                     ("_tuple_args" ("_position" h)
### ("_tuple_args" ("_position" frs) ("_tuple_arg" ("_position" sh)))))
###                                   ("_position" n))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.subset_eq"
###                               ("_position" cset\<^sub>s)
###                               ("_position" cset)))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Set.member" ("_position" \<sigma>')
###                                 ("_position" JVMendset))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_position" cset\<^sub>n)
###       ("_position" cset))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2092 of "$AFP/Regression_Test_Selection/JVM_RTS/JVMCollectionBasedRTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args" ("_position" frs)
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMCollectionBasedRTS"
### 2.521s elapsed time, 3.307s cpu time, 0.497s GC time
Loading theory "Draft.JVMCollectionBasedRTSMoreTemplates"
val templateLemmas =
   [("JVMCollectionBasedRTS.jvm_smart_to_naive_exec_collect",
     "JVMexec_scollect ?P ?\<sigma> <= JVMexec_ncollect ?P ?\<sigma>",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("JVMCollectionBasedRTS.jvm_progs_tests_nStart",
     "[| ?P : jvm_progs; ?t : jvm_tests |]
      ==> ~ is_class (class_add ?P ?t) Start",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_hole 0)
               )
           ))),
    ("JVMCollectionBasedRTS.ncollect_JVMexec_ncollect",
     "JVMexec_ncollect ?P ?\<sigma> Int classes_changed ?P ?P' =
      JVMcollect_id ==>
      JVMexec_ncollect ?P ?\<sigma> = JVMexec_ncollect ?P' ?\<sigma>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("JVMCollectionBasedRTS.start_prog_classes_above_Start",
     "classes_above (class_add ?P (start_class ?C ?M)) Start =
      insert Object (insert Start JVMcollect_id)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 2, template_hole 7),
           template_hole 0)))),
    ("JVMCollectionBasedRTS.jvm_naive_iff_smart",
     "(EX cset\<^sub>n. (?\<sigma>', cset\<^sub>n) : jvm_naive_out ?P ?t) =
      (EX cset\<^sub>s. (?\<sigma>', cset\<^sub>s) : jvm_smart_out ?P ?t)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("JVMCollectionBasedRTS.is_ptrD",
     "is_ptr ?h ?v ==>
      ?v = Null |
      (EX a. ?v = Addr a & (EX Cfs. ?h a = \<lfloor>Cfs\<rfloor>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 6)),
             template_app (template_hole 5, t_empty))
           ))),
    ("JVMCollectionBasedRTS.ncollect_JVMinstr_ncollect",
     "JVMinstr_ncollect ?P ?i ?h ?stk Int classes_changed ?P ?P' =
      JVMcollect_id ==>
      JVMinstr_ncollect ?P ?i ?h ?stk = JVMinstr_ncollect ?P' ?i ?h ?stk",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1)))),
    ("JVMCollectionBasedRTS.jvm_smart_out_classes_above_frames",
     "(?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t ==>
      classes_above_frames
       (class_add (class_add ?P ?t) (start_class (fst ?t) main))
       (frames_of (start_state (class_add ?P ?t)))
      <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 2)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1)))),
         template_var 2))),
    ("JVMCollectionBasedRTS.jvm_smart_to_naive_csmall",
     "[| (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.csmall ?P ?\<sigma>;
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.csmall ?P ?\<sigma> |]
      ==> ?cset\<^sub>s <= ?cset\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 1),
                  template_var 2),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("JVMCollectionBasedRTS.jvm_make_test_prog_sees_Test_main",
     "[| ?P : jvm_progs; ?t : jvm_tests |]
      ==> EX m. class_add (class_add ?P ?t)
                 (start_class (fst ?t)
                   main) \<turnstile> Test sees main, Static :  []\<rightarrow>Void = m in Test",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_hole 12)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("JVMCollectionBasedRTS.jvm_naive_out_xcpts_collected",
     "?o1.0 : jvm_naive_out ?P ?t ==>
      classes_above_xcpts
       (class_add (class_add ?P ?t) (start_class (fst ?t) main))
      <= snd ?o1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, t_empty), template_hole 1)),
         template_app (template_hole 0, template_var 2)))),
    ("JVMCollectionBasedRTS.jvm_naive_eq_smart_collection",
     "[| (?\<sigma>', ?cset\<^sub>n) : jvm_naive_out ?P ?t;
         (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t; ?P : jvm_progs;
         ?t : jvm_tests |]
      ==> ?cset\<^sub>n = ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_equation (template_var 3, template_var 0))),
    ("JVMCollectionBasedRTS.jvm_naive_to_smart_collection",
     "[| (?\<sigma>', ?cset\<^sub>n) : jvm_naive_out ?P ?t;
         (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t; ?P : jvm_progs;
         ?t : jvm_tests |]
      ==> ?cset\<^sub>n <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_inequation (less_equals, template_var 3, template_var 0))),
    ("JVMCollectionBasedRTS.jvm_smart_to_naive_collection",
     "[| (?\<sigma>', ?cset\<^sub>n) : jvm_naive_out ?P ?t;
         (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t; ?P : jvm_progs;
         ?t : jvm_tests |]
      ==> ?cset\<^sub>s <= ?cset\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("JVMCollectionBasedRTS.ncollect_JVMsmall",
     "[| (?\<sigma>', ?cset)
         : JVMNaiveCollectionSemantics.csmall ?P ?\<sigma>;
         ?cset Int classes_changed ?P ?P' = JVMcollect_id;
         preallocated (fst (snd ?\<sigma>)) |]
      ==> (?\<sigma>', ?cset)
          : JVMNaiveCollectionSemantics.csmall ?P' ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 7),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7),
                 template_var 0),
               template_var 1))
           ))),
    ("JVMCollectionBasedRTS.ncollect_classes_above_frames",
     "JVMexec_ncollect ?P
       (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh) Int
      classes_changed ?P ?P' =
      JVMcollect_id ==>
      classes_above_frames ?P ?frs = classes_above_frames ?P' ?frs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 10),
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_app
                   (template_app (template_hole 10, template_var 9),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_hole 7, template_var 8),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 7),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 6),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 5),
                                    template_app
                                     (template_app
 (template_hole 3, template_var 4),
template_var 3)))))),
                          template_var 2)),
                      template_var 1))))),
            template_app
             (template_app (template_hole 2, template_var 10),
              template_var 0)),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 10), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("JVMCollectionBasedRTS.jvm_naive_existence_safe",
     "[| ?P : jvm_progs; ?P' : jvm_progs; ?t : jvm_tests;
         ?o1.0 : jvm_naive_out ?P ?t; jvm_deselect ?P ?o1.0 ?P' |]
      ==> EX o2:jvm_naive_out ?P' ?t. ?o1.0 = o2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("JVMCollectionBasedRTS.jvm_smart_existence_safe",
     "[| ?P : jvm_progs; ?P' : jvm_progs; ?t : jvm_tests;
         ?o1.0 : jvm_smart_out ?P ?t; jvm_deselect ?P ?o1.0 ?P' |]
      ==> EX o2:jvm_smart_out ?P' ?t. ?o1.0 = o2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("JVMCollectionBasedRTS.jvm_smart_out_classes_above_Test",
     "[| (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t; ?P : jvm_progs;
         ?t : jvm_tests |]
      ==> classes_above
           (class_add (class_add ?P ?t) (start_class (fst ?t) main)) Test
          <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 15, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_hole 11)
            )],
       template_inequation
        (less_equals, template_app (template_hole 9, t_empty),
         template_var 2))),
    ("JVMCollectionBasedRTS.class_add_classes_above",
     "[| ~ is_class ?P ?C; (?D, ?C) ~: (subcls1 ?P)^* |]
      ==> classes_above (class_add ?P (?C, ?cdec)) ?D =
          classes_above ?P ?D",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 2)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("JVMCollectionBasedRTS.jvm_smart_to_naive_cbig",
     "[| (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.cbig ?P ?\<sigma>;
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma> |]
      ==> ?cset\<^sub>s <= ?cset\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_hole 5),
                        template_hole 4),
                      t_empty),
                    template_hole 2),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_hole 5),
                        template_hole 1),
                      t_empty),
                    template_hole 2),
                  template_var 2),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("JVMCollectionBasedRTS.jvm_smart_to_naive_csmall_nstep",
     "[| (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.csmall_nstep ?P ?\<sigma> ?n;
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.csmall_nstep ?P ?\<sigma> ?n |]
      ==> ?cset\<^sub>s <= ?cset\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_hole 4),
                        t_empty),
                      template_hole 2),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_hole 1),
                        t_empty),
                      template_hole 2),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 0, template_var 4))),
    ("JVMCollectionBasedRTS.jvm_smart_out_classes_above_xcpts",
     "[| (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t; ?P : jvm_progs;
         ?t : jvm_tests |]
      ==> classes_above_xcpts
           (class_add (class_add ?P ?t) (start_class (fst ?t) main))
          <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 17, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_hole 15)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), template_hole 0)),
         template_var 2))),
    ("JVMCollectionBasedRTS.jvm_make_test_prog_classes_above_xcpts",
     "[| ?P : jvm_progs; ?t : jvm_tests |]
      ==> classes_above_xcpts
           (class_add (class_add ?P ?t) (start_class (fst ?t) main)) =
          classes_above_xcpts ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_hole 15)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            )],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), template_hole 0)),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), template_hole 0))))),
    ("JVMCollectionBasedRTS.jvm_smart_out_classes_above_start_sheap",
     "[| (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t;
         [Start |-> (Map.empty, Done)] ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> classes_above
           (class_add (class_add ?P ?t) (start_class (fst ?t) main)) ?C
          <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 6),
                  template_var 5)),
              template_app
               (template_app (template_hole 18, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 16, t_empty), template_hole 14),
              template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, t_empty),
                  template_hole 10))),
            template_var 2),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_app (template_hole 8, t_empty),
         template_var 5))),
    ("JVMCollectionBasedRTS.well_formed_stack_safe",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> stack_safe (instrs_of ?P ?C ?M ! ?pc) ?h ?stk",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 10),
                template_var 11),
              template_app
               (template_app (template_hole 18, template_var 9),
                template_app
                 (template_app (template_hole 17, template_var 8),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app
                         (template_hole 15,
                          template_app
                           (template_app (template_hole 14, template_var 7),
                            template_app
                             (template_app
                               (template_hole 13, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 12, template_var 5),
                                template_app
                                 (template_app
                                   (template_hole 11, template_var 4),
                                  template_app
                                   (template_app
                                     (template_hole 10, template_var 3),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_app
(template_app (template_hole 0, template_var 10), template_var 5),
                                     template_var 4))))))))),
                   template_var 3)),
               template_var 8),
             template_var 7)
           ))),
    ("JVMCollectionBasedRTS.Calling_collects_base",
     "[| (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         ics_of (hd (frames_of ?\<sigma>)) = Calling Object ?Cs |]
      ==> classes_above ?P Object <= JVMcombine ?cset ?cset'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_hole 18),
                          template_hole 17),
                        template_hole 16),
                      t_empty),
                    template_hole 14),
                  template_var 3),
                template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_hole 17)
                )
            ),
        template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 15, template_var 0),
           template_var 4)))),
    ("JVMCollectionBasedRTS.ncollect_JVMbig",
     "[| (?\<sigma>', ?cset)
         : JVMNaiveCollectionSemantics.cbig ?P ?\<sigma>;
         ?cset Int classes_changed ?P ?P' = JVMcollect_id;
         preallocated (fst (snd ?\<sigma>)) |]
      ==> (?\<sigma>', ?cset)
          : JVMNaiveCollectionSemantics.cbig ?P' ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 11, template_hole 10),
                          template_hole 9),
                        template_hole 8),
                      t_empty),
                    template_hole 6),
                  template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_hole 9),
                       template_hole 8),
                     t_empty),
                   template_hole 6),
                 template_var 0),
               template_var 1))
           ))),
    ("JVMCollectionBasedRTS.jvm_smart_out_classes_above_start_heap",
     "[| (?\<sigma>', ?cset\<^sub>s) : jvm_smart_out ?P ?t;
         start_heap (class_add ?P ?t) ?a = \<lfloor>(?C, ?fs)\<rfloor>;
         ?P : jvm_progs; ?t : jvm_tests |]
      ==> classes_above
           (class_add (class_add ?P ?t) (start_class (fst ?t) main)) ?C
          <= ?cset\<^sub>s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 6),
                  template_var 5)),
              template_app
               (template_app (template_hole 18, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_var 4)),
            template_var 2),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            )],
       template_inequation
        (less_equals, template_app (template_hole 7, t_empty),
         template_var 5))),
    ("JVMCollectionBasedRTS.ncollect_JVMstep_ncollect",
     "[| JVMstep_ncollect ?P ?h ?stk ?C ?M ?pc ?ics Int
         classes_changed ?P ?P' =
         JVMcollect_id;
         classes_above ?P ?C Int classes_changed ?P ?P' = JVMcollect_id |]
      ==> JVMstep_ncollect ?P ?h ?stk ?C ?M ?pc ?ics =
          JVMstep_ncollect ?P' ?h ?stk ?C ?M ?pc ?ics",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 0)),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_hole 8, template_app (template_hole 4, t_empty)),
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 0)),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 0),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1)))),
    ("JVMCollectionBasedRTS.class_add_classes_above_xcpts",
     "[| ~ is_class ?P ?C;
         !!D. D : sys_xcpts ==> (D, ?C) ~: (subcls1 ?P)^* |]
      ==> classes_above_xcpts (class_add ?P (?C, ?cdec)) =
          classes_above_xcpts ?P",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 10)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 10))))),
    ("JVMCollectionBasedRTS.ncollect_classes_above_xcpts",
     "JVMexec_ncollect ?P
       (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh) Int
      classes_changed ?P ?P' =
      JVMcollect_id ==>
      classes_above_xcpts ?P = classes_above_xcpts ?P'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 20, template_var 10),
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_app
                   (template_app (template_hole 17, template_var 9),
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_app
                               (template_hole 14, template_var 8),
                              template_app
                               (template_app
                                 (template_hole 13, template_var 7),
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 6),
                                  template_app
                                   (template_app
                                     (template_hole 11, template_var 5),
                                    template_app
                                     (template_app
 (template_hole 10, template_var 4),
template_var 3)))))),
                          template_var 2)),
                      template_var 1))))),
            template_app
             (template_app (template_hole 9, template_var 10),
              template_var 0)),
          template_hole 8)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 0)),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_hole 0))))),
    ("JVMCollectionBasedRTS.jvm_smart_collect_start_make_test_prog",
     "[| ?P : jvm_progs; ?t : jvm_tests |]
      ==> JVMcombine
           (classes_above_xcpts
             (class_add (class_add ?P ?t) (start_class (fst ?t) main)))
           (insert Object (insert Start JVMcollect_id)) =
          JVMcombine (classes_above_xcpts ?P)
           (insert Object (insert Start JVMcollect_id))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_hole 20)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 0),
              template_hole 18)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, t_empty),
                 template_hole 4))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, t_empty),
                 template_hole 4))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0)))))),
    ("JVMCollectionBasedRTS.ncollect_exec_step",
     "[| JVMstep_ncollect ?P ?h ?stk ?C ?M ?pc ?ics Int
         classes_changed ?P ?P' =
         JVMcollect_id;
         classes_above ?P ?C Int classes_changed ?P ?P' = JVMcollect_id |]
      ==> exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh =
          exec_step ?P' ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, template_var 10),
                          template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4)),
            template_app
             (template_app (template_hole 8, template_var 10),
              template_var 3)),
          template_hole 7),
        template_equation
         (template_app
           (template_app
             (template_hole 10, template_app (template_hole 6, t_empty)),
            template_app
             (template_app (template_hole 8, template_var 10),
              template_var 3)),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 10),
                           template_var 9),
                         template_var 8),
                       template_var 2),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 9),
                         template_var 8),
                       template_var 2),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("JVMCollectionBasedRTS.JVM_New_next_step",
     "[| ?\<sigma>' : JVMsmall ?P ?\<sigma>; ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = New ?C;
         \<nexists>sfs i.
            sheap ?\<sigma> ?C = \<lfloor>(sfs, i)\<rfloor> & i = Done;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics |]
      ==> ics_of (hd (frames_of ?\<sigma>')) = Calling ?C [] &
          sheap ?\<sigma> = sheap ?\<sigma>' & ?\<sigma>' ~: JVMendset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 3),
              template_app
               (template_app (template_hole 24, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 25, template_var 1),
                  template_hole 22)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 2),
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 1))),
          template_app (template_hole 17, template_var 0)),
        template_negation
         (template_predicate (template_app (template_hole 16, t_empty))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 1))),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 19,
                       template_app (template_hole 18, template_var 3)))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 1)))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 3))))),
               template_app
                (template_hole 23,
                 template_app
                  (template_app (template_hole 25, template_var 3),
                   template_hole 22))))
           ))),
    ("JVMCollectionBasedRTS.ncollect_exec_step_xcpts",
     "[| JVMstep_ncollect ?P ?h ?stk ?C ?M ?pc ?ics Int
         classes_changed ?P ?P' =
         JVMcollect_id;
         classes_above_xcpts ?P Int classes_changed ?P ?P' = JVMcollect_id;
         preallocated ?h;
         ?\<sigma>' = exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh;
         fst ?\<sigma>' = \<lfloor>?a\<rfloor> |]
      ==> classes_above ?P (cname_of ?h ?a) Int classes_changed ?P ?P' =
          JVMcollect_id",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 18, template_var 12),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6)),
            template_app
             (template_app (template_hole 17, template_var 12),
              template_var 5)),
          template_hole 16),
        template_equation
         (template_app
           (template_app
             (template_hole 19,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, t_empty),
                  template_hole 8))),
            template_app
             (template_app (template_hole 17, template_var 12),
              template_var 5)),
          template_hole 16),
        template_predicate
         (template_app (template_hole 7, template_var 11)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 5, template_var 12),
                            template_var 11),
                          template_var 10),
                        template_var 3),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 4),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 19, template_app (template_hole 13, t_empty)),
           template_app
            (template_app (template_hole 17, template_var 12),
             template_var 5)),
         template_hole 16))),
    ("JVMCollectionBasedRTS.ncollect_exec_instr",
     "[| JVMinstr_ncollect ?P ?i ?h ?stk Int classes_changed ?P ?P' =
         JVMcollect_id;
         classes_above ?P ?C Int classes_changed ?P ?P' = JVMcollect_id;
         ?ics = Called [] | ?ics = No_ics; ?i = instrs_of ?P ?C ?M ! ?pc |]
      ==> exec_instr ?i ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh =
          exec_instr ?i ?P' ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 25,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 24, template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8)),
            template_app
             (template_app (template_hole 23, template_var 11),
              template_var 7)),
          template_hole 22),
        template_equation
         (template_app
           (template_app
             (template_hole 25, template_app (template_hole 21, t_empty)),
            template_app
             (template_app (template_hole 23, template_var 11),
              template_var 7)),
          template_hole 22),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_app (template_hole 14, template_hole 13))),
              template_app
               (template_app (template_hole 15, template_var 5),
                template_hole 12))
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 3,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 11),
                                template_var 6),
                              template_var 4))))))))),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 10),
                             template_var 11),
                           template_var 9),
                         template_var 8),
                       template_var 2),
                     template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 5),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 10),
                             template_var 7),
                           template_var 9),
                         template_var 8),
                       template_var 2),
                     template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 5),
             template_var 1),
           template_var 0)))),
    ("JVMCollectionBasedRTS.JVM_Getstatic_next_step",
     "[| ?\<sigma>' : JVMsmall ?P ?\<sigma>; ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Getstatic ?C ?F ?D;
         ?P \<turnstile> ?C has ?F,Static:?t in ?D;
         \<nexists>sfs i.
            sheap ?\<sigma> ?D = \<lfloor>(sfs, i)\<rfloor> & i = Done;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics |]
      ==> ics_of (hd (frames_of ?\<sigma>')) = Calling ?D [] &
          sheap ?\<sigma> = sheap ?\<sigma>' & ?\<sigma>' ~: JVMendset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 6),
              template_app
               (template_app (template_hole 26, template_var 5),
                template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 27, template_var 4),
                  template_hole 24)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 5),
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4))),
          template_app
           (template_app
             (template_app (template_hole 19, template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 18, template_var 5),
                      template_var 3),
                    template_var 2),
                  template_hole 17),
                template_var 0),
              template_var 1)
            ),
        template_negation
         (template_predicate (template_app (template_hole 16, t_empty))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4))),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, template_var 6)))),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 4)))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 6))))),
               template_app
                (template_hole 25,
                 template_app
                  (template_app (template_hole 27, template_var 6),
                   template_hole 24))))
           ))),
    ("JVMCollectionBasedRTS.JVM_Putstatic_next_step",
     "[| ?\<sigma>' : JVMsmall ?P ?\<sigma>; ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Putstatic ?C ?F ?D;
         ?P \<turnstile> ?C has ?F,Static:?t in ?D;
         \<nexists>sfs i.
            sheap ?\<sigma> ?D = \<lfloor>(sfs, i)\<rfloor> & i = Done;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics |]
      ==> ics_of (hd (frames_of ?\<sigma>')) = Calling ?D [] &
          sheap ?\<sigma> = sheap ?\<sigma>' & ?\<sigma>' ~: JVMendset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 6),
              template_app
               (template_app (template_hole 26, template_var 5),
                template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 27, template_var 4),
                  template_hole 24)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 5),
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4))),
          template_app
           (template_app
             (template_app (template_hole 19, template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 18, template_var 5),
                      template_var 3),
                    template_var 2),
                  template_hole 17),
                template_var 0),
              template_var 1)
            ),
        template_negation
         (template_predicate (template_app (template_hole 16, t_empty))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 4))),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, template_var 6)))),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 4)))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 6))))),
               template_app
                (template_hole 25,
                 template_app
                  (template_app (template_hole 27, template_var 6),
                   template_hole 24))))
           ))),
    ("JVMCollectionBasedRTS.JVM_Invokestatic_next_step",
     "[| ?\<sigma>' : JVMsmall ?P ?\<sigma>; ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Invokestatic ?C ?M ?n;
         ?P \<turnstile> ?C sees ?M, Static :  ?Ts\<rightarrow>?T = ?m in ?D;
         \<nexists>sfs i.
            sheap ?\<sigma> ?D = \<lfloor>(sfs, i)\<rfloor> & i = Done;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics |]
      ==> ics_of (hd (frames_of ?\<sigma>')) = Calling ?D [] &
          sheap ?\<sigma> = sheap ?\<sigma>' & ?\<sigma>' ~: JVMendset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 9),
              template_app
               (template_app (template_hole 26, template_var 8),
                template_var 7))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 27, template_var 7),
                  template_hole 24)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 8),
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 7))),
          template_app
           (template_app
             (template_app (template_hole 19, template_var 6),
              template_var 5),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 18, template_var 8),
                          template_var 6),
                        template_var 5),
                      template_hole 17),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_predicate (template_app (template_hole 16, t_empty))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 7))),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, template_var 9)))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 7)))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 9))))),
               template_app
                (template_hole 25,
                 template_app
                  (template_app (template_hole 27, template_var 9),
                   template_hole 24))))
           ))),
    ("JVMCollectionBasedRTS.ncollect_exec_instr_xcpts",
     "[| JVMinstr_ncollect ?P ?i ?h ?stk Int classes_changed ?P ?P' =
         JVMcollect_id;
         classes_above_xcpts ?P Int classes_changed ?P ?P' = JVMcollect_id;
         preallocated ?h;
         ?\<sigma>' =
         exec_instr ?i ?P ?h ?stk ?loc ?C ?M ?pc ?ics' ?frs ?sh;
         fst ?\<sigma>' = \<lfloor>?a\<rfloor>;
         ?i = instrs_of ?P ?C ?M ! ?pc |]
      ==> classes_above ?P (cname_of ?h ?a) Int classes_changed ?P ?P' =
          JVMcollect_id",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 29,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 28, template_var 13),
                    template_var 12),
                  template_var 11),
                template_var 10)),
            template_app
             (template_app (template_hole 27, template_var 13),
              template_var 9)),
          template_hole 26),
        template_equation
         (template_app
           (template_app
             (template_hole 29,
              template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, t_empty),
                  template_hole 18))),
            template_app
             (template_app (template_hole 27, template_var 13),
              template_var 9)),
          template_hole 26),
        template_predicate
         (template_app (template_hole 17, template_var 11)),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 15, template_var 12),
                              template_var 13),
                            template_var 11),
                          template_var 10),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 13, template_var 8),
          template_app (template_hole 12, template_var 0)),
        template_equation
         (template_var 12,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 3,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 13),
                                template_var 6),
                              template_var 5))))))))),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 29, template_app (template_hole 23, t_empty)),
           template_app
            (template_app (template_hole 27, template_var 13),
             template_var 9)),
         template_hole 26))),
    ("JVMCollectionBasedRTS.Calling_collects",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* Object;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         ics_of (hd (frames_of ?\<sigma>)) = Calling ?C ?Cs;
         ALL C'.
            ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         ?cset' <= ?cset |]
      ==> classes_above ?P ?C <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 6),
                  template_hole 29)),
              template_app
               (template_hole 28,
                template_app (template_hole 27, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_hole 23),
                          template_hole 22),
                        template_hole 21),
                      t_empty),
                    template_hole 19),
                  template_var 5),
                template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_hole 22)
                )
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 2))),
          template_app
           (template_app (template_hole 12, template_var 6),
            template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("JVMCollectionBasedRTS.New_collects",
     "[| ?P \<turnstile> ?C \<preceq>\<^sup>* Object;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = New ?C;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics;
         ALL C'.
            ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         ?cset' <= ?cset |]
      ==> classes_above ?P ?C <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app
                 (template_app (template_hole 33, template_var 5),
                  template_hole 32)),
              template_app
               (template_hole 31,
                template_app (template_hole 30, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app (template_hole 28, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 27, template_hole 26),
                          template_hole 25),
                        template_hole 24),
                      t_empty),
                    template_hole 22),
                  template_var 4),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_hole 25)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 4),
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 1))),
          template_app (template_hole 15, template_var 5)),
        template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 1))),
          template_hole 12),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("JVMCollectionBasedRTS.Getstatic_collects",
     "[| ?P \<turnstile> ?D \<preceq>\<^sup>* Object;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Getstatic ?C ?F ?D;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics;
         ?P \<turnstile> ?C has ?F,Static:?t in ?D;
         ALL C'.
            ?P \<turnstile> ?D \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         ?cset' <= ?cset |]
      ==> classes_above ?P ?D <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app
                 (template_app (template_hole 35, template_var 8),
                  template_hole 34)),
              template_app
               (template_hole 33,
                template_app (template_hole 32, template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 29, template_hole 28),
                          template_hole 27),
                        template_hole 26),
                      t_empty),
                    template_hole 24),
                  template_var 7),
                template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_hole 27)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 7),
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 4))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2),
            template_var 8)),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 4))),
          template_hole 14),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 7),
                      template_var 3),
                    template_var 2),
                  template_hole 12),
                template_var 1),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 5, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("JVMCollectionBasedRTS.Putstatic_collects",
     "[| ?P \<turnstile> ?D \<preceq>\<^sup>* Object;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Putstatic ?C ?F ?D;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics;
         ?P \<turnstile> ?C has ?F,Static:?t in ?D;
         ALL C'.
            ?P \<turnstile> ?D \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         ?cset' <= ?cset |]
      ==> classes_above ?P ?D <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app
                 (template_app (template_hole 35, template_var 8),
                  template_hole 34)),
              template_app
               (template_hole 33,
                template_app (template_hole 32, template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 29, template_hole 28),
                          template_hole 27),
                        template_hole 26),
                      t_empty),
                    template_hole 24),
                  template_var 7),
                template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_hole 27)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 7),
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 4))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2),
            template_var 8)),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 4))),
          template_hole 14),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 7),
                      template_var 3),
                    template_var 2),
                  template_hole 12),
                template_var 1),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_equals, template_var 5, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("JVMCollectionBasedRTS.Invokestatic_collects",
     "[| ?P \<turnstile> ?D \<preceq>\<^sup>* Object;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?cset' <= ?cset; ?\<sigma> ~: JVMendset;
         curr_instr ?P (hd (frames_of ?\<sigma>)) = Invokestatic ?C ?M ?n;
         ics_of (hd (frames_of ?\<sigma>)) = No_ics;
         ?P \<turnstile> ?C sees ?M, Static :  ?Ts\<rightarrow>?T = ?m in ?D;
         ALL C'.
            ?P \<turnstile> ?D \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset |]
      ==> classes_above ?P ?D <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app
                 (template_app (template_hole 35, template_var 11),
                  template_hole 34)),
              template_app
               (template_hole 33,
                template_app (template_hole 32, template_var 10)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 9),
                  template_var 8)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 29, template_hole 28),
                          template_hole 27),
                        template_hole 26),
                      t_empty),
                    template_hole 24),
                  template_var 10),
                template_var 7))
            ),
        template_inequation (less_equals, template_var 8, template_var 6),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 21, template_var 7),
                  template_hole 27)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 10),
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 7))),
          template_app
           (template_app
             (template_app (template_hole 16, template_var 5),
              template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 7))),
          template_hole 13),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 12, template_var 10),
                          template_var 5),
                        template_var 4),
                      template_hole 11),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 11)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 6))),
    ("JVMCollectionBasedRTS.Calling_None_next_state",
     "[| ics_of (hd (frames_of ?\<sigma>)) = Calling ?C ?Cs;
         sheap ?\<sigma> ?C = None;
         ALL C'.
            ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.csmall ?P ?\<sigma> |]
      ==> ?\<sigma>' ~: JVMendset &
          ics_of (hd (frames_of ?\<sigma>')) = Calling ?C ?Cs &
          (EX sfs.
              sheap ?\<sigma>' ?C = \<lfloor>(sfs, Prepared)\<rfloor>) &
          (ALL C'.
              ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
              ?C ~= C' -->
              (EX sfs i.
                  sheap ?\<sigma>' C' = \<lfloor>(sfs, i)\<rfloor>) -->
              classes_above ?P C' <= ?cset)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 31,
            template_app
             (template_hole 30,
              template_app (template_hole 29, template_var 6))),
          template_app
           (template_app (template_hole 28, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 26,
              template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 6))),
            template_var 5),
          template_hole 23),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_hole 6),
                  template_var 3),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 32,
                     template_app
                      (template_hole 31,
                       template_app
                        (template_hole 30,
                         template_app (template_hole 29, template_var 1)))),
                   template_app
                    (template_app (template_hole 28, template_var 5),
                     template_var 4))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 16, t_empty)),
                 template_app (template_hole 22, t_empty))))
           ))),
    ("JVMCollectionBasedRTS.Calling_Prepared_next_state",
     "[| ?P \<turnstile> ?C \<prec>\<^sup>1 ?D;
         ?P \<turnstile> ?D \<preceq>\<^sup>* Object;
         ics_of (hd (frames_of ?\<sigma>)) = Calling ?C ?Cs;
         sheap ?\<sigma> ?C = \<lfloor>(?sfs, Prepared)\<rfloor>;
         ALL C'.
            ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
            ?C ~= C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset;
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.csmall ?P ?\<sigma> |]
      ==> ?\<sigma>' ~: JVMendset &
          ics_of (hd (frames_of ?\<sigma>')) = Calling ?D (?C # ?Cs) &
          (ALL C'.
              ?P \<turnstile> ?D \<preceq>\<^sup>* C' -->
              (EX sfs i.
                  sheap ?\<sigma>' C' = \<lfloor>(sfs, i)\<rfloor>) -->
              classes_above ?P C' <= ?cset)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 33,
                template_app
                 (template_app (template_hole 32, template_var 8),
                  template_var 7)),
              template_app (template_hole 31, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 33,
                template_app
                 (template_app (template_hole 32, template_var 7),
                  template_hole 30)),
              template_app
               (template_hole 29,
                template_app (template_hole 31, template_var 6)))
            ),
        template_equation
         (template_app
           (template_hole 27,
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 5))),
          template_app
           (template_app (template_hole 24, template_var 8),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 22,
              template_app
               (template_hole 21,
                template_app (template_hole 20, template_var 5))),
            template_var 8),
          template_app
           (template_hole 19,
            template_app
             (template_app (template_hole 18, template_var 3),
              template_hole 17))),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4),
                  template_var 6),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 28,
                     template_app
                      (template_hole 27,
                       template_app
                        (template_hole 26,
                         template_app (template_hole 25, template_var 1)))),
                   template_app
                    (template_app (template_hole 24, template_var 7),
                     template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 4)))),
               template_app (template_hole 16, t_empty)))
           ))),
    ("JVMCollectionBasedRTS.Calling_collects_IH",
     "[| ?P \<turnstile> ?C \<prec>\<^sup>1 ?D;
         ?P \<turnstile> ?D \<preceq>\<^sup>* Object;
         !!\<sigma> cset' Cs.
            [| (?\<sigma>', cset')
               : JVMSmartCollectionSemantics.cbig ?P \<sigma>;
               \<sigma> ~: JVMendset;
               ics_of (hd (frames_of \<sigma>)) = Calling ?D Cs;
               ALL C'.
                  ?P \<turnstile> ?D \<preceq>\<^sup>* C' -->
                  (EX sfs i.
                      sheap \<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
                  classes_above ?P C' <= ?cset |]
            ==> classes_above ?P ?D <= JVMcombine ?cset cset';
         (?\<sigma>', ?cset')
         : JVMSmartCollectionSemantics.cbig ?P ?\<sigma>;
         ?\<sigma> ~: JVMendset;
         ics_of (hd (frames_of ?\<sigma>)) = Calling ?C ?Cs;
         ALL C'.
            ?P \<turnstile> ?C \<preceq>\<^sup>* C' -->
            (EX sfs i. sheap ?\<sigma> C' = \<lfloor>(sfs, i)\<rfloor>) -->
            classes_above ?P C' <= ?cset |]
      ==> classes_above ?P ?C <= JVMcombine ?cset ?cset'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app
                 (template_app (template_hole 33, template_var 7),
                  template_var 6)),
              template_app (template_hole 32, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app
                 (template_app (template_hole 33, template_var 6),
                  template_hole 31)),
              template_app
               (template_hole 30,
                template_app (template_hole 32, template_var 5)))
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 4),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_hole 23),
                          template_hole 22),
                        template_hole 21),
                      t_empty),
                    template_hole 19),
                  template_var 5),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 1),
                  template_hole 22)
                )
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 1))),
          template_app
           (template_app (template_hole 12, template_var 7),
            template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_app
          (template_app (template_hole 20, template_var 3),
           template_var 2)))),
    ("JVMCollectionBasedRTS.jvm_naive_to_smart_exec_collect",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         hd ?frs = (?stk, ?loc, ?C', ?M', ?pc, ?ics);
         !!C fs.
            EX a. ?h a = \<lfloor>(C, fs)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         !!C sfs i.
            ?sh C = \<lfloor>(sfs, i)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         classes_above_xcpts ?P <= ?cset;
         classes_above_frames ?P ?frs <= ?cset;
         !!C. [| ?ics = Called [] | ?ics = No_ics;
                 coll_init_class ?P (instrs_of ?P ?C' ?M' ! ?pc) =
                 \<lfloor>C\<rfloor> |]
              ==> classes_above ?P C <= ?cset;
         !!C' Cs'. ?ics = Calling C' Cs' ==> classes_above ?P C' <= ?cset;
         JVMexec_scollect ?P (?xp, ?h, ?frs, ?sh) <= ?cset |]
      ==> JVMexec_ncollect ?P (?xp, ?h, ?frs, ?sh) <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 53, template_var 12),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 52, template_var 11),
                template_var 12),
              template_app
               (template_app (template_hole 51, template_var 10),
                template_app
                 (template_app (template_hole 50, template_var 9),
                  template_app
                   (template_app (template_hole 49, template_var 8),
                    template_var 7))))
            ),
        template_equation
         (template_app (template_hole 47, template_var 8),
          template_app
           (template_app (template_hole 46, template_var 6),
            template_app
             (template_app (template_hole 45, template_var 5),
              template_app
               (template_app (template_hole 44, template_var 4),
                template_app
                 (template_app (template_hole 43, template_var 3),
                  template_app
                   (template_app (template_hole 42, template_var 2),
                    template_var 1)))))),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 24,
            template_app
             (template_app (template_hole 23, t_empty), template_hole 22)),
          template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 21, template_var 11),
            template_var 8),
          template_var 0),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 11),
            template_app
             (template_app (template_hole 51, template_var 10),
              template_app
               (template_app (template_hole 50, template_var 9),
                template_app
                 (template_app (template_hole 49, template_var 8),
                  template_var 7)))),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 11),
           template_app
            (template_app (template_hole 51, template_var 10),
             template_app
              (template_app (template_hole 50, template_var 9),
               template_app
                (template_app (template_hole 49, template_var 8),
                 template_var 7)))),
         template_var 0))),
    ("JVMCollectionBasedRTS.jvm_naive_to_smart_csmall",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         hd ?frs = (?stk, ?loc, ?C', ?M', ?pc, ?ics);
         !!C fs.
            EX a. ?h a = \<lfloor>(C, fs)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         !!C sfs i.
            ?sh C = \<lfloor>(sfs, i)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         classes_above_xcpts ?P <= ?cset;
         classes_above_frames ?P ?frs <= ?cset;
         !!C. [| ?ics = Called [] | ?ics = No_ics;
                 coll_init_class ?P (instrs_of ?P ?C' ?M' ! ?pc) =
                 \<lfloor>C\<rfloor> |]
              ==> classes_above ?P C <= ?cset;
         !!C' Cs'. ?ics = Calling C' Cs' ==> classes_above ?P C' <= ?cset;
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.csmall ?P (?xp, ?h, ?frs, ?sh);
         (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.csmall ?P (?xp, ?h, ?frs, ?sh);
         ?cset\<^sub>s <= ?cset |]
      ==> ?cset\<^sub>n <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 57, template_var 15),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 56, template_var 14),
                template_var 15),
              template_app
               (template_app (template_hole 55, template_var 13),
                template_app
                 (template_app (template_hole 54, template_var 12),
                  template_app
                   (template_app (template_hole 53, template_var 11),
                    template_var 10))))
            ),
        template_equation
         (template_app (template_hole 51, template_var 11),
          template_app
           (template_app (template_hole 50, template_var 9),
            template_app
             (template_app (template_hole 49, template_var 8),
              template_app
               (template_app (template_hole 48, template_var 7),
                template_app
                 (template_app (template_hole 47, template_var 6),
                  template_app
                   (template_app (template_hole 46, template_var 5),
                    template_var 4)))))),
        template_predicate (template_app (template_hole 45, t_empty)),
        template_predicate (template_app (template_hole 45, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, t_empty), template_hole 26)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 25, template_var 14),
            template_var 11),
          template_var 3),
        template_predicate (template_app (template_hole 45, t_empty)),
        template_predicate (template_app (template_hole 45, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1),
                  template_var 14),
                template_app
                 (template_app (template_hole 55, template_var 13),
                  template_app
                   (template_app (template_hole 54, template_var 12),
                    template_app
                     (template_app (template_hole 53, template_var 11),
                      template_var 10)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 0),
                  template_var 14),
                template_app
                 (template_app (template_hole 55, template_var 13),
                  template_app
                   (template_app (template_hole 54, template_var 12),
                    template_app
                     (template_app (template_hole 53, template_var 11),
                      template_var 10)))))
            ),
        template_inequation (less_equals, template_var 1, template_var 3)],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("JVMCollectionBasedRTS.jvm_naive_to_smart_cbig",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         hd ?frs = (?stk, ?loc, ?C', ?M', ?pc, ?ics);
         !!C fs.
            EX a. ?h a = \<lfloor>(C, fs)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         !!C sfs i.
            ?sh C = \<lfloor>(sfs, i)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         classes_above_xcpts ?P <= ?cset;
         classes_above_frames ?P ?frs <= ?cset;
         !!C. [| ?ics = Called [] | ?ics = No_ics;
                 coll_init_class ?P (instrs_of ?P ?C' ?M' ! ?pc) =
                 \<lfloor>C\<rfloor> |]
              ==> classes_above ?P C <= ?cset;
         !!C' Cs'. ?ics = Calling C' Cs' ==> classes_above ?P C' <= ?cset;
         (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.cbig ?P (?xp, ?h, ?frs, ?sh);
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.cbig ?P (?xp, ?h, ?frs, ?sh);
         ?cset\<^sub>s <= ?cset |]
      ==> ?cset\<^sub>n <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 60, template_var 15),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 59, template_var 14),
                template_var 15),
              template_app
               (template_app (template_hole 58, template_var 13),
                template_app
                 (template_app (template_hole 57, template_var 12),
                  template_app
                   (template_app (template_hole 56, template_var 11),
                    template_var 10))))
            ),
        template_equation
         (template_app (template_hole 54, template_var 11),
          template_app
           (template_app (template_hole 53, template_var 9),
            template_app
             (template_app (template_hole 52, template_var 8),
              template_app
               (template_app (template_hole 51, template_var 7),
                template_app
                 (template_app (template_hole 50, template_var 6),
                  template_app
                   (template_app (template_hole 49, template_var 5),
                    template_var 4)))))),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 31,
            template_app
             (template_app (template_hole 30, t_empty), template_hole 29)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 28, template_var 14),
            template_var 11),
          template_var 3),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_hole 4),
                        template_hole 3),
                      t_empty),
                    template_hole 1),
                  template_var 14),
                template_app
                 (template_app (template_hole 58, template_var 13),
                  template_app
                   (template_app (template_hole 57, template_var 12),
                    template_app
                     (template_app (template_hole 56, template_var 11),
                      template_var 10)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_hole 4),
                        template_hole 0),
                      t_empty),
                    template_hole 1),
                  template_var 14),
                template_app
                 (template_app (template_hole 58, template_var 13),
                  template_app
                   (template_app (template_hole 57, template_var 12),
                    template_app
                     (template_app (template_hole 56, template_var 11),
                      template_var 10)))))
            ),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_inequation (less_equals, template_var 1, template_var 3))),
    ("JVMCollectionBasedRTS.jvm_naive_to_smart_csmall_nstep",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         hd ?frs = (?stk, ?loc, ?C', ?M', ?pc, ?ics);
         !!C fs.
            EX a. ?h a = \<lfloor>(C, fs)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         !!C sfs i.
            ?sh C = \<lfloor>(sfs, i)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         classes_above_xcpts ?P <= ?cset;
         classes_above_frames ?P ?frs <= ?cset;
         !!C. [| ?ics = Called [] | ?ics = No_ics;
                 coll_init_class ?P (instrs_of ?P ?C' ?M' ! ?pc) =
                 \<lfloor>C\<rfloor> |]
              ==> classes_above ?P C <= ?cset;
         !!C' Cs'. ?ics = Calling C' Cs' ==> classes_above ?P C' <= ?cset;
         (?\<sigma>', ?cset\<^sub>n)
         : JVMNaiveCollectionSemantics.csmall_nstep ?P (?xp, ?h, ?frs, ?sh)
            ?n;
         (?\<sigma>', ?cset\<^sub>s)
         : JVMSmartCollectionSemantics.csmall_nstep ?P (?xp, ?h, ?frs, ?sh)
            ?n;
         ?cset\<^sub>s <= ?cset; ?\<sigma>' : JVMendset |]
      ==> ?cset\<^sub>n <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 61, template_var 16),
              template_var 15)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 60, template_var 15),
                template_var 16),
              template_app
               (template_app (template_hole 59, template_var 14),
                template_app
                 (template_app (template_hole 58, template_var 13),
                  template_app
                   (template_app (template_hole 57, template_var 12),
                    template_var 11))))
            ),
        template_equation
         (template_app (template_hole 55, template_var 12),
          template_app
           (template_app (template_hole 54, template_var 10),
            template_app
             (template_app (template_hole 53, template_var 9),
              template_app
               (template_app (template_hole 52, template_var 8),
                template_app
                 (template_app (template_hole 51, template_var 7),
                  template_app
                   (template_app (template_hole 50, template_var 6),
                    template_var 5)))))),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 32,
            template_app
             (template_app (template_hole 31, t_empty), template_hole 30)),
          template_var 4),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 29, template_var 15),
            template_var 12),
          template_var 4),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_hole 5),
                        t_empty),
                      template_hole 3),
                    template_var 15),
                  template_app
                   (template_app (template_hole 59, template_var 14),
                    template_app
                     (template_app (template_hole 58, template_var 13),
                      template_app
                       (template_app (template_hole 57, template_var 12),
                        template_var 11)))),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 0)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_hole 2),
                        t_empty),
                      template_hole 3),
                    template_var 15),
                  template_app
                   (template_app (template_hole 59, template_var 14),
                    template_app
                     (template_app (template_hole 58, template_var 13),
                      template_app
                       (template_app (template_hole 57, template_var 12),
                        template_var 11)))),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_hole 0)
            )],
       template_inequation (less_equals, template_var 2, template_var 4))),
    ("JVMCollectionBasedRTS.backward_coll_promises_kept",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         hd ?frs = (?stk, ?loc, ?C', ?M', ?pc, ?ics);
         !!C fs.
            EX a. ?h a = \<lfloor>(C, fs)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         !!C sfs i.
            ?sh C = \<lfloor>(sfs, i)\<rfloor> ==>
            classes_above ?P C <= ?cset;
         classes_above_xcpts ?P <= ?cset;
         classes_above_frames ?P ?frs <= ?cset;
         !!C. [| ?ics = Called [] | ?ics = No_ics;
                 coll_init_class ?P (instrs_of ?P ?C' ?M' ! ?pc) =
                 \<lfloor>C\<rfloor> |]
              ==> classes_above ?P C <= ?cset;
         !!C' Cs'. ?ics = Calling C' Cs' ==> classes_above ?P C' <= ?cset;
         JVMexec_scollect ?P (?xp, ?h, ?frs, ?sh) <= ?cset;
         (?xp', ?h', ?frs', ?sh') : JVMsmall ?P (?xp, ?h, ?frs, ?sh) |]
      ==> (?h' ?a = \<lfloor>(?C, ?fs)\<rfloor> -->
           classes_above ?P ?C <= ?cset) &
          (?sh' ?C = \<lfloor>(?sfs', ?i')\<rfloor> -->
           classes_above ?P ?C <= ?cset) &
          classes_above_frames ?P ?frs' <= ?cset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 56, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 55, template_var 20),
                template_var 21),
              template_app
               (template_app (template_hole 54, template_var 19),
                template_app
                 (template_app (template_hole 53, template_var 18),
                  template_app
                   (template_app (template_hole 52, template_var 17),
                    template_var 16))))
            ),
        template_equation
         (template_app (template_hole 50, template_var 17),
          template_app
           (template_app (template_hole 49, template_var 15),
            template_app
             (template_app (template_hole 48, template_var 14),
              template_app
               (template_app (template_hole 47, template_var 13),
                template_app
                 (template_app (template_hole 46, template_var 12),
                  template_app
                   (template_app (template_hole 45, template_var 11),
                    template_var 10)))))),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 27,
            template_app
             (template_app (template_hole 26, t_empty), template_hole 25)),
          template_var 9),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 24, template_var 20),
            template_var 17),
          template_var 9),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 20),
            template_app
             (template_app (template_hole 54, template_var 19),
              template_app
               (template_app (template_hole 53, template_var 18),
                template_app
                 (template_app (template_hole 52, template_var 17),
                  template_var 16)))),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 54, template_var 8),
                  template_app
                   (template_app (template_hole 53, template_var 7),
                    template_app
                     (template_app (template_hole 52, template_var 6),
                      template_var 5)))),
              template_app
               (template_app (template_hole 2, template_var 20),
                template_app
                 (template_app (template_hole 54, template_var 19),
                  template_app
                   (template_app (template_hole 53, template_var 18),
                    template_app
                     (template_app (template_hole 52, template_var 17),
                      template_var 16)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 41,
                       template_app (template_var 7, template_var 4)),
                     template_app
                      (template_hole 40,
                       template_app
                        (template_app (template_hole 39, template_var 3),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 38,
                     template_app (template_hole 37, t_empty)),
                   template_var 9))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 30,
                         template_app (template_var 5, template_var 3)),
                       template_app
                        (template_hole 29,
                         template_app
                          (template_app (template_hole 28, template_var 1),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 38,
                       template_app (template_hole 37, t_empty)),
                     template_var 9))),
               template_app
                (template_app
                  (template_hole 38,
                   template_app
                    (template_app (template_hole 24, template_var 20),
                     template_var 6)),
                 template_var 9)))
           )))]:
   (string * thm * template) list
### theory "Draft.JVMCollectionBasedRTSMoreTemplates"
### 1.476s elapsed time, 3.891s cpu time, 3.138s GC time
val it = (): unit
