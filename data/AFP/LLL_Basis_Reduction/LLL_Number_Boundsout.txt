Loading theory "Draft.More_IArray" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds" via "Draft.Gram_Schmidt_Int")
Loading theory "Draft.Missing_Lemmas" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds" via "Draft.LLL" via "Draft.Gram_Schmidt_2" via "Draft.Norms")
Loading theory "Draft.Templates" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.250s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LLL_Number_BoundsTemplates")
Found termination order: "{}"
### theory "Draft.More_IArray"
### 0.134s elapsed time, 0.362s cpu time, 0.048s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.654s elapsed time, 1.334s cpu time, 0.162s GC time
Found termination order: "length <*mlex*> {}"
consts
  rev_upt :: "nat => nat => nat list"
### theory "Draft.Missing_Lemmas"
### 6.921s elapsed time, 8.745s cpu time, 1.779s GC time
Loading theory "Draft.Norms" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds" via "Draft.LLL" via "Draft.Gram_Schmidt_2")
class semiring_real_line = ordered_semiring_strict + ordered_semiring_0 +
  assumes
    "add_pos_neg_is_real":
      "!!a b. [| (0::'a) < a; b < (0::'a) |] ==> is_real (a + b)"
    and
    "mult_neg_neg":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> (0::'a) < a * b"
    and
    "pos_pos_linear":
      "!!a b. [| (0::'a) < a; (0::'a) < b |] ==> a < b | a = b | b < a"
    and
    "neg_neg_linear":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> a < b | a = b | b < a"
class conjugatable_ring_1_abs_real_line = conjugatable_ring +
  ring_1_abs_real_line +
  assumes
    "sq_norm_as_sq_abs": "!!a. a * conjugate a = \<bar>a\<bar>\<^sup>2"
class trivial_conjugatable = conjugate +
  assumes "conjugate_id": "!!x. conjugate x = x"
### theory "Draft.Norms"
### 17.250s elapsed time, 18.095s cpu time, 1.707s GC time
Loading theory "Draft.Int_Rat_Operations" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds" via "Draft.LLL" via "Draft.Gram_Schmidt_2")
### theory "Draft.Int_Rat_Operations"
### 0.101s elapsed time, 0.133s cpu time, 0.000s GC time
Loading theory "Draft.Gram_Schmidt_2" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds" via "Draft.LLL")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale gram_schmidt_fs
  fixes n :: "nat"
    and fs :: "'a vec list"
Found termination order:
  "case_sum size (%p. size (snd p)) <*mlex*>
   case_sum size (%p. size (fst p)) <*mlex*> {}"
locale gram_schmidt_fs_Rn
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_Rn n fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale gram_schmidt_fs_Rn
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_Rn n fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int
  fixes n :: "nat"
    and fs_init :: "int vec list"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
### theory "Draft.Gram_Schmidt_2"
### 22.218s elapsed time, 25.085s cpu time, 4.388s GC time
Loading theory "Draft.Gram_Schmidt_Int" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds")
Loading theory "Draft.LLL" (required by "Draft.LLL_Number_BoundsTemplates" via "Draft.LLL_Number_Bounds")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale fs_int'
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and fs :: "int vec list"
  assumes "fs_int' n m fs_init fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.LLL"
### 9.529s elapsed time, 19.273s cpu time, 1.800s GC time
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale gso_array
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
### theory "Draft.Gram_Schmidt_Int"
### 14.821s elapsed time, 24.938s cpu time, 2.438s GC time
Loading theory "Draft.LLL_Number_Bounds" (required by "Draft.LLL_Number_BoundsTemplates")
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
Found termination order: "{}"
### theory "Draft.LLL_Number_Bounds"
### 4.799s elapsed time, 5.109s cpu time, 0.553s GC time
Loading theory "Draft.LLL_Number_BoundsTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LLL_Number_BoundsTemplates"
### 2.542s elapsed time, 2.967s cpu time, 0.313s GC time
val it = (): unit
