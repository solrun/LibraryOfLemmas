Loading theory "Draft.List_Representation" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl")
Loading theory "Draft.More_IArray" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl" via "Draft.Gram_Schmidt_Int")
Loading theory "Draft.Templates" (required by "Draft.LLL_CertificationTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Missing_Lemmas" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl" via "Draft.LLL" via "Draft.Gram_Schmidt_2" via "Draft.Norms")
### theory "Draft.List_Representation"
### 0.074s elapsed time, 0.333s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.350s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LLL_CertificationTemplates")
Found termination order: "{}"
### theory "Draft.More_IArray"
### 0.107s elapsed time, 0.442s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.698s elapsed time, 1.577s cpu time, 0.486s GC time
Found termination order: "length <*mlex*> {}"
consts
  rev_upt :: "nat => nat => nat list"
### theory "Draft.Missing_Lemmas"
### 6.927s elapsed time, 8.643s cpu time, 1.562s GC time
Loading theory "Draft.Norms" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl" via "Draft.LLL" via "Draft.Gram_Schmidt_2")
class semiring_real_line = ordered_semiring_strict + ordered_semiring_0 +
  assumes
    "add_pos_neg_is_real":
      "!!a b. [| (0::'a) < a; b < (0::'a) |] ==> is_real (a + b)"
    and
    "mult_neg_neg":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> (0::'a) < a * b"
    and
    "pos_pos_linear":
      "!!a b. [| (0::'a) < a; (0::'a) < b |] ==> a < b | a = b | b < a"
    and
    "neg_neg_linear":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> a < b | a = b | b < a"
class conjugatable_ring_1_abs_real_line = conjugatable_ring +
  ring_1_abs_real_line +
  assumes
    "sq_norm_as_sq_abs": "!!a. a * conjugate a = \<bar>a\<bar>\<^sup>2"
class trivial_conjugatable = conjugate +
  assumes "conjugate_id": "!!x. conjugate x = x"
### theory "Draft.Norms"
### 17.791s elapsed time, 19.741s cpu time, 3.440s GC time
Loading theory "Draft.Int_Rat_Operations" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl" via "Draft.LLL" via "Draft.Gram_Schmidt_2")
### theory "Draft.Int_Rat_Operations"
### 0.097s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.Gram_Schmidt_2" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl" via "Draft.LLL")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale gram_schmidt_fs
  fixes n :: "nat"
    and fs :: "'a vec list"
Found termination order:
  "case_sum size (%p. size (snd p)) <*mlex*>
   case_sum size (%p. size (fst p)) <*mlex*> {}"
locale gram_schmidt_fs_Rn
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_Rn n fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale gram_schmidt
  fixes n :: "nat"
    and f_ty :: "'a itself"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale gram_schmidt_fs_Rn
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_Rn n fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int
  fixes n :: "nat"
    and fs_init :: "int vec list"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
### theory "Draft.Gram_Schmidt_2"
### 21.680s elapsed time, 24.449s cpu time, 5.398s GC time
Loading theory "Draft.Gram_Schmidt_Int" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl")
Loading theory "Draft.LLL" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification" via "Draft.LLL_Impl")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
locale fs_int'
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and fs :: "int vec list"
  assumes "fs_int' n m fs_init fs"
locale gram_schmidt_fs_lin_indpt
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_lin_indpt n fs"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.LLL"
### 11.671s elapsed time, 23.583s cpu time, 5.252s GC time
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale gso_array
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
locale gram_schmidt_fs_int
  fixes n :: "nat"
    and fs :: "'a vec list"
  assumes "gram_schmidt_fs_int n fs"
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
### theory "Draft.Gram_Schmidt_Int"
### 17.741s elapsed time, 31.876s cpu time, 8.712s GC time
Loading theory "Draft.LLL_Impl" (required by "Draft.LLL_CertificationTemplates" via "Draft.LLL_Certification")
locale fs_int_indpt
  fixes n :: "nat"
    and fs :: "int vec list"
  assumes "fs_int_indpt n fs"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. length (snd (snd (snd (snd p))))) <*mlex*> {}"
locale LLL
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
Found termination order: "{}"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
### theory "Draft.LLL_Impl"
### 11.401s elapsed time, 14.029s cpu time, 4.411s GC time
Loading theory "Draft.LLL_Certification" (required by "Draft.LLL_CertificationTemplates")
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
### Ambiguous input (line 476 of "$AFP/LLL_Basis_Reduction/LLL_Certification.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" reduce_basis_external)
###       ("_cargs" ("_position" \<alpha>) ("_position" fs)))
###     ("_case_syntax" ("_position" fs)
###       ("_case2" ("_case1" ("_position" Nil) ("\<^const>List.list.Nil"))
###         ("_case1"
###           ("_applC" ("_position" Cons)
###             ("_cargs" ("_position" f) ("\<^const>Pure.dummy_pattern")))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" rb)
###                 ("_applC" ("_position" reduce_basis)
###                   ("_position" \<alpha>)))
###               ("_binds"
###                 ("_bind" ("_position" fsi)
###                   ("_applC" ("_position" map)
###                     ("_cargs"
###                       ("\<^const>Fun.comp"
###                         ("_applC" ("_position" map)
###                           ("_position" integer_of_int))
###                         ("_position" list_of_vec))
###                       ("_position" fs))))
###                 ("_binds"
###                   ("_bind" ("_position" n)
###                     ("_applC" ("_position" dim_vec) ("_position" f)))
###                   ("_bind" ("_position" m)
###                     ("_applC" ("_position" length) ("_position" fs))))))
###             ("_case_syntax"
###               ("_applC" ("_position" external_lll_solver)
###                 ("_cargs"
###                   ("_applC" ("_position" map_prod)
###                     ("_cargs" ("_position" integer_of_int)
###                       ("_cargs" ("_position" integer_of_int)
###                         ("_applC" ("_position" quotient_of)
###                           ("_position" \<alpha>)))))
###                   ("_position" fsi)))
###               ("_case2"
###                 ("_case1"
###                   ("_tuple" ("_position" gsi)
###                     ("_tuple_arg" ("_position" co)))
###                   ("_Let"
###                     ("_bind" ("_position" gs)
###                       ("_applC" ("_position" map)
###                         ("_cargs"
###                           ("\<^const>Fun.comp" ("_position" vec_of_list)
###                             ("_applC" ("_position" map)
###                               ("_position" int_of_integer)))
###                           ("_position" gsi))))
###                     ("\<^const>HOL.If"
###                       ("\<^const>HOL.Not"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" length) ("_position" gs))
###                             ("_position" m))
###                           ("_Ball" ("_position" gi)
###                             ("_applC" ("_position" set) ("_position" gs))
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" dim_vec)
###                                 ("_position" gi))
###                               ("_position" n)))))
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_Literal"
###                                 ("_position"
###                                   ''error in external LLL invocation: dimensions of reduced basis do not fit\<newline>input to external solver: ''))
###                               ("_applC" ("_position" String.implode)
###                                 ("_applC" ("_position" show)
###                                   ("_position" fs))))
###                             ("_Literal"
###                               ("_position" ''\<newline>\<newline>'')))
###                           ("_lambda" ("_idtdummy")
###                             ("_applC" ("_position" rb) ("_position" fs)))))
###                       ("_case_syntax" ("_position" co)
###                         ("_case1"
###                           ("_applC" ("_position" Some)
###                             ("_tuple" ("_position" u1i)
###                               ("_tuple_arg" ("_position" u2i))))
###                           ("_Let"
###                             ("_binds"
###                               ("_bind" ("_position" u1)
###                                 ("_applC" ("_position" mat_of_rows_list)
###                                   ("_cargs" ("_position" m)
###                                     ("_applC" ("_position" map)
### ("_cargs" ("_applC" ("_position" map) ("_position" int_of_integer))
###   ("_position" u1i))))))
###                               ("_binds"
###                                 ("_bind" ("_position" u2)
###                                   ("_applC" ("_position" mat_of_rows_list)
###                                     ("_cargs" ("_position" m)
### ("_applC" ("_position" map)
###   ("_cargs" ("_applC" ("_position" map) ("_position" int_of_integer))
###     ("_position" u2i))))))
###                                 ("_binds"
###                                   ("_bind" ("_position" gs)
###                                     ("_applC" ("_position" map)
### ("_cargs"
###   ("\<^const>Fun.comp" ("_position" vec_of_list)
###     ("_applC" ("_position" map) ("_position" int_of_integer)))
###   ("_position" gsi))))
###                                   ("_binds"
###                                     ("_bind" ("_position" Fs)
### ("_applC" ("_position" mat_of_rows)
###   ("_cargs" ("_position" n) ("_position" fs))))
###                                     ("_bind" ("_position" Gs)
### ("_applC" ("_position" mat_of_rows)
###   ("_cargs" ("_position" n) ("_position" gs))))))))
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" dim_row)
###                                     ("_position" u1))
###                                   ("_position" m))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.eq"
###                                     ("_applC" ("_position" dim_col)
### ("_position" u1))
###                                     ("_position" m))
###                                   ("\<^const>HOL.conj"
###                                     ("\<^const>HOL.eq"
### ("_applC" ("_position" dim_row) ("_position" u2)) ("_position" m))
###                                     ("\<^const>HOL.conj"
### ("\<^const>HOL.eq" ("_applC" ("_position" dim_col) ("_position" u2))
###   ("_position" m))
### ("\<^const>HOL.conj"
###   ("\<^const>HOL.eq" ("_position" Fs)
###     ("\<^const>Groups.times_class.times" ("_position" u1) ("_position" Gs)))
###   ("\<^const>HOL.eq" ("_position" Gs)
###     ("\<^const>Groups.times_class.times" ("_position" u2)
###       ("_position" Fs))))))))
###                               ("_applC" ("_position" rb) ("_position" gs))
###                               ("_applC" ("_position" Code.abort)
###                                 ("_cargs"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("\<^const>Groups.plus_class.plus"
### ("\<^const>Groups.plus_class.plus"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("_Literal"
###               ("_position"
###                 ''error in external lll invocation\<newline>f,g,u1,u2 are as follows\<newline>''))
###             ("_applC" ("_position" String.implode)
###               ("_applC" ("_position" show) ("_position" Fs))))
###           ("_Literal" ("_position" ''\<newline>\<newline>'')))
###         ("_applC" ("_position" String.implode)
###           ("_applC" ("_position" show) ("_position" Gs))))
###       ("_Literal" ("_position" ''\<newline>\<newline>'')))
###     ("_applC" ("_position" String.implode)
###       ("_applC" ("_position" show) ("_position" u1))))
###   ("_Literal" ("_position" ''\<newline>\<newline>'')))
### ("_applC" ("_position" String.implode)
###   ("_applC" ("_position" show) ("_position" u2))))
###                                     ("_Literal"
### ("_position" ''\<newline>\<newline>'')))
###                                   ("_lambda" ("_idtdummy")
###                                     ("_applC" ("_position" rb)
### ("_position" fs))))))))))))
###                 ("_case1" ("_position" None)
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" n) ("_position" m))
###                       ("_applC" ("_position" integer_equivalent)
###                         ("_cargs" ("_position" n)
###                           ("_cargs" ("_position" fs) ("_position" gs)))))
###                     ("_applC" ("_position" rb) ("_position" gs))
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_Literal"
###                             ("_position"
###                               ''error in external LLL invocation:\<newline>''))
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" n)
###                               ("_position" m))
###                             ("_Literal"
###                               ("_position"
###                                 ''reduced matrix does not span same lattice''))
###                             ("_Literal"
###                               ("_position"
###                                 ''no certificate only allowed for square matrices''))))
###                         ("_lambda" ("_idtdummy")
###                           ("_applC" ("_position" rb)
###                             ("_position" fs)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" reduce_basis_external)
###       ("_cargs" ("_position" \<alpha>) ("_position" fs)))
###     ("_case_syntax" ("_position" fs)
###       ("_case2" ("_case1" ("_position" Nil) ("\<^const>List.list.Nil"))
###         ("_case1"
###           ("_applC" ("_position" Cons)
###             ("_cargs" ("_position" f) ("\<^const>Pure.dummy_pattern")))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" rb)
###                 ("_applC" ("_position" reduce_basis)
###                   ("_position" \<alpha>)))
###               ("_binds"
###                 ("_bind" ("_position" fsi)
###                   ("_applC" ("_position" map)
###                     ("_cargs"
###                       ("\<^const>Fun.comp"
###                         ("_applC" ("_position" map)
###                           ("_position" integer_of_int))
###                         ("_position" list_of_vec))
###                       ("_position" fs))))
###                 ("_binds"
###                   ("_bind" ("_position" n)
###                     ("_applC" ("_position" dim_vec) ("_position" f)))
###                   ("_bind" ("_position" m)
###                     ("_applC" ("_position" length) ("_position" fs))))))
###             ("_case_syntax"
###               ("_applC" ("_position" external_lll_solver)
###                 ("_cargs"
###                   ("_applC" ("_position" map_prod)
###                     ("_cargs" ("_position" integer_of_int)
###                       ("_cargs" ("_position" integer_of_int)
###                         ("_applC" ("_position" quotient_of)
###                           ("_position" \<alpha>)))))
###                   ("_position" fsi)))
###               ("_case1"
###                 ("_tuple" ("_position" gsi) ("_tuple_arg" ("_position" co)))
###                 ("_Let"
###                   ("_bind" ("_position" gs)
###                     ("_applC" ("_position" map)
###                       ("_cargs"
###                         ("\<^const>Fun.comp" ("_position" vec_of_list)
###                           ("_applC" ("_position" map)
###                             ("_position" int_of_integer)))
###                         ("_position" gsi))))
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.Not"
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" gs))
###                           ("_position" m))
###                         ("_Ball" ("_position" gi)
###                           ("_applC" ("_position" set) ("_position" gs))
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" dim_vec)
###                               ("_position" gi))
###                             ("_position" n)))))
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_Literal"
###                               ("_position"
###                                 ''error in external LLL invocation: dimensions of reduced basis do not fit\<newline>input to external solver: ''))
###                             ("_applC" ("_position" String.implode)
###                               ("_applC" ("_position" show)
###                                 ("_position" fs))))
###                           ("_Literal"
###                             ("_position" ''\<newline>\<newline>'')))
###                         ("_lambda" ("_idtdummy")
###                           ("_applC" ("_position" rb) ("_position" fs)))))
###                     ("_case_syntax" ("_position" co)
###                       ("_case2"
###                         ("_case1"
###                           ("_applC" ("_position" Some)
###                             ("_tuple" ("_position" u1i)
###                               ("_tuple_arg" ("_position" u2i))))
###                           ("_Let"
###                             ("_binds"
###                               ("_bind" ("_position" u1)
###                                 ("_applC" ("_position" mat_of_rows_list)
###                                   ("_cargs" ("_position" m)
###                                     ("_applC" ("_position" map)
### ("_cargs" ("_applC" ("_position" map) ("_position" int_of_integer))
###   ("_position" u1i))))))
###                               ("_binds"
###                                 ("_bind" ("_position" u2)
###                                   ("_applC" ("_position" mat_of_rows_list)
###                                     ("_cargs" ("_position" m)
### ("_applC" ("_position" map)
###   ("_cargs" ("_applC" ("_position" map) ("_position" int_of_integer))
###     ("_position" u2i))))))
###                                 ("_binds"
###                                   ("_bind" ("_position" gs)
###                                     ("_applC" ("_position" map)
### ("_cargs"
###   ("\<^const>Fun.comp" ("_position" vec_of_list)
###     ("_applC" ("_position" map) ("_position" int_of_integer)))
###   ("_position" gsi))))
###                                   ("_binds"
###                                     ("_bind" ("_position" Fs)
### ("_applC" ("_position" mat_of_rows)
###   ("_cargs" ("_position" n) ("_position" fs))))
###                                     ("_bind" ("_position" Gs)
### ("_applC" ("_position" mat_of_rows)
###   ("_cargs" ("_position" n) ("_position" gs))))))))
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" dim_row)
###                                     ("_position" u1))
###                                   ("_position" m))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.eq"
###                                     ("_applC" ("_position" dim_col)
### ("_position" u1))
###                                     ("_position" m))
###                                   ("\<^const>HOL.conj"
###                                     ("\<^const>HOL.eq"
### ("_applC" ("_position" dim_row) ("_position" u2)) ("_position" m))
###                                     ("\<^const>HOL.conj"
### ("\<^const>HOL.eq" ("_applC" ("_position" dim_col) ("_position" u2))
###   ("_position" m))
### ("\<^const>HOL.conj"
###   ("\<^const>HOL.eq" ("_position" Fs)
###     ("\<^const>Groups.times_class.times" ("_position" u1) ("_position" Gs)))
###   ("\<^const>HOL.eq" ("_position" Gs)
###     ("\<^const>Groups.times_class.times" ("_position" u2)
###       ("_position" Fs))))))))
###                               ("_applC" ("_position" rb) ("_position" gs))
###                               ("_applC" ("_position" Code.abort)
###                                 ("_cargs"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("\<^const>Groups.plus_class.plus"
### ("\<^const>Groups.plus_class.plus"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("_Literal"
###               ("_position"
###                 ''error in external lll invocation\<newline>f,g,u1,u2 are as follows\<newline>''))
###             ("_applC" ("_position" String.implode)
###               ("_applC" ("_position" show) ("_position" Fs))))
###           ("_Literal" ("_position" ''\<newline>\<newline>'')))
###         ("_applC" ("_position" String.implode)
###           ("_applC" ("_position" show) ("_position" Gs))))
###       ("_Literal" ("_position" ''\<newline>\<newline>'')))
###     ("_applC" ("_position" String.implode)
###       ("_applC" ("_position" show) ("_position" u1))))
###   ("_Literal" ("_position" ''\<newline>\<newline>'')))
### ("_applC" ("_position" String.implode)
###   ("_applC" ("_position" show) ("_position" u2))))
###                                     ("_Literal"
### ("_position" ''\<newline>\<newline>'')))
###                                   ("_lambda" ("_idtdummy")
###                                     ("_applC" ("_position" rb)
### ("_position" fs))))))))
###                         ("_case1" ("_position" None)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq" ("_position" n)
###                                 ("_position" m))
###                               ("_applC" ("_position" integer_equivalent)
###                                 ("_cargs" ("_position" n)
###                                   ("_cargs" ("_position" fs)
###                                     ("_position" gs)))))
###                             ("_applC" ("_position" rb) ("_position" gs))
###                             ("_applC" ("_position" Code.abort)
###                               ("_cargs"
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_Literal"
###                                     ("_position"
### ''error in external LLL invocation:\<newline>''))
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.eq" ("_position" n)
### ("_position" m))
###                                     ("_Literal"
### ("_position" ''reduced matrix does not span same lattice''))
###                                     ("_Literal"
### ("_position" ''no certificate only allowed for square matrices''))))
###                                 ("_lambda" ("_idtdummy")
###                                   ("_applC" ("_position" rb)
###                                     ("_position" fs)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
locale LLL_with_assms
  fixes n :: "nat"
    and m :: "nat"
    and fs_init :: "int vec list"
    and \<alpha> :: "rat"
  assumes "LLL_with_assms n m fs_init \<alpha>"
overloading
  enable_external_lll_solver \<equiv> enable_external_lll_solver :: bool
### theory "Draft.LLL_Certification"
### 6.105s elapsed time, 6.649s cpu time, 1.277s GC time
Loading theory "Draft.LLL_CertificationTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LLL_CertificationTemplates"
### 3.439s elapsed time, 5.811s cpu time, 3.099s GC time
val it = (): unit
