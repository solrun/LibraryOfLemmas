Loading theory "Draft.Missing_Lemmas" (required by "Draft.Int_Rat_OperationsTemplates" via "Draft.Int_Rat_Operations" via "Draft.Norms")
Loading theory "Draft.Templates" (required by "Draft.Int_Rat_OperationsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Int_Rat_OperationsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.577s elapsed time, 1.160s cpu time, 0.153s GC time
Found termination order: "length <*mlex*> {}"
consts
  rev_upt :: "nat => nat => nat list"
### theory "Draft.Missing_Lemmas"
### 6.475s elapsed time, 8.005s cpu time, 1.572s GC time
Loading theory "Draft.Norms" (required by "Draft.Int_Rat_OperationsTemplates" via "Draft.Int_Rat_Operations")
class semiring_real_line = ordered_semiring_strict + ordered_semiring_0 +
  assumes
    "add_pos_neg_is_real":
      "!!a b. [| (0::'a) < a; b < (0::'a) |] ==> is_real (a + b)"
    and
    "mult_neg_neg":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> (0::'a) < a * b"
    and
    "pos_pos_linear":
      "!!a b. [| (0::'a) < a; (0::'a) < b |] ==> a < b | a = b | b < a"
    and
    "neg_neg_linear":
      "!!a b. [| a < (0::'a); b < (0::'a) |] ==> a < b | a = b | b < a"
class conjugatable_ring_1_abs_real_line = conjugatable_ring +
  ring_1_abs_real_line +
  assumes
    "sq_norm_as_sq_abs": "!!a. a * conjugate a = \<bar>a\<bar>\<^sup>2"
class trivial_conjugatable = conjugate +
  assumes "conjugate_id": "!!x. conjugate x = x"
### theory "Draft.Norms"
### 17.404s elapsed time, 19.480s cpu time, 3.520s GC time
Loading theory "Draft.Int_Rat_Operations" (required by "Draft.Int_Rat_OperationsTemplates")
### theory "Draft.Int_Rat_Operations"
### 0.104s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Draft.Int_Rat_OperationsTemplates"
val templateLemmas =
   [("Int_Rat_Operations.sq_norm_vec_rat_code",
     "sq_norm_vec_rat ?x = sum_list (map square_rat (list_of_vec ?x))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Int_Rat_Operations.square_rat_code",
     "quotient_of (square_rat ?x) =
      (case quotient_of ?x of (n, d) => (n * n, d * d))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 4, template_var 0)))),
    ("Int_Rat_Operations.int_times_rat_code",
     "quotient_of (int_times_rat ?i ?x) =
      (case quotient_of ?x of (n, d) => Rat.normalize (?i * n, d))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 5, template_var 0)))),
    ("Int_Rat_Operations.scalar_prod_int_rat",
     "dim_vec ?x = dim_vec ?y ==>
      ?x \<bullet>i ?y = of_int_hom.vec_hom ?x \<bullet> ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Int_Rat_Operations.scalar_prod_int_rat_code",
     "?v \<bullet>i ?w =
      (SUM i = 0..<dim_vec ?v. int_times_rat (?v $ i) (?w $ i))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("Int_Rat_Operations.quotient_of_square",
     "quotient_of ?x = (?a, ?b) ==>
      quotient_of (?x * ?x) = (?a * ?a, ?b * ?b)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Int_Rat_OperationsTemplates"
### 2.207s elapsed time, 2.581s cpu time, 0.301s GC time
val it = (): unit
