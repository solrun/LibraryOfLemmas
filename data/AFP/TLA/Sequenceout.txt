Loading theory "Draft.Sequence" (required by "Draft.SequenceTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.602s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.823s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Sequence"
### 0.340s elapsed time, 1.356s cpu time, 0.131s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.390s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.746s elapsed time, 2.404s cpu time, 0.316s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.962s elapsed time, 2.758s cpu time, 0.731s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.819s elapsed time, 4.294s cpu time, 0.900s GC time
Loading theory "Draft.Templates" (required by "Draft.SequenceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SequenceTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.454s elapsed time, 0.503s cpu time, 0.059s GC time
Loading theory "Draft.SequenceTemplates"
val templateLemmas =
   [("Sequence.seqsim_refl", "?s \<approx> ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Sequence.suffix_zero", "?s |\<^sub>s 0 = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Lazy_Sequence.lazy_sequence_of_list_of_lazy_sequence",
     "lazy_sequence_of_list (list_of_lazy_sequence ?xq) = ?xq",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Sequence.first_tail_second", "first (tail ?s) = second ?s",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sequence.seq_app_first", "(?s ## ?\<sigma>) 0 = ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Sequence.suffix_tail", "?s |\<^sub>s 1 = tail ?s",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Sequence.seq_app_tail", "tail (?x ## ?s) = ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Sequence.collapse_empty_iff_empty",
     "emptyseq (\<natural> ?s) = emptyseq ?s",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Lazy_Sequence.yield_Seq",
     "Lazy_Sequence.yield (Lazy_Sequence ?f) = ?f ()",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_var 0, template_hole 0))),
    ("Sequence.addfeqsim", "first ?t ## ?t \<approx> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 0)),
           template_var 0)
         )),
    ("Sequence.addfeqstut", "stutstep (first ?t ## ?t) 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 0)),
           template_hole 0)
         )),
    ("Sequence.empty_is_finite", "emptyseq ?s ==> fin ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sequence.seq_empty_is_nonstut", "emptyseq ?s ==> nonstutseq ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.case_lazy_sequence",
     "(case ?xq of lazy_sequence_of_list x => ?f x) =
      ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.rec_lazy_sequence",
     "rec_lazy_sequence ?f ?xq = ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Sequence.seq_app_second", "(?s ## ?\<sigma>) 1 = ?\<sigma> 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app (template_var 0, template_hole 0))),
    ("Sequence.suffix_first", "first (?s |\<^sub>s ?n) = ?s ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Sequence.seq_app_first_tail", "first ?s ## tail ?s = ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Lazy_Sequence.list_of_lazy_sequence_single",
     "list_of_lazy_sequence (Lazy_Sequence.single ?x) = [?x]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Sequence.empty_collapse_empty",
     "emptyseq ?s ==> emptyseq (\<natural> ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sequence.collapse_empty_empty",
     "emptyseq (\<natural> ?s) ==> emptyseq ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Sequence.suffix_second", "second (?s |\<^sub>s ?n) = ?s (Suc ?n)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Sequence.seqsim_prev_nextnat",
     "?s \<approx> ?s |\<^sub>s nextnat ?s - 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)))
         )),
    ("Sequence.emptyseq_collapse_eq", "emptyseq ?s ==> \<natural> ?s = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Sequence.empty_nextsuffix", "emptyseq ?s ==> nextsuffix ?s = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Sequence.empty_suffix_is_empty",
     "emptyseq ?s ==> emptyseq (?s |\<^sub>s ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Sequence.seqeq_imp_sim", "?s = ?t ==> ?s \<approx> ?t",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Sequence.seqsim_sym", "?s \<approx> ?t ==> ?t \<approx> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sequence.next_ex_id", "EX i. ?s i = next ?m ?s 0",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Sequence.next_suc_suffix",
     "next (Suc ?n) ?s = nextsuffix (next ?n ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Sequence.next_suffix_com",
     "nextsuffix (next ?n ?s) = next ?n (nextsuffix ?s)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Sequence.tail_suffix_suc",
     "?s |\<^sub>s Suc ?n = tail (?s |\<^sub>s ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Lazy_Sequence.lazy_sequence_eq_iff",
     "(?xq = ?yq) =
      (list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_flat",
     "list_of_lazy_sequence (Lazy_Sequence.flat ?xqq) =
      concat (map list_of_lazy_sequence (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.list_of_lazy_sequence_map",
     "list_of_lazy_sequence (Lazy_Sequence.map ?f ?xq) =
      map ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.single_code",
     "Lazy_Sequence.single ?x =
      Lazy_Sequence (%_. Some (?x, Lazy_Sequence.empty))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Sequence.seq_empty_all", "emptyseq ?s ==> ?s ?i = ?s ?j",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Sequence.empty_nextsuffix_id",
     "emptyseq ?s ==> nextsuffix ?s = id ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Sequence.next_empty", "emptyseq ?s ==> next ?n ?s = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Sequence.empty_suffix_eq", "emptyseq ?s ==> ?s |\<^sub>s ?n = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Sequence.nextnat_empty_gzero", "notemptyseq ?s ==> 0 < nextnat ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_append",
     "list_of_lazy_sequence (Lazy_Sequence.append ?xq ?yq) =
      list_of_lazy_sequence ?xq @ list_of_lazy_sequence ?yq",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sequence.sim_first", "?s \<approx> ?t ==> first ?s = first ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequence.sim_first2", "?s \<approx> ?t ==> ?s 0 = ?t 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 1, template_hole 0),
         template_app (template_var 0, template_hole 0)))),
    ("Sequence.seqsim_empty_iff_empty",
     "?s \<approx> ?t ==> emptyseq ?s = emptyseq ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequence.seqsim_suffix_seqsim",
     "?s \<approx> ?t ==> nextsuffix ?s \<approx> nextsuffix ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lazy_Sequence.lazy_sequence_eqI",
     "list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq ==> ?xq = ?yq",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Sequence.next_plus", "next (?m + ?n) ?s = next ?m (next ?n ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Sequence.suffix_plus_com",
     "?s |\<^sub>s ?m |\<^sub>s ?n = ?s |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sequence.suffix_plus",
     "?s |\<^sub>s ?n |\<^sub>s ?m = ?s |\<^sub>s ?m + ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Sequence.suffix_commute",
     "?s |\<^sub>s ?n |\<^sub>s ?m = ?s |\<^sub>s ?m |\<^sub>s ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Sequence.empty_suffix_exteq",
     "emptyseq ?s ==> (?s |\<^sub>s ?n) ?m = ?s ?m",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Sequence.stutnempty",
     "~ stutstep ?s ?n ==> notemptyseq (?s |\<^sub>s ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Sequence.nextnat_le_unch", "?n < nextnat ?s ==> ?s ?n = ?s 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, template_var 1),
         template_app (template_var 0, template_hole 0)))),
    ("Sequence.nextnat_le_seqsim",
     "?n < nextnat ?s ==> ?s \<approx> ?s |\<^sub>s ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Sequence.suc_empty",
     "emptyseq (?s |\<^sub>s ?m) ==> emptyseq (?s |\<^sub>s Suc ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Sequence.addfirststut",
     "first ?s = second ?s ==> ?s \<approx> tail ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sequence.seqsim_empty_empty",
     "[| ?s \<approx> ?t; emptyseq ?s |] ==> emptyseq ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sequence.nextnat_empty_neq",
     "notemptyseq ?s ==> ?s (nextnat ?s) ~= ?s 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_var 0,
               template_app (template_hole 1, template_var 0)),
             template_app (template_var 0, template_hole 0))
           ))),
    ("Sequence.app_seqsimilar",
     "?s \<approx> ?t ==> ?x ## ?s \<approx> ?x ## ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Sequence.notstutstep_nexnat1",
     "~ stutstep ?s ?n ==> nextnat (?s |\<^sub>s ?n) = 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Sequence.tail_sim_second",
     "tail ?s \<approx> tail ?t ==> second ?s = second ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequence.seqsim_stutstep",
     "stutstep ?s ?n ==> ?s |\<^sub>s Suc ?n \<approx> ?s |\<^sub>s ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Sequence.seqsim_trans",
     "[| ?s \<approx> ?t; ?t \<approx> ?z |] ==> ?s \<approx> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Sequence.notempty_nextnotzero",
     "notemptyseq ?s ==> next (Suc 0) ?s 0 ~= ?s 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)),
                 template_var 0),
               template_hole 0),
             template_app (template_var 0, template_hole 0))
           ))),
    ("Sequence.seq_app_greater_than_zero",
     "0 < ?n ==> (?s ## ?\<sigma>) ?n = ?\<sigma> (?n - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Sequence.simstep_disj1",
     "?s \<approx> ?t ==> EX m. ?s |\<^sub>s ?n \<approx> ?t |\<^sub>s m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Sequence.stut_nextsuf_suc",
     "stutstep ?s ?n ==>
      nextsuffix (?s |\<^sub>s ?n) = nextsuffix (?s |\<^sub>s Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Sequence.stutstep_empty_suc",
     "stutstep ?s ?n ==>
      emptyseq (?s |\<^sub>s Suc ?n) = emptyseq (?s |\<^sub>s ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Sequence.notstutstep_nextsuffix1",
     "~ stutstep ?s ?n ==>
      nextsuffix (?s |\<^sub>s ?n) = ?s |\<^sub>s Suc ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Sequence.seqsim_notstutstep",
     "~ stutstep ?s ?n ==>
      ?s |\<^sub>s Suc ?n \<approx> nextsuffix (?s |\<^sub>s ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Lazy_Sequence.case_yield_eq",
     "(case Lazy_Sequence.yield ?xq of None => ?g | Some x => ?h x) =
      (case list_of_lazy_sequence ?xq of [] => ?g
       | x # xa => (curry ?h x o lazy_sequence_of_list) xa)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Sequence.stutstep_notempty_notempty",
     "[| emptyseq (?s |\<^sub>s Suc ?n); stutstep ?s ?n |]
      ==> emptyseq (?s |\<^sub>s ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Lazy_Sequence.list_of_Lazy_Sequence",
     "list_of_lazy_sequence (Lazy_Sequence ?f) =
      (case ?f () of None => []
       | Some (x, xq) => x # list_of_lazy_sequence xq)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_app (template_var 0, template_hole 0)))),
    ("Sequence.fin_stut_after_last",
     "fin ?s ==> ALL j>=Sequence.last ?s. ?s j = ?s (Sequence.last ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Sequence.seqsimilarI",
     "[| first ?s = first ?t; nextsuffix ?s \<approx> nextsuffix ?t |]
      ==> ?s \<approx> ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Lazy_Sequence.map_code",
     "Lazy_Sequence.map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (?f x, Lazy_Sequence.map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Sequence.seq_empty_eq",
     "[| ?s 0 = ?t 0; emptyseq ?s; emptyseq ?t |] ==> ?s = ?t",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 2),
          template_app (template_var 0, template_hole 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Lazy_Sequence.list_of_lazy_sequence_hb_flat",
     "list_of_lazy_sequence (hb_flat ?xqq) =
      concat
       (map ((%x. case x of None => [None] | Some xs => xs) o
             map_option list_of_lazy_sequence)
         (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 1, template_hole 10))),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.flat_code",
     "Lazy_Sequence.flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append xq (Lazy_Sequence.flat xqq')))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Lazy_Sequence.hb_map_code",
     "hb_map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (map_option ?f x, hb_map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Sequence.notempty_exist_nonstut",
     "notemptyseq (?s |\<^sub>s ?m) ==> EX i. ?s i ~= ?s ?m & ?m < i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))
                )
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lazy_Sequence.append_code",
     "Lazy_Sequence.append ?xq ?yq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xq of None => Lazy_Sequence.yield ?yq
            | Some (x, xq') => Some (x, Lazy_Sequence.append xq' ?yq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Lazy_Sequence.hb_flat_code",
     "hb_flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append
                   (case xq of None => hit_bound | Some xq => xq)
                   (hb_flat xqq')))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Sequence.stutstep_notempty_sucnextnat",
     "[| notemptyseq (?s |\<^sub>s ?n); stutstep ?s ?n |]
      ==> nextnat (?s |\<^sub>s ?n) = Suc (nextnat (?s |\<^sub>s Suc ?n))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 0, template_var 0))))))),
    ("Sequence.sim_step",
     "?s \<approx> ?t ==>
      EX m. ?s |\<^sub>s ?n \<approx> ?t |\<^sub>s m &
            (?s |\<^sub>s Suc ?n \<approx> ?t |\<^sub>s Suc m |
             ?s |\<^sub>s Suc ?n \<approx> ?t |\<^sub>s m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Limited_Sequence.map_seq_code",
     "Limited_Sequence.map_seq ?f ?xq ?i ?pol =
      (case Lazy_Sequence.yield ?xq of None => Some Lazy_Sequence.empty
       | Some (x, xq') =>
           case Limited_Sequence.eval (?f x) ?i ?pol of None => None
           | Some yq =>
               case Limited_Sequence.map_seq ?f xq' ?i ?pol of None => None
               | Some zq => Some (Lazy_Sequence.append yq zq))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Sequence.seqsim_suffix_suc",
     "?s |\<^sub>s ?n \<approx> ?t |\<^sub>s ?m ==>
      EX m'.
         ?s |\<^sub>s ?n \<approx> ?t |\<^sub>s m' &
         (?s |\<^sub>s Suc ?n \<approx> ?t |\<^sub>s Suc m' |
          ?s |\<^sub>s Suc ?n \<approx> ?t |\<^sub>s m')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lazy_Sequence.equal_lazy_sequence_code",
     "equal_class.equal ?xq ?yq =
      (case (Lazy_Sequence.yield ?xq, Lazy_Sequence.yield ?yq) of
       (None, None) => True | (None, Some a) => False
       | (Some (x, xq'), None) => False
       | (Some (x, xq'), Some (y, yq')) =>
           equal_class.equal x y & equal_class.equal ?xq ?yq)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.SequenceTemplates"
### 0.297s elapsed time, 0.380s cpu time, 0.000s GC time
val it = (): unit
