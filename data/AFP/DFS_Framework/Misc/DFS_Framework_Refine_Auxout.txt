Loading theory "Draft.DFS_Framework_Misc" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.DFS_Framework_Refine_Aux")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.DFS_Framework_Misc"
### 0.043s elapsed time, 0.212s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.592s cpu time, 0.052s GC time
Loading theory "Draft.DFS_Framework_Refine_Aux" (required by "Draft.DFS_Framework_Refine_AuxTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.912s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs")
### theory "Draft.DFS_Framework_Refine_Aux"
### 0.254s elapsed time, 0.986s cpu time, 0.100s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.821s elapsed time, 2.850s cpu time, 0.289s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.722s elapsed time, 2.234s cpu time, 0.338s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.909s elapsed time, 4.383s cpu time, 0.997s GC time
Loading theory "Draft.Templates" (required by "Draft.DFS_Framework_Refine_AuxTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DFS_Framework_Refine_AuxTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.474s elapsed time, 0.481s cpu time, 0.000s GC time
Loading theory "Draft.DFS_Framework_Refine_AuxTemplates"
val templateLemmas =
   [("DFS_Framework_Refine_Aux.GHOST_elim_Let", "Let (GHOST ?m) ?f = ?f ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_app (template_var 0, template_var 1))),
    ("DFS_Framework_Refine_Aux.WHILET_eq_WHILE",
     "WHILE\<^sub>T ?b ?f ?s0.0 ~= FAIL ==>
      WHILE\<^sub>T ?b ?f ?s0.0 = WHILE ?b ?f ?s0.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DFS_Framework_Refine_Aux.WHILEIT_eq_WHILEI",
     "WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s0.0 ~= FAIL ==>
      WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s0.0 =
      WHILE\<^bsup>?I\<^esup> ?b ?f ?s0.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("DFS_Framework_Refine_Aux.WHILEIT_eq_WHILEI_tproof",
     "[| wf ?V;
         !!s. [| ?I s; ?b s |] ==> ?f s <= SPEC (%s'. (s', s) : ?V) |]
      ==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s0.0 =
          WHILE\<^bsup>?I\<^esup> ?b ?f ?s0.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("DFS_Framework_Refine_Aux.WHILET_eq_WHILE_tproof",
     "[| wf ?V; ?I ?s0.0;
         !!s. [| ?I s; ?b s |]
              ==> ?f s <= SPEC (%s'. ?I s' & (s', s) : ?V) |]
      ==> WHILE\<^sub>T ?b ?f ?s0.0 = WHILE ?b ?f ?s0.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("DFS_Framework_Refine_Aux.WHILEIT_le_WHILEI",
     "[| wf ?V;
         !!s. [| ?I s; ?b s; ?f s <= SPEC ?I |]
              ==> ?f s <= SPEC (%s'. (s', s) : ?V) |]
      ==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s
          <= WHILE\<^bsup>?I\<^esup> ?b ?f ?s",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("DFS_Framework_Refine_Aux.WHILEIT_refine_WHILEI",
     "[| wf ?V;
         !!s. [| ?I s; ?b s; ?f s <= SPEC ?I |]
              ==> ?f s <= SPEC (%s'. (s', s) : ?V);
         ?I' ?x' ==> (?x, ?x') : ?R;
         !!x x'. [| (x, x') : ?R; ?I' x' |] ==> ?I x;
         !!x x'. [| (x, x') : ?R; ?I x; ?I' x' |] ==> ?b x = ?b' x';
         !!x x'.
            [| (x, x') : ?R; ?b x; ?b' x'; ?I x; ?I' x' |]
            ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?x
          <= \<Down> ?R (WHILE\<^bsup>?I'\<^esup> ?b' ?f' ?x')",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 9)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_implication
         ([template_predicate
            (template_app (template_var 5, template_var 4))],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 4)),
                template_var 2)
              )),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 8),
               template_var 7),
             template_var 6),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1),
               template_var 0),
             template_var 4)))))]:
   (string * thm * template) list
### theory "Draft.DFS_Framework_Refine_AuxTemplates"
### 0.458s elapsed time, 0.587s cpu time, 0.069s GC time
val it = (): unit
