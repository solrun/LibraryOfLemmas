Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.DFS_Framework_Misc" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework" via "Draft.Param_DFS" via "Draft.DFS_Framework_Refine_Aux")
Loading theory "HOL-Library.Stream" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.DFS_Framework_Misc"
### 0.043s elapsed time, 0.210s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.171s elapsed time, 0.695s cpu time, 0.063s GC time
Loading theory "Draft.DFS_Framework_Refine_Aux" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework" via "Draft.Param_DFS")
### theory "HOL-Library.Set_Algebras"
### 0.272s elapsed time, 1.101s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs")
### theory "Draft.DFS_Framework_Refine_Aux"
### 0.267s elapsed time, 1.044s cpu time, 0.117s GC time
Loading theory "Draft.Impl_Rev_Array_Stack" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.941s elapsed time, 3.679s cpu time, 0.421s GC time
Loading theory "Draft.Param_DFS" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Impl_Rev_Array_Stack"
### 0.749s elapsed time, 2.833s cpu time, 0.759s GC time
"array_length"
  :: "'a array => nat"
"array_shrink"
  :: "'a array => nat => 'a array"
### theory "HOL-Library.BigO"
### 0.932s elapsed time, 3.522s cpu time, 0.876s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.064s elapsed time, 6.324s cpu time, 1.182s GC time
Loading theory "Draft.Templates" (required by "Draft.Reachable_NodesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.132s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Reachable_NodesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.573s elapsed time, 1.202s cpu time, 0.141s GC time
locale param_DFS_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "DFS G param"
### theory "Draft.Param_DFS"
### 3.087s elapsed time, 5.540s cpu time, 1.011s GC time
Loading theory "Draft.DFS_Invars_Basic" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
Loading theory "Draft.General_DFS_Structure" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework" via "Draft.Tailrec_Impl")
locale timing_syntax
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale DFS_invar
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
    and s :: "('v, 'es) state_scheme"
  assumes "DFS_invar G param s"
locale DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "DFS G param"
### theory "Draft.DFS_Invars_Basic"
### 1.607s elapsed time, 3.651s cpu time, 1.096s GC time
locale gen_dfs_defs
  fixes gds :: "('v, 's) gen_dfs_struct"
    and V0 :: "'v set"
locale gen_dfs
  fixes gds :: "('v, 's) gen_dfs_struct"
    and V0 :: "'v set"
locale gen_param_dfs_defs
  fixes gbs :: "('v, 's, 'es) gen_basic_dfs_struct"
    and param :: "('v, 's, 'es) gen_parameterization"
    and upd_ext :: "('es => 'es) => 's => 's"
    and V0 :: "'v set"
locale gen_param_dfs
  fixes gbs :: "('v, 's, 'es) gen_basic_dfs_struct"
    and param :: "('v, 's, 'es) gen_parameterization"
    and upd_ext :: "('es => 'es) => 's => 's"
    and V0 :: "'v set"
locale param_DFS_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
locale param_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
    and param :: "('v, ('v, 'es) state_scheme, 'es) gen_parameterization"
  assumes "param_DFS G"
locale gen_dfs_refine_defs
  fixes gdsi :: "('a, 'b) gen_dfs_struct"
    and V0i :: "'a set"
    and gds :: "('c, 'd) gen_dfs_struct"
    and V0 :: "'c set"
locale gen_dfs_refine
  fixes gdsi :: "('a, 'b) gen_dfs_struct"
    and V0i :: "'a set"
    and gds :: "('c, 'd) gen_dfs_struct"
    and V0 :: "'c set"
    and V :: "('a * 'c) set"
    and S :: "('b * 'd) set"
  assumes "gen_dfs_refine gdsi V0i gds V0 V S"
"gds_is_discovered gdsi"
  :: "'a => 'b => bool"
locale gbs_refinement
  fixes gbsi :: "('a, 'b, 'c) gen_basic_dfs_struct"
    and parami :: "('a, 'b, 'c) gen_parameterization"
    and upd_exti :: "('c => 'c) => 'b => 'b"
    and V0i :: "'a set"
    and gbs :: "('d, 'e, 'f) gen_basic_dfs_struct"
    and param :: "('d, 'e, 'f) gen_parameterization"
    and upd_ext :: "('f => 'f) => 'e => 'e"
    and V0 :: "'d set"
    and V :: "('a * 'd) set"
    and S :: "('b * 'e) set"
    and ES :: "('c * 'f) set"
  assumes "gbs_refinement gbsi parami V0i gbs param upd_ext V0 V S ES"
locale param_refinement
  fixes gbsi :: "('a, 'b, 'c) gen_basic_dfs_struct"
    and parami :: "('a, 'b, 'c) gen_parameterization"
    and upd_exti :: "('c => 'c) => 'b => 'b"
    and V0i :: "'a set"
    and gbs :: "('d, 'e, 'f) gen_basic_dfs_struct"
    and param :: "('d, 'e, 'f) gen_parameterization"
    and upd_ext :: "('f => 'f) => 'e => 'e"
    and V0 :: "'d set"
    and V :: "('a * 'd) set"
    and S :: "('b * 'e) set"
    and ES :: "('c * 'f) set"
  assumes "param_refinement parami upd_exti gbs param upd_ext V0 V S ES"
locale gen_param_dfs_refine_defs
  fixes gbsi :: "('a, 'b, 'c) gen_basic_dfs_struct"
    and parami :: "('a, 'b, 'c) gen_parameterization"
    and upd_exti :: "('c => 'c) => 'b => 'b"
    and V0i :: "'a set"
    and gbs :: "('d, 'e, 'f) gen_basic_dfs_struct"
    and param :: "('d, 'e, 'f) gen_parameterization"
    and upd_ext :: "('f => 'f) => 'e => 'e"
    and V0 :: "'d set"
locale gen_param_dfs_refine
  fixes gbsi :: "('vi, 'si, 'esi) gen_basic_dfs_struct"
    and parami :: "('vi, 'si, 'esi) gen_parameterization"
    and upd_exti :: "('esi => 'esi) => 'si => 'si"
    and V0i :: "'vi set"
    and gbs :: "('v, 's, 'es) gen_basic_dfs_struct"
    and param :: "('v, 's, 'es) gen_parameterization"
    and upd_ext :: "('es => 'es) => 's => 's"
    and V0 :: "'v set"
    and V :: "('vi * 'v) set"
    and S :: "('si * 's) set"
    and ES :: "('esi * 'es) set"
  assumes
    "gen_param_dfs_refine gbsi parami upd_exti V0i gbs param upd_ext V0 V S
      ES"
### theory "Draft.General_DFS_Structure"
### 3.678s elapsed time, 5.907s cpu time, 1.341s GC time
Loading theory "Draft.Rec_Impl" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
Loading theory "Draft.Tailrec_Impl" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
locale tailrec_impl_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
    and gds :: "('v, 's) gen_dfs_struct"
locale rec_impl_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
    and gds :: "('v, 's) gen_dfs_struct"
    and pending :: "'s => ('v * 'v) set"
    and stack :: "'s => 'v list"
    and choose_pending :: "'v => 'v option => 's => 's nres"
locale tailrec_impl
  fixes G :: "('v, 'more) graph_rec_scheme"
    and gds :: "('v, 's) gen_dfs_struct"
  assumes "Tailrec_Impl.tailrec_impl G gds"
### theory "Draft.Tailrec_Impl"
### 0.237s elapsed time, 0.489s cpu time, 0.068s GC time
locale rec_impl
  fixes G :: "('v, 'more) graph_rec_scheme"
    and gds :: "('v, 's) gen_dfs_struct"
    and pending :: "'s => ('v * 'v) set"
    and stack :: "'s => 'v list"
    and choose_pending :: "'v => 'v option => 's => 's nres"
  assumes "Rec_Impl.rec_impl G gds pending stack choose_pending"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### nofail (SELECT ?P1) == True
### Ignoring duplicate rewrite rule:
### ~ nofail ?S1 ==> inres ?S1 ?x1 == True
### Ignoring duplicate rewrite rule:
### inres SUCCEED == %_. False
### Ignoring duplicate rewrite rule:
### inres (RETURN ?x1) == (=) ?x1
### Ignoring duplicate rewrite rule:
### inres (RES ?X1) == %x. x : ?X1
### Ignoring duplicate rewrite rule:
### inres FAIL == %_. True
### Ignoring duplicate rewrite rule:
### nofail SUCCEED == True
### Ignoring duplicate rewrite rule:
### nofail (RETURN ?x1) == True
### Ignoring duplicate rewrite rule:
### nofail (RES ?X1) == True
### Ignoring duplicate rewrite rule:
### nofail FAIL == False
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### nofail (SELECT ?P1) == True
### Ignoring duplicate rewrite rule:
### ~ nofail ?S1 ==> inres ?S1 ?x1 == True
### Ignoring duplicate rewrite rule:
### inres SUCCEED == %_. False
### Ignoring duplicate rewrite rule:
### inres (RETURN ?x1) == (=) ?x1
### Ignoring duplicate rewrite rule:
### inres (RES ?X1) == %x. x : ?X1
### Ignoring duplicate rewrite rule:
### inres FAIL == %_. True
### Ignoring duplicate rewrite rule:
### nofail SUCCEED == True
### Ignoring duplicate rewrite rule:
### nofail (RETURN ?x1) == True
### Ignoring duplicate rewrite rule:
### nofail (RES ?X1) == True
### Ignoring duplicate rewrite rule:
### nofail FAIL == False
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### nofail (SELECT ?P1) == True
### Ignoring duplicate rewrite rule:
### ~ nofail ?S1 ==> inres ?S1 ?x1 == True
### Ignoring duplicate rewrite rule:
### inres SUCCEED == %_. False
### Ignoring duplicate rewrite rule:
### inres (RETURN ?x1) == (=) ?x1
### Ignoring duplicate rewrite rule:
### inres (RES ?X1) == %x. x : ?X1
### Ignoring duplicate rewrite rule:
### inres FAIL == %_. True
### Ignoring duplicate rewrite rule:
### nofail SUCCEED == True
### Ignoring duplicate rewrite rule:
### nofail (RETURN ?x1) == True
### Ignoring duplicate rewrite rule:
### nofail (RES ?X1) == True
### Ignoring duplicate rewrite rule:
### nofail FAIL == False
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### nofail (SELECT ?P1) == True
### Ignoring duplicate rewrite rule:
### ~ nofail ?S1 ==> inres ?S1 ?x1 == True
### Ignoring duplicate rewrite rule:
### inres SUCCEED == %_. False
### Ignoring duplicate rewrite rule:
### inres (RETURN ?x1) == (=) ?x1
### Ignoring duplicate rewrite rule:
### inres (RES ?X1) == %x. x : ?X1
### Ignoring duplicate rewrite rule:
### inres FAIL == %_. True
### Ignoring duplicate rewrite rule:
### nofail SUCCEED == True
### Ignoring duplicate rewrite rule:
### nofail (RETURN ?x1) == True
### Ignoring duplicate rewrite rule:
### nofail (RES ?X1) == True
### Ignoring duplicate rewrite rule:
### nofail FAIL == False
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### nofail (SELECT ?P1) == True
### Ignoring duplicate rewrite rule:
### ~ nofail ?S1 ==> inres ?S1 ?x1 == True
### Ignoring duplicate rewrite rule:
### inres SUCCEED == %_. False
### Ignoring duplicate rewrite rule:
### inres (RETURN ?x1) == (=) ?x1
### Ignoring duplicate rewrite rule:
### inres (RES ?X1) == %x. x : ?X1
### Ignoring duplicate rewrite rule:
### inres FAIL == %_. True
### Ignoring duplicate rewrite rule:
### nofail SUCCEED == True
### Ignoring duplicate rewrite rule:
### nofail (RETURN ?x1) == True
### Ignoring duplicate rewrite rule:
### nofail (RES ?X1) == True
### Ignoring duplicate rewrite rule:
### nofail FAIL == False
### theory "Draft.Rec_Impl"
### 3.343s elapsed time, 3.734s cpu time, 0.224s GC time
Loading theory "Draft.Simple_Impl" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
locale pre_simple_impl
  fixes G :: "('a, 'b) graph_rec_scheme"
locale simple_impl_defs
  fixes G :: "('a, 'b) graph_rec_scheme"
    and
    parami :: "('a, ('a, 'd) simple_state_scheme, 'd) gen_parameterization"
    and param :: "('a, ('a, 'c) state_scheme, 'c) gen_parameterization"
locale simple_impl
  fixes G :: "('a, 'b) graph_rec_scheme"
    and param :: "('a, ('a, 'c) state_scheme, 'c) gen_parameterization"
    and
    parami :: "('a, ('a, 'd) simple_state_scheme, 'd) gen_parameterization"
    and ES :: "('d * 'c) set"
  assumes "simple_impl G param parami ES"
"simple_state_ext"
  :: "('a * 'a set) list
      => 'a set => 'a set => 'b => ('a, 'b) simple_state_scheme"
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?s_rel \<rightarrow>\<^sub>i
###   ?ANY_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?s_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?s_rel \<rightarrow>\<^sub>i
###   ?ANY_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?s_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?s_rel \<rightarrow>\<^sub>i
###   ?ANY_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?s_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?s_rel \<rightarrow>\<^sub>i
###   ?ANY_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?s_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
locale simple_impl_defs
  fixes G :: "('a, 'b) graph_rec_scheme"
    and
    parami :: "('a, ('a, 'd) simple_state_scheme, 'd) gen_parameterization"
    and param :: "('a, ('a, 'c) state_scheme, 'c) gen_parameterization"
choose_pending u vo s ==
case vo of None => RETURN s
| Some v =>
    ASSERT (ss_stack s ~= []) >>=
    (%_. let (u, Vs) = hd (ss_stack s)
         in RETURN
             (op_ns_stack_update (%_. (u, Vs - {v}) # tl (ss_stack s)) s))
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?ANY1_rel \<rightarrow>\<^sub>i
###   ?ANY2_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?ANY_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?ANY1_rel \<rightarrow>\<^sub>i
###   ?ANY2_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?ANY_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?ANY1_rel \<rightarrow>\<^sub>i
###   ?ANY2_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?ANY_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### Adding overloaded interface type to constant:
###   simple_state_ext ::\<^sub>i
###   ?ANY1_rel \<rightarrow>\<^sub>i
###   ?ANY2_rel \<rightarrow>\<^sub>i
###   ?vis_rel \<rightarrow>\<^sub>i
###   ?erel \<rightarrow>\<^sub>i \<langle>?ANY_rel, ?vis_rel,
###   ?erel\<rangle>\<^sub>ii_simple_state
### theory "Draft.Simple_Impl"
### 2.604s elapsed time, 2.758s cpu time, 0.238s GC time
Loading theory "Draft.Restr_Impl" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes" via "Draft.DFS_Framework")
locale restricted_impl_defs
  fixes
    parami :: "('v, ('v, 'a) simple_state_scheme, 'a) gen_parameterization"
    and param :: "('v, ('v, 'b) state_scheme, 'b) gen_parameterization"
    and G :: "('v, 'more) graph_rec_scheme"
    and R :: "'v set"
locale restricted_impl
  fixes G :: "('a, 'b) graph_rec_scheme"
    and param :: "('a, ('a, 'c) state_scheme, 'c) gen_parameterization"
    and
    parami :: "('a, ('a, 'd) simple_state_scheme, 'd) gen_parameterization"
    and ES :: "('d * 'c) set"
    and R :: "'a set"
  assumes "restricted_impl G param parami ES R"
[| (?s3, ?s'3) : rel; gen_cond ?s3; ~ is_empty_stack_impl ?s3;
   sup (\<Down>
         (Id \<times>\<^sub>r
          \<langle>Id\<rangle>option_rel \<times>\<^sub>r rel)
         (inf (get_pending_impl ?s'3)
           (SPEC
             (%(uu_, Vs, uu_).
                 case Vs of None => True | Some v => v ~: R))))
    (\<Down>
      (Id \<times>\<^sub>r
       \<langle>Id\<rangle>option_rel \<times>\<^sub>r rel)
      (SPEC (%(u, Vs, s''). EX v. Vs = Some v & v : R & s'' = ?s'3))) >>=
   ?f1
   <= ?z |]
==> get_pending_impl ?s3 >>= ?f1 <= ?z
### theory "Draft.Restr_Impl"
### 0.990s elapsed time, 1.089s cpu time, 0.133s GC time
Loading theory "Draft.DFS_Framework" (required by "Draft.Reachable_NodesTemplates" via "Draft.Reachable_Nodes")
### theory "Draft.DFS_Framework"
### 0.309s elapsed time, 0.327s cpu time, 0.029s GC time
Loading theory "Draft.Reachable_Nodes" (required by "Draft.Reachable_NodesTemplates")
locale unit_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "unit_DFS G"
locale unit_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "unit_DFS G"
locale unit_DFS
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "unit_DFS G"
"unit_simple_impl.tailrec_impl"
  :: "'a itself => ('b, 'a) graph_rec_scheme => 'b simple_state nres"
"unit_simple_impl.rec_impl"
  :: "'a itself => ('b, 'a) graph_rec_scheme => 'b simple_state nres"
### Cannot skip proof of schematic goal statement
Phase "id_op"
Failed to identify: op_map_lookup
0.437s elapsed time, 0.486s cpu time, 0.076s GC time
Success (Phase "id_op")
Phase "rel_inf"
1.300s elapsed time, 1.333s cpu time, 0.060s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
1.406s elapsed time, 2.369s cpu time, 1.333s GC time
Success (Phase "fix_rel")
Phase "trans"
1.515s elapsed time, 1.532s cpu time, 0.037s GC time
Success (Phase "trans")
### theory "Draft.Reachable_Nodes"
### 8.304s elapsed time, 9.547s cpu time, 1.803s GC time
*** Failed to load theory "Draft.Reachable_NodesTemplates" (unresolved "Draft.Reachable_Nodes")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "236")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 172 of "$AFP/DFS_Framework/Examples/Reachable_Nodes.thy")
Exception- TOPLEVEL_ERROR raised
