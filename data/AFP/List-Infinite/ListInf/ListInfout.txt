Loading theory "Draft.Util_Nat" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_Div")
Loading theory "Draft.Util_Set" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_MinMax" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Util_MinMax"
### 0.057s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Util_Set"
### 0.101s elapsed time, 0.419s cpu time, 0.044s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.519s cpu time, 0.044s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Util_Nat"
### 0.191s elapsed time, 0.778s cpu time, 0.044s GC time
Loading theory "Draft.Util_Div" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.316s elapsed time, 1.238s cpu time, 0.118s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.240s cpu time, 0.175s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.394s elapsed time, 1.546s cpu time, 0.175s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Util_Div"
### 0.393s elapsed time, 1.532s cpu time, 0.272s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.870s cpu time, 0.097s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.233s cpu time, 0.917s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
class height = type +
  fixes height :: "'a => nat"
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.862s cpu time, 0.893s GC time
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.312s elapsed time, 4.528s cpu time, 0.950s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.360s elapsed time, 0.747s cpu time, 0.051s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.992s elapsed time, 6.072s cpu time, 1.145s GC time
Loading theory "Draft.Templates" (required by "Draft.ListInfMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.173s cpu time, 0.040s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListInfMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.062s cpu time, 0.066s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.544s elapsed time, 2.469s cpu time, 0.172s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.393s elapsed time, 0.430s cpu time, 0.027s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.473s elapsed time, 0.517s cpu time, 0.060s GC time
Loading theory "Draft.Util_NatInf" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "Draft.Util_NatInf"
### 0.117s elapsed time, 0.153s cpu time, 0.051s GC time
Loading theory "Draft.SetInterval2" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "Draft.SetInterval2"
### 0.921s elapsed time, 1.016s cpu time, 0.102s GC time
Loading theory "Draft.InfiniteSet2" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf")
Loading theory "Draft.SetIntervalCut" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf" via "Draft.List2")
### theory "Draft.InfiniteSet2"
### 0.126s elapsed time, 0.276s cpu time, 0.055s GC time
### theory "Draft.SetIntervalCut"
### 0.524s elapsed time, 0.693s cpu time, 0.091s GC time
Loading theory "Draft.List2" (required by "Draft.ListInfMoreTemplates" via "Draft.ListInf")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
"True"
  :: "bool"
"False"
  :: "bool"
consts
  sublist_list :: "'a list => nat list => 'a list"
consts
  sublist_list_if :: "'a list => nat list => 'a list"
"[10, 10, 20, 30, [] ! 4]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
consts
  map_list :: "('a => 'b) list => 'a list => 'b list"
consts
  map2 :: "('a => 'b => 'c) => 'a list => 'b list => 'c list"
### theory "Draft.List2"
### 0.577s elapsed time, 1.264s cpu time, 0.121s GC time
Loading theory "Draft.ListInf" (required by "Draft.ListInfMoreTemplates")
### theory "Draft.ListInf"
### 0.950s elapsed time, 1.045s cpu time, 0.132s GC time
Loading theory "Draft.ListInfMoreTemplates"
val templateLemmas =
   [("ListInf.i_append_Nil", "[] \<frown> ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ListInf.i_drop_0", "?f \<Up> 0 = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ListInf.i_take_0", "?f \<Down> 0 = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ListInf.gdrop_0", "?a \<up>\<^sub>g 0 = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ListInf.gtake_Infty", "?a \<down>\<^sub>g \<infinity> = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ListInf.glength_infin", "glength (IL ?f) = \<infinity>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("ListInf.i_take_length", "length (?f \<Down> ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("ListInf.gdrop_Infty", "?a \<up>\<^sub>g \<infinity> = FL []",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ListInf.gtake_0", "?a \<down>\<^sub>g 0 = FL []",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ListInf.gappend_Nil2", "?a @\<^sub>g FL [] = ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("ListInf.gappend_Nil", "FL [] @\<^sub>g ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("ListInf.icard_glength", "icard (gset ?a) <= glength ?a",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ListInf.nth_0_i_drop", "(?f \<Up> ?n) 0 = ?f ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_app (template_var 0, template_var 1))),
    ("ListInf.gnth_gCons_0", "(?x #\<^sub>g ?a) !\<^sub>g 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("ListInf.i_drop_const", "(%n. ?x) \<Up> ?i = (%n. ?x)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), t_empty),
       t_empty)),
    ("ListInf.fst_o_izip", "fst o i_zip ?f ?g = ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("ListInf.snd_o_i_zip", "snd o i_zip ?f ?g = ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ListInf.gappend_infin", "IL ?f @\<^sub>g ?b = IL ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("ListInf.glength_fin", "glength (FL ?xs) = enat (length ?xs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ListInf.gmap_glength", "glength (gmap ?f ?a) = glength ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ListInf.last_i_take", "last (?f \<Down> Suc ?n) = ?f ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_var 0, template_var 1))),
    ("ListInf.i_append_nth_length", "(?xs \<frown> ?f) (length ?xs) = ?f 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_var 1)),
       template_app (template_var 0, template_hole 0))),
    ("ListInf.i_append_nth_Cons_0", "((?x # ?xs) \<frown> ?f) 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0),
       template_var 2)),
    ("ListInf.i_take_const", "(%n. ?x) \<Down> ?i = ?x\<^bsup>?i\<^esup>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ListInf.set_subset_i_append", "set ?xs <= range (?xs \<frown> ?f)",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("ListInf.set_i_take_subset", "set (?f \<Down> ?n) <= range ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ListInf.range_update_memI", "?x : range (?f(?n := ?x))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_hole 0))
         )),
    ("ListInf.i_drop_nth", "(?s \<Up> ?n) ?x = ?s (?n + ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_append_i_take_i_drop_id",
     "?f \<Down> ?n \<frown> ?f \<Up> ?n = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ListInf.gset_gmap", "gset (gmap ?f ?v) = ?f ` gset ?v",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListInf.gset_empty", "(gset ?a = {}) = (?a = FL [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("ListInf.glength_0_conv", "(glength ?a = 0) = (?a = FL [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("ListInf.i_take_eq_Nil", "(?f \<Down> ?n = []) = (?n = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("ListInf.i_take_first", "?f \<Down> Suc 0 = [?f 0]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 2)),
         template_hole 0))),
    ("ListInf.glength_gtake",
     "glength (?a \<down>\<^sub>g ?n) = min (glength ?a) ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("ListInf.range_subset_i_append", "range ?f <= range (?xs \<frown> ?f)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_hole 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_hole 1))),
    ("ListInf.range_i_drop_subset", "range (?f \<Up> ?n) <= range ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("ListInf.gnth_gCons_Suc",
     "(?x #\<^sub>g ?a) !\<^sub>g Suc ?n = ?a !\<^sub>g ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("ListInf.i_append_nth_length_plus",
     "(?xs \<frown> ?f) (length ?xs + ?n) = ?f ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("ListInf.i_zip_const", "i_zip (%n. ?x) (%n. ?y) = (%n. (?x, ?y))",
     template_equation
      (template_app (template_app (template_hole 1, t_empty), t_empty),
       t_empty)),
    ("ListInf.glength_greater_0_conv", "(0 < glength ?a) = (?a ~= FL [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app (template_hole 1, template_hole 0))
           ))),
    ("ListInf.inj_o", "inj ((o) ?f) = inj ?f",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ListInf.i_take_not_empty_conv", "(?f \<Down> ?n ~= []) = (0 < ?n)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 1))),
    ("ListInf.gdrop_eSuc_gCons",
     "(?x #\<^sub>g ?a) \<up>\<^sub>g eSuc ?n = ?a \<up>\<^sub>g ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("ListInf.gappend_glength",
     "glength (?a @\<^sub>g ?b) = glength ?a + glength ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ListInf.i_zip_nth", "i_zip ?f ?g ?n = (?f ?n, ?g ?n)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("ListInf.eq_Nil_i_appendI", "?f = ?g ==> ?f = [] \<frown> ?g",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("ListInf.i_map2_nth", "i_map2 ?f ?xs ?ys ?n = ?f (?xs ?n) (?ys ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_var 3, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("ListInf.i_append_assoc",
     "?xs \<frown> ?ys \<frown> ?f = (?xs @ ?ys) \<frown> ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ListInf.i_drop_commute",
     "?s \<Up> ?a \<Up> ?b = ?s \<Up> ?b \<Up> ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_drop_i_drop", "?s \<Up> ?a \<Up> ?b = ?s \<Up> (?a + ?b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("ListInf.i_drop_o", "(?f o ?g) \<Up> ?n = ?f o ?g \<Up> ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_drop_Suc", "?f \<Up> Suc 0 \<Up> ?n = ?f \<Up> Suc ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("ListInf.i_map2_replicate",
     "i_map2 ?f (%n. ?x) (%n. ?y) = (%n. ?f ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         t_empty),
       t_empty)),
    ("ListInf.range_o", "range (?f o ?g) = ?f ` range ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 2)))),
    ("ListInf.ilist_eq_iff", "(?f = ?g) = (ALL x. ?f x = ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("ListInf.gmap_is_Nil_conv", "(gmap ?f ?a = FL []) = (?a = FL [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app (template_hole 4, template_hole 3)),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("ListInf.same_i_append_eq",
     "(?xs \<frown> ?f = ?xs \<frown> ?g) = (?f = ?g)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("ListInf.i_take_drop_map_empty_iff",
     "(?f \<Down> ?n \<up> ?m = []) = (?n <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("ListInf.i_take_drop_map", "?f \<Down> ?n \<up> ?m = map ?f [?m..<?n]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("ListInf.i_take_commute",
     "?s \<Down> ?a \<down> ?b = ?s \<Down> ?b \<down> ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_take_take",
     "?f \<Down> ?n \<down> ?m = ?f \<Down> min ?n ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("ListInf.i_take_o", "(?f o ?g) \<Down> ?n = map ?f (?g \<Down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_drop_i_take_1", "?f \<Up> ?n \<Down> Suc 0 = [?f ?n]",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_var 1)),
         template_hole 0))),
    ("ListInf.gdrop_eSuc",
     "?a \<up>\<^sub>g eSuc ?n = ?a \<up>\<^sub>g eSuc 0 \<up>\<^sub>g ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("ListInf.gappend_assoc",
     "(?a @\<^sub>g ?b) @\<^sub>g ?c = ?a @\<^sub>g ?b @\<^sub>g ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ListInf.gmap_gmap", "gmap ?g (gmap ?f ?v) = gmap (?g o ?f) ?v",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ListInf.glength_drop",
     "glength (?a \<up>\<^sub>g enat ?n) = glength ?a - enat ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("ListInf.inj_oI", "inj ?f ==> inj ((o) ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("ListInf.gtake_all", "glength ?a <= ?n ==> ?a \<down>\<^sub>g ?n = ?a",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("ListInf.inj_oD", "inj ((o) ?f) ==> inj ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("ListInf.i_append_nth_Cons_Suc",
     "((?x # ?xs) \<frown> ?f) (Suc ?n) = (?xs \<frown> ?f) ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0))),
    ("ListInf.i_drop_Suc_Cons",
     "([?x] \<frown> ?f) \<Up> Suc ?n = ?f \<Up> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2), template_var 0))),
    ("ListInf.range_i_append",
     "range (?xs \<frown> ?f) = set ?xs Un range ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 2)))),
    ("ListInf.range_iff", "(?y : range ?f) = (EX x. ?y = ?f x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("ListInf.gtake_eSuc_gCons",
     "(?x #\<^sub>g ?a) \<down>\<^sub>g eSuc ?n =
      ?x #\<^sub>g ?a \<down>\<^sub>g ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ListInf.range_update_subset_insert",
     "range (?f(?n := ?x)) <= insert ?x (range ?f)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_hole 1)))),
    ("ListInf.gdrop_all",
     "glength ?a <= ?n ==> ?a \<up>\<^sub>g ?n = FL []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("ListInf.nth_via_i_drop", "(?f \<Up> ?n) 0 = ?x ==> ?f ?n = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1),
            template_hole 0),
          template_var 0)],
       template_equation
        (template_app (template_var 1, template_var 2), template_var 0))),
    ("ListInf.range_ball_nth", "ALL y:range ?f. ?P y ==> ?P (?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_hole 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_var 2, template_var 0))
           ))),
    ("ListInf.i_append_hd",
     "(?xs \<frown> ?f) 0 = (if ?xs = [] then ?f 0 else hd ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app (template_var 0, template_hole 4)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("ListInf.i_append_nth_Cons",
     "([?x] \<frown> ?f) ?n = (case ?n of 0 => ?x | Suc k => ?f k)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0))),
    ("ListInf.gnth_gappend_length_plus",
     "(FL ?xs @\<^sub>g ?b) !\<^sub>g (length ?xs + ?n) = ?b !\<^sub>g ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0))),
    ("ListInf.i_append_o",
     "?g o ?xs \<frown> ?f = map ?g ?xs \<frown> (?g o ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("ListInf.i_append_Cons",
     "(?x # ?xs) \<frown> ?f = [?x] \<frown> ?xs \<frown> ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ListInf.i_drop_tl",
     "?f \<Up> Suc 0 \<Up> ?n = ?f \<Up> ?n \<Up> Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ListInf.i_drop_Suc_conv_tl",
     "[?f ?n] \<frown> ?f \<Up> Suc ?n = ?f \<Up> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_var 1, template_var 0)),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("ListInf.i_drop_Suc_conv_tl'",
     "([?f ?n] \<frown> ?f) \<Up> Suc ?n = ?f \<Up> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 0, template_var 1)),
               template_hole 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0))),
    ("ListInf.i_zip_i_drop",
     "i_zip ?f ?g \<Up> ?n = i_zip (?f \<Up> ?n) (?g \<Up> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.ilist_i_drop_eq_conv",
     "(?f = ?g) = (ALL n. ?f \<Up> n = ?g \<Up> n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("ListInf.ilist_i_take_eq_conv",
     "(?f = ?g) = (ALL n. ?f \<Down> n = ?g \<Down> n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ListInf.all_range_conv_all_nth",
     "(ALL y:range ?f. ?P y) = (ALL x. ?P (?f x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         t_empty),
       template_app (template_hole 0, t_empty))),
    ("ListInf.i_take_Suc_conv_app_nth",
     "?f \<Down> Suc ?n = ?f \<Down> ?n @ [?f ?n]",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 1)),
           template_hole 0)))),
    ("ListInf.i_take_drop",
     "?f \<Down> ?n \<up> ?m = ?f \<Up> ?m \<Down> (?n - ?m)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_take_i_drop",
     "?f \<Up> ?m \<Down> ?n = ?f \<Down> (?n + ?m) \<up> ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("ListInf.i_take_drop_eq_map",
     "?f \<Up> ?m \<Down> ?n = map ?f [?m..<?m + ?n]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("ListInf.i_zip_i_take",
     "i_zip ?f ?g \<Down> ?n = zip (?f \<Down> ?n) (?g \<Down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.gmap_gappend",
     "gmap ?f (?a @\<^sub>g ?b) = gmap ?f ?a @\<^sub>g gmap ?f ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ListInf.i_take_nth", "?i < ?n ==> ?f \<Down> ?n ! ?i = ?f ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("ListInf.i_append_hd2", "?xs ~= [] ==> (?xs \<frown> ?f) 0 = hd ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_app (template_hole 0, template_var 1)))),
    ("ListInf.in_set_i_takeD", "?x : set (?f \<Down> ?n) ==> ?x : range ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("ListInf.i_append_update_length",
     "(?xs \<frown> ?f)(length ?xs := ?y) = ?xs \<frown> ?f(0 := ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app (template_hole 1, template_var 2)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("ListInf.i_drop_Suc_append",
     "((?x # ?xs) \<frown> ?f) \<Up> Suc ?n = (?xs \<frown> ?f) \<Up> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ListInf.i_zip_swap", "(%(y, x). (x, y)) o i_zip ?g ?f = i_zip ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ListInf.i_take_Suc",
     "?f \<Down> Suc ?n = ?f 0 # ?f \<Up> Suc 0 \<Down> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_var 0, template_hole 1)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_hole 1)),
             template_var 0))))),
    ("ListInf.i_take_Suc_Cons",
     "([?x] \<frown> ?f) \<Down> Suc ?n = ?x # ?f \<Down> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("ListInf.i_take_take_eq1",
     "?m <= ?n ==> ?f \<Down> ?n \<down> ?m = ?f \<Down> ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_take_take_eq2",
     "?n <= ?m ==> ?f \<Down> ?n \<down> ?m = ?f \<Down> ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.i_drop_nth_sub",
     "?n <= ?x ==> (?s \<Up> ?n) (?x - ?n) = ?s ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_var 0, template_var 1)))),
    ("ListInf.i_append_nth1",
     "?n < length ?xs ==> (?xs \<frown> ?f) ?n = ?xs ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ListInf.gmap_eq_imp_glength_eq",
     "gmap ?f ?a = gmap ?f ?b ==> glength ?a = glength ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListInf.in_range_i_takeD",
     "?x : range (?f \<Up> ?n) ==> ?x : range ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0)),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("ListInf.id_i_take_nth_i_drop",
     "?f = ?f \<Down> ?n \<frown> ([?f ?n] \<frown> ?f) \<Up> Suc ?n",
     template_equation
      (template_var 1,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 1, template_var 0)),
                 template_hole 0)),
             template_var 1))))),
    ("ListInf.i_map2_i_zip_conv",
     "i_map2 ?f ?xs ?ys = (%(x, y). ?f x y) o i_zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ListInf.i_map2_drop",
     "i_map2 ?f ?xs ?ys \<Up> ?n = i_map2 ?f (?xs \<Up> ?n) (?ys \<Up> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("ListInf.i_take_add",
     "?f \<Down> (?i + ?j) = ?f \<Down> ?i @ ?f \<Up> ?i \<Down> ?j",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("ListInf.i_take_hd_i_drop",
     "?f \<Down> ?n @ [(?f \<Up> ?n) 0] = ?f \<Down> Suc ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0),
               template_hole 2)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("ListInf.last_i_take2",
     "0 < ?n ==> last (?f \<Down> ?n) = ?f (?n - Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_hole 5)))))),
    ("ListInf.i_append_i_take_eq1",
     "?n <= length ?xs ==> (?xs \<frown> ?f) \<Down> ?n = ?xs \<down> ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("ListInf.gnth_via_grop",
     "?a \<up>\<^sub>g enat ?n = ?x #\<^sub>g ?b ==> ?a !\<^sub>g ?n = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 3),
         template_var 1))),
    ("ListInf.i_append_i_drop",
     "(?xs \<frown> ?f) \<Up> ?n =
      ?xs \<up> ?n \<frown> ?f \<Up> (?n - length ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("ListInf.Nil_is_gappend_conv",
     "(FL [] = ?a @\<^sub>g ?b) = (?a = FL [] & ?b = FL [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_hole 2)))
           ))),
    ("ListInf.gappend_is_Nil_conv",
     "(?a @\<^sub>g ?b = FL []) = (?a = FL [] & ?b = FL [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 2, template_hole 1)))
           ))),
    ("ListInf.same_gappend_eq_disj",
     "(?a @\<^sub>g ?b = ?a @\<^sub>g ?c) =
      (glength ?a = \<infinity> | ?b = ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("ListInf.i_append_i_take",
     "(?xs \<frown> ?f) \<Down> ?n =
      ?xs \<down> ?n @ ?f \<Down> (?n - length ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("ListInf.i_take_Suc_append",
     "((?x # ?xs) \<frown> ?f) \<Down> Suc ?n =
      ?x # (?xs \<frown> ?f) \<Down> ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("ListInf.inj_o_eq_o", "inj ?f ==> (?f o ?g = ?f o ?h) = (?g = ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("ListInf.i_append_nth2",
     "length ?xs <= ?n ==> (?xs \<frown> ?f) ?n = ?f (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 3, template_var 2)))))),
    ("ListInf.all_nth_imp_all_range",
     "[| ALL x. ?P (?f x); ?y : range ?f |] ==> ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("ListInf.i_append_nth_Cons'",
     "([?x] \<frown> ?f) ?n = (if ?n = 0 then ?x else ?f (?n - Suc 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 5)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_var 2),
             template_app
              (template_var 1,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_hole 2))))
           ))),
    ("ListInf.upd_conv_i_take_nth_i_drop",
     "?f(?n := ?x) = ?f \<Down> ?n \<frown> [?x] \<frown> ?f \<Up> Suc ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2))))),
    ("ListInf.gset_gappend_if",
     "gset (?a @\<^sub>g ?b) =
      (if glength ?a < \<infinity> then gset ?a Un gset ?b else gset ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 1)),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 6, template_var 1)))),
    ("ListInf.gset_gappend",
     "gset (?a @\<^sub>g ?b) =
      (case ?a of FL a' => set a' Un gset ?b | IL a' => range a')",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_var 1))),
    ("ListInf.gmap_eq_conv",
     "(gmap ?f ?a = gmap ?g ?a) = (ALL x:gset ?a. ?f x = ?g x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("ListInf.same_gappend_eq",
     "glength ?a < \<infinity> ==>
      (?a @\<^sub>g ?b = ?a @\<^sub>g ?c) = (?b = ?c)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 2),
          template_hole 3)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("ListInf.i_append_i_drop_eq1",
     "?n <= length ?xs ==>
      (?xs \<frown> ?f) \<Up> ?n = ?xs \<up> ?n \<frown> ?f",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("ListInf.gmap_gnth",
     "enat ?n < glength ?a ==>
      gmap ?f ?a !\<^sub>g ?n = ?f (?a !\<^sub>g ?n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("ListInf.inj_on_oI",
     "inj_on ?f (\<Union> (range ` ?A)) ==> inj_on ((o) ?f) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("ListInf.o_injective", "[| ?f o ?g = ?f o ?h; inj ?f |] ==> ?g = ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("ListInf.i_append_nth",
     "(?xs \<frown> ?f) ?n =
      (if ?n < length ?xs then ?xs ! ?n else ?f (?n - length ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 2, template_var 2)))))),
    ("ListInf.i_drop_the_conv",
     "?f \<Up> ?k = (THE g. EX xs. length xs = ?k & xs \<frown> g = ?f)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("ListInf.update_i_zip",
     "(i_zip ?f ?g)(?n := ?xy) =
      i_zip (?f(?n := fst ?xy)) (?g(?n := snd ?xy))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("ListInf.i_zip_update",
     "i_zip (?f(?n := ?x)) (?g(?n := ?y)) = (i_zip ?f ?g)(?n := (?x, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 1)),
           template_var 3),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.in_gset_cong_gnth",
     "(?x : gset ?a) = (EX i. enat i < glength ?a & ?a !\<^sub>g i = ?x)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("ListInf.o_eq_conv",
     "(?f o ?h = ?g o ?h) = (ALL x:range ?h. ?f x = ?g x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         t_empty))),
    ("ListInf.i_take_the_conv",
     "?f \<Down> ?k =
      (THE xs. length xs = ?k & (EX g. xs \<frown> g = ?f))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("ListInf.i_take_drop_append",
     "?m <= ?n ==> ?f \<Down> ?m @ ?f \<Down> ?n \<up> ?m = ?f \<Down> ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ListInf.i_take_int_append",
     "?m <= ?n ==> ?f \<Down> ?m @ map ?f [?m..<?n] = ?f \<Down> ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ListInf.i_append_i_drop_eq2",
     "length ?xs <= ?n ==>
      (?xs \<frown> ?f) \<Up> ?n = ?f \<Up> (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 4, template_var 2))),
           template_var 0)))),
    ("ListInf.o_fun_upd", "?y ~: range ?g ==> ?f(?y := ?x) o ?g = ?f o ?g",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_hole 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("ListInf.i_zip_i_append2",
     "i_zip ?f (?ys \<frown> ?g) =
      zip (?f \<Down> length ?ys) ?ys \<frown>
      i_zip (?f \<Up> length ?ys) ?g",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("ListInf.i_zip_i_append1",
     "i_zip (?xs \<frown> ?f) ?g =
      zip ?xs (?g \<Down> length ?xs) \<frown>
      i_zip ?f (?g \<Up> length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 0))))),
    ("ListInf.i_zip_range", "range (i_zip ?f ?g) = {(?f n, ?g n) |n. True}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_hole 6),
       template_app (template_hole 5, t_empty))),
    ("ListInf.i_append_eq_conv_conj",
     "(?xs \<frown> ?f = ?g) =
      (?xs = ?g \<Down> length ?xs & ?f = ?g \<Up> length ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0)))
           ))),
    ("ListInf.in_range_conv_decomp",
     "(?x : range ?f) = (EX xs g. ?f = xs \<frown> [?x] \<frown> g)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app (template_hole 5, t_empty))),
    ("ListInf.ex_o_conv",
     "(EX h. ?g = ?f o h) = (ALL y:range ?g. EX x. y = ?f x)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         t_empty))),
    ("ListInf.i_append_update1",
     "?n < length ?xs ==>
      (?xs \<frown> ?f)(?n := ?x) = ?xs[?n := ?x] \<frown> ?f",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 0)),
           template_var 1)))),
    ("ListInf.o_idI", "ALL x. x : range ?g --> ?f x = x ==> ?f o ?g = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("ListInf.gSuc_glength_conv",
     "(eSuc ?n = glength ?a) =
      (EX x b. ?a = x #\<^sub>g b & glength b = ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ListInf.glength_gSuc_conv",
     "(glength ?a = eSuc ?n) =
      (EX x b. ?a = x #\<^sub>g b & glength b = ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ListInf.i_append_i_take_eq2",
     "length ?xs <= ?n ==>
      (?xs \<frown> ?f) \<Down> ?n = ?xs @ ?f \<Down> (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 5, template_var 2))),
             template_var 0))))),
    ("ListInf.range_ConsD",
     "?y : range ([?x] \<frown> ?f) ==> ?y = ?x | ?y : range ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_hole 3)),
                    template_var 0)),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 2)))
           ))),
    ("ListInf.range_update_subsetI",
     "[| range ?f <= ?A; ?x : ?A |] ==> range (?f(?n := ?x)) <= ?A",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3),
            template_hole 2),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1)),
           template_hole 2),
         template_var 2))),
    ("ListInf.i_zip_Cons_Cons",
     "i_zip ([?x] \<frown> ?f) ([?y] \<frown> ?g) =
      [(?x, ?y)] \<frown> i_zip ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_hole 7)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app (template_hole 10, template_var 2),
           template_var 0)))),
    ("ListInf.ilist_i_take_i_drop_eq_conv",
     "(?f = ?g) =
      (EX n. ?f \<Down> n = ?g \<Down> n & ?f \<Up> n = ?g \<Up> n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("ListInf.i_map2_take_take",
     "i_map2 ?f ?xs ?ys \<Down> ?n =
      map2 ?f (?xs \<Down> ?n) (?ys \<Down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("ListInf.gdrop_eSuc_conv_tl",
     "enat ?n < glength ?a ==>
      ?a !\<^sub>g ?n #\<^sub>g ?a \<up>\<^sub>g enat (Suc ?n) =
      ?a \<up>\<^sub>g enat ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 6, template_var 1)),
           template_var 0)))),
    ("ListInf.i_append_eq_i_appendI",
     "[| ?xs @ ?xs' = ?ys; ?f = ?xs' \<frown> ?g |]
      ==> ?xs \<frown> ?f = ?ys \<frown> ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf.ilist_i_take_i_drop_imp_eq",
     "[| ?f \<Down> ?n = ?g \<Down> ?n; ?f \<Up> ?n = ?g \<Up> ?n |]
      ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("ListInf.gnth_gappend",
     "(?a @\<^sub>g ?b) !\<^sub>g ?n =
      (if enat ?n < glength ?a then ?a !\<^sub>g ?n
       else ?b !\<^sub>g (?n - the_enat (glength ?a)))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2))))))),
    ("ListInf.i_append_i_drop_if",
     "(?xs \<frown> ?f) \<Up> ?n =
      (if ?n < length ?xs then ?xs \<up> ?n \<frown> ?f
       else ?f \<Up> (?n - length ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_var 0)))),
    ("ListInf.i_append_i_take_if",
     "(?xs \<frown> ?f) \<Down> ?n =
      (if ?n <= length ?xs then ?xs \<down> ?n
       else ?xs @ ?f \<Down> (?n - length ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 3, template_var 1))),
             template_var 0))))),
    ("ListInf.i_append_update2",
     "length ?xs <= ?n ==>
      (?xs \<frown> ?f)(?n := ?x) = ?xs \<frown> ?f(?n - length ?xs := ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 2),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 4, template_var 3))),
             template_var 0))))),
    ("ListInf.gtake_eSuc",
     "?a ~= FL [] ==>
      ?a \<down>\<^sub>g eSuc ?n =
      ?a !\<^sub>g 0 #\<^sub>g ?a \<up>\<^sub>g eSuc 0 \<down>\<^sub>g ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 8, template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 5, template_hole 0)),
               template_var 1)))))),
    ("ListInf.i_append_eq_i_append_conv",
     "length ?xs = length ?ys ==>
      (?xs \<frown> ?f = ?ys \<frown> ?g) = (?xs = ?ys & ?f = ?g)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))
             )))),
    ("ListInf.i_zip_append",
     "length ?xs = length ?ys ==>
      i_zip (?xs \<frown> ?f) (?ys \<frown> ?g) =
      zip ?xs ?ys \<frown> i_zip ?f ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("ListInf.inj_on_o_eq_o",
     "inj_on ?f (range ?g Un range ?h) ==> (?f o ?g = ?f o ?h) = (?g = ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 4)),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("ListInf.o_ext",
     "ALL x. x : range ?h --> ?f x = ?g x ==> ?f o ?h = ?g o ?h",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListInf.i_map2_Cons_right",
     "i_map2 ?f ?xs ([?y] \<frown> ?ys) =
      [?f (?xs 0) ?y] \<frown> i_map2 ?f (?xs \<Up> Suc 0) ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_var 3,
                   template_app (template_var 2, template_hole 3)),
                 template_var 1)),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_hole 3)),
               template_var 2)),
           template_var 0)))),
    ("ListInf.i_map2_Cons_left",
     "i_map2 ?f ([?x] \<frown> ?xs) ?ys =
      [?f ?x (?ys 0)] \<frown> i_map2 ?f ?xs (?ys \<Up> Suc 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 3),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_hole 6)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_var 3, template_var 2),
                 template_app (template_var 0, template_hole 3))),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 3)),
             template_var 0))))),
    ("ListInf.i_map2_Cons_Cons",
     "i_map2 ?f ([?x] \<frown> ?xs) ([?y] \<frown> ?ys) =
      [?f ?x ?y] \<frown> i_map2 ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 4),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_hole 6)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_var 4, template_var 3),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 4),
             template_var 2),
           template_var 0)))),
    ("ListInf.i_map2_eq_conv",
     "(i_map2 ?f ?xs ?ys = i_map2 ?g ?xs ?ys) =
      (ALL i. ?f (?xs i) (?ys i) = ?g (?xs i) (?ys i))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_var 1)),
       template_app (template_hole 1, t_empty))),
    ("ListInf.o_inj_on",
     "[| ?f o ?g = ?f o ?h; inj_on ?f (range ?g Un range ?h) |]
      ==> ?g = ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_hole 1)),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_equation (template_var 1, template_var 0))),
    ("ListInf.gtake_eSuc_conv_gapp_gnth",
     "enat ?n < glength ?a ==>
      ?a \<down>\<^sub>g enat (Suc ?n) =
      ?a \<down>\<^sub>g enat ?n @\<^sub>g FL [?a !\<^sub>g ?n]",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 9,
               template_app (template_hole 5, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 9, template_var 1)),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_hole 0)))))),
    ("ListInf.i_drop_induct",
     "[| ?P (?f \<Up> 0); !!n. ?P (?f \<Up> n) ==> ?P (?f \<Up> Suc n) |]
      ==> ?P (?f \<Up> ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("ListInf.i_take_induct",
     "[| ?P (?f \<Down> 0);
         !!n. ?P (?f \<Down> n) ==> ?P (?f \<Down> Suc n) |]
      ==> ?P (?f \<Down> ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("ListInf.i_map2_take_ge",
     "?n <= ?n1.0 ==>
      i_map2 ?f ?xs ?ys \<Down> ?n =
      map2 ?f (?xs \<Down> ?n) (?ys \<Down> ?n1.0)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)))))),
    ("ListInf.i_append_update",
     "(?xs \<frown> ?f)(?n := ?x) =
      (if ?n < length ?xs then ?xs[?n := ?x] \<frown> ?f
       else ?xs \<frown> ?f(?n - length ?xs := ?x))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 2, template_var 3))),
             template_var 0))))),
    ("ListInf.gmap_cong",
     "[| ?x = ?ya; !!z. z : gset ?ya ==> ?f z = ?g z |]
      ==> gmap ?f ?x = gmap ?g ?ya",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListInf.i_map2_append_take_drop_right",
     "i_map2 ?f ?xs (?ys1.0 \<frown> ?ys) =
      map2 ?f (?xs \<Down> length ?ys1.0) ?ys1.0 \<frown>
      i_map2 ?f (?xs \<Up> length ?ys1.0) ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("ListInf.i_map2_append_take_drop_left",
     "i_map2 ?f (?xs1.0 \<frown> ?xs) ?ys =
      map2 ?f ?xs1.0 (?ys \<Down> length ?xs1.0) \<frown>
      i_map2 ?f ?xs (?ys \<Up> length ?xs1.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 3),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 0))))),
    ("ListInf.o_cong",
     "[| ?h = ?i; !!x. x : range ?i ==> ?f x = ?g x |]
      ==> ?f o ?h = ?f o ?i",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ListInf.o_eq_i_append_conv",
     "(?f o ?g = ?ys \<frown> ?i) =
      (EX xs h. ?g = xs \<frown> h & map ?f xs = ?ys & ?f o h = ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("ListInf.i_append_eq_o_conv",
     "(?ys \<frown> ?i = ?f o ?g) =
      (EX xs h. ?g = xs \<frown> h & map ?f xs = ?ys & ?f o h = ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("ListInf.i_append_eq_i_append_conv2_aux",
     "[| ?xs \<frown> ?f = ?ys \<frown> ?g; length ?xs <= length ?ys |]
      ==> EX zs. ?xs @ zs = ?ys & ?f = zs \<frown> ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 1))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListInf.i_append_eq_i_append_conv_if_aux",
     "length ?xs <= length ?ys ==>
      (?xs \<frown> ?f = ?ys \<frown> ?g) =
      (?xs = ?ys \<down> length ?xs &
       ?f = ?ys \<up> length ?xs \<frown> ?g)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_var 3)),
                     template_var 2))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 7, template_var 3)),
                       template_var 2)),
                   template_var 0)))
             )))),
    ("ListInf.o_eq_i_append_imp",
     "?f o ?g = ?ys \<frown> ?i ==>
      EX xs h. ?g = xs \<frown> h & map ?f xs = ?ys & ?f o h = ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ListInf.i_map2_append_append",
     "length ?xs1.0 = length ?ys1.0 ==>
      i_map2 ?f (?xs1.0 \<frown> ?xs) (?ys1.0 \<frown> ?ys) =
      map2 ?f ?xs1.0 ?ys1.0 \<frown> i_map2 ?f ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 4),
          template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3))),
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0))))),
    ("ListInf.i_append_eq_i_append_conv2",
     "(?xs \<frown> ?f = ?ys \<frown> ?g) =
      (EX zs.
          ?xs = ?ys @ zs & zs \<frown> ?f = ?g |
          ?xs @ zs = ?ys & ?f = zs \<frown> ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ListInf.f_drop_induct",
     "[| ?P (?s \<up> 0);
         !!n. [| Suc n < length ?s; ?P (?s \<up> n) |]
              ==> ?P (?s \<up> Suc n);
         ?i < length ?s |]
      ==> ?P (?s \<up> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1))
           ))),
    ("ListInf.take_induct",
     "[| ?P (?s \<down> 0);
         !!n. [| Suc n < length ?s; ?P (?s \<down> n) |]
              ==> ?P (?s \<down> Suc n);
         ?i < length ?s |]
      ==> ?P (?s \<down> ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1))
           ))),
    ("ListInf.i_append_eq_i_append_conv_if",
     "(?xs \<frown> ?f = ?ys \<frown> ?g) =
      (if length ?xs <= length ?ys
       then ?xs = ?ys \<down> length ?xs &
            ?f = ?ys \<up> length ?xs \<frown> ?g
       else ?xs \<down> length ?ys = ?ys &
            ?xs \<up> length ?ys \<frown> ?f = ?g)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 3)),
                   template_app (template_hole 4, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 4, template_var 3)),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_hole 4, template_var 3)),
                         template_var 1)),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 4, template_var 1)),
                       template_var 3)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_hole 4, template_var 1)),
                         template_var 3)),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("ListInf.i_map2_cong",
     "[| ?xs1.0 = ?xs2.0; ?ys1.0 = ?ys2.0;
         !!x y.
            [| x : range ?xs2.0; y : range ?ys2.0 |] ==> ?f x y = ?g x y |]
      ==> i_map2 ?f ?xs1.0 ?ys1.0 = i_map2 ?g ?xs2.0 ?ys2.0",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.ListInfMoreTemplates"
### 0.436s elapsed time, 0.601s cpu time, 0.089s GC time
val it = (): unit
