Loading theory "Draft.Util_Nat" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_Div")
Loading theory "Draft.Util_Set" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_MinMax" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Util_MinMax"
### 0.048s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Util_Set"
### 0.100s elapsed time, 0.422s cpu time, 0.035s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.483s cpu time, 0.035s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "Draft.Util_Nat"
### 0.142s elapsed time, 0.590s cpu time, 0.035s GC time
Loading theory "Draft.Util_Div" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.275s elapsed time, 1.068s cpu time, 0.111s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.257s cpu time, 0.158s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Util_Div"
### 0.345s elapsed time, 1.361s cpu time, 0.158s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.425s elapsed time, 1.658s cpu time, 0.243s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.943s cpu time, 0.167s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.157s cpu time, 0.807s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.876s cpu time, 0.801s GC time
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.303s elapsed time, 4.540s cpu time, 0.853s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.363s elapsed time, 0.755s cpu time, 0.054s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.982s elapsed time, 6.023s cpu time, 1.047s GC time
Loading theory "Draft.Templates" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.161s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.List2MoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.072s cpu time, 0.066s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.550s elapsed time, 2.506s cpu time, 0.184s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.387s elapsed time, 0.426s cpu time, 0.028s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.464s elapsed time, 0.504s cpu time, 0.056s GC time
Loading theory "Draft.Util_NatInf" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "Draft.Util_NatInf"
### 0.116s elapsed time, 0.151s cpu time, 0.048s GC time
Loading theory "Draft.SetInterval2" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "Draft.SetIntervalCut")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "Draft.SetInterval2"
### 0.903s elapsed time, 0.995s cpu time, 0.097s GC time
Loading theory "Draft.SetIntervalCut" (required by "Draft.List2MoreTemplates" via "Draft.List2")
### theory "Draft.SetIntervalCut"
### 0.790s elapsed time, 1.454s cpu time, 0.925s GC time
Loading theory "Draft.List2" (required by "Draft.List2MoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
"False"
  :: "bool"
"True"
  :: "bool"
consts
  sublist_list :: "'a list => nat list => 'a list"
consts
  sublist_list_if :: "'a list => nat list => 'a list"
"[10, 10, 20, 30, [] ! 4]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
consts
  map_list :: "('a => 'b) list => 'a list => 'b list"
consts
  map2 :: "('a => 'b => 'c) => 'a list => 'b list => 'c list"
### theory "Draft.List2"
### 0.594s elapsed time, 1.183s cpu time, 0.085s GC time
Loading theory "Draft.List2MoreTemplates"
val templateLemmas =
   [("List2.list_ord_Nil", "list_ord ?ord []",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("List2.list_asc_upto", "list_asc [?m..?n]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("List2.list_strict_asc_upt", "list_strict_asc [?m..<?n]",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("List2.f_image_empty", "?xs `\<^sup>f {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List2.map_id", "map id ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("List2.nths_UNIV", "nths ?xs UNIV = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("List2.map_list_Nil", "map_list [] ?xs = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("List2.sublist_list_Nil", "sublist_list ?xs [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List2.sublist_list_if_Nil_left", "sublist_list_if [] ?ys = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("List2.sublist_list_if_Nil_right", "sublist_list_if ?xs [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List2.list_ord_one", "list_ord ?ord [?x]",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("List2.f_range_eq_set", "f_range ?xs = set ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("List2.list_ord_le_sorted_eq", "list_asc ?xs = sorted ?xs",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("List2.map2_Nil", "List2.map2 ?f [] ?ys = []",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("List2.list_strict_asc_distinct",
     "list_strict_asc ?xs ==> distinct ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.list_strict_asc_imp_list_asc",
     "list_strict_asc ?xs ==> list_asc ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.list_strict_desc_distinct",
     "list_strict_desc ?xs ==> distinct ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.list_strict_desc_imp_list_desc",
     "list_strict_desc ?xs ==> list_desc ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.sublist_list_length",
     "length (sublist_list ?xs ?ys) = length ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("List2.map_list_length", "length (map_list ?fs ?xs) = length ?fs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("List2.drop_eq_tl", "?xs \<up> Suc 0 = tl ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("List2.length_take_le", "length (?xs \<down> ?n) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("List2.length_Cons", "length (?x # ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("List2.map2_length", "length (List2.map2 ?f ?xs ?ys) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("List2.f_image_eq_set_nths", "?xs `\<^sup>f ?A = set (nths ?xs ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List2.map_id_subst", "?P (map id ?xs) ==> ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 0))
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("List2.replicate_Cons_length",
     "length (?x # ?a\<^bsup>?n\<^esup>) = Suc ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app (template_hole 0, template_var 1))),
    ("List2.f_image_eq_set_sublist_list_if",
     "?xs `\<^sup>f set ?ys = set (sublist_list_if ?xs ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List2.map_list_empty_conv", "(map_list ?fs ?xs = []) = (?fs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("List2.sublist_list_is_Nil_conv",
     "(sublist_list ?xs ?ys = []) = (?ys = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("List2.append_eq_Cons", "[?x] @ ?xs = ?x # ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("List2.length_snoc", "length (?xs @ [?x]) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_hole 0, template_app (template_hole 4, template_var 1)))),
    ("List2.set_sublist_list_if_eq_set_sublist",
     "set (sublist_list_if ?xs ?ys) = set (nths ?xs (set ?ys))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("List2.map2_empty_conv", "(List2.map2 ?f ?xs ?ys = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("List2.map_one", "map ?f [?x] = [?f ?x]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_hole 0))),
    ("List2.map_eq_map_list_replicate",
     "map_list ?f\<^bsup>length ?xs\<^esup> ?xs = map ?f ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List2.map2_map_list_conv",
     "List2.map2 ?f ?xs ?ys = map_list (map ?f ?xs) ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("List2.filter_list_all", "list_all ?P ?xs ==> filter ?P ?xs = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("List2.length_greater_imp_not_empty", "?n < length ?xs ==> ?xs ~= []",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("List2.drop_not_empty_conv",
     "(?xs \<up> ?n ~= []) = (?n < length ?xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("List2.map_list_not_empty_conv",
     "(map_list ?fs ?xs ~= []) = (?fs ~= [])",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_hole 2)
           ),
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("List2.map_list_take",
     "map_list ?fs ?xs \<down> ?n = map_list (?fs \<down> ?n) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("List2.zip_takeR", "zip ?xs ?ys \<down> ?n = zip ?xs (?ys \<down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List2.zip_takeL", "zip ?xs ?ys \<down> ?n = zip (?xs \<down> ?n) ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("List2.length_ge_Suc_imp_not_empty",
     "Suc ?n <= length ?xs ==> ?xs ~= []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("List2.map2_not_empty_conv",
     "(List2.map2 ?f ?xs ?ys ~= []) = (?xs ~= [])",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 2)
           ),
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("List2.replicate_snoc",
     "?x\<^bsup>?n\<^esup> @ [?x] = ?x\<^bsup>Suc ?n\<^esup>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("List2.sublist_list_nths_eq",
     "list_strict_asc ?ys ==> sublist_list_if ?xs ?ys = nths ?xs (set ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("List2.f_image_mono",
     "?A <= ?B ==> ?xs `\<^sup>f ?A <= ?xs `\<^sup>f ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("List2.hd_eq_first", "?xs ~= [] ==> ?xs ! 0 = hd ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("List2.nths_all", "{..<length ?xs} <= ?I ==> nths ?xs ?I = ?xs",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("List2.sublist_list_if_length",
     "length (sublist_list_if ?xs ?ys) =
      length (filter (%i. i < length ?xs) ?ys)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("List2.f_image_Un",
     "?xs `\<^sup>f (?A Un ?B) = ?xs `\<^sup>f ?A Un ?xs `\<^sup>f ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List2.list_drop_eq_conv",
     "(?xs = ?ys) = (ALL n. ?xs \<up> n = ?ys \<up> n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("List2.list_take_eq_conv",
     "(?xs = ?ys) = (ALL n. ?xs \<down> n = ?ys \<down> n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("List2.nths_empty_conv",
     "(nths ?xs ?I = []) = (ALL i:?I. length ?xs <= i)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("List2.sublist_list_if_is_Nil_conv",
     "(sublist_list_if ?xs ?ys = []) = list_all ((<=) (length ?xs)) ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("List2.zip_eq_Nil", "(zip ?xs ?ys = []) = (?xs = [] | ?ys = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("List2.sublist_list_if_sublist_list_filter_conv",
     "sublist_list_if ?xs ?ys =
      sublist_list ?xs (filter (%i. i < length ?xs) ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("List2.sublist_list_append",
     "sublist_list ?xs (?ys @ ?zs) =
      sublist_list ?xs ?ys @ sublist_list ?xs ?zs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List2.sublist_list_if_append",
     "sublist_list_if ?xs (?ys @ ?zs) =
      sublist_list_if ?xs ?ys @ sublist_list_if ?xs ?zs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List2.map_list_drop",
     "map_list ?fs ?xs \<up> ?n = map_list (?fs \<up> ?n) (?xs \<up> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List2.map_list_take_take",
     "map_list ?fs ?xs \<down> ?n =
      map_list (?fs \<down> ?n) (?xs \<down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List2.map2_take",
     "List2.map2 ?f ?xs ?ys \<down> ?n =
      List2.map2 ?f (?xs \<down> ?n) ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 0))),
    ("List2.zip_take",
     "zip ?xs ?ys \<down> ?n = zip (?xs \<down> ?n) (?ys \<down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List2.f_rangeI", "?n < length ?xs ==> ?xs ! ?n : f_range ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("List2.map_list_Cons_Cons",
     "map_list (?f # ?fs) (?x # ?xs) = ?f ?x # map_list ?fs ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("List2.map2_replicate",
     "List2.map2 ?f ?x\<^bsup>?n\<^esup> ?y\<^bsup>?n\<^esup> =
      (?f ?x ?y)\<^bsup>?n\<^esup>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("List2.zip_swap", "map2 (%y x. (x, y)) ?ys ?xs = zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List2.map_last", "?xs ~= [] ==> last (map ?f ?xs) = ?f (last ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("List2.sublist_list_eq_imp_length_eq",
     "sublist_list ?xs ?ys = sublist_list ?xs ?zs ==>
      length ?ys = length ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("List2.list_all_conv",
     "list_all ?P ?xs = (ALL i<length ?xs. ?P (?xs ! i))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("List2.take_not_empty_conv",
     "(?xs \<down> ?n ~= []) = (0 < ?n & ?xs ~= [])",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_hole 3)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 3)))
           ))),
    ("List2.map2_drop",
     "List2.map2 ?f ?xs ?ys \<up> ?n =
      List2.map2 ?f (?xs \<up> ?n) (?ys \<up> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("List2.map2_take_take",
     "List2.map2 ?f ?xs ?ys \<down> ?n =
      List2.map2 ?f (?xs \<down> ?n) (?ys \<down> ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("List2.take_hd", "?xs ~= [] ==> ?xs \<down> Suc 0 = [hd ?xs]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_hole 5)))),
    ("List2.nth_tl_eq_nth_Suc2",
     "?n < length ?xs ==> tl ?xs ! ?n = ?xs ! Suc ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("List2.last_take",
     "?n < length ?xs ==> last (?xs \<down> Suc ?n) = ?xs ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("List2.nth_append1", "?n < length ?xs ==> (?xs @ ?ys) ! ?n = ?xs ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("List2.nth_0_drop", "?n <= length ?xs ==> ?xs \<up> ?n ! 0 = ?xs ! ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("List2.f_image_insert_eq2",
     "length ?xs <= ?n ==> ?xs `\<^sup>f insert ?n ?A = ?xs `\<^sup>f ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("List2.nths_cut_less_eq",
     "length ?xs <= ?n ==> nths ?xs (?I \<down>< ?n) = nths ?xs ?I",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("List2.map_list_xs_take",
     "length ?fs <= ?n ==>
      map_list ?fs (?xs \<down> ?n) = map_list ?fs ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("List2.zip_not_empty_conv",
     "(zip ?xs ?ys ~= []) = (?xs ~= [] & ?ys ~= [])",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0),
             template_hole 5)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("List2.replicate_pred_Cons_length",
     "0 < ?n ==> length (?x # ?a\<^bsup>?n - Suc 0\<^esup>) = ?n",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_hole 6))),
               template_var 0))),
         template_var 2))),
    ("List2.upt_append", "?m <= ?n ==> [0..<?m] @ [?m..<?n] = [0..<?n]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("List2.last_nth",
     "?xs ~= [] ==> last ?xs = ?xs ! (length ?xs - Suc 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_hole 0)))))),
    ("List2.take_first", "?xs ~= [] ==> ?xs \<down> Suc 0 = [?xs ! 0]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 2)),
           template_hole 5)))),
    ("List2.nth_tl_eq_nth_Suc",
     "Suc ?n <= length ?xs ==> tl ?xs ! ?n = ?xs ! Suc ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 4, template_var 1))))),
    ("List2.sublist_list_if_sublist_list_eq",
     "list_all (%i. i < length ?xs) ?ys ==>
      sublist_list_if ?xs ?ys = sublist_list ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List2.list_ord_Cons_imp",
     "[| list_ord ?ord ?xs; ?ord ?x (hd ?xs) |]
      ==> list_ord ?ord (?x # ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("List2.subset_f_image_iff",
     "(?B <= ?xs `\<^sup>f ?A) = (EX A'<=?A. ?B = ?xs `\<^sup>f A')",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("List2.nths_singleton2",
     "nths ?xs {?y} = (if ?y < length ?xs then [?xs ! ?y] else [])",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_hole 0))),
    ("List2.map2_Cons_Cons",
     "List2.map2 ?f (?x # ?xs) (?y # ?ys) =
      ?f ?x ?y # List2.map2 ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_var 0)))),
    ("List2.sublist_list_nth",
     "?n < length ?ys ==> sublist_list ?xs ?ys ! ?n = ?xs ! (?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("List2.map2_ys_take",
     "length ?xs <= ?n ==>
      List2.map2 ?f ?xs (?ys \<down> ?n) = List2.map2 ?f ?xs ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_var 0)))),
    ("List2.filter_filter_eq",
     "list_all (%x. ?P x = ?Q x) ?xs ==> filter ?P ?xs = filter ?Q ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List2.f_image_is_empty",
     "(?xs `\<^sup>f ?A = {}) = ({x: ?A. x < length ?xs} = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_hole 7),
       template_equation
        (template_app (template_hole 5, t_empty), template_hole 0))),
    ("List2.list_ord_Cons",
     "list_ord ?ord (?x # ?xs) =
      (?xs = [] | ?ord ?x (hd ?xs) & list_ord ?ord ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_var 2, template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 0)))
           ))),
    ("List2.replicate_le_diff",
     "?m <= ?n ==>
      ?x\<^bsup>?m\<^esup> @ ?x\<^bsup>?n - ?m\<^esup> =
      ?x\<^bsup>?n\<^esup>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("List2.drop_take_1",
     "?n < length ?xs ==> ?xs \<up> ?n \<down> Suc 0 = [?xs ! ?n]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("List2.nth_append2",
     "length ?xs <= ?n ==> (?xs @ ?ys) ! ?n = ?ys ! (?n - length ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 4, template_var 2)))))),
    ("List2.f_image_eq_set_sublist_list",
     "list_all (%i. i < length ?xs) ?ys ==>
      ?xs `\<^sup>f set ?ys = set (sublist_list ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("List2.f_image_eq_set",
     "ALL n<length ?xs. n : ?A ==> ?xs `\<^sup>f ?A = set ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("List2.f_imageI",
     "[| ?n : ?A; ?n < length ?xs |] ==> ?xs ! ?n : ?xs `\<^sup>f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("List2.f_range_eqI",
     "[| ?x = ?xs ! ?n; ?n < length ?xs |] ==> ?x : f_range ?xs",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("List2.f_image_subset_iff",
     "(?xs `\<^sup>f ?A <= ?B) =
      (ALL n:?A. n < length ?xs --> ?xs ! n : ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1), t_empty))),
    ("List2.f_image_iff",
     "(?x : ?xs `\<^sup>f ?A) = (EX n:?A. n < length ?xs & ?x = ?xs ! n)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 0), t_empty))),
    ("List2.eq_replicate_conv",
     "(ALL i<length ?xs. ?xs ! i = ?m) =
      (?xs = ?m\<^bsup>length ?xs\<^esup>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("List2.map_list_Cons_if",
     "map_list ?fs (?x # ?xs) =
      (if ?fs = [] then [] else hd ?fs ?x # map_list (tl ?fs) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)))
           ))),
    ("List2.f_image_insert_eq1",
     "?n < length ?xs ==>
      ?xs `\<^sup>f insert ?n ?A = insert (?xs ! ?n) (?xs `\<^sup>f ?A)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("List2.map2_rev",
     "length ?xs = length ?ys ==>
      rev (List2.map2 ?f ?xs ?ys) = List2.map2 ?f (rev ?xs) (rev ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("List2.set_sublist_list_eq_set_sublist",
     "list_all (%i. i < length ?xs) ?ys ==>
      set (sublist_list ?xs ?ys) = set (nths ?xs (set ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("List2.nths_take_eq",
     "[| finite ?I; Max ?I < ?n |]
      ==> nths (?xs \<down> ?n) ?I = nths ?xs ?I",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("List2.list_ord_snoc",
     "list_ord ?ord (?xs @ [?x]) =
      (?xs = [] | ?ord (last ?xs) ?x & list_ord ?ord ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)))
           ))),
    ("List2.map_list_Cons_not_empty",
     "?fs ~= [] ==>
      map_list ?fs (?x # ?xs) = hd ?fs ?x # map_list (tl ?fs) ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("List2.f_image_insert_if",
     "?xs `\<^sup>f insert ?n ?A =
      (if ?n < length ?xs then insert (?xs ! ?n) (?xs `\<^sup>f ?A)
       else ?xs `\<^sup>f ?A)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("List2.list_take_drop_eq_conv",
     "(?xs = ?ys) =
      (EX n. ?xs \<down> n = ?ys \<down> n & ?xs \<up> n = ?ys \<up> n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("List2.list_ord_all_conv",
     "list_ord ?ord ?xs =
      (ALL n<length ?xs - 1. ?ord (?xs ! n) (?xs ! Suc n))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app (template_hole 7, t_empty))),
    ("List2.filter_snoc",
     "filter ?P (?xs @ [?x]) =
      (if ?P ?x then filter ?P ?xs @ [?x] else filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("List2.nths_drop_eq",
     "?n <= iMin ?I ==> nths (?xs \<up> ?n) {j. j + ?n : ?I} = nths ?xs ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1)))),
    ("List2.take_drop_eq_sublist_list",
     "?m + ?n <= length ?xs ==>
      ?xs \<up> ?m \<down> ?n = sublist_list ?xs [?m..<?m + ?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)))))),
    ("List2.take_drop_eq_sublist_list_if",
     "?m + ?n <= length ?xs ==>
      ?xs \<up> ?m \<down> ?n = sublist_list_if ?xs [?m..<?m + ?n]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)))))),
    ("List2.list_take_drop_imp_eq",
     "[| ?xs \<down> ?n = ?ys \<down> ?n; ?xs \<up> ?n = ?ys \<up> ?n |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("List2.map2_Cons_if",
     "List2.map2 ?f ?xs (?y # ?ys) =
      (if ?xs = [] then []
       else ?f (hd ?xs) ?y # List2.map2 ?f (tl ?xs) ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_var 3,
                     template_app (template_hole 1, template_var 2)),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)))
           ))),
    ("List2.map_list_append_append",
     "length ?fs1.0 = length ?xs1.0 ==>
      map_list (?fs1.0 @ ?fs2.0) (?xs1.0 @ ?xs2.0) =
      map_list ?fs1.0 ?xs1.0 @ map_list ?fs2.0 ?xs2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("List2.map2_zip_conv",
     "length ?xs <= length ?ys ==> List2.map2 ?f ?xs ?ys = map2 ?f ?xs ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("List2.sublist_list_if_sublist_list_eq2",
     "ALL n<length ?ys. ?ys ! n < length ?xs ==>
      sublist_list_if ?xs ?ys = sublist_list ?xs ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("List2.last_take2",
     "[| 0 < ?n; ?n <= length ?xs |]
      ==> last (?xs \<down> ?n) = ?xs ! (?n - Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_hole 8)))))),
    ("List2.insert_f_image",
     "[| ?n : ?A; ?n < length ?xs |]
      ==> insert (?xs ! ?n) (?xs `\<^sup>f ?A) = ?xs `\<^sup>f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("List2.hd_zip",
     "[| ?xs ~= []; ?ys ~= [] |] ==> hd (zip ?xs ?ys) = (hd ?xs, hd ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("List2.map_eq_map_list_take2",
     "[| length ?fs = length ?xs; list_all (%x. x = ?f) ?fs |]
      ==> map_list ?fs ?xs = map ?f ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("List2.list_ord_imp",
     "[| !!x y. ?ord x y ==> ?ord' x y; list_ord ?ord ?xs |]
      ==> list_ord ?ord' ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("List2.list_asc_trans",
     "list_asc ?xs = (ALL j<length ?xs. ALL i<j. ?xs ! i <= ?xs ! j)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("List2.list_asc_trans_le",
     "list_asc ?xs = (ALL j<length ?xs. ALL i<=j. ?xs ! i <= ?xs ! j)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("List2.list_desc_trans",
     "list_desc ?xs = (ALL j<length ?xs. ALL i<j. ?xs ! j <= ?xs ! i)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("List2.list_desc_trans_le",
     "list_desc ?xs = (ALL j<length ?xs. ALL i<=j. ?xs ! j <= ?xs ! i)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("List2.list_strict_asc_trans",
     "list_strict_asc ?xs = (ALL j<length ?xs. ALL i<j. ?xs ! i < ?xs ! j)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("List2.list_strict_desc_trans",
     "list_strict_desc ?xs =
      (ALL j<length ?xs. ALL i<j. ?xs ! j < ?xs ! i)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("List2.sublist_list_if_snoc",
     "sublist_list_if ?xs (?ys @ [?y]) =
      sublist_list_if ?xs ?ys @
      (if ?y < length ?xs then [?xs ! ?y] else [])",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_hole 0)))),
    ("List2.map2_Cons_not_empty",
     "?xs ~= [] ==>
      List2.map2 ?f ?xs (?y # ?ys) =
      ?f (hd ?xs) ?y # List2.map2 ?f (tl ?xs) ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 3),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_var 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 0, template_var 3)),
             template_var 0))))),
    ("List2.rev_f_imageI",
     "[| ?n : ?A; ?n < length ?xs; ?x = ?xs ! ?n |]
      ==> ?x : ?xs `\<^sup>f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("List2.f_image_eqI",
     "[| ?x = ?xs ! ?n; ?n : ?A; ?n < length ?xs |]
      ==> ?x : ?xs `\<^sup>f ?A",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("List2.set_sublist_list_if",
     "set (sublist_list_if ?xs ?ys) =
      {?xs ! i |i. i < length ?xs & i : set ?ys}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("List2.f_image_Collect",
     "?xs `\<^sup>f {n. ?P n} = {?xs ! n |n. ?P n & n < length ?xs}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, t_empty)),
       template_app (template_hole 6, t_empty))),
    ("List2.list_eq_iff",
     "(?xs = ?ys) =
      (length ?xs = length ?ys & (ALL i<length ?xs. ?xs ! i = ?ys ! i))",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 5, template_var 0))),
             template_app (template_hole 4, t_empty))
           ))),
    ("List2.list_strict_asc_trans_le",
     "list_strict_asc ?xs ==>
      ALL j<length ?xs. ALL i<=j. ?xs ! i <= ?xs ! j",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("List2.f_image_subsetI",
     "(!!n. n : ?A & n < length ?xs ==> ?xs ! n : ?B) ==>
      ?xs `\<^sup>f ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("List2.nths_disjoint_Un",
     "[| finite ?A; Max ?A < iMin ?B |]
      ==> nths ?xs (?A Un ?B) = nths ?xs ?A @ nths ?xs ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("List2.map_list_nth",
     "[| ?n < length ?fs; ?n < length ?xs |]
      ==> map_list ?fs ?xs ! ?n = (?fs ! ?n) (?xs ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("List2.map2_append_append",
     "length ?xs1.0 = length ?ys1.0 ==>
      List2.map2 ?f (?xs1.0 @ ?xs2.0) (?ys1.0 @ ?ys2.0) =
      List2.map2 ?f ?xs1.0 ?ys1.0 @ List2.map2 ?f ?xs2.0 ?ys2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 4),
          template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))))),
    ("List2.nths_disjoint_insert_left",
     "[| finite ?I; ?x < iMin ?I |]
      ==> nths ?xs (insert ?x ?I) = nths ?xs {?x} @ nths ?xs ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2))))),
    ("List2.nths_disjoint_insert_right",
     "[| finite ?I; Max ?I < ?x |]
      ==> nths ?xs (insert ?x ?I) = nths ?xs ?I @ nths ?xs {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0)))))),
    ("List2.map_eq_map_list_take",
     "[| length ?fs <= length ?xs; list_all (%x. x = ?f) ?fs |]
      ==> map_list ?fs ?xs = map ?f (?xs \<down> length ?fs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 2)),
             template_var 1))))),
    ("List2.map_list_snoc",
     "length ?fs < length ?xs ==>
      map_list (?fs @ [?f]) ?xs =
      map_list ?fs ?xs @ [?f (?xs ! length ?fs)]",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 2),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_var 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 10, template_var 2)))),
             template_hole 0))))),
    ("List2.map2_nth",
     "[| ?n < length ?xs; ?n < length ?ys |]
      ==> List2.map2 ?f ?xs ?ys ! ?n = ?f (?xs ! ?n) (?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("List2.f_rangeE",
     "[| ?x : f_range ?xs; !!n. [| n < length ?xs; ?x = ?xs ! n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("List2.list_ord_append",
     "list_ord ?ord (?xs @ ?ys) =
      (list_ord ?ord ?xs &
       (?ys = [] |
        list_ord ?ord ?ys & (?xs = [] | ?ord (last ?xs) (hd ?ys))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_var 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("List2.map_list_snoc_snoc",
     "length ?fs = length ?xs ==>
      map_list (?fs @ [?f]) (?xs @ [?x]) = map_list ?fs ?xs @ [?f ?x]",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 6))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_hole 0))))),
    ("List2.replicate_le_diff2",
     "[| ?k <= ?m; ?m <= ?n |]
      ==> ?x\<^bsup>?m - ?k\<^esup> @ ?x\<^bsup>?n - ?m\<^esup> =
          ?x\<^bsup>?n - ?k\<^esup>",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_var 0)))),
    ("List2.list_ord_distinct",
     "[| irrefl {(a, b). ?ord a b}; trans {(x, y). ?ord x y};
         list_ord ?ord ?xs |]
      ==> distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.map2_snoc",
     "length ?xs < length ?ys ==>
      List2.map2 ?f (?xs @ [?x]) ?ys =
      List2.map2 ?f ?xs ?ys @ [?f ?x (?ys ! length ?xs)]",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_var 1, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 10, template_var 3)))),
             template_hole 0))))),
    ("List2.map2_append1_take_drop",
     "length ?xs1.0 <= length ?ys ==>
      List2.map2 ?f (?xs1.0 @ ?xs2.0) ?ys =
      List2.map2 ?f ?xs1.0 (?ys \<down> length ?xs1.0) @
      List2.map2 ?f ?xs2.0 (?ys \<up> length ?xs1.0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 3)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 7, template_var 3)),
               template_var 2)))))),
    ("List2.map2_append2_take_drop",
     "length ?ys1.0 <= length ?xs ==>
      List2.map2 ?f ?xs (?ys1.0 @ ?ys2.0) =
      List2.map2 ?f (?xs \<down> length ?ys1.0) ?ys1.0 @
      List2.map2 ?f (?xs \<up> length ?ys1.0) ?ys2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 7, template_var 3)),
                   template_var 2)),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 7, template_var 3)),
                 template_var 2)),
             template_var 0))))),
    ("List2.sublist_list_if_nth",
     "?n < length (filter (%i. i < length ?xs) ?ys) ==>
      sublist_list_if ?xs ?ys ! ?n =
      ?xs ! (filter (%i. i < length ?xs) ?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, t_empty), template_var 0)),
             template_var 2))))),
    ("List2.map2_snoc_snoc",
     "length ?xs = length ?ys ==>
      List2.map2 ?f (?xs @ [?x]) (?ys @ [?y]) =
      List2.map2 ?f ?xs ?ys @ [?f ?x ?y]",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 4),
          template_app (template_hole 11, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 6))),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_var 2, template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("List2.f_imageE",
     "[| ?x : ?xs `\<^sup>f ?A;
         !!n. [| ?x = ?xs ! n; n : ?A; n < length ?xs |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("List2.set_sublist_list",
     "list_all (%i. i < length ?xs) ?ys ==>
      set (sublist_list ?xs ?ys) =
      {?xs ! i |i. i < length ?xs & i : set ?ys}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app (template_hole 6, t_empty)))),
    ("List2.list_ord_trans_imp",
     "[| trans {(x, y). ?ord x y}; list_ord ?ord ?xs; ?j < length ?xs;
         ?i < ?j |]
      ==> ?ord (?xs ! ?i) (?xs ! ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 1, template_var 2)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("List2.list_ord_trans",
     "trans {(x, y). ?ord x y} ==>
      list_ord ?ord ?xs =
      (ALL j<length ?xs. ALL i<j. ?ord (?xs ! i) (?xs ! j))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("List2.append_constant_length_induct",
     "[| !!ys. ?k = 0 | length ys < ?k ==> ?P ys;
         !!xs ys. [| length xs = ?k; ?P ys |] ==> ?P (xs @ ys) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("List2.map2_eq_conv",
     "length ?xs <= length ?ys ==>
      (List2.map2 ?f ?xs ?ys = List2.map2 ?g ?xs ?ys) =
      (ALL i<length ?xs. ?f (?xs ! i) (?ys ! i) = ?g (?xs ! i) (?ys ! i))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3),
             template_var 2)),
         template_app (template_hole 5, t_empty)))),
    ("List2.filter_nth",
     "?n < length (filter ?P ?xs) ==>
      filter ?P ?xs ! ?n =
      ?xs !
      (LEAST k.
          k < length ?xs &
          ?n < card {i. i <= k & i < length ?xs & ?P (?xs ! i)})",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, t_empty))))),
    ("List2.list_ord_trans_refl_le",
     "[| trans {(x, y). ?ord x y}; refl {(x, y). ?ord x y} |]
      ==> list_ord ?ord ?xs =
          (ALL j<length ?xs. ALL i<=j. ?ord (?xs ! i) (?xs ! j))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_hole 11, template_app (template_hole 10, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 11, template_app (template_hole 10, t_empty)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("List2.append_constant_length_induct_aux",
     "[| length ?xs div ?k = ?n; !!ys. ?k = 0 | length ys < ?k ==> ?P ys;
         !!xs ys. [| length xs = ?k; ?P ys |] ==> ?P (xs @ ys) |]
      ==> ?P ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_var 2),
          template_var 1),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("List2.list_ord_distinct_aux",
     "[| irrefl {(a, b). ?ord a b}; trans {(x, y). ?ord x y};
         list_ord ?ord ?xs; ?i < length ?xs; ?j < length ?xs; ?i < ?j |]
      ==> ?xs ! ?i ~= ?xs ! ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("List2.map2_cong",
     "[| ?xs1.0 = ?xs2.0; ?ys1.0 = ?ys2.0; length ?xs2.0 <= length ?ys2.0;
         !!x y. [| x : set ?xs2.0; y : set ?ys2.0 |] ==> ?f x y = ?g x y |]
      ==> List2.map2 ?f ?xs1.0 ?ys1.0 = List2.map2 ?g ?xs2.0 ?ys2.0",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 4),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2)))),
    ("List2.list_ord_trans_refl_le_imp",
     "[| trans {(x, y). ?ord x y}; !!x y. ?ord x y ==> ?ord' x y;
         refl {(x, y). ?ord' x y}; list_ord ?ord ?xs |]
      ==> ALL j<length ?xs. ALL i<=j. ?ord' (?xs ! i) (?xs ! j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_hole 11, template_app (template_hole 10, t_empty)))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_hole 11, template_app (template_hole 10, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty))))]:
   (string * thm * template) list
### theory "Draft.List2MoreTemplates"
### 0.398s elapsed time, 0.520s cpu time, 0.024s GC time
val it = (): unit
