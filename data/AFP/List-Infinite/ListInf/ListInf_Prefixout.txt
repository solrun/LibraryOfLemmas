Loading theory "Draft.Util_Nat" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_Div")
Loading theory "Draft.Util_MinMax" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_Set" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Util_MinMax"
### 0.058s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
### theory "Draft.Util_Set"
### 0.114s elapsed time, 0.471s cpu time, 0.037s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.495s cpu time, 0.037s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "Draft.Util_Nat"
### 0.153s elapsed time, 0.623s cpu time, 0.037s GC time
Loading theory "Draft.Util_Div" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.299s elapsed time, 1.170s cpu time, 0.111s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.296s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Util_Div"
### 0.341s elapsed time, 1.338s cpu time, 0.155s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.440s elapsed time, 1.722s cpu time, 0.248s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 1.000s cpu time, 0.174s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
consts
  prefixes :: "'a list => 'a list list"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  left :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  right :: "'a tree => 'a tree"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  suffixes :: "'a list => 'a list list"
### theory "HOL-Library.Stream"
### 1.109s elapsed time, 4.219s cpu time, 0.881s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.411s elapsed time, 5.400s cpu time, 0.998s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.729s elapsed time, 6.653s cpu time, 1.158s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.870s elapsed time, 3.367s cpu time, 0.354s GC time
### theory "HOL-Library.Countable_Set"
### 0.487s elapsed time, 1.712s cpu time, 0.207s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.158s elapsed time, 7.783s cpu time, 1.239s GC time
Loading theory "Draft.Templates" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListInf_PrefixMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.097s cpu time, 0.083s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.540s elapsed time, 2.414s cpu time, 0.157s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.386s elapsed time, 0.425s cpu time, 0.028s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.476s elapsed time, 0.546s cpu time, 0.096s GC time
Loading theory "Draft.Util_NatInf" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "Draft.Util_NatInf"
### 0.100s elapsed time, 0.100s cpu time, 0.000s GC time
Loading theory "Draft.SetInterval2" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2" via "Draft.SetIntervalCut")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "Draft.SetInterval2"
### 0.913s elapsed time, 1.032s cpu time, 0.137s GC time
Loading theory "Draft.InfiniteSet2" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf")
Loading theory "Draft.SetIntervalCut" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf" via "Draft.List2")
### theory "Draft.InfiniteSet2"
### 0.121s elapsed time, 0.266s cpu time, 0.055s GC time
### theory "Draft.SetIntervalCut"
### 0.827s elapsed time, 1.668s cpu time, 1.031s GC time
Loading theory "Draft.List2" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix" via "Draft.ListInf")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
"True"
  :: "bool"
"False"
  :: "bool"
consts
  sublist_list :: "'a list => nat list => 'a list"
consts
  sublist_list_if :: "'a list => nat list => 'a list"
"[10, 10, 20, 30, [] ! 4]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
consts
  map_list :: "('a => 'b) list => 'a list => 'b list"
"[10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
"[10, 10, 20, 30]"
  :: "int list"
consts
  map2 :: "('a => 'b => 'c) => 'a list => 'b list => 'c list"
### theory "Draft.List2"
### 0.573s elapsed time, 1.209s cpu time, 0.109s GC time
Loading theory "Draft.ListInf" (required by "Draft.ListInf_PrefixMoreTemplates" via "Draft.ListInf_Prefix")
### theory "Draft.ListInf"
### 0.963s elapsed time, 1.064s cpu time, 0.143s GC time
Loading theory "Draft.ListInf_Prefix" (required by "Draft.ListInf_PrefixMoreTemplates")
consts
  equal_pair_count :: "('a * 'a) list => nat"
### Partially applied constant "ListInf_Prefix.inf_prefix" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
### theory "Draft.ListInf_Prefix"
### 0.560s elapsed time, 1.029s cpu time, 0.104s GC time
Loading theory "Draft.ListInf_PrefixMoreTemplates"
"0"
  :: "int"
"4"
  :: "int"
"5"
  :: "int"
"5"
  :: "int"
val templateLemmas =
   [("ListInf_Prefix.Nil_iprefix", "[] \<sqsubseteq> ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("ListInf_Prefix.prefix_refl", "prefix ?xs ?xs",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("ListInf_Prefix.inf_prefix_length_NilL",
     "inf_prefix_length [] ?ys = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ListInf_Prefix.inf_prefix_length_NilR",
     "inf_prefix_length ?xs [] = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("ListInf_Prefix.inf_prefix_NilL", "[] \<sqinter> ?ys = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("ListInf_Prefix.inf_prefix_NilR", "?xs \<sqinter> [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("ListInf_Prefix.i_append_imp_iprefix",
     "?xs \<sqsubseteq> ?xs \<frown> ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("ListInf_Prefix.i_take_imp_iprefix", "?f \<Down> ?n \<sqsubseteq> ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("ListInf_Prefix.equal_pair_count_le",
     "equal_pair_count ?xs <= length ?xs",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("ListInf_Prefix.append_imp_prefix", "prefix ?a (?a @ ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("ListInf_Prefix.take_imp_prefix", "prefix (?xs \<down> ?n) ?xs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("ListInf_Prefix.inf_prefix_le1", "prefix (?xs \<sqinter> ?ys) ?xs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)
         )),
    ("ListInf_Prefix.inf_prefix_le2", "prefix (?xs \<sqinter> ?ys) ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("ListInf_Prefix.mirror_pair_equal",
     "equal_pair (mirror_pair ?p) = equal_pair ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListInf_Prefix.inf_prefix_length_leL",
     "inf_prefix_length ?xs ?ys <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("ListInf_Prefix.inf_prefix_length_leR",
     "inf_prefix_length ?xs ?ys <= length ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("ListInf_Prefix.inf_prefix_length_commute",
     "inf_prefix_length ?xs ?ys = inf_prefix_length ?ys ?xs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ListInf_Prefix.inf_prefix_commute",
     "?xs \<sqinter> ?ys = ?ys \<sqinter> ?xs",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ListInf_Prefix.length_inf_prefix",
     "length (?xs \<sqinter> ?ys) = inf_prefix_length ?xs ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ListInf_Prefix.eq_imp_prefix", "?xs = ?ys ==> prefix ?xs ?ys",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("ListInf_Prefix.inf_prefix_takeL",
     "?xs \<sqinter> ?ys = ?xs \<down> inf_prefix_length ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("ListInf_Prefix.inf_prefix_takeR",
     "?xs \<sqinter> ?ys = ?ys \<down> inf_prefix_length ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("ListInf_Prefix.inf_prefix_length_le_min",
     "inf_prefix_length ?xs ?ys <= min (length ?xs) (length ?ys)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ListInf_Prefix.inf_prefix_hd",
     "hd ((?a # ?xs) \<sqinter> (?a # ?ys)) = ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))),
       template_var 2)),
    ("ListInf_Prefix.equal_pair_count_Suc",
     "equal_pair_count ((?a, ?a) # ?ps) = Suc (equal_pair_count ?ps)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("ListInf_Prefix.iprefix_eq_iprefix_take",
     "(?xs \<sqsubseteq> ?f) = (?f \<Down> length ?xs = ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1))),
    ("ListInf_Prefix.prefix_eq_prefix_take",
     "prefix ?xs ?ys = (?ys \<down> length ?xs = ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1))),
    ("ListInf_Prefix.i_take_length_prefix_conv",
     "prefix (?f \<Down> length ?xs) ?xs = (?xs \<sqsubseteq> ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ListInf_Prefix.prefix_iprefix",
     "prefix ?xs ?ys ==> ?xs \<sqsubseteq> ?ys \<frown> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListInf_Prefix.equal_pair_count_correct",
     "?i < equal_pair_count ?ps ==> equal_pair (?ps ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ListInf_Prefix.iprefixI",
     "?f = ?xs \<frown> ?g ==> ?xs \<sqsubseteq> ?f",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("ListInf_Prefix.append_iprefixD",
     "?xs @ ?ys \<sqsubseteq> ?f ==> ?xs \<sqsubseteq> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("ListInf_Prefix.iprefix_eq_iprefix_take_ex",
     "(?xs \<sqsubseteq> ?f) = (EX n. ?f \<Down> n = ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ListInf_Prefix.prefix_eq_prefix_take_ex",
     "prefix ?xs ?ys = (EX n. ?ys \<down> n = ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ListInf_Prefix.same_prefix_iprefix",
     "(?xs @ ?ys \<sqsubseteq> ?xs \<frown> ?f) = (?ys \<sqsubseteq> ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("ListInf_Prefix.i_take_prefix_le_conv",
     "prefix (?f \<Down> ?a) (?f \<Down> ?b) = (?a <= ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("ListInf_Prefix.set_mono_iprefix",
     "?xs \<sqsubseteq> ?f ==> set ?xs <= range ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ListInf_Prefix.equal_pair_count_maximality1a",
     "equal_pair_count ?ps = length ?ps |
      ~ equal_pair (?ps ! equal_pair_count ?ps)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 4, template_var 0)))))
         )),
    ("ListInf_Prefix.inf_prefix_length_Suc",
     "inf_prefix_length (?a # ?xs) (?a # ?ys) =
      Suc (inf_prefix_length ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ListInf_Prefix.le_take_imp_prefix",
     "?a <= ?b ==> prefix (?xs \<down> ?a) (?xs \<down> ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListInf_Prefix.le_inf_prefix_iff",
     "prefix ?x (?y \<sqinter> ?z) = (prefix ?x ?y & prefix ?x ?z)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.prefix_length_le_eq_conv",
     "(prefix ?xs ?ys & length ?ys <= length ?xs) = (?xs = ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0)),
                template_app (template_hole 1, template_var 1)))
            )],
       template_equation (template_var 1, template_var 0))),
    ("ListInf_Prefix.inf_prefix_append",
     "(?zs @ ?xs) \<sqinter> (?zs @ ?ys) = ?zs @ ?xs \<sqinter> ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ListInf_Prefix.inf_prefix_Cons",
     "(?a # ?xs) \<sqinter> (?a # ?ys) = ?a # ?xs \<sqinter> ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ListInf_Prefix.hd_inf_prefix_length_0",
     "hd ?xs ~= hd ?ys ==> inf_prefix_length ?xs ?ys = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("ListInf_Prefix.hd_inf_prefix_Nil",
     "hd ?xs ~= hd ?ys ==> ?xs \<sqinter> ?ys = []",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("ListInf_Prefix.prefixeq_iprefix_trans",
     "[| prefix ?xs ?ys; ?ys \<sqsubseteq> ?f |] ==> ?xs \<sqsubseteq> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ListInf_Prefix.prefixeq_antisym",
     "[| prefix ?xs ?ys; prefix ?ys ?xs |] ==> ?xs = ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("ListInf_Prefix.prefix_trans",
     "[| prefix ?xs ?ys; prefix ?ys ?zs |] ==> prefix ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ListInf_Prefix.inf_prefix_length_append",
     "inf_prefix_length (?zs @ ?xs) (?zs @ ?ys) =
      length ?zs + inf_prefix_length ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("ListInf_Prefix.prefix_take_eq_prefix_take_ex",
     "(?ys \<down> length ?xs = ?xs) = (EX n. ?ys \<down> n = ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app (template_hole 0, t_empty))),
    ("ListInf_Prefix.iprefix_take_eq_iprefix_take_ex",
     "(?f \<Down> length ?xs = ?xs) = (EX n. ?f \<Down> n = ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app (template_hole 0, t_empty))),
    ("ListInf_Prefix.i_append_one_iprefix",
     "?xs \<sqsubseteq> ?f ==> ?xs @ [?f (length ?xs)] \<sqsubseteq> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_var 0,
                       template_app (template_hole 1, template_var 1))),
                   template_hole 0))),
             template_var 0)
           ))),
    ("ListInf_Prefix.inf_prefix_length_correct",
     "?i < inf_prefix_length ?xs ?ys ==> ?xs ! ?i = ?ys ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListInf_Prefix.inf_prefix_length_take_correct",
     "?n <= inf_prefix_length ?xs ?ys ==> ?xs \<down> ?n = ?ys \<down> ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.equal_pair_count_maximality1b",
     "equal_pair_count ?ps ~= length ?ps ==>
      ~ equal_pair (?ps ! equal_pair_count ?ps)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 3, template_var 0)))
               )
           ))),
    ("ListInf_Prefix.equal_pair_count_0",
     "fst (hd ?ps) ~= snd (hd ?ps) ==> equal_pair_count ?ps = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ListInf_Prefix.strict_prefix_eq_strict_prefix_take",
     "strict_prefix ?xs ?ys = (?ys \<down> length ?xs = ?xs & ?xs ~= ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("ListInf_Prefix.inf_prefix_correct",
     "?i < length (?xs \<sqinter> ?ys) ==> ?xs ! ?i = ?ys ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListInf_Prefix.inf_prefix_take_correct",
     "?n <= length (?xs \<sqinter> ?ys) ==>
      ?xs \<down> ?n = ?ys \<down> ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.nth_neq_imp_inf_prefix_length_le",
     "?xs ! ?i ~= ?ys ! ?i ==> inf_prefix_length ?xs ?ys <= ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("ListInf_Prefix.le_imp_le_inf_prefix",
     "[| prefix ?x ?y; prefix ?x ?z |] ==> prefix ?x (?y \<sqinter> ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListInf_Prefix.length_inf_prefix_append",
     "length ((?zs @ ?xs) \<sqinter> (?zs @ ?ys)) =
      length ?zs + length (?xs \<sqinter> ?ys)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 2)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("ListInf_Prefix.strict_prefix_eq_strict_prefix_take_ex",
     "strict_prefix ?xs ?ys = ((EX n. ?ys \<down> n = ?xs) & ?xs ~= ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("ListInf_Prefix.equal_pair_count_maximality_aux",
     "?i = equal_pair_count ?ps ==>
      length ?ps = ?i | ~ equal_pair (?ps ! ?i)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 3, template_var 0)),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("ListInf_Prefix.take_prefixeq_le_conv",
     "?a <= length ?xs ==>
      prefix (?xs \<down> ?a) (?xs \<down> ?b) = (?a <= ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.take_length_prefix_conv",
     "length ?xs <= length ?ys ==>
      prefix (?ys \<down> length ?xs) ?xs = prefix ?xs ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ListInf_Prefix.hd_neq_inf_prefix_append",
     "hd ?xs ~= hd ?ys ==> (?zs @ ?xs) \<sqinter> (?zs @ ?ys) = ?zs",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("ListInf_Prefix.inf_prefix_correctL",
     "?i < length (?xs \<sqinter> ?ys) ==>
      (?xs \<sqinter> ?ys) ! ?i = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("ListInf_Prefix.inf_prefix_correctR",
     "?i < length (?xs \<sqinter> ?ys) ==>
      (?xs \<sqinter> ?ys) ! ?i = ?ys ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ListInf_Prefix.iprefix_same_cases",
     "[| ?xs \<sqsubseteq> ?f; ?ys \<sqsubseteq> ?f |]
      ==> prefix ?xs ?ys | prefix ?ys ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("ListInf_Prefix.iprefix_length_le_imp_prefix",
     "[| ?xs \<sqsubseteq> ?ys \<frown> ?f; length ?xs <= length ?ys |]
      ==> prefix ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("ListInf_Prefix.iprefixE",
     "[| ?xs \<sqsubseteq> ?f; !!g. ?f = ?xs \<frown> g ==> ?C |] ==> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("ListInf_Prefix.take_prefix_imp_le",
     "[| ?a <= length ?xs; prefix (?xs \<down> ?a) (?xs \<down> ?b) |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("ListInf_Prefix.iprefix_imp_take_eq",
     "[| ?n <= length ?xs; ?xs \<sqsubseteq> ?f |]
      ==> ?xs \<down> ?n = ?f \<Down> ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.prefix_imp_take_eq",
     "[| ?n <= length ?xs; prefix ?xs ?ys |]
      ==> ?xs \<down> ?n = ?ys \<down> ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListInf_Prefix.iprefix_same_length_le",
     "[| ?xs \<sqsubseteq> ?f; ?ys \<sqsubseteq> ?f;
         length ?xs <= length ?ys |]
      ==> prefix ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ListInf_Prefix.iprefix_i_append",
     "(?xs \<sqsubseteq> ?ys \<frown> ?f) =
      (prefix ?xs ?ys | (EX zs. ?xs = ?ys @ zs & zs \<sqsubseteq> ?f))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("ListInf_Prefix.equal_pair_count_maximality2a",
     "equal_pair_count ?ps = length ?ps |
      (ALL i>=equal_pair_count ?ps. EX j<=i. ~ equal_pair (?ps ! j))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app (template_hole 8, template_var 0))),
           template_app (template_hole 7, t_empty))
         )),
    ("ListInf_Prefix.strict_prefix_take_eq_strict_prefix_take_ex",
     "(?ys \<down> length ?xs = ?xs & ?xs ~= ?ys) =
      ((EX n. ?ys \<down> n = ?xs) & ?xs ~= ?ys)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 0, t_empty)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("ListInf_Prefix.take_the_conv",
     "?xs \<down> ?k =
      (if length ?xs <= ?k then ?xs
       else THE r. length r = ?k & (EX r2. r @ r2 = ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_var 1)),
           template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("ListInf_Prefix.inf_prefix_length_maximality1",
     "inf_prefix_length ?xs ?ys ~= min (length ?xs) (length ?ys) ==>
      ?xs ! inf_prefix_length ?xs ?ys ~= ?ys ! inf_prefix_length ?xs ?ys",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("ListInf_Prefix.append_eq_imp_take",
     "[| ?k <= length ?xs; length ?r1.0 = ?k; ?r1.0 @ ?r2.0 = ?xs |]
      ==> ?r1.0 = ?xs \<down> ?k",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_var 2)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("ListInf_Prefix.equal_pair_count_maximality2b",
     "[| equal_pair_count ?ps ~= length ?ps; equal_pair_count ?ps <= ?i |]
      ==> EX j<=?i. ~ equal_pair (?ps ! j)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListInf_Prefix.inf_prefix_length_0_imp_hd_neq",
     "[| ?xs ~= []; ?ys ~= []; inf_prefix_length ?xs ?ys = 0 |]
      ==> hd ?xs ~= hd ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ListInf_Prefix.inf_prefix_Nil_imp_hd_neq",
     "[| ?xs ~= []; ?ys ~= []; ?xs \<sqinter> ?ys = [] |]
      ==> hd ?xs ~= hd ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ListInf_Prefix.equal_pair_count_mirror_pairwise",
     "[| length ?ps1.0 = length ?ps2.0;
         !!i. i < length ?ps2.0 ==> ?ps1.0 ! i = mirror_pair (?ps2.0 ! i) |]
      ==> equal_pair_count ?ps1.0 = equal_pair_count ?ps2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListInf_Prefix.equal_pair_count_eq_pairwise",
     "[| length ?ps1.0 = length ?ps2.0;
         !!i. i < length ?ps2.0 ==>
              equal_pair (?ps1.0 ! i) = equal_pair (?ps2.0 ! i) |]
      ==> equal_pair_count ?ps1.0 = equal_pair_count ?ps2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListInf_Prefix.zip_mirror",
     "[| ?i < min (length ?xs) (length ?ys); ?p1.0 = zip ?xs ?ys ! ?i;
         ?p2.0 = zip ?ys ?xs ! ?i |]
      ==> mirror_pair ?p1.0 = ?p2.0",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3)),
            template_app (template_hole 7, template_var 2))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2)),
            template_var 4)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3)),
            template_var 4))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ListInf_Prefix.inf_prefix_length_maximality2",
     "[| inf_prefix_length ?xs ?ys ~= min (length ?xs) (length ?ys);
         inf_prefix_length ?xs ?ys <= ?i |]
      ==> EX j<=?i. ?xs ! j ~= ?ys ! j",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app (template_hole 5, template_var 1)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListInf_Prefix.is_inf_prefix",
     "[| length ?zs = length (?xs \<sqinter> ?ys);
         !!i. i < length (?xs \<sqinter> ?ys) ==>
              ?zs ! i = ?xs ! i & ?zs ! i = ?ys ! i |]
      ==> ?zs = ?xs \<sqinter> ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ListInf_PrefixMoreTemplates"
### 0.437s elapsed time, 0.886s cpu time, 0.051s GC time
val it = (): unit
