   [("SetIntervalStep.inext_empty", "inext ?n {} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIntervalStep.inext_nth_UNIV", "UNIV \<rightarrow> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("SetIntervalStep.iprev_empty", "iprev ?n {} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIntervalStep.nat_CommuteWithIntervalCut2_4_eq",
     "CommuteWithIntervalCut4 ?fun = CommuteWithIntervalCut2 ?fun",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.inext_UNIV", "inext ?n UNIV = Suc ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.iprev_iMin", "iprev (iMin ?I) ?I = iMin ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.inext_singleton", "inext ?n {?a} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("SetIntervalStep.inext_nth_singleton", "{?a} \<rightarrow> ?n = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("SetIntervalStep.iprev_singleton", "iprev ?n {?a} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("SetIntervalStep.iprev_nth_singleton", "{?a} \<leftarrow> ?n = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("SetIntervalStep.iprev_UNIV", "iprev ?n UNIV = ?n - Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("SetIntervalStep.inext_nth_atLeast",
     "{?n..} \<rightarrow> ?a = ?n + ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalStep.inext_in_iff", "(inext ?n ?I : ?I) = (?n : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SetIntervalStep.iprev_in_iff", "(iprev ?n ?I : ?I) = (?n : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SetIntervalStep.iprev_greater_conv",
     "(?n : ?I & iMin ?I < ?n) = (iprev ?n ?I < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("SetIntervalStep.iprev_fix_iff",
     "(?n ~: ?I | iMin ?I = ?n) = (iprev ?n ?I = ?n)",
     template_bimplication
      (template_dunno,
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_nth_surj_aux1",
     "{x: ?I. \<nexists>n. ?I \<rightarrow> n = x} = {}",
     template_equation
      (template_app (template_hole 7, t_empty), template_hole 0)),
    ("SetIntervalStep.inext_less_conv",
     "(?n : ?I & (?n < Max ?I | infinite ?I)) = (?n < inext ?n ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_fix_iff",
     "(?n ~: ?I | finite ?I & Max ?I = ?n) = (inext ?n ?I = ?n)",
     template_bimplication
      (template_dunno,
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.cut_le_inext_nth_card_if",
     "card (?I \<down>\<le> (?I \<rightarrow> ?n)) =
      (if ?n < card ?I | infinite ?I then Suc ?n else card ?I)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 8, template_var 1))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 8, template_var 1)))),
    ("SetIntervalStep.cut_less_inext_nth_card_if",
     "card (?I \<down>< (?I \<rightarrow> ?n)) =
      (if ?n < card ?I | infinite ?I then ?n else card ?I - Suc 0)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app (template_hole 10, template_var 1))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 10, template_var 1)),
           template_app (template_hole 1, template_hole 0)))))]
