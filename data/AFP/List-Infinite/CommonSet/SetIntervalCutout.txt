Loading theory "Draft.Util_MinMax" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_Nat" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_Div")
Loading theory "Draft.Util_Set" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Util_MinMax"
### 0.047s elapsed time, 0.218s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Util_Set"
### 0.101s elapsed time, 0.425s cpu time, 0.035s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.569s cpu time, 0.035s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "Draft.Util_Nat"
### 0.161s elapsed time, 0.659s cpu time, 0.035s GC time
Loading theory "Draft.Util_Div" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.320s elapsed time, 1.253s cpu time, 0.127s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.256s cpu time, 0.192s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Util_Div"
### 0.347s elapsed time, 1.363s cpu time, 0.192s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.475s elapsed time, 1.863s cpu time, 0.296s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Set_Algebras"
### 0.245s elapsed time, 0.953s cpu time, 0.203s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.093s elapsed time, 4.172s cpu time, 0.850s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
class height = type +
  fixes height :: "'a => nat"
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.036s elapsed time, 3.869s cpu time, 0.829s GC time
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.293s elapsed time, 4.432s cpu time, 0.891s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.357s elapsed time, 0.741s cpu time, 0.059s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.990s elapsed time, 6.065s cpu time, 1.111s GC time
Loading theory "Draft.Templates" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.170s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetIntervalCutMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.519s elapsed time, 1.074s cpu time, 0.076s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.539s elapsed time, 2.481s cpu time, 0.201s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.384s elapsed time, 0.423s cpu time, 0.029s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.458s elapsed time, 0.494s cpu time, 0.050s GC time
Loading theory "Draft.Util_NatInf" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "Draft.Util_NatInf"
### 0.115s elapsed time, 0.149s cpu time, 0.049s GC time
Loading theory "Draft.SetInterval2" (required by "Draft.SetIntervalCutMoreTemplates" via "Draft.SetIntervalCut")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "Draft.SetInterval2"
### 0.900s elapsed time, 0.988s cpu time, 0.092s GC time
Loading theory "Draft.SetIntervalCut" (required by "Draft.SetIntervalCutMoreTemplates")
### theory "Draft.SetIntervalCut"
### 0.517s elapsed time, 0.573s cpu time, 0.078s GC time
Loading theory "Draft.SetIntervalCutMoreTemplates"
val templateLemmas =
   [("SetIntervalCut.set_restriction_fun_is_set_restriction",
     "set_restriction (set_restriction_fun ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SetIntervalCut.nat_cut_le_finite", "finite (?I \<down>\<le> ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SetIntervalCut.nat_cut_less_finite", "finite (?I \<down>< ?t)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SetIntervalCut.cut_ge_empty", "{} \<down>\<ge> ?t = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("SetIntervalCut.cut_greater_empty", "{} \<down>> ?t = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("SetIntervalCut.cut_le_empty", "{} \<down>\<le> ?t = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("SetIntervalCut.cut_less_empty", "{} \<down>< ?t = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("SetIntervalCut.cut_ge_0_all", "?I \<down>\<ge> 0 = ?I",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIntervalCut.cut_less_0_empty", "?I \<down>< 0 = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("SetIntervalCut.cut_ge_subset", "?I \<down>\<ge> ?t <= ?I",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("SetIntervalCut.cut_greater_subset", "?I \<down>> ?t <= ?I",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("SetIntervalCut.cut_le_subset", "?I \<down>\<le> ?t <= ?I",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("SetIntervalCut.cut_less_subset", "?I \<down>< ?t <= ?I",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("SetIntervalCut.i_cut_ge_set_restriction",
     "set_restriction (%I. I \<down>\<ge> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.i_cut_greater_set_restriction",
     "set_restriction (%I. I \<down>> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.i_cut_le_set_restriction",
     "set_restriction (%I. I \<down>\<le> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.i_cut_less_set_restriction",
     "set_restriction (%I. I \<down>< ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.UNIV_cut_ge", "UNIV \<down>\<ge> ?t = {?t..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalCut.UNIV_cut_greater", "UNIV \<down>> ?t = {?t<..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalCut.UNIV_cut_le", "UNIV \<down>\<le> ?t = {..?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalCut.UNIV_cut_less", "UNIV \<down>< ?t = {..<?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalCut.nat_cut_ge_finite_iff",
     "finite (?I \<down>\<ge> ?t) = finite ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("SetIntervalCut.nat_cut_greater_finite_iff",
     "finite (?I \<down>> ?t) = finite ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("SetIntervalCut.nat_cut_ge_card",
     "card (?I \<down>\<ge> ?t) <= card ?I",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("SetIntervalCut.nat_cut_greater_card",
     "card (?I \<down>> ?t) <= card ?I",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("SetIntervalCut.imirror_finite", "finite ?I ==> finite (imirror ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIntervalCut.cut_ge_Diff_conv", "?I \<down>\<ge> ?t = ?I - {..<?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_ge_Int_conv", "?I \<down>\<ge> ?t = ?I Int {?t..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_greater_Diff_conv", "?I \<down>> ?t = ?I - {..?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_greater_Int_conv",
     "?I \<down>> ?t = ?I Int {?t<..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_le_Diff_conv", "?I \<down>\<le> ?t = ?I - {?t<..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_le_Int_conv", "?I \<down>\<le> ?t = ?I Int {..?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_less_Diff_conv", "?I \<down>< ?t = ?I - {?t..}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.cut_less_Int_conv", "?I \<down>< ?t = ?I Int {..<?t}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.atMost_cut_ge", "{..?n} \<down>\<ge> ?t = {?t..?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SetIntervalCut.lessThan_cut_ge",
     "{..<?n} \<down>\<ge> ?t = {?t..<?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SetIntervalCut.atMost_cut_greager", "{..?n} \<down>> ?t = {?t<..?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SetIntervalCut.lessThan_cut_greater",
     "{..<?n} \<down>> ?t = {?t<..<?n}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SetIntervalCut.atLeast_cut_le", "{?n..} \<down>\<le> ?t = {?n..?t}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.greaterThan_cut_le",
     "{?n<..} \<down>\<le> ?t = {?n<..?t}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.atLeast_cut_less", "{?n..} \<down>< ?t = {?n..<?t}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.greaterThan_cut_less",
     "{?n<..} \<down>< ?t = {?n<..<?t}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.nat_cut_le_less_conv",
     "?I \<down>\<le> ?t = ?I \<down>< Suc ?t",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.nat_cut_ge_greater_conv",
     "?I \<down>\<ge> Suc ?t = ?I \<down>> ?t",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.imirror_singleton", "imirror {?a} = {?a}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("SetIntervalCut.imirror_is_empty", "(imirror ?I = {}) = (?I = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("SetIntervalCut.cut_ge_finite",
     "finite ?I ==> finite (?I \<down>\<ge> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_greater_finite",
     "finite ?I ==> finite (?I \<down>> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_le_finite",
     "finite ?I ==> finite (?I \<down>\<le> ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_less_finite",
     "finite ?I ==> finite (?I \<down>< ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.set_restriction_empty",
     "set_restriction ?f ==> ?f {} = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 0), template_hole 0))),
    ("SetIntervalCut.set_restriction_subset",
     "set_restriction ?f ==> ?f ?A <= ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_var 0))),
    ("SetIntervalCut.nat_mirror_commute",
     "nat_mirror ?n ?l ?r = nat_mirror ?n ?r ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("SetIntervalCut.cut_ge_absorb",
     "?I \<down>\<ge> ?t \<down>\<ge> ?t = ?I \<down>\<ge> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.cut_greater_absorb",
     "?I \<down>> ?t \<down>> ?t = ?I \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.cut_le_absorb",
     "?I \<down>\<le> ?t \<down>\<le> ?t = ?I \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.cut_less_absorb",
     "?I \<down>< ?t \<down>< ?t = ?I \<down>< ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalCut.imirror_eq_mirror_elem_image",
     "imirror ?I = (%x. mirror_elem x ?I) ` ?I",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("SetIntervalCut.imirror_eq_imirror_bounds",
     "imirror ?I = imirror_bounds ?I (iMin ?I) (Max ?I)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.imirror_imirror_ident",
     "finite ?I ==> imirror (imirror ?I) = ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("SetIntervalCut.nat_mirror_inj_on",
     "inj_on (%x. nat_mirror x ?l ?r) {..?l + ?r}",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("SetIntervalCut.cut_ge_eq_set_restriction_fun'",
     "(%I. I \<down>\<ge> ?t) = set_restriction_fun ((<=) ?t)",
     template_equation (t_empty, template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.cut_greater_eq_set_restriction_fun'",
     "(%I. I \<down>> ?t) = set_restriction_fun ((<) ?t)",
     template_equation (t_empty, template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.cut_le_eq_set_restriction_fun'",
     "(%I. I \<down>\<le> ?t) = set_restriction_fun (%x. x <= ?t)",
     template_equation (t_empty, template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.cut_less_eq_set_restriction_fun'",
     "(%I. I \<down>< ?t) = set_restriction_fun (%x. x < ?t)",
     template_equation (t_empty, template_app (template_hole 1, t_empty))),
    ("SetIntervalCut.cut_ge_eq_set_restriction_fun",
     "?I \<down>\<ge> ?t = set_restriction_fun ((<=) ?t) ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("SetIntervalCut.cut_greater_eq_set_restriction_fun",
     "?I \<down>> ?t = set_restriction_fun ((<) ?t) ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("SetIntervalCut.cut_le_eq_set_restriction_fun",
     "?I \<down>\<le> ?t = set_restriction_fun (%x. x <= ?t) ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("SetIntervalCut.cut_less_eq_set_restriction_fun",
     "?I \<down>< ?t = set_restriction_fun (%x. x < ?t) ?I",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("SetIntervalCut.mirror_elem_inj_on",
     "finite ?I ==> inj_on (%x. mirror_elem x ?I) ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("SetIntervalCut.imirror_card",
     "finite ?I ==> card (imirror ?I) = card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("SetIntervalCut.imirror_Max",
     "finite ?I ==> Max (imirror ?I) = Max ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("SetIntervalCut.imirror_iMin",
     "finite ?I ==> iMin (imirror ?I) = iMin ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("SetIntervalCut.set_restriction_absorb",
     "set_restriction ?f ==> ?f (?f ?A) = ?f ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_var 1, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("SetIntervalCut.cut_ge_bound", "?n : ?i \<down>\<ge> ?t ==> ?t <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("SetIntervalCut.cut_greater_bound", "?n : ?i \<down>> ?t ==> ?t < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_than, template_var 0, template_var 2))),
    ("SetIntervalCut.cut_le_bound", "?n : ?I \<down>\<le> ?t ==> ?n <= ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalCut.cut_less_bound", "?n : ?I \<down>< ?t ==> ?n < ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("SetIntervalCut.cut_ge_in_imp", "?x : ?I \<down>\<ge> ?t ==> ?x : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("SetIntervalCut.cut_greater_in_imp", "?x : ?I \<down>> ?t ==> ?x : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("SetIntervalCut.cut_le_in_imp", "?x : ?I \<down>\<le> ?t ==> ?x : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("SetIntervalCut.cut_less_in_imp", "?x : ?I \<down>< ?t ==> ?x : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("SetIntervalCut.cut_greater_ge_conv",
     "?I \<down>> ?t = ?I \<down>\<ge> ?t - {?t}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetIntervalCut.cut_less_le_conv",
     "?I \<down>< ?t = ?I \<down>\<le> ?t - {?t}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetIntervalCut.cut_ge_Int_right",
     "(?A Int ?B) \<down>\<ge> ?t = ?A Int ?B \<down>\<ge> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_Int_left",
     "(?A Int ?B) \<down>\<ge> ?t = ?A \<down>\<ge> ?t Int ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SetIntervalCut.cut_cut_ge",
     "?i \<down>\<ge> ?a \<down>\<ge> ?b = ?i \<down>\<ge> max ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Int_right",
     "(?A Int ?B) \<down>> ?t = ?A Int ?B \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Int_left",
     "(?A Int ?B) \<down>> ?t = ?A \<down>> ?t Int ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SetIntervalCut.cut_cut_greater",
     "?i \<down>> ?a \<down>> ?b = ?i \<down>> max ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_Int_right",
     "(?A Int ?B) \<down>\<le> ?t = ?A Int ?B \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_Int_left",
     "(?A Int ?B) \<down>\<le> ?t = ?A \<down>\<le> ?t Int ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SetIntervalCut.cut_cut_le",
     "?i \<down>\<le> ?a \<down>\<le> ?b = ?i \<down>\<le> min ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Int_right",
     "(?A Int ?B) \<down>< ?t = ?A Int ?B \<down>< ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Int_left",
     "(?A Int ?B) \<down>< ?t = ?A \<down>< ?t Int ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SetIntervalCut.cut_cut_less",
     "?i \<down>< ?a \<down>< ?b = ?i \<down>< min ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Min_eq_Diff",
     "?I \<down>> iMin ?I = ?I - {iMin ?I}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("SetIntervalCut.set_restriction_fun_all_conv",
     "(set_restriction_fun ?P ?A = ?A) = (ALL x:?A. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("SetIntervalCut.cut_ge_card",
     "finite ?I ==> card (?I \<down>\<ge> ?t) <= card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("SetIntervalCut.cut_greater_card",
     "finite ?I ==> card (?I \<down>> ?t) <= card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("SetIntervalCut.cut_le_card",
     "finite ?I ==> card (?I \<down>\<le> ?t) <= card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("SetIntervalCut.cut_less_card",
     "finite ?I ==> card (?I \<down>< ?t) <= card ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("SetIntervalCut.nat_cut_ge_infinite_not_empty",
     "infinite ?I ==> ?I \<down>\<ge> ?t ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SetIntervalCut.nat_cut_greater_infinite_not_empty",
     "infinite ?I ==> ?I \<down>> ?t ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SetIntervalCut.imirror_not_empty", "?I ~= {} ==> imirror ?I ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("SetIntervalCut.cut_greater_Min_all",
     "?t < iMin ?I ==> ?I \<down>> ?t = ?I",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("SetIntervalCut.cut_le_Min_empty",
     "?t < iMin ?I ==> ?I \<down>\<le> ?t = {}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetIntervalCut.cut_ge_Min_all",
     "?t <= iMin ?I ==> ?I \<down>\<ge> ?t = ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("SetIntervalCut.cut_less_Min_empty",
     "?t <= iMin ?I ==> ?I \<down>< ?t = {}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetIntervalCut.set_restriction_finite",
     "[| set_restriction ?f; finite ?A |] ==> finite (?f ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("SetIntervalCut.imirror_eq_nat_mirror_image",
     "imirror ?I = (%x. nat_mirror x (iMin ?I) (Max ?I)) ` ?I",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("SetIntervalCut.set_restriction_fun_empty_conv",
     "(set_restriction_fun ?P ?A = {}) = (ALL x:?A. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("SetIntervalCut.cut_ge_all_iff",
     "(?I \<down>\<ge> ?t = ?I) = (ALL x:?I. ?t <= x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_ge_empty_iff",
     "(?I \<down>\<ge> ?t = {}) = (ALL x:?I. x < ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_greater_all_iff",
     "(?I \<down>> ?t = ?I) = (ALL x:?I. ?t < x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_greater_empty_iff",
     "(?I \<down>> ?t = {}) = (ALL x:?I. x <= ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_le_all_iff",
     "(?I \<down>\<le> ?t = ?I) = (ALL x:?I. x <= ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_le_empty_iff",
     "(?I \<down>\<le> ?t = {}) = (ALL x:?I. ?t < x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_less_all_iff",
     "(?I \<down>< ?t = ?I) = (ALL x:?I. x < ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_less_empty_iff",
     "(?I \<down>< ?t = {}) = (ALL x:?I. ?t <= x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.mirror_elem_imirror",
     "finite ?I ==> mirror_elem ?t (imirror ?I) = mirror_elem ?t ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_le_mono",
     "?t <= ?t' ==> ?I \<down>\<le> ?t <= ?I \<down>\<le> ?t'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_less_mono",
     "?t <= ?t' ==> ?I \<down>< ?t <= ?I \<down>< ?t'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_ge_mono",
     "?t' <= ?t ==> ?I \<down>\<ge> ?t <= ?I \<down>\<ge> ?t'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalCut.cut_greater_mono",
     "?t' <= ?t ==> ?I \<down>> ?t <= ?I \<down>> ?t'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalCut.cut_ge_subset_mono",
     "?A <= ?B ==> ?A \<down>\<ge> ?t <= ?B \<down>\<ge> ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_subset_mono",
     "?A <= ?B ==> ?A \<down>> ?t <= ?B \<down>> ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_subset_mono",
     "?A <= ?B ==> ?A \<down>\<le> ?t <= ?B \<down>\<le> ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_subset_mono",
     "?A <= ?B ==> ?A \<down>< ?t <= ?B \<down>< ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_not_in_imp",
     "?x ~: ?I ==> ?x ~: ?I \<down>\<ge> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SetIntervalCut.cut_greater_not_in_imp",
     "?x ~: ?I ==> ?x ~: ?I \<down>> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SetIntervalCut.cut_le_not_in_imp",
     "?x ~: ?I ==> ?x ~: ?I \<down>\<le> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SetIntervalCut.cut_less_not_in_imp",
     "?x ~: ?I ==> ?x ~: ?I \<down>< ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SetIntervalCut.cut_ge_not_empty_imp",
     "?I \<down>\<ge> ?t ~= {} ==> ?I ~= {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("SetIntervalCut.cut_greater_not_empty_imp",
     "?I \<down>> ?t ~= {} ==> ?I ~= {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("SetIntervalCut.cut_le_not_empty_imp",
     "?I \<down>\<le> ?t ~= {} ==> ?I ~= {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("SetIntervalCut.cut_less_not_empty_imp",
     "?I \<down>< ?t ~= {} ==> ?I ~= {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("SetIntervalCut.set_restriction_comp",
     "[| set_restriction ?f; set_restriction ?g |]
      ==> set_restriction (?f o ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.nat_mirror_add",
     "nat_mirror (?n + ?k) ?l ?r = nat_mirror ?n ?l ?r - ?k",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_var 2))),
    ("SetIntervalCut.set_restriction_fun_singleton",
     "set_restriction_fun ?P {?a} = (if ?P ?a then {?a} else {})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 1, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 1))),
    ("SetIntervalCut.cut_ge_greater_conv",
     "?I \<down>\<ge> ?t = {?t} Int ?I Un ?I \<down>> ?t",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_less_conv",
     "?I \<down>\<le> ?t = {?t} Int ?I Un ?I \<down>< ?t",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.atLeast_cut_ge",
     "{?n..} \<down>\<ge> ?t = (if ?t <= ?n then {?n..} else {?t..})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("SetIntervalCut.greaterThan_cut_ge",
     "{?n<..} \<down>\<ge> ?t = (if ?t <= ?n then {?n<..} else {?t..})",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.greaterThan_cut_greater",
     "{?n<..} \<down>> ?t = (if ?t <= ?n then {?n<..} else {?t<..})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("SetIntervalCut.atMost_cut_le",
     "{..?n} \<down>\<le> ?t = (if ?n <= ?t then {..?n} else {..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("SetIntervalCut.lessThan_cut_le",
     "{..<?n} \<down>\<le> ?t = (if ?n <= ?t then {..<?n} else {..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.atMost_cut_less",
     "{..?n} \<down>< ?t = (if ?n < ?t then {..?n} else {..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.lessThan_cut_less",
     "{..<?n} \<down>< ?t = (if ?n <= ?t then {..<?n} else {..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("SetIntervalCut.cut_ge_Diff",
     "(?A - ?B) \<down>\<ge> ?t = ?A \<down>\<ge> ?t - ?B \<down>\<ge> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_Int",
     "(?A Int ?B) \<down>\<ge> ?t =
      ?A \<down>\<ge> ?t Int ?B \<down>\<ge> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_Un",
     "(?A Un ?B) \<down>\<ge> ?t =
      ?A \<down>\<ge> ?t Un ?B \<down>\<ge> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Diff",
     "(?A - ?B) \<down>> ?t = ?A \<down>> ?t - ?B \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Int",
     "(?A Int ?B) \<down>> ?t = ?A \<down>> ?t Int ?B \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_Un",
     "(?A Un ?B) \<down>> ?t = ?A \<down>> ?t Un ?B \<down>> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_Diff",
     "(?A - ?B) \<down>\<le> ?t = ?A \<down>\<le> ?t - ?B \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_Int",
     "(?A Int ?B) \<down>\<le> ?t =
      ?A \<down>\<le> ?t Int ?B \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_Un",
     "(?A Un ?B) \<down>\<le> ?t =
      ?A \<down>\<le> ?t Un ?B \<down>\<le> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Diff",
     "(?A - ?B) \<down>< ?t = ?A \<down>< ?t - ?B \<down>< ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Int",
     "(?A Int ?B) \<down>< ?t = ?A \<down>< ?t Int ?B \<down>< ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Un",
     "(?A Un ?B) \<down>< ?t = ?A \<down>< ?t Un ?B \<down>< ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.set_restriction_Int_conv",
     "set_restriction ?f = (EX B. ALL A. ?f A = A Int B)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("SetIntervalCut.cut_ge_mem_iff",
     "(?x : ?I \<down>\<ge> ?t) = (?x : ?I & ?t <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalCut.cut_greater_mem_iff",
     "(?x : ?I \<down>> ?t) = (?x : ?I & ?t < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalCut.cut_le_mem_iff",
     "(?x : ?I \<down>\<le> ?t) = (?x : ?I & ?x <= ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.cut_less_mem_iff",
     "(?x : ?I \<down>< ?t) = (?x : ?I & ?x < ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_not_empty_iff",
     "(?I \<down>\<ge> ?t ~= {}) = (EX x:?I. ?t <= x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_greater_not_empty_iff",
     "(?I \<down>> ?t ~= {}) = (EX x:?I. ?t < x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_le_not_empty_iff",
     "(?I \<down>\<le> ?t ~= {}) = (EX x:?I. x <= ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.cut_less_not_empty_iff",
     "(?I \<down>< ?t ~= {}) = (EX x:?I. x < ?t)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("SetIntervalCut.set_restriction_in_imp",
     "[| set_restriction ?f; ?x : ?f ?A |] ==> ?x : ?A",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_app (template_var 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("SetIntervalCut.cut_ge_singleton",
     "{?a} \<down>\<ge> ?t = (if ?t <= ?a then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_hole 2))),
    ("SetIntervalCut.cut_greater_singleton",
     "{?a} \<down>> ?t = (if ?t < ?a then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_hole 2))),
    ("SetIntervalCut.cut_le_singleton",
     "{?a} \<down>\<le> ?t = (if ?a <= ?t then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_hole 2))),
    ("SetIntervalCut.cut_less_singleton",
     "{?a} \<down>< ?t = (if ?a < ?t then {?a} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_hole 2))),
    ("SetIntervalCut.set_restriction_Diff",
     "set_restriction ?f ==> ?f (?A - ?B) = ?f ?A - ?f ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("SetIntervalCut.set_restriction_Int",
     "set_restriction ?f ==> ?f (?A Int ?B) = ?f ?A Int ?f ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("SetIntervalCut.set_restriction_Un",
     "set_restriction ?f ==> ?f (?A Un ?B) = ?f ?A Un ?f ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("SetIntervalCut.cut_le_cut_ge_ident",
     "?t2.0 <= ?t1.0 ==>
      ?I \<down>\<le> ?t1.0 Un ?I \<down>\<ge> ?t2.0 = ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 0))),
    ("SetIntervalCut.cut_le_cut_greater_ident",
     "?t2.0 <= ?t1.0 ==> ?I \<down>\<le> ?t1.0 Un ?I \<down>> ?t2.0 = ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 0))),
    ("SetIntervalCut.cut_less_cut_ge_ident",
     "?t2.0 <= ?t1.0 ==> ?I \<down>< ?t1.0 Un ?I \<down>\<ge> ?t2.0 = ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 0))),
    ("SetIntervalCut.nat_mirror_le",
     "?a <= ?b ==> nat_mirror ?b ?l ?r <= nat_mirror ?a ?l ?r",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_ge_Min_greater",
     "?I \<down>\<ge> ?t ~= {} ==> ?t <= iMin (?I \<down>\<ge> ?t)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.cut_greater_Min_greater",
     "?I \<down>> ?t ~= {} ==> ?t < iMin (?I \<down>> ?t)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.nat_cut_le_Max_le",
     "?I \<down>\<le> ?t ~= {} ==> Max (?I \<down>\<le> ?t) <= ?t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SetIntervalCut.nat_cut_less_Max_less",
     "?I \<down>< ?t ~= {} ==> Max (?I \<down>< ?t) < ?t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SetIntervalCut.nat_mirror_less_imp_less",
     "nat_mirror ?b ?l ?r < nat_mirror ?a ?l ?r ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2),
            template_var 1))],
       template_inequation (less_than, template_var 0, template_var 3))),
    ("SetIntervalCut.set_restriction_card_le",
     "[| set_restriction ?f; finite ?A |] ==> card (?f ?A) <= card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0, template_app (template_var 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.set_restriction_mono",
     "[| set_restriction ?f; ?A <= ?B |] ==> ?f ?A <= ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("SetIntervalCut.insert_eq_cut_less_cut_greater",
     "insert ?n ?I = ?I \<down>< ?n Un {?n} Un ?I \<down>> ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_less_Max_eq_Diff",
     "finite ?I ==> ?I \<down>< Max ?I = ?I - {Max ?I}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0))))),
    ("SetIntervalCut.mirror_elem_add",
     "finite ?I ==> mirror_elem (?n + ?k) ?I = mirror_elem ?n ?I - ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("SetIntervalCut.nat_cut_less_le_conv",
     "0 < ?t ==> ?I \<down>< ?t = ?I \<down>\<le> (?t - Suc 0)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_hole 5)))))),
    ("SetIntervalCut.nat_cut_greater_ge_conv",
     "0 < ?t ==> ?I \<down>> (?t - Suc 0) = ?I \<down>\<ge> ?t",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_hole 5))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_less_cut_greater_ident'",
     "?t ~: ?I ==> ?I \<down>< ?t Un ?I \<down>> ?t = ?I",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("SetIntervalCut.cut_le_Min_eq",
     "?I \<down>\<le> ?t ~= {} ==> iMin (?I \<down>\<le> ?t) = iMin ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.cut_less_Min_eq",
     "?I \<down>< ?t ~= {} ==> iMin (?I \<down>< ?t) = iMin ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.set_restrictionI",
     "?f = (%A. {x: A. ?P x}) ==> set_restriction ?f",
     template_implication
      ([template_equation (template_var 1, t_empty)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.cut_ge_Max_empty",
     "[| finite ?I; Max ?I < ?t |] ==> ?I \<down>\<ge> ?t = {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("SetIntervalCut.cut_less_Max_all",
     "[| finite ?I; Max ?I < ?t |] ==> ?I \<down>< ?t = ?I",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalCut.cut_greater_Max_empty",
     "[| finite ?I; Max ?I <= ?t |] ==> ?I \<down>> ?t = {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("SetIntervalCut.cut_le_Max_all",
     "[| finite ?I; Max ?I <= ?t |] ==> ?I \<down>\<le> ?t = ?I",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalCut.in_imp_mirror_elem_in",
     "[| finite ?I; ?n : ?I |] ==> mirror_elem ?n ?I : imirror ?I",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalCut.set_restriction_commute",
     "[| set_restriction ?f; set_restriction ?g |]
      ==> ?f (?g ?I) = ?g (?f ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_var 2, template_app (template_var 1, template_var 0)),
         template_app
          (template_var 1,
           template_app (template_var 2, template_var 0))))),
    ("SetIntervalCut.set_restriction_not_in_imp",
     "[| set_restriction ?f; ?x ~: ?A |] ==> ?x ~: ?f ?A",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_var 2, template_var 0))
               )
           ))),
    ("SetIntervalCut.set_restriction_non_empty_imp",
     "[| set_restriction ?f; ?f ?A ~= {} |] ==> ?A ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("SetIntervalCut.cut_greaterI",
     "[| ?x : ?I; ?t < ?x |] ==> ?x : ?I \<down>> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_lessI",
     "[| ?x : ?I; ?x < ?t |] ==> ?x : ?I \<down>< ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_geI",
     "[| ?x : ?I; ?t <= ?x |] ==> ?x : ?I \<down>\<ge> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_leI",
     "[| ?x : ?I; ?x <= ?t |] ==> ?x : ?I \<down>\<le> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetIntervalCut.cut_ge_greater_conv_if",
     "?I \<down>\<ge> ?t =
      (if ?t : ?I then insert ?t (?I \<down>> ?t) else ?I \<down>> ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_le_less_conv_if",
     "?I \<down>\<le> ?t =
      (if ?t : ?I then insert ?t (?I \<down>< ?t) else ?I \<down>< ?t)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.atLeastAtMost_cut_ge",
     "{?m..?n} \<down>\<ge> ?t = (if ?t <= ?m then {?m..?n} else {?t..?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.atLeastLessThan_cut_ge",
     "{?m..<?n} \<down>\<ge> ?t =
      (if ?t <= ?m then {?m..<?n} else {?t..<?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.greaterThanAtMost_cut_ge",
     "{?m<..?n} \<down>\<ge> ?t =
      (if ?t <= ?m then {?m<..?n} else {?t..?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.greaterThanLessThan_cut_ge",
     "{?m<..<?n} \<down>\<ge> ?t =
      (if ?t <= ?m then {?m<..<?n} else {?t..<?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.atLeastAtMost_cut_greater",
     "{?m..?n} \<down>> ?t = (if ?t < ?m then {?m..?n} else {?t<..?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.atLeastLessThan_cut_greater",
     "{?m..<?n} \<down>> ?t = (if ?t < ?m then {?m..<?n} else {?t<..<?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.greaterThanAtMost_cut_greater",
     "{?m<..?n} \<down>> ?t = (if ?t <= ?m then {?m<..?n} else {?t<..?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.greaterThanLessThan_cut_greater",
     "{?m<..<?n} \<down>> ?t =
      (if ?t <= ?m then {?m<..<?n} else {?t<..<?n})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.atLeastAtMost_cut_le",
     "{?m..?n} \<down>\<le> ?t = (if ?n <= ?t then {?m..?n} else {?m..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.atLeastLessThan_cut_le",
     "{?m..<?n} \<down>\<le> ?t =
      (if ?n <= ?t then {?m..<?n} else {?m..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.greaterThanAtMost_cut_le",
     "{?m<..?n} \<down>\<le> ?t =
      (if ?n <= ?t then {?m<..?n} else {?m<..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.greaterThanLessThan_cut_le",
     "{?m<..<?n} \<down>\<le> ?t =
      (if ?n <= ?t then {?m<..<?n} else {?m<..?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.atLeastAtMost_cut_less",
     "{?m..?n} \<down>< ?t = (if ?n < ?t then {?m..?n} else {?m..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.atLeastLessThan_cut_less",
     "{?m..<?n} \<down>< ?t = (if ?n <= ?t then {?m..<?n} else {?m..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.greaterThanAtMost_cut_less",
     "{?m<..?n} \<down>< ?t = (if ?n < ?t then {?m<..?n} else {?m<..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.greaterThanLessThan_cut_less",
     "{?m<..<?n} \<down>< ?t =
      (if ?n <= ?t then {?m<..<?n} else {?m<..<?t})",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.imirror_bounds_Un",
     "imirror_bounds (?A Un ?B) ?l ?r =
      imirror_bounds ?A ?l ?r Un imirror_bounds ?B ?l ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("SetIntervalCut.nat_mirror_nat_mirror_ident",
     "?n <= ?l + ?r ==> nat_mirror (nat_mirror ?n ?l ?r) ?l ?r = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("SetIntervalCut.imirror_iff",
     "(?n : imirror ?I) = (EX x:?I. ?n = iMin ?I + Max ?I - x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 0), t_empty))),
    ("SetIntervalCut.imirror_bounds_iff",
     "(?n : imirror_bounds ?I ?l ?r) = (EX x:?I. ?n = ?l + ?r - x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), t_empty))),
    ("SetIntervalCut.set_restrictionD_spec",
     "set_restriction ?f ==> EX P. ?f ?A = {x: ?A. P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SetIntervalCut.mirror_elem_Max",
     "[| finite ?I; ?I ~= {} |] ==> mirror_elem (Max ?I) ?I = iMin ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.mirror_elem_Min",
     "[| finite ?I; ?I ~= {} |] ==> mirror_elem (iMin ?I) ?I = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalCut.insert_Int_conv_if",
     "?A Int insert ?x ?B =
      (if ?x : ?A then insert ?x (?A Int ?B) else ?A Int ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("SetIntervalCut.cut_greater_ge_conv_if",
     "?I \<down>> ?t =
      (if ?t : ?I then ?I \<down>\<ge> ?t - {?t} else ?I \<down>\<ge> ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_le_conv_if",
     "?I \<down>< ?t =
      (if ?t : ?I then ?I \<down>\<le> ?t - {?t} else ?I \<down>\<le> ?t)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_less_Min_not_empty",
     "[| ?I ~= {}; iMin ?I < ?t |] ==> ?I \<down>< ?t ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 3)
           ))),
    ("SetIntervalCut.cut_le_Min_not_empty",
     "[| ?I ~= {}; iMin ?I <= ?t |] ==> ?I \<down>\<le> ?t ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 3)
           ))),
    ("SetIntervalCut.imirror_cut_ge",
     "finite ?I ==>
      imirror ?I \<down>\<ge> mirror_elem ?t ?I =
      imirror_bounds (?I \<down>\<le> ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("SetIntervalCut.imirror_cut_less",
     "finite ?I ==>
      imirror ?I \<down>< mirror_elem ?t ?I =
      imirror_bounds (?I \<down>> ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("SetIntervalCut.set_restrictionD",
     "set_restriction ?f ==> EX P. ALL A. ?f A = {x: A. P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SetIntervalCut.cut_ge_Max_eq",
     "[| finite ?I; ?I \<down>\<ge> ?t ~= {} |]
      ==> Max (?I \<down>\<ge> ?t) = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.cut_greater_Max_eq",
     "[| finite ?I; ?I \<down>> ?t ~= {} |]
      ==> Max (?I \<down>> ?t) = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.imirror_iMin_Max",
     "[| finite ?I; ?n : imirror ?I |] ==> iMin ?I <= ?n & ?n <= Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("SetIntervalCut.nat_mirror_less_conv",
     "?a < ?l + ?r ==>
      (nat_mirror ?b ?l ?r < nat_mirror ?a ?l ?r) = (?a < ?b)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("SetIntervalCut.nat_mirror_le_conv",
     "?a <= ?l + ?r ==>
      (nat_mirror ?b ?l ?r <= nat_mirror ?a ?l ?r) = (?a <= ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("SetIntervalCut.mirror_elem_mirror_elem_ident",
     "[| finite ?I; ?n <= iMin ?I + Max ?I |]
      ==> mirror_elem (mirror_elem ?n ?I) ?I = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("SetIntervalCut.cut_le_Max_le",
     "[| finite (?I \<down>\<le> ?t); ?I \<down>\<le> ?t ~= {} |]
      ==> Max (?I \<down>\<le> ?t) <= ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SetIntervalCut.cut_less_Max_less",
     "[| finite (?I \<down>< ?t); ?I \<down>< ?t ~= {} |]
      ==> Max (?I \<down>< ?t) < ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0))),
    ("SetIntervalCut.Collect_minI_ex_cut",
     "EX k:?I. ?P k ==> EX x:?I. ?P x & (ALL y:?I \<down>< x. ~ ?P y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("SetIntervalCut.imirror_bounds_imirror_bounds_ident",
     "[| finite ?I; Max ?I <= ?l + ?r |]
      ==> imirror_bounds (imirror_bounds ?I ?l ?r) ?l ?r = ?I",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("SetIntervalCut.nat_mirror_less",
     "[| ?a < ?b; ?a < ?l + ?r |]
      ==> nat_mirror ?b ?l ?r < nat_mirror ?a ?l ?r",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("SetIntervalCut.cut_geE",
     "[| ?x : ?I \<down>\<ge> ?t; [| ?x : ?I; ?t <= ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_equals, template_var 1, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("SetIntervalCut.cut_greaterE",
     "[| ?x : ?I \<down>> ?t; [| ?x : ?I; ?t < ?x |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_than, template_var 1, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("SetIntervalCut.cut_leE",
     "[| ?x : ?I \<down>\<le> ?t; [| ?x : ?I; ?x <= ?t |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_equals, template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("SetIntervalCut.cut_lessE",
     "[| ?x : ?I \<down>< ?t; [| ?x : ?I; ?x < ?t |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_inequation
              (less_than, template_var 3, template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("SetIntervalCut.cut_greater_Max_not_empty",
     "[| ?I ~= {}; finite ?I; ?t < Max ?I |] ==> ?I \<down>> ?t ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 4)
           ))),
    ("SetIntervalCut.cut_ge_Max_not_empty",
     "[| ?I ~= {}; finite ?I; ?t <= Max ?I |] ==> ?I \<down>\<ge> ?t ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 4)
           ))),
    ("SetIntervalCut.imirror_mem_conv",
     "[| finite ?I; ?n <= iMin ?I + Max ?I |]
      ==> (mirror_elem ?n ?I : imirror ?I) = (?n : ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 4, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("SetIntervalCut.cut_less_cut_greater_ident",
     "[| ?t2.0 <= ?t1.0; ?I Int {?t1.0..?t2.0} = {} |]
      ==> ?I \<down>< ?t1.0 Un ?I \<down>> ?t2.0 = ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 0))),
    ("SetIntervalCut.Collect_minI_cut",
     "[| ?k : ?I; ?P ?k |]
      ==> EX x:?I. ?P x & (ALL y:?I \<down>< x. ~ ?P y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("SetIntervalCut.imirror_cut_greater'",
     "[| finite ?I; ?t : ?I |]
      ==> imirror ?I \<down>> mirror_elem ?t ?I =
          imirror_bounds (?I \<down>< ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("SetIntervalCut.imirror_cut_le'",
     "[| finite ?I; ?t : ?I |]
      ==> imirror ?I \<down>\<le> mirror_elem ?t ?I =
          imirror_bounds (?I \<down>\<ge> ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("SetIntervalCut.nat_mirror_diff",
     "[| ?k <= ?n; ?n <= ?l + ?r |]
      ==> nat_mirror (?n - ?k) ?l ?r = nat_mirror ?n ?l ?r + ?k",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("SetIntervalCut.mirror_elem_diff",
     "[| finite ?I; ?k <= ?n; ?n : ?I |]
      ==> mirror_elem (?n - ?k) ?I = mirror_elem ?n ?I + ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("SetIntervalCut.mirror_elem_eq_conv'",
     "[| finite ?I; ?a : ?I; ?b : ?I |]
      ==> (mirror_elem ?a ?I = mirror_elem ?b ?I) = (?a = ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_equation (template_var 1, template_var 0)))),
    ("SetIntervalCut.mirror_elem_less_conv",
     "[| finite ?I; ?a : ?I; ?b : ?I |]
      ==> (mirror_elem ?b ?I < mirror_elem ?a ?I) = (?a < ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.mirror_elem_le_conv",
     "[| finite ?I; ?a : ?I; ?b : ?I |]
      ==> (mirror_elem ?b ?I <= mirror_elem ?a ?I) = (?a <= ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.i_cut_absorb_disj",
     "?cut_op = (\<down><) |
      ?cut_op = (\<down>\<le>) |
      ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>) ==>
      ?cut_op (?cut_op ?I ?t) ?t = ?cut_op ?I ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 3)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_hole 2)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 2,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)),
           template_var 0),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.Collect_minI_ex2_cut",
     "{k: ?I. ?P k} ~= {} ==>
      EX x:?I. ?P x & (ALL y:?I \<down>< x. ~ ?P y)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, t_empty), template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), t_empty)
           ))),
    ("SetIntervalCut.nat_mirror_eq_conv",
     "[| ?a <= ?l + ?r; ?b <= ?l + ?r |]
      ==> (nat_mirror ?a ?l ?r = nat_mirror ?b ?l ?r) = (?a = ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_equation (template_var 3, template_var 0)))),
    ("SetIntervalCut.i_cut_set_restriction_disj",
     "[| ?cut_op = (\<down><) |
         ?cut_op = (\<down>\<le>) |
         ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>);
         ?f = (%I. ?cut_op I ?t) |]
      ==> set_restriction ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 2))))
            ),
        template_equation (template_var 1, t_empty)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("SetIntervalCut.cut_ge_image",
     "[| SetInterval2.strict_mono_on ?f ?A; ?I <= ?A; ?n : ?A |]
      ==> (?f ` ?I) \<down>\<ge> ?f ?n = ?f ` ?I \<down>\<ge> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.cut_greater_image",
     "[| SetInterval2.strict_mono_on ?f ?A; ?I <= ?A; ?n : ?A |]
      ==> (?f ` ?I) \<down>> ?f ?n = ?f ` ?I \<down>> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.cut_le_image",
     "[| SetInterval2.strict_mono_on ?f ?A; ?I <= ?A; ?n : ?A |]
      ==> (?f ` ?I) \<down>\<le> ?f ?n = ?f ` ?I \<down>\<le> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.cut_less_image",
     "[| SetInterval2.strict_mono_on ?f ?A; ?I <= ?A; ?n : ?A |]
      ==> (?f ` ?I) \<down>< ?f ?n = ?f ` ?I \<down>< ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.imirror_cut_greater",
     "[| finite ?I; ?t <= iMin ?I + Max ?I |]
      ==> imirror ?I \<down>> mirror_elem ?t ?I =
          imirror_bounds (?I \<down>< ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 6, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 6, template_var 1))))),
    ("SetIntervalCut.imirror_cut_le",
     "[| finite ?I; ?t <= iMin ?I + Max ?I |]
      ==> imirror ?I \<down>\<le> mirror_elem ?t ?I =
          imirror_bounds (?I \<down>\<ge> ?t) (iMin ?I) (Max ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 6, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 6, template_var 1))))),
    ("SetIntervalCut.set_restriction_card",
     "[| set_restriction ?f; finite ?A |]
      ==> card (?f ?A) = card ?A - card {a: ?A. ?f {a} = {}}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_hole 7, template_app (template_hole 5, t_empty)))))),
    ("SetIntervalCut.mirror_elem_eq_conv",
     "[| ?a <= iMin ?I + Max ?I; ?b <= iMin ?I + Max ?I |]
      ==> (mirror_elem ?a ?I = mirror_elem ?b ?I) = (?a = ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 3, template_var 1))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 3, template_var 1)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_equation (template_var 2, template_var 0)))),
    ("SetIntervalCut.i_cut_subset_mono_disj",
     "[| ?cut_op = (\<down><) |
         ?cut_op = (\<down>\<le>) |
         ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>);
         ?A <= ?B |]
      ==> ?cut_op ?A ?t <= ?cut_op ?B ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_hole 3)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_hole 2)),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_hole 1))))
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_var 3, template_var 2), template_var 0),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("SetIntervalCut.i_cut_Diff_disj",
     "?cut_op = (\<down><) |
      ?cut_op = (\<down>\<le>) |
      ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>) ==>
      ?cut_op (?A - ?B) ?t = ?cut_op ?A ?t - ?cut_op ?B ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.i_cut_Int_disj",
     "?cut_op = (\<down><) |
      ?cut_op = (\<down>\<le>) |
      ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>) ==>
      ?cut_op (?A Int ?B) ?t = ?cut_op ?A ?t Int ?cut_op ?B ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.i_cut_Un_disj",
     "?cut_op = (\<down><) |
      ?cut_op = (\<down>\<le>) |
      ?cut_op = (\<down>>) | ?cut_op = (\<down>\<ge>) ==>
      ?cut_op (?A Un ?B) ?t = ?cut_op ?A ?t Un ?cut_op ?B ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_hole 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("SetIntervalCut.imirror_bounds_Max",
     "[| finite ?I; ?I ~= {}; Max ?I <= ?l + ?r |]
      ==> Max (imirror_bounds ?I ?l ?r) = ?l + ?r - iMin ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("SetIntervalCut.imirror_bounds_iMin",
     "[| finite ?I; ?I ~= {}; iMin ?I <= ?l + ?r |]
      ==> iMin (imirror_bounds ?I ?l ?r) = ?l + ?r - Max ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("SetIntervalCut.imirror_bounds_Int",
     "[| ?A <= {..?l + ?r}; ?B <= {..?l + ?r} |]
      ==> imirror_bounds (?A Int ?B) ?l ?r =
          imirror_bounds ?A ?l ?r Int imirror_bounds ?B ?l ?r",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1))))),
    ("SetIntervalCut.imirror_bounds_elem_conv",
     "[| finite ?I; ?n <= ?l + ?r; Max ?I <= ?l + ?r |]
      ==> (nat_mirror ?n ?l ?r : imirror_bounds ?I ?l ?r) = (?n : ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 3)))),
    ("SetIntervalCut.i_cut_commute_disj",
     "[| ?cut_op1.0 = (\<down><) |
         ?cut_op1.0 = (\<down>\<le>) |
         ?cut_op1.0 = (\<down>>) | ?cut_op1.0 = (\<down>\<ge>);
         ?cut_op2.0 = (\<down><) |
         ?cut_op2.0 = (\<down>\<le>) |
         ?cut_op2.0 = (\<down>>) | ?cut_op2.0 = (\<down>\<ge>) |]
      ==> ?cut_op2.0 (?cut_op1.0 ?I ?t1.0) ?t2.0 =
          ?cut_op1.0 (?cut_op2.0 ?I ?t2.0) ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_hole 3)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_hole 2)),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_hole 1))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_hole 3)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_hole 2)),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_hole 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_var 4, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.SetIntervalCutMoreTemplates"
### 0.409s elapsed time, 0.534s cpu time, 0.050s GC time
val it = (): unit
