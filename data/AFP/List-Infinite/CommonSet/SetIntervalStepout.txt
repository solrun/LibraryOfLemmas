Loading theory "Draft.Util_Set" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_MinMax" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
Loading theory "Draft.Util_Nat" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_Div")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Util_MinMax"
### 0.048s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Util_Set"
### 0.097s elapsed time, 0.413s cpu time, 0.034s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.608s cpu time, 0.034s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Util_Nat"
### 0.173s elapsed time, 0.716s cpu time, 0.034s GC time
Loading theory "Draft.Util_Div" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.277s elapsed time, 1.083s cpu time, 0.114s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.290s cpu time, 0.184s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Util_Div"
### 0.383s elapsed time, 1.492s cpu time, 0.263s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.953s cpu time, 0.183s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.439s elapsed time, 1.720s cpu time, 0.263s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.159s cpu time, 0.795s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.BigO"
### 1.029s elapsed time, 3.899s cpu time, 0.790s GC time
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.306s elapsed time, 4.467s cpu time, 0.842s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.364s elapsed time, 0.752s cpu time, 0.052s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.988s elapsed time, 5.941s cpu time, 0.990s GC time
Loading theory "Draft.Templates" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetIntervalStepMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.523s elapsed time, 1.077s cpu time, 0.071s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.556s elapsed time, 2.547s cpu time, 0.195s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.394s elapsed time, 0.442s cpu time, 0.031s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2" via "Draft.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.465s elapsed time, 0.511s cpu time, 0.062s GC time
Loading theory "Draft.Util_NatInf" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut" via "Draft.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "Draft.Util_NatInf"
### 0.114s elapsed time, 0.147s cpu time, 0.045s GC time
Loading theory "Draft.SetInterval2" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep" via "Draft.SetIntervalCut")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "Draft.SetInterval2"
### 0.902s elapsed time, 0.999s cpu time, 0.102s GC time
Loading theory "Draft.SetIntervalCut" (required by "Draft.SetIntervalStepMoreTemplates" via "Draft.SetIntervalStep")
### theory "Draft.SetIntervalCut"
### 0.782s elapsed time, 1.409s cpu time, 0.876s GC time
Loading theory "Draft.SetIntervalStep" (required by "Draft.SetIntervalStepMoreTemplates")
consts
  inext_nth :: "nat set => nat => nat"
consts
  iprev_nth :: "nat set => nat => nat"
### theory "Draft.SetIntervalStep"
### 0.537s elapsed time, 0.587s cpu time, 0.068s GC time
Loading theory "Draft.SetIntervalStepMoreTemplates"
val templateLemmas =
   [("SetIntervalStep.inext_empty", "inext ?n {} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIntervalStep.inext_nth_UNIV", "UNIV \<rightarrow> ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("SetIntervalStep.iprev_empty", "iprev ?n {} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIntervalStep.nat_CommuteWithIntervalCut2_4_eq",
     "CommuteWithIntervalCut4 ?fun = CommuteWithIntervalCut2 ?fun",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.inext_mono", "?n <= inext ?n ?I",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalStep.iprev_mono", "iprev ?n ?I <= ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 1)),
    ("SetIntervalStep.cut_ge_CommuteWithIntervalCut4",
     "CommuteWithIntervalCut4 (%I. I \<down>\<ge> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalStep.cut_greater_CommuteWithIntervalCut4",
     "CommuteWithIntervalCut4 (%I. I \<down>> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalStep.cut_le_CommuteWithIntervalCut4",
     "CommuteWithIntervalCut4 (%I. I \<down>\<le> ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalStep.cut_less_CommuteWithIntervalCut4",
     "CommuteWithIntervalCut4 (%I. I \<down>< ?t)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("SetIntervalStep.inext_UNIV", "inext ?n UNIV = Suc ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.CommuteWithIntervalCut4_imp_2",
     "CommuteWithIntervalCut4 ?fun ==> CommuteWithIntervalCut2 ?fun",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.iprev_iMin", "iprev (iMin ?I) ?I = iMin ?I",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("SetIntervalStep.inext_singleton", "inext ?n {?a} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("SetIntervalStep.inext_nth_singleton", "{?a} \<rightarrow> ?n = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("SetIntervalStep.iprev_singleton", "iprev ?n {?a} = ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("SetIntervalStep.iprev_nth_singleton", "{?a} \<leftarrow> ?n = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("SetIntervalStep.inext_nth_surj_on", "surj_on (inext_nth ?I) UNIV ?I",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)
         )),
    ("SetIntervalStep.iprev_UNIV", "iprev ?n UNIV = ?n - Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("SetIntervalStep.inext_nth_atLeast",
     "{?n..} \<rightarrow> ?a = ?n + ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetIntervalStep.inext_nth_Suc_mono",
     "?I \<rightarrow> ?n <= ?I \<rightarrow> Suc ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.iprev_nth_Suc_mono",
     "?I \<leftarrow> Suc ?n <= ?I \<leftarrow> ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SetIntervalStep.inext_in_iff", "(inext ?n ?I : ?I) = (?n : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SetIntervalStep.iprev_in_iff", "(iprev ?n ?I : ?I) = (?n : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SetIntervalStep.inext_closed", "?n : ?I ==> inext ?n ?I : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("SetIntervalStep.iprev_closed", "?n : ?I ==> iprev ?n ?I : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("SetIntervalStep.inext_in_imp_in", "inext ?n ?I : ?I ==> ?n : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("SetIntervalStep.iprev_in_imp_in", "iprev ?n ?I : ?I ==> ?n : ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("SetIntervalStep.inext_Max",
     "finite ?I ==> inext (Max ?I) ?I = Max ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.iprev_nth_surj_on",
     "finite ?I ==> surj_on (iprev_nth ?I) UNIV ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_var 0)
           ))),
    ("SetIntervalStep.inext_nth_lessThan",
     "?a < ?n ==> {..<?n} \<rightarrow> ?a = ?a",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_var 1))),
    ("SetIntervalStep.inext_nth_atMost",
     "?a <= ?n ==> {..?n} \<rightarrow> ?a = ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_var 1))),
    ("SetIntervalStep.inext_nth_closed",
     "?I ~= {} ==> ?I \<rightarrow> ?n : ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("SetIntervalStep.not_in_inext_fix", "?n ~: ?I ==> inext ?n ?I = ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.not_in_iprev_fix", "?n ~: ?I ==> iprev ?n ?I = ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.iprev_le_iMin", "?n <= iMin ?I ==> iprev ?n ?I = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_neq_iMin_infin",
     "infinite ?I ==> inext ?n ?I ~= iMin ?I",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.iprev_inext_infin",
     "infinite ?I ==> iprev (inext ?n ?I) ?I = ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("SetIntervalStep.inext_atMost", "?t < ?n ==> inext ?t {..?n} = Suc ?t",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.inext_nth_mono",
     "?a <= ?b ==> ?I \<rightarrow> ?a <= ?I \<rightarrow> ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.iprev_nth_mono",
     "?a <= ?b ==> ?I \<leftarrow> ?b <= ?I \<leftarrow> ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalStep.inext_atLeast",
     "?n <= ?t ==> inext ?t {?n..} = Suc ?t",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.iprev_atLeast'",
     "?n <= ?t ==> iprev (Suc ?t) {?n..} = ?t",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("SetIntervalStep.in_imp_ex_inext_nth",
     "?x : ?I ==> EX n. ?x = ?I \<rightarrow> n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SetIntervalStep.iprev_neq_imp_iMin",
     "iprev ?n ?I ~= ?n ==> iMin ?I < ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_min_step2",
     "~ (EX k:?I. ?n < k & k < inext ?n ?I)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_var 1), t_empty)
             )
         )),
    ("SetIntervalStep.iprev_min_step2",
     "~ (EX x:?I. iprev ?n ?I < x & x < ?n)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_var 1), t_empty)
             )
         )),
    ("SetIntervalStep.iprev_nth_atMost",
     "?a <= ?n ==> {..?n} \<leftarrow> ?a = ?n - ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.inext_lessThan",
     "Suc ?t < ?n ==> inext ?t {..<?n} = Suc ?t",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 3, template_var 1)))),
    ("SetIntervalStep.inext_nth_card_Max_aux",
     "card ?I = Suc ?n ==> ?I \<rightarrow> ?n = Max ?I",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_nth_card_greater_iMin",
     "Suc ?n < card ?I ==> iMin ?I < ?I \<leftarrow> ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.inext_nth_card_less_Max",
     "Suc ?n < card ?I ==> ?I \<rightarrow> ?n < Max ?I",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.inext_neq_imp_less",
     "?n ~= inext ?n ?I ==> ?n < inext ?n ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_neq_imp_greater",
     "?n ~= iprev ?n ?I ==> iprev ?n ?I < ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.less_card_cut_less_imp_inext_nth_less",
     "?n < card (?I \<down>< ?t) ==> ?I \<rightarrow> ?n < ?t",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("SetIntervalStep.inext_all_le_fix",
     "ALL x:?I. x <= ?n ==> inext ?n ?I = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("SetIntervalStep.iprev_all_ge_fix",
     "ALL x:?I. ?n <= x ==> iprev ?n ?I = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("SetIntervalStep.iprev_greater_conv",
     "(?n : ?I & iMin ?I < ?n) = (iprev ?n ?I < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("SetIntervalStep.iprev_nth_lessThan",
     "?a < ?n ==> {..<?n} \<leftarrow> ?a = ?n - Suc ?a",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("SetIntervalStep.iprev_atLeast",
     "?n < ?t ==> iprev ?t {?n..} = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("SetIntervalStep.iprev_cut_less_conv",
     "?n < ?t ==> iprev ?n (?I \<down>< ?t) = iprev ?n ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SetIntervalStep.iprev_lessThan",
     "?t < ?n ==> iprev ?t {..<?n} = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("SetIntervalStep.inext_cut_greater_conv",
     "?t < ?n ==> inext ?n (?I \<down>> ?t) = inext ?n ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_cut_le_conv",
     "?n <= ?t ==> iprev ?n (?I \<down>\<le> ?t) = iprev ?n ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SetIntervalStep.iprev_atMost",
     "?t <= ?n ==> iprev ?t {..?n} = ?t - Suc 0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("SetIntervalStep.inext_cut_ge_conv",
     "?t <= ?n ==> inext ?n (?I \<down>\<ge> ?t) = inext ?n ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.subset_inext_in_iff",
     "?A <= ?B ==> (inext ?n ?A : ?B) = (?n : ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.subset_iprev_in_iff",
     "?A <= ?B ==> (iprev ?n ?A : ?B) = (?n : ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.inext_iprev",
     "iMin ?I ~= ?n ==> inext (iprev ?n ?I) ?I = ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("SetIntervalStep.inext_cut_le_fix",
     "?t < inext ?n ?I ==> inext ?n (?I \<down>\<le> ?t) = ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("SetIntervalStep.iprev_cut_ge_fix",
     "iprev ?n ?I < ?t ==> iprev ?n (?I \<down>\<ge> ?t) = ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("SetIntervalStep.inext_cut_less_fix",
     "?t <= inext ?n ?I ==> inext ?n (?I \<down>< ?t) = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("SetIntervalStep.iprev_cut_greater_fix",
     "iprev ?n ?I <= ?t ==> iprev ?n (?I \<down>> ?t) = ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("SetIntervalStep.iprev_fix_iff",
     "(?n ~: ?I | iMin ?I = ?n) = (iprev ?n ?I = ?n)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_var 1))
           ),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_image2",
     "strict_mono ?f ==> inext (?f ?n) (?f ` ?I) = ?f (inext ?n ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.iprev_image2",
     "strict_mono ?f ==> iprev (?f ?n) (?f ` ?I) = ?f (iprev ?n ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.inext_nth_gr_Min_conv_infinite",
     "infinite ?I ==> (iMin ?I < ?I \<rightarrow> ?n) = (0 < ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("SetIntervalStep.inext_neq_iMin",
     "EX x:?I. ?n < x ==> inext ?n ?I ~= iMin ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.inext_nth_card_less_Max'",
     "?n < card ?I - Suc 0 ==> ?I \<rightarrow> ?n < Max ?I",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0)),
            template_app (template_hole 3, template_hole 2)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.iprev_nth_closed",
     "[| finite ?I; ?I ~= {} |] ==> ?I \<leftarrow> ?n : ?I",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("SetIntervalStep.inext_ge_Max",
     "[| finite ?I; Max ?I <= ?n |] ==> inext ?n ?I = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("SetIntervalStep.subset_inext_closed",
     "[| ?n : ?B; ?A <= ?B |] ==> inext ?n ?A : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("SetIntervalStep.subset_iprev_closed",
     "[| ?n : ?B; ?A <= ?B |] ==> iprev ?n ?A : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("SetIntervalStep.inext_mono2_infin",
     "[| ?n : ?I; infinite ?I |] ==> ?n < inext ?n ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.subset_inext_in_imp_in",
     "[| inext ?n ?A : ?B; ?A <= ?B |] ==> ?n : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("SetIntervalStep.subset_iprev_in_imp_in",
     "[| iprev ?n ?A : ?B; ?A <= ?B |] ==> ?n : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("SetIntervalStep.inext_nth_surj_aux1",
     "{x: ?I. \<nexists>n. ?I \<rightarrow> n = x} = {}",
     template_equation
      (template_app (template_hole 7, t_empty), template_hole 0)),
    ("SetIntervalStep.inext_nth_mono2_infin",
     "infinite ?I ==>
      (?I \<rightarrow> ?a < ?I \<rightarrow> ?b) = (?a < ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_cut_greater_conv",
     "?t < iprev ?n ?I ==> iprev ?n (?I \<down>> ?t) = iprev ?n ?I",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_cut_less_conv",
     "inext ?n ?I < ?t ==> inext ?n (?I \<down>< ?t) = inext ?n ?I",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("SetIntervalStep.inext_nth_cut_less_conv",
     "?I \<rightarrow> ?n < ?t ==>
      ?I \<down>< ?t \<rightarrow> ?n = ?I \<rightarrow> ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("SetIntervalStep.iprev_cut_ge_conv",
     "?t <= iprev ?n ?I ==> iprev ?n (?I \<down>\<ge> ?t) = iprev ?n ?I",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_cut_le_conv",
     "inext ?n ?I <= ?t ==> inext ?n (?I \<down>\<le> ?t) = inext ?n ?I",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("SetIntervalStep.inext_neq_imp_Max",
     "?n ~= inext ?n ?I ==> ?n < Max ?I | infinite ?I",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 6,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIntervalStep.in_imp_ex_iprev_nth",
     "[| finite ?I; ?x : ?I |] ==> EX n. ?x = ?I \<leftarrow> n",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SetIntervalStep.inext_min_step",
     "[| ?n < ?k; ?k < inext ?n ?I |] ==> ?k ~: ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("SetIntervalStep.iprev_min_step",
     "[| iprev ?n ?I < ?k; ?k < ?n |] ==> ?k ~: ?I",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("SetIntervalStep.inext_nth_cut_less_eq",
     "?n < card (?I \<down>< ?t) ==>
      ?I \<down>< ?t \<rightarrow> ?n = ?I \<rightarrow> ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("SetIntervalStep.iprev_mono2_if_neq_iMin",
     "[| ?n : ?I; iMin ?I ~= ?n |] ==> iprev ?n ?I < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_eq_infin",
     "[| inext ?a ?I = inext ?b ?I; infinite ?I |] ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.inext_less_conv",
     "(?n : ?I & (?n < Max ?I | infinite ?I)) = (?n < inext ?n ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_fix_iff",
     "(?n ~: ?I | finite ?I & Max ?I = ?n) = (inext ?n ?I = ?n)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_var 1)))
           ),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.remove_Min_inext_nth_Suc_conv_infinite",
     "infinite ?I ==>
      (?I - {iMin ?I}) \<rightarrow> ?n = ?I \<rightarrow> Suc ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1))),
           template_var 0),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("SetIntervalStep.cut_less_inext_nth_card_eq1",
     "?n < card ?I | infinite ?I ==>
      card (?I \<down>< (?I \<rightarrow> ?n)) = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 0))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_var 1))),
    ("SetIntervalStep.inext_nth_Suc_mono2",
     "EX x:?I. ?I \<rightarrow> ?n < x ==>
      ?I \<rightarrow> ?n < ?I \<rightarrow> Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("SetIntervalStep.iprev_inext",
     "?n ~= Max ?I | infinite ?I ==> iprev (inext ?n ?I) ?I = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("SetIntervalStep.iprev_inext_fin",
     "[| finite ?I; ?n ~= Max ?I |] ==> iprev (inext ?n ?I) ?I = ?n",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("SetIntervalStep.inext_atLeastAtMost",
     "[| ?m <= ?t; ?t < ?n |] ==> inext ?t {?m..?n} = Suc ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_atLeastAtMost'",
     "[| ?m <= ?t; ?t < ?n |] ==> iprev (Suc ?t) {?m..?n} = ?t",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SetIntervalStep.iprev_mono2",
     "[| ?n : ?I; EX x:?I. x < ?n |] ==> iprev ?n ?I < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("SetIntervalStep.inext_mono2",
     "[| ?n : ?I; EX x:?I. ?n < x |] ==> ?n < inext ?n ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_cut_ge_inext_nth",
     "?I ~= {} ==>
      ?I \<down>\<ge> (?I \<rightarrow> ?a) \<rightarrow> ?b =
      ?I \<rightarrow> (?a + ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.inext_iprev_nth_Suc",
     "iMin ?I ~= ?I \<leftarrow> ?n ==>
      inext (?I \<leftarrow> Suc ?n) ?I = ?I \<leftarrow> ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.cut_le_inext_nth_card_eq1",
     "?n < card ?I | infinite ?I ==>
      card (?I \<down>\<le> (?I \<rightarrow> ?n)) = Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app (template_hole 6, template_var 0))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_neq_Max",
     "[| finite ?I; EX x:?I. x < ?n |] ==> iprev ?n ?I ~= Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.cut_le_inext_nth_card_if",
     "card (?I \<down>\<le> (?I \<rightarrow> ?n)) =
      (if ?n < card ?I | infinite ?I then Suc ?n else card ?I)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 8, template_var 1))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)))),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 8, template_var 1)))),
    ("SetIntervalStep.iprev_nth_surj_aux1",
     "finite ?I ==> {x: ?I. \<nexists>n. ?I \<leftarrow> n = x} = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, t_empty), template_hole 0))),
    ("SetIntervalStep.remove_Min_inext_nth_Suc_conv_finite",
     "Suc 0 < card ?I ==>
      (?I - {iMin ?I}) \<rightarrow> ?n = ?I \<rightarrow> Suc ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0))),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 8, template_var 0))))),
    ("SetIntervalStep.inext_nth_less_less_card_conv",
     "?I \<down>\<ge> ?t ~= {} ==>
      (?I \<rightarrow> ?n < ?t) = (?n < card (?I \<down>< ?t))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("SetIntervalStep.inext_nth_imirror_iprev_nth_conv",
     "[| finite ?I; ?I ~= {} |]
      ==> imirror ?I \<rightarrow> ?n =
          mirror_elem (?I \<leftarrow> ?n) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)))),
    ("SetIntervalStep.iprev_nth_imirror_inext_nth_conv",
     "[| finite ?I; ?I ~= {} |]
      ==> imirror ?I \<leftarrow> ?n =
          mirror_elem (?I \<rightarrow> ?n) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)))),
    ("SetIntervalStep.iprev_nth_imirror_inext_nth_conv2",
     "[| finite ?I; ?I ~= {} |]
      ==> mirror_elem (imirror ?I \<rightarrow> ?n) ?I =
          ?I \<leftarrow> ?n",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_imirror_iprev_nth_conv2",
     "[| finite ?I; ?I ~= {} |]
      ==> mirror_elem (imirror ?I \<leftarrow> ?n) ?I =
          ?I \<rightarrow> ?n",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_card_Max_aux'",
     "[| finite ?I; ?I ~= {} |]
      ==> ?I \<rightarrow> (card ?I - Suc 0) = Max ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("SetIntervalStep.cut_le_inext_nth_card_eq2",
     "[| finite ?I; card ?I <= Suc ?n |]
      ==> card (?I \<down>\<le> (?I \<rightarrow> ?n)) = card ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 4, template_var 1)))),
    ("SetIntervalStep.iprev_atLeastAtMost",
     "[| ?m < ?t; ?t <= ?n |] ==> iprev ?t {?m..?n} = ?t - Suc 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0))))),
    ("SetIntervalStep.less_imp_inext_le",
     "[| ?a < ?b; ?a : ?I; ?b : ?I |] ==> inext ?a ?I <= ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("SetIntervalStep.greater_imp_iprev_ge",
     "[| ?b < ?a; ?a : ?I; ?b : ?I |] ==> ?b <= iprev ?a ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_mono2",
     "EX x:?I. ?I \<rightarrow> ?a < x ==>
      (?I \<rightarrow> ?a < ?I \<rightarrow> ?b) = (?a < ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_imirror_iprev_conv'",
     "[| finite ?I; ?n : ?I |]
      ==> inext (mirror_elem ?n ?I) (imirror ?I) =
          mirror_elem (iprev ?n ?I) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("SetIntervalStep.iprev_imirror_inext_conv'",
     "[| finite ?I; ?n : ?I |]
      ==> iprev (mirror_elem ?n ?I) (imirror ?I) =
          mirror_elem (inext ?n ?I) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("SetIntervalStep.inext_image",
     "[| ?n : ?I; SetInterval2.strict_mono_on ?f ?I |]
      ==> inext (?f ?n) (?f ` ?I) = ?f (inext ?n ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("SetIntervalStep.iprev_image",
     "[| ?n : ?I; SetInterval2.strict_mono_on ?f ?I |]
      ==> iprev (?f ?n) (?f ` ?I) = ?f (iprev ?n ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("SetIntervalStep.inext_mono2_infin_fin",
     "[| ?n : ?I; ?n ~= Max ?I | infinite ?I |] ==> ?n < inext ?n ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.cut_ge_greater_iprev_conv",
     "[| ?t : ?I; ?t ~= iMin ?I |]
      ==> ?I \<down>\<ge> ?t = ?I \<down>> iprev ?t ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.cut_less_le_iprev_conv",
     "[| ?t : ?I; ?t ~= iMin ?I |]
      ==> ?I \<down>< ?t = ?I \<down>\<le> iprev ?t ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.inext_nth_image",
     "[| ?I ~= {}; SetInterval2.strict_mono_on ?f ?I |]
      ==> (?f ` ?I) \<rightarrow> ?n = ?f (?I \<rightarrow> ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("SetIntervalStep.inext_neq_iMin_not_card_1",
     "[| ?I ~= {}; card ?I ~= Suc 0 |] ==> inext ?n ?I ~= iMin ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.inext_nth_atLeastAtMost",
     "[| ?a <= ?n - ?m; ?m <= ?n |]
      ==> {?m..?n} \<rightarrow> ?a = ?m + ?a",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetIntervalStep.iprev_nth_atLeastAtMost",
     "[| ?a <= ?n - ?m; ?m <= ?n |] ==> {?m..?n} \<leftarrow> ?a = ?n - ?a",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 2)))),
    ("SetIntervalStep.inext_mono2_fin",
     "[| ?n : ?I; finite ?I; ?n ~= Max ?I |] ==> ?n < inext ?n ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.cut_less_inext_nth_card_if",
     "card (?I \<down>< (?I \<rightarrow> ?n)) =
      (if ?n < card ?I | infinite ?I then ?n else card ?I - Suc 0)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app (template_hole 10, template_var 1))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 10, template_var 1)),
           template_app (template_hole 1, template_hole 0))))),
    ("SetIntervalStep.iprev_nth_Suc_mono2",
     "[| finite ?I; EX x:?I. x < ?I \<leftarrow> ?n |]
      ==> ?I \<leftarrow> Suc ?n < ?I \<leftarrow> ?n",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.neq_Max_imp_inext_gr_iMin",
     "[| ?t : ?I; ?t ~= Max ?I | infinite ?I |] ==> iMin ?I < inext ?t ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_app (template_hole 4, template_var 0)))),
              template_app
               (template_hole 6,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.remove_iMin_eq",
     "[| ?I ~= {}; ?n ~= iMin ?I |] ==> iMin (?I - {?n}) = iMin ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))),
         template_app (template_hole 2, template_var 1)))),
    ("SetIntervalStep.inext_nth_insert_Suc",
     "[| ?I ~= {}; ?a < iMin ?I |]
      ==> insert ?a ?I \<rightarrow> Suc ?n = ?I \<rightarrow> ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_card_append_eq1",
     "[| Max ?A < iMin ?B; ?n < card ?A |]
      ==> (?A Un ?B) \<rightarrow> ?n = ?A \<rightarrow> ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SetIntervalStep.inext_le_mono",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I |] ==> inext ?a ?I <= inext ?b ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_le_mono",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I |] ==> iprev ?a ?I <= iprev ?b ?I",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_less_mono_rev",
     "[| inext ?a ?I < inext ?b ?I; ?a : ?I; ?b : ?I |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_less_mono_rev",
     "[| iprev ?a ?I < iprev ?b ?I; ?a : ?I; ?b : ?I |] ==> ?a < ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_inext_nth_Suc",
     "?I \<rightarrow> ?n ~= Max ?I | infinite ?I ==>
      iprev (?I \<rightarrow> Suc ?n) ?I = ?I \<rightarrow> ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0)),
                    template_app (template_hole 3, template_var 1)))),
              template_app
               (template_hole 6,
                template_app (template_hole 2, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.Max_le_iMin_conv_singleton",
     "[| finite ?I; ?I ~= {} |] ==> (Max ?I <= iMin ?I) = (EX x. ?I = {x})",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("SetIntervalStep.cut_less_inext_nth_card_eq2",
     "[| finite ?I; card ?I <= Suc ?n |]
      ==> card (?I \<down>< (?I \<rightarrow> ?n)) = card ?I - Suc 0",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 5, template_hole 0))))),
    ("SetIntervalStep.neq_Max_imp_inext_neq_iMin",
     "[| ?t : ?I; ?t ~= Max ?I | infinite ?I |] ==> inext ?t ?I ~= iMin ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app (template_hole 3, template_var 0)))),
              template_app
               (template_hole 5,
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIntervalStep.inext_neq_iMin_not_singleton",
     "[| ?I ~= {}; \<nexists>a. ?I = {a} |] ==> inext ?n ?I ~= iMin ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_predicate (template_app (template_hole 4, t_empty)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.Max_le_iMin_imp_singleton",
     "[| finite ?I; ?I ~= {}; Max ?I <= iMin ?I |] ==> ?I = {iMin ?I}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_hole 4)))),
    ("SetIntervalStep.inext_nth_card_Max",
     "[| finite ?I; ?I ~= {}; card ?I <= Suc ?n |]
      ==> ?I \<rightarrow> ?n = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_nth_card_iMin",
     "[| finite ?I; ?I ~= {}; card ?I <= Suc ?n |]
      ==> ?I \<leftarrow> ?n = iMin ?I",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.inext_nth_eq_Min_conv",
     "?I ~= {} ==>
      (?I \<rightarrow> ?n = iMin ?I) = (?n = 0 | (EX a. ?I = {a}))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 2)),
               template_app (template_hole 1, t_empty))
             )))),
    ("SetIntervalStep.remove_Min_inext_nth_Suc_conv",
     "Suc 0 < card ?I | infinite ?I ==>
      (?I - {iMin ?I}) \<rightarrow> ?n = ?I \<rightarrow> Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)),
                  template_app (template_hole 8, template_var 1))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0))),
           template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 10, template_var 0))))),
    ("SetIntervalStep.iprev_insert_le_iMin",
     "[| finite ?I; ?I ~= {}; ?a <= iMin ?I |]
      ==> iprev (iMin ?I) (insert ?a ?I) = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("SetIntervalStep.inext_insert_ge_Max",
     "[| finite ?I; ?I ~= {}; Max ?I <= ?a |]
      ==> inext (Max ?I) (insert ?a ?I) = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("SetIntervalStep.inext_nth_gr_Min_conv",
     "?I ~= {} ==>
      (iMin ?I < ?I \<rightarrow> ?n) = (0 < ?n & (\<nexists>a. ?I = {a}))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_hole 2),
               template_var 0)),
           template_app
            (template_hole 10, template_app (template_hole 1, t_empty)))))),
    ("SetIntervalStep.inext_imirror_iprev_conv",
     "[| finite ?I; ?n <= iMin ?I + Max ?I |]
      ==> inext (mirror_elem ?n ?I) (imirror ?I) =
          mirror_elem (iprev ?n ?I) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("SetIntervalStep.iprev_imirror_inext_conv",
     "[| finite ?I; ?n <= iMin ?I + Max ?I |]
      ==> iprev (mirror_elem ?n ?I) (imirror ?I) =
          mirror_elem (inext ?n ?I) ?I",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("SetIntervalStep.iprev_nth_mono2",
     "[| finite ?I; EX x:?I. x < ?I \<leftarrow> ?a |]
      ==> (?I \<leftarrow> ?b < ?I \<leftarrow> ?a) = (?a < ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.cut_greater_ge_inext_conv",
     "[| ?t : ?I; ?t ~= Max ?I | infinite ?I |]
      ==> ?I \<down>> ?t = ?I \<down>\<ge> inext ?t ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_app (template_hole 5, template_var 0)))),
              template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.cut_le_less_inext_conv",
     "[| ?t : ?I; ?t ~= Max ?I | infinite ?I |]
      ==> ?I \<down>\<le> ?t = ?I \<down>< inext ?t ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_app (template_hole 5, template_var 0)))),
              template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SetIntervalStep.iprev_nth_image",
     "[| finite ?I; ?I ~= {}; SetInterval2.strict_mono_on ?f ?I |]
      ==> (?f ` ?I) \<leftarrow> ?n = ?f (?I \<leftarrow> ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("SetIntervalStep.iprev_neq_Max_not_card_1",
     "[| finite ?I; ?I ~= {}; card ?I ~= Suc 0 |]
      ==> iprev ?n ?I ~= Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.inext_nth_card_Max'",
     "[| finite ?I; ?I ~= {}; card ?I - Suc 0 <= ?n |]
      ==> ?I \<rightarrow> ?n = Max ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_nth_card_iMin'",
     "[| finite ?I; ?I ~= {}; card ?I - Suc 0 <= ?n |]
      ==> ?I \<leftarrow> ?n = iMin ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetIntervalStep.iprev_nth_iMin_fix",
     "[| ?I ~= {}; ?I \<leftarrow> ?a = iMin ?I; ?a <= ?b |]
      ==> ?I \<leftarrow> ?b = iMin ?I",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app (template_hole 1, template_var 2)))),
    ("SetIntervalStep.remove_Max_eq",
     "[| finite ?I; ?I ~= {}; ?n ~= Max ?I |] ==> Max (?I - {?n}) = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))),
         template_app (template_hole 2, template_var 1)))),
    ("SetIntervalStep.remove_Min_eq",
     "[| finite ?I; ?I ~= {}; ?n ~= Min ?I |] ==> Min (?I - {?n}) = Min ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))),
         template_app (template_hole 2, template_var 1)))),
    ("SetIntervalStep.inext_nth_card_append_eq3",
     "[| finite ?A; ?B ~= {}; Max ?A < iMin ?B |]
      ==> (?A Un ?B) \<rightarrow> card ?A = iMin ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 4, template_var 0)))),
    ("SetIntervalStep.set_restriction_inext_eq",
     "[| set_restriction ?interval_fun; ?n : ?interval_fun ?I;
         inext ?n ?I : ?interval_fun ?I |]
      ==> inext ?n (?interval_fun ?I) = inext ?n ?I",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_var 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_var 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_eq_if_neq_iMin",
     "[| iprev ?a ?I = iprev ?b ?I; iMin ?I ~= ?a; iMin ?I ~= ?b |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 0, template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_neq_Max_not_singleton",
     "[| finite ?I; ?I ~= {}; \<nexists>a. ?I = {a} |]
      ==> iprev ?n ?I ~= Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_predicate (template_app (template_hole 4, t_empty)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIntervalStep.inext_less_mono_infin",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; infinite ?I |]
      ==> inext ?a ?I < inext ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_le_mono_infin_rev",
     "[| inext ?a ?I <= inext ?b ?I; ?a : ?I; ?b : ?I; infinite ?I |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 0, template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_inext_nth_pred",
     "?I \<rightarrow> (?n - Suc 0) ~= Max ?I | infinite ?I ==>
      iprev (?I \<rightarrow> ?n) ?I = ?I \<rightarrow> (?n - Suc 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 1),
                        template_app
                         (template_app (template_hole 5, template_var 0),
                          template_app
                           (template_hole 4, template_hole 3)))),
                    template_app (template_hole 2, template_var 1)))),
              template_app
               (template_hole 8,
                template_app (template_hole 1, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 4, template_hole 3)))))),
    ("SetIntervalStep.inext_iprev_nth_pred",
     "[| finite ?I; iMin ?I ~= ?I \<leftarrow> (?n - Suc 0) |]
      ==> inext (?I \<leftarrow> ?n) ?I = ?I \<leftarrow> (?n - Suc 0)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_hole 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_hole 1)))))),
    ("SetIntervalStep.inext_eq",
     "[| inext ?a ?I = inext ?b ?I; EX x:?I. ?a < x; EX x:?I. ?b < x |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_eq",
     "[| iprev ?a ?I = iprev ?b ?I; EX x:?I. x < ?a; EX x:?I. x < ?b |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.inext_eq_infin_fin",
     "[| inext ?a ?I = inext ?b ?I;
         ?a ~= Max ?I & ?b ~= Max ?I | infinite ?I |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_app (template_hole 1, template_var 1)))),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_app (template_hole 1, template_var 1))))),
              template_app
               (template_hole 2,
                template_app (template_hole 0, template_var 1)))
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.inext_induct",
     "[| ?P (iMin ?I); !!n. [| n : ?I; ?P n |] ==> ?P (inext n ?I);
         ?n : ?I |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("SetIntervalStep.inext_nth_Max_fix",
     "[| finite ?I; ?I ~= {}; ?I \<rightarrow> ?a = Max ?I; ?a <= ?b |]
      ==> ?I \<rightarrow> ?b = Max ?I",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app (template_hole 1, template_var 2)))),
    ("SetIntervalStep.iprev_less_mono_if_neq_iMin",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; iMin ?I ~= ?a |]
      ==> iprev ?a ?I < iprev ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.iprev_less_mono",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; EX x:?I. x < ?a |]
      ==> iprev ?a ?I < iprev ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_less_mono",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; EX x:?I. ?b < x |]
      ==> inext ?a ?I < inext ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_eq_fin",
     "[| inext ?a ?I = inext ?b ?I; finite ?I; ?a ~= Max ?I; ?b ~= Max ?I |]
      ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 0, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 0, template_var 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("SetIntervalStep.set_restriction_inext_singleton_eq",
     "[| set_restriction ?interval_fun; ?n : ?interval_fun ?I;
         inext ?n ?I : ?interval_fun ?I |]
      ==> {inext ?n (?interval_fun ?I)} = ?interval_fun {inext ?n ?I}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_var 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_var 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_var 2, template_var 0))),
           template_hole 0),
         template_app
          (template_var 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("SetIntervalStep.nat_Suc_predicate_change_exists",
     "[| ?a <= ?b; ~ ?P ?a; ?P ?b |]
      ==> EX n>=?a. n < ?b & ~ ?P n & ?P (Suc n)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("SetIntervalStep.iprev_le_mono_rev",
     "[| iprev ?a ?I <= iprev ?b ?I; ?a : ?I; ?b : ?I;
         iMin ?I ~= iprev ?b ?I |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 0, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalStep.inext_append_eq3",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B |]
      ==> inext (Max ?A) (?A Un ?B) = iMin ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("SetIntervalStep.iprev_append_eq3",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B |]
      ==> iprev (iMin ?B) (?A Un ?B) = Max ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_var 1)))),
    ("SetIntervalStep.inext_le_mono_rev",
     "[| inext ?a ?I <= inext ?b ?I; ?a : ?I; ?b : ?I;
         EX x:?I. inext ?a ?I < x |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalStep.nat_pred_predicate_change_exists",
     "[| ?a <= ?b; ~ ?P ?b; ?P ?a |]
      ==> EX n<=?b. ?a < n & ~ ?P n & ?P (n - Suc 0)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SetIntervalStep.inext_less_mono_infin_fin",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; ?b ~= Max ?I | infinite ?I |]
      ==> inext ?a ?I < inext ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app (template_hole 2, template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_hole 1, template_var 0)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.min_step_inext2",
     "[| ?x < ?y; ?x : ?I; ?y : ?I; ~ (EX k:?I. ?x < k & k < ?y) |]
      ==> inext ?x ?I = ?y",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0), t_empty)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("SetIntervalStep.min_step_iprev2",
     "[| ?x < ?y; ?x : ?I; ?y : ?I; ~ (EX k:?I. ?x < k & k < ?y) |]
      ==> iprev ?y ?I = ?x",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0), t_empty)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("SetIntervalStep.iprev_induct",
     "[| ?P (Max ?I); !!n. [| n : ?I; ?P n |] ==> ?P (iprev n ?I);
         finite ?I; ?n : ?I |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("SetIntervalStep.inext_less_mono_fin",
     "[| ?a < ?b; ?a : ?I; ?b : ?I; finite ?I; ?b ~= Max ?I |]
      ==> inext ?a ?I < inext ?b ?I",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIntervalStep.inext_nth_append_eq1",
     "[| finite ?A; ?A ~= {}; Max ?A < iMin ?B;
         ?A \<rightarrow> ?n ~= Max ?A |]
      ==> (?A Un ?B) \<rightarrow> ?n = ?A \<rightarrow> ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SetIntervalStep.inext_le_mono_infin_fin_rev",
     "[| inext ?a ?I <= inext ?b ?I; ?a : ?I; ?b : ?I;
         inext ?a ?I ~= Max ?I | infinite ?I |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_var 1)),
                    template_app (template_hole 1, template_var 1)))),
              template_app
               (template_hole 3,
                template_app (template_hole 0, template_var 1)))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalStep.inext_le_mono_fin_rev",
     "[| inext ?a ?I <= inext ?b ?I; ?a : ?I; ?b : ?I; finite ?I;
         inext ?a ?I ~= Max ?I |]
      ==> ?a <= ?b",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_app (template_hole 0, template_var 1))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SetIntervalStep.iprev_append_eq1",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B; ?n : ?A |]
      ==> iprev ?n (?A Un ?B) = iprev ?n ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("SetIntervalStep.inext_append_eq2",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B; ?n : ?B |]
      ==> inext ?n (?A Un ?B) = inext ?n ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.min_step_inext",
     "[| ?x < ?y; ?x : ?I; ?y : ?I; !!k. [| ?x < k; k < ?y |] ==> k ~: ?I |]
      ==> inext ?x ?I = ?y",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("SetIntervalStep.min_step_iprev",
     "[| ?x < ?y; ?x : ?I; ?y : ?I; !!k. [| ?x < k; k < ?y |] ==> k ~: ?I |]
      ==> iprev ?y ?I = ?x",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("SetIntervalStep.nat_Suc_predicate_change_exists2",
     "[| ?a <= ?b; ~ ?P ?a; ?P ?b |]
      ==> EX n>=?a. n < ?b & ~ ?P n & (ALL k<=?b. n < k --> ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SetIntervalStep.nat_pred_predicate_change_exists2",
     "[| ?a <= ?b; ~ ?P ?b; ?P ?a |]
      ==> EX n>?a. n <= ?b & ~ ?P n & (ALL k>=?a. k < n --> ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SetIntervalStep.inext_nth_card_append_eq2",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B; card ?A <= ?n |]
      ==> (?A Un ?B) \<rightarrow> ?n = ?B \<rightarrow> (?n - card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 4, template_var 2)))))),
    ("SetIntervalStep.nat_Suc_predicate_change_exists2_all",
     "[| ?a <= ?b; ~ ?P ?a; ALL k>=?b. ?P k |]
      ==> EX n>=?a. n < ?b & ~ ?P n & (ALL k>n. ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SetIntervalStep.nat_pred_predicate_change_exists2_all",
     "[| ?a <= ?b; ~ ?P ?b; ALL k<=?a. ?P k |]
      ==> EX n>?a. n <= ?b & ~ ?P n & (ALL k<n. ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SetIntervalStep.between_empty_imp_inext_eq",
     "[| ?n : ?A; ?n < inext ?n ?A; ?n : ?B; inext ?n ?A : ?B;
         ?B \<down>> ?n \<down>< inext ?n ?A = {} |]
      ==> inext ?n ?B = inext ?n ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2)),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1)))),
    ("SetIntervalStep.between_empty_imp_iprev_eq",
     "[| ?n : ?A; iprev ?n ?A < ?n; ?n : ?B; iprev ?n ?A : ?B;
         ?B \<down>> iprev ?n ?A \<down>< ?n = {} |]
      ==> iprev ?n ?B = iprev ?n ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1))),
            template_var 2),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1)))),
    ("SetIntervalStep.inext_nth_card_append",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B |]
      ==> (?A Un ?B) \<rightarrow> ?n =
          (if ?n < card ?A then ?A \<rightarrow> ?n
           else ?B \<rightarrow> (?n - card ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app (template_hole 1, template_var 2))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 1, template_var 2))))))),
    ("SetIntervalStep.inext_predicate_change_exists",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?a; ?P ?b |]
      ==> EX n:?I. ?a <= n & n < ?b & ~ ?P n & ?P (inext n ?I)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 3))
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("SetIntervalStep.iprev_predicate_change_exists",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?b; ?P ?a |]
      ==> EX n:?I. ?a < n & n <= ?b & ~ ?P n & ?P (iprev n ?I)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("SetIntervalStep.inext_append_eq1",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B; ?n : ?A;
         ?n ~= Max ?A |]
      ==> inext ?n (?A Un ?B) = inext ?n ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("SetIntervalStep.iprev_append_eq2",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B; ?n : ?B;
         ?n ~= iMin ?B |]
      ==> iprev ?n (?A Un ?B) = iprev ?n ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("SetIntervalStep.inext_append",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B |]
      ==> inext ?n (?A Un ?B) =
          (if ?n : ?B then inext ?n ?B
           else if ?n = Max ?A then iMin ?B else inext ?n ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app (template_hole 6, template_var 2))),
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)))
             )))),
    ("SetIntervalStep.iprev_append",
     "[| finite ?A; ?A ~= {}; ?B ~= {}; Max ?A < iMin ?B |]
      ==> iprev ?n (?A Un ?B) =
          (if ?n : ?A then iprev ?n ?A
           else if ?n = iMin ?B then Max ?A else iprev ?n ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app (template_hole 5, template_var 1))),
                   template_app (template_hole 6, template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)))
             )))),
    ("SetIntervalStep.inext_predicate_change_exists_aux",
     "[| ?c = card (?I \<down>\<ge> ?a \<down>< ?b); ?a < ?b; ?a : ?I;
         ?b : ?I; ~ ?P ?a; ?P ?b |]
      ==> EX n:?I \<down>\<ge> ?a \<down>< ?b. ~ ?P n & ?P (inext n ?I)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1))),
        template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2)),
                 template_var 1)),
             t_empty)
           ))),
    ("SetIntervalStep.inext_predicate_change_exists2_all",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?a;
         ALL k:?I \<down>\<ge> ?b. ?P k |]
      ==> EX n:?I. ?a <= n & n < ?b & ~ ?P n & (ALL k:?I \<down>> n. ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("SetIntervalStep.iprev_predicate_change_exists2_all",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?b;
         ALL k:?I \<down>\<le> ?a. ?P k |]
      ==> EX n:?I. ?a < n & n <= ?b & ~ ?P n & (ALL k:?I \<down>< n. ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("SetIntervalStep.inext_predicate_change_exists2",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?a; ?P ?b |]
      ==> EX n:?I.
             ?a <= n &
             n < ?b & ~ ?P n & (ALL k:?I. n < k & k <= ?b --> ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 3))
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("SetIntervalStep.iprev_predicate_change_exists2",
     "[| ?a <= ?b; ?a : ?I; ?b : ?I; ~ ?P ?b; ?P ?a |]
      ==> EX n:?I.
             ?a < n &
             n <= ?b & ~ ?P n & (ALL k:?I. ?a <= k & k < n --> ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.SetIntervalStepMoreTemplates"
### 0.421s elapsed time, 0.551s cpu time, 0.070s GC time
val it = (): unit
