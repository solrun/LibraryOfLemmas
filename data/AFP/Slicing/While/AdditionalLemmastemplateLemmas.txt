   [("AdditionalLemmas.finite_valid_nodes",
     "finite {n. valid_node ?prog n}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("AdditionalLemmas.finite_labels", "finite {l. EX c. labels ?prog l c}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("AdditionalLemmas.finite_successors",
     "finite
       {n'.
        EX a'.
           valid_edge ?prog a' & sourcenode a' = ?n & targetnode a' = n'}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("AdditionalLemmas.valid_node_Entry_path",
     "valid_node ?prog ?n ==> EX as. While_CFG.path ?prog (_Entry_) as ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("AdditionalLemmas.valid_node_Exit_path",
     "valid_node ?prog ?n ==> EX as. While_CFG.path ?prog ?n as (_Exit_)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("AdditionalLemmas.path_SeqFirst",
     "While_CFG.path ?prog ?n ?as (_ ?l _) ==>
      While_CFG.path (?prog;; ?c\<^sub>2) ?n ?as (_ ?l _)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, t_empty), t_empty),
                    template_app (template_hole 2, template_var 4)),
                  template_var 3),
                template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, t_empty), t_empty),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0))),
                 template_var 3),
               template_var 2),
             template_app (template_hole 1, template_var 1))
           ))),
    ("AdditionalLemmas.inner_node_Entry_Exit_path",
     "?l < #:?prog ==>
      (EX as. While_CFG.path ?prog (_ ?l _) as (_Exit_)) &
      (EX as. While_CFG.path ?prog (_Entry_) as (_ ?l _))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 8, t_empty))
           ))),
    ("AdditionalLemmas.path_CondTrue",
     "While_CFG.path ?prog (_ ?l _) ?as ?n' ==>
      While_CFG.path (if (?b) ?prog else ?c\<^sub>2) ((_ ?l _) \<oplus> 1)
       (?as \<oplus>s 1) (?n' \<oplus> 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, t_empty), t_empty),
                    template_app (template_hole 5, template_var 5)),
                  template_app (template_hole 4, template_var 4)),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, t_empty), t_empty),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 5),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 4)),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1))
           ))),
    ("AdditionalLemmas.path_While",
     "While_CFG.path ?prog (_ ?l _) ?as (_ ?l' _) ==>
      While_CFG.path (while (?b) ?prog) ((_ ?l _) \<oplus> 2)
       (?as \<oplus>s 2) ((_ ?l' _) \<oplus> 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, t_empty), t_empty),
                    template_app (template_hole 7, template_var 4)),
                  template_app (template_hole 6, template_var 3)),
                template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, t_empty), t_empty),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 4))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_var 3)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))))
           ))),
    ("AdditionalLemmas.path_CondFalse",
     "While_CFG.path ?prog (_ ?l _) ?as ?n' ==>
      While_CFG.path (if (?b) ?c\<^sub>1 else ?prog)
       ((_ ?l _) \<oplus> #:?c\<^sub>1 + 1) (?as \<oplus>s #:?c\<^sub>1 + 1)
       (?n' \<oplus> #:?c\<^sub>1 + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, t_empty), t_empty),
                    template_app (template_hole 7, template_var 5)),
                  template_app (template_hole 6, template_var 4)),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, t_empty), t_empty),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0),
                       template_var 5))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_var 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 1))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)))
           ))),
    ("AdditionalLemmas.path_SeqSecond",
     "[| While_CFG.path ?prog ?n ?as ?n'; ?n ~= (_Entry_); ?as ~= [] |]
      ==> While_CFG.path (?c\<^sub>1;; ?prog) (?n \<oplus> #:?c\<^sub>1)
           (?as \<oplus>s #:?c\<^sub>1) (?n' \<oplus> #:?c\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, t_empty), t_empty),
                    template_app (template_hole 9, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 13, t_empty), t_empty),
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 4))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))
           )))]
