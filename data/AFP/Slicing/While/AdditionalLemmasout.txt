Loading theory "Draft.AuxLemmas" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WCFG" via "Draft.BasicDefs")
Loading theory "Draft.Com" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WCFG")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.AuxLemmas"
### 0.053s elapsed time, 0.250s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WCFG")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.608s cpu time, 0.058s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.379s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.867s cpu time, 0.085s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.BasicDefs"
### 0.706s elapsed time, 2.773s cpu time, 0.316s GC time
Loading theory "Draft.CFG" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.CFGExit")
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.CFG"
### 0.163s elapsed time, 0.654s cpu time, 0.000s GC time
Loading theory "Draft.CFGExit" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation")
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.CFGExit"
### 0.276s elapsed time, 0.933s cpu time, 0.544s GC time
Loading theory "Draft.Postdomination" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.PDG" via "Draft.StandardControlDependence")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 17 of "$AFP/Slicing/Basic/Postdomination.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^fixed>Exit"))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^fixed>Exit"))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies" ("\<^fixed>Exit")
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies" ("\<^fixed>Exit")
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 182 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate" ("\<^fixed>Exit")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.postdominate" ("\<^fixed>Exit") ("_position" n)))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.064s elapsed time, 4.040s cpu time, 0.868s GC time
Loading theory "Draft.CFG_wf" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CFGExit_wf")
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ambiguous input (line 334 of "$AFP/Slicing/Basic/Postdomination.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>Set.member"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" nx)
###                       ("\<^const>Orderings.ord_class.greater_eq"
###                         ("_applC" ("_position" length) ("_position" as))
###                         ("_position" k)))
###                     ("_position" n')))
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("_position" n')))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k)))
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("\<^const>Set.member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/Slicing/Basic/Postdomination.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>Set.member"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>Orderings.ord_class.greater_eq"
###               ("_applC" ("_position" length) ("_position" as))
###               ("_position" k)))
###           ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k)))
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k))))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" nx))
###         ("\<^const>Orderings.ord_class.greater_eq"
###           ("_applC" ("_position" length) ("_position" as)) ("_position" k)))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("_applC" ("_position" length) ("_position" as))))
###         ("_position" k))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CFG_wf"
### 0.090s elapsed time, 0.366s cpu time, 0.000s GC time
Loading theory "Draft.CFGExit_wf" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed")
### theory "Draft.Postdomination"
### 0.275s elapsed time, 1.081s cpu time, 0.063s GC time
Loading theory "Draft.DynStandardControlDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.PDG" via "Draft.StandardControlDependence")
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 30 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" targetnodes) ("_position" as)))
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n'')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("_position" n')
###     ("\<^const>HOL.eq" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###       ("_position" n) ("_position" a))
###     ("_position" as')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###     ("_position" n)
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DynStandardControlDependence"
### 0.111s elapsed time, 0.439s cpu time, 0.039s GC time
Loading theory "Draft.DynWeakControlDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.PDG" via "Draft.WeakControlDependence")
Found termination order: "size <*mlex*> {}"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_)"
### theory "Draft.CFGExit_wf"
### 0.181s elapsed time, 0.713s cpu time, 0.039s GC time
Loading theory "Draft.StandardControlDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.PDG")
### theory "Draft.DynWeakControlDependence"
### 0.067s elapsed time, 0.259s cpu time, 0.000s GC time
Loading theory "Draft.WeakControlDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.PDG")
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 14 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence"
###     ("\<^fixed>standard_control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" n') ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>standard_control_dependence" ("_position" n)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###           ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>standard_control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 14 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###           ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weak_control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>weak_control_dependence" ("_position" n)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_weak_control_dependence"
###     ("\<^fixed>weak_control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" n') ("_position" as)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_applC" ("_position" targetnode) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("_applC" ("_position" targetnode)
###                         ("_position" a')))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes)
###               ("\<^const>List.list.Cons" ("_position" a)
###                 ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_applC" ("_position" targetnode) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" sourcenode) ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("_applC" ("_position" targetnode)
###                       ("_position" a'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("\<^fixed>Exit"))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("\<^fixed>Exit")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.weak_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.strong_postdominate" ("_position" n')
###                 ("_applC" ("_position" targetnode) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not"
###                     ("\<^const>local.strong_postdominate" ("_position" n')
###                       ("_applC" ("_position" targetnode)
###                         ("_position" a')))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.weak_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes)
###               ("\<^const>List.list.Cons" ("_position" a)
###                 ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.strong_postdominate" ("_position" n')
###               ("_applC" ("_position" targetnode) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" sourcenode) ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not"
###                   ("\<^const>local.strong_postdominate" ("_position" n')
###                     ("_applC" ("_position" targetnode)
###                       ("_position" a'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Not"
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes) ("_position" as))))
###                 ("_Ball" ("_position" n'')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" targetnodes) ("_position" as)))
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("_position" n'')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("\<^fixed>Exit"))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.weak_control_dependence" ("_position" n)
###       ("\<^fixed>Exit")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WeakControlDependence"
### 0.099s elapsed time, 0.377s cpu time, 0.062s GC time
Loading theory "Draft.DynDataDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.Slice" via "Draft.DataDependence")
### theory "Draft.StandardControlDependence"
### 0.107s elapsed time, 0.421s cpu time, 0.062s GC time
Loading theory "Draft.Distance" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.Slice")
Found termination order: "size <*mlex*> {}"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
### Ambiguous input (line 37 of "$AFP/Slicing/StaticIntra/Distance.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("_position" n'))
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" as')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.implies" ("_position" n')
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                   ("_applC" ("_position" length) ("_position" as'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.implies" ("_position" n') ("_position" x)))
###               ("_applC" ("_position" length) ("_position" as'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "distance"
### Ambiguous input (line 15 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.list.Cons"
###       ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###         ("_position" n') ("_position" a))
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 20 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DynDataDependence"
### 0.071s elapsed time, 0.275s cpu time, 0.000s GC time
Loading theory "Draft.DataDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.Slice")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Distance"
### 0.094s elapsed time, 0.375s cpu time, 0.000s GC time
Loading theory "Draft.Observable" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.Slice")
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 9 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence"
###     ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" V) ("_position" n') ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_data_dependence" ("_position" n)
###           ("_position" V) ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Def) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a')
###                   ("_position" as'))
###                 ("_position" n'))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Def) ("_position" n)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("_position" n'))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
### theory "Draft.DataDependence"
### 0.066s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.PDG" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations")
Proofs for inductive predicate(s) "obsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Observable"
### 0.131s elapsed time, 0.517s cpu time, 0.060s GC time
Loading theory "Draft.SemanticsCFG" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations" via "Draft.Slice")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 13 of "$AFP/Slicing/Basic/SemanticsCFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" n')))))
###         ("_position" c')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s))))))
###         ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("\<^fixed>identifies" ("_position" n')
###                 ("_position" c')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" transfers)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n')
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))))
###           ("_position" s'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_) sem
      identifies"
### theory "Draft.SemanticsCFG"
### 0.067s elapsed time, 0.259s cpu time, 0.000s GC time
Loading theory "Draft.Slice" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 46 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Slicing/While/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("\<^fixed>Exit"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n') ("\<^fixed>Exit"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n'))))
###     ("\<^fixed>Exit")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" as) ("_position" n')))))))
###               ("_position" as))))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("_applC" ("_position" CFG.path)
###               ("_cargs" ("_position" sourcenode)
###                 ("_cargs" ("_position" targetnode)
###                   ("_cargs" ("_position" valid_edge)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" as) ("_position" n')))))))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" as)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" CFG.path)
###               ("_cargs" ("_position" sourcenode)
###                 ("_cargs" ("_position" targetnode)
###                   ("_cargs" ("_position" valid_edge)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" as) ("_position" n')))))))
###             ("\<^const>HOL.not_equal" ("_position" as)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" CFG.path)
###           ("_cargs" ("_position" sourcenode)
###             ("_cargs" ("_position" targetnode)
###               ("_cargs" ("_position" valid_edge)
###                 ("_cargs" ("_position" n)
###                   ("_cargs" ("_position" as) ("_position" n')))))))
###         ("\<^const>HOL.not_equal" ("_position" as)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_position" CFG.path)))))
###       ("_cargs" ("_position" sourcenode)
###         ("_cargs" ("_position" targetnode)
###           ("_cargs" ("_position" valid_edge)
###             ("_cargs" ("_position" n)
###               ("_cargs" ("_position" as) ("_position" n')))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path) ("_position" sourcenode))))))
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_position" valid_edge)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" as) ("_position" n'))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_position" targetnode)))))))
###       ("_cargs" ("_position" valid_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" as) ("_position" n')))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_position" valid_edge))))))))
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" as) ("_position" n'))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_position" n)))))))))
###       ("_cargs" ("_position" as) ("_position" n')))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_cargs" ("_position" n) ("_position" as))))))))))
###       ("_position" n'))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale PDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    control_dependence :: "'node => 'node => bool"
      (\<open>_ controls _ \<close> [51, 0])
  assumes
    "PDG sourcenode targetnode kind valid_edge (_Entry_) Def Use state_val
      (_Exit_) control_dependence"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 35 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" None) ("_position" n')))))))
### ("\<^const>Pure.eq" ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))
###   ("_applC" ("_position" PDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_position" None) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###             ("_position" n')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" n'))
###   ("_applC" ("_position" PDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###         ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" V) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "PDG_edge"
  Proving monotonicity ...
Proofs for inductive predicate(s) "PDG_path"
  Proving monotonicity ...
### Ambiguous input (line 59 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.cdep_edge" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.PDG_path"
###     ("\<^const>local.cdep_edge" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.PDG_path"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 146 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.PDG_path" ("_position" n')
###           ("\<^const>HOL.conj" ("_position" n)
###             ("\<^const>Set.member" ("_position" n) ("_position" S))))
###         ("_applC" ("_position" valid_node) ("_position" n))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.PDG_path" ("_position" n') ("_position" n))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" n) ("_position" S))
###           ("_applC" ("_position" valid_node) ("_position" n)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>local.PDG_path" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" n) ("_position" S))
###             ("_applC" ("_position" valid_node) ("_position" n))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member"
###           ("\<^const>local.PDG_path" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" n) ("_position" n)))
###           ("_position" S))
###         ("_applC" ("_position" valid_node) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Com"
### 2.475s elapsed time, 9.649s cpu time, 1.276s GC time
Loading theory "Draft.WeakOrderDependence" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.CDepInstantiations")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/WeakOrderDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("\<^const>Pure.eq" ("_position" n\<^sub>2)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###           ("_position" n\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("_position" n\<^sub>1))
###               ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("_position" n\<^sub>2))
###                 ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))
###             ("\<^const>HOL.Ex_binder" ("_position" a)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" sourcenode) ("_position" a)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>1))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>2))
###                             ("\<^const>Set.member" ("_position" n\<^sub>1)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>2))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>1))
###                             ("\<^const>Set.member" ("_position" n\<^sub>2)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("_position" n\<^sub>2))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###       ("_position" n\<^sub>2))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("_position" n\<^sub>1))
###           ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Ex_binder" ("_position" as)
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("_position" n\<^sub>2))
###             ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))))
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>1))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>2))
###                         ("\<^const>Set.member" ("_position" n\<^sub>1)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>2))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>1))
###                         ("\<^const>Set.member" ("_position" n\<^sub>2)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BackwardSlice
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
  assumes
    "BackwardSlice sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val backward_slice"
locale StandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
Proofs for inductive predicate(s) "wod_backward_slicep"
  Proving monotonicity ...
locale WeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "WeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### theory "Draft.WeakOrderDependence"
### 0.204s elapsed time, 0.795s cpu time, 0.090s GC time
Loading theory "Draft.Labels" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed")
Proofs for inductive predicate(s) "silent_move"
### theory "HOL-Library.Tree"
### 2.314s elapsed time, 8.980s cpu time, 1.223s GC time
Loading theory "Draft.WCFG" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed" via "Draft.Interpretation")
  Proving monotonicity ...
### theory "Draft.PDG"
### 0.762s elapsed time, 2.991s cpu time, 0.254s GC time
Loading theory "Draft.Templates" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 27 of "$AFP/Slicing/While/Labels.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###             ("\<^const>Groups.one_class.one"))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "silent_moves"
Proofs for inductive predicate(s) "labels"
  Proving monotonicity ...
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Labels"
### 0.094s elapsed time, 0.382s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "observable_move"
  Proving monotonicity ...
Proofs for inductive predicate(s) "observable_moves"
  Proving monotonicity ...
### Ambiguous input (line 659 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" backward_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n'))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" nx)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" nx)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" backward_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n'))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" nx)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" nx)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "relevant_varsp"
  Proving monotonicity ...
### Ambiguous input (line 665 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 675 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 675 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_position" n')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 795 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n''))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n'')))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 903 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 966 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" V)
###           ("\<^const>local.relevant_vars"
###             ("_applC" ("_position" S) ("_position" n)))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" n)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_node) ("_position" n')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" V)
###           ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###             ("_position" n))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" n)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_node) ("_position" n')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WSp"
  Proving monotonicity ...
### Ambiguous input (line 973 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" V)
###           ("\<^const>local.relevant_vars"
###             ("_applC" ("_position" S) ("_position" n)))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n))
###           ("_applC" ("_position" valid_node) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" V)
###           ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###             ("_position" n))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n))
###           ("_applC" ("_position" valid_node) ("_position" n')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 12 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("_position" i))
###     ("\<^const>WCFG.w_node.Node"
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry") ("_position" i))
###     ("\<^const>WCFG.w_node.Entry")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit") ("_position" i))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "trans_observable_moves"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 17 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Exit")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Entry")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1271 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as)))
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as')))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" n') ("_position" S)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>local.relevant_vars"
###                       ("_applC" ("_position" S) ("_position" n)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" as) ("_position" as'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as)))
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as')))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" n') ("_position" S)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("_applC"
###                       ("\<^const>local.relevant_vars" ("_position" S))
###                       ("_position" n))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" as) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" s)
###           ("\<^const>Com.cmd.LAss" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_applC" ("_position" s)
###             ("\<^const>Com.cmd.LAss" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n'))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Slicing/While/WCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Slicing/While/WCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>While_CFG" ("_position" c')
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.w_node.Node"
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "While_CFG"
  Proving monotonicity ...
### Ambiguous input (line 365 of "$AFP/Slicing/While/WCFG.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" et)) ("_position" prog))
###           ("_position" n) ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("_position" prog))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)))
###       ("\<^const>WCFG.While_CFG" ("_position" prog)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>WCFG.While_CFG" ("_position" prog)
###             ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###             ("_position" n)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et) ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog)))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog)))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BackwardSlice_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "BackwardSlice_wf sourcenode targetnode kind valid_edge (_Entry_) Def
      Use state_val backward_slice sem identifies"
### theory "Draft.Slice"
### 1.384s elapsed time, 4.829s cpu time, 0.404s GC time
Loading theory "Draft.CDepInstantiations" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed")
### theory "Draft.WCFG"
### 0.805s elapsed time, 2.555s cpu time, 0.211s GC time
Loading theory "Draft.Interpretation" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas" via "Draft.WellFormed")
### theory "HOL-Library.BigO"
### 0.820s elapsed time, 2.542s cpu time, 0.326s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AdditionalLemmasMoreTemplates")
### Ambiguous input (line 21 of "$AFP/Slicing/While/Interpretation.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_edge)
###     ("_cargs" ("_position" prog) ("_position" a)))
###   ("\<^const>WCFG.While_CFG" ("_position" prog)
###     ("_applC" ("_position" sourcenode) ("_position" a))
###     ("_applC" ("_position" kind) ("_position" a))
###     ("_applC" ("_position" targetnode) ("_position" a))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_edge)
###     ("_cargs" ("_position" prog) ("_position" a)))
###   ("_applC"
###     ("\<^const>WCFG.While_CFG" ("_position" prog)
###       ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_applC" ("_position" kind) ("_position" a))
###       ("_position" targetnode))
###     ("_position" a)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Interpretation"
### 0.232s elapsed time, 0.714s cpu time, 0.115s GC time
locale StandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### Ambiguous input (line 18 of "$AFP/Slicing/StaticIntra/CDepInstantiations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>PDG_path'" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG.PDG_path)
###         ("_cargs" ("_position" sourcenode)
###           ("_cargs" ("_position" targetnode)
###             ("_cargs" ("_position" valid_edge)
###               ("_cargs" ("_position" Def)
###                 ("_cargs" ("_position" Use)
###                   ("_cargs" ("_position" standard_control_dependence)
###                     ("_cargs" ("_position" n) ("_position" n'))))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>PDG_path'" ("_position" n) ("_position" n'))
###   ("_applC" ("_position" PDG.PDG_path)
###     ("_cargs" ("_position" sourcenode)
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_position" valid_edge)
###           ("_cargs" ("_position" Def)
###             ("_cargs" ("_position" Use)
###               ("_cargs" ("_position" standard_control_dependence)
###                 ("_cargs" ("_position" n) ("_position" n'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale WeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "WeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### theory "Draft.CDepInstantiations"
### 0.716s elapsed time, 2.085s cpu time, 1.092s GC time
Loading theory "Draft.WellFormed" (required by "Draft.AdditionalLemmasMoreTemplates" via "Draft.AdditionalLemmas")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.874s elapsed time, 2.372s cpu time, 1.092s GC time
### Ambiguous input (line 15 of "$AFP/Slicing/While/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lhs)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_Finset" ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lhs)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Finset" ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 29 of "$AFP/Slicing/While/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" rhs)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" rhs_aux) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rhs)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" rhs_aux) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.WellFormed"
### 0.538s elapsed time, 0.790s cpu time, 0.040s GC time
Loading theory "Draft.AdditionalLemmas" (required by "Draft.AdditionalLemmasMoreTemplates")
### Ambiguous input (line 18 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###       ("_position" as) ("\<^const>WCFG.w_node.Node" ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("_position" n) ("_position" as)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###       ("_position" as) ("\<^const>WCFG.w_node.Node" ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^const>AdditionalLemmas.path" ("_position" c\<^sub>2)
###         ("_position" n) ("_position" as)
###         ("\<^const>WCFG.w_node.Node" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###         ("_position" as) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" as)
###             ("\<^const>List.list.Nil"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###         ("_position" as) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" as)
###             ("\<^const>List.list.Nil"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###         ("_position" as) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" as)
###             ("\<^const>List.list.Nil"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###         ("_position" as) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" as)
###             ("\<^const>List.list.Nil"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###         ("_position" as) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" as)
###             ("\<^const>List.list.Nil"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" n'))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Groups.one_class.one"))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###       ("\<^const>AdditionalLemmas.path" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Groups.one_class.one"))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Groups.one_class.one"))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("\<^const>AdditionalLemmas.path" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr"
###             ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" prog))
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.label_incr"
###             ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("\<^const>WCFG.w_node.Node" ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^const>AdditionalLemmas.path" ("_position" prog)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l'))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("\<^const>WCFG.w_node.Node" ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" prog))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("_position" l'))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("\<^const>WCFG.w_node.Node" ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.label_incr"
###             ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("\<^const>WCFG.w_node.Node" ("_position" l'))))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###       ("\<^const>WCFG.w_node.Node" ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" prog))
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("\<^const>AdditionalLemmas.label_incrs" ("_position" as)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("\<^const>WCFG.w_node.Node" ("_position" l')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###         ("\<^const>WCFG.w_node.Exit"))
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###         ("\<^const>WCFG.w_node.Entry") ("_position" as)
###         ("\<^const>WCFG.w_node.Node" ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###           ("\<^const>WCFG.w_node.Exit")))
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###         ("\<^const>WCFG.w_node.Entry") ("_position" as)
###         ("\<^const>WCFG.w_node.Node" ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AdditionalLemmas.path"
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###         ("\<^const>WCFG.w_node.Exit"))
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.w_node.Entry") ("_position" as)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" as)
###           ("\<^const>WCFG.w_node.Exit")))
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>AdditionalLemmas.path" ("_position" prog)
###           ("\<^const>WCFG.w_node.Entry") ("_position" as)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 619 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AdditionalLemmas.path"
###     ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###     ("_position" n) ("_position" as) ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>AdditionalLemmas.path" ("_position" prog) ("_position" n)
###       ("_position" as) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 643 of "$AFP/Slicing/While/AdditionalLemmas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AdditionalLemmas.path"
###     ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" prog))
###     ("\<^const>WCFG.w_node.Entry") ("_position" as) ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>AdditionalLemmas.path" ("_position" prog)
###       ("\<^const>WCFG.w_node.Entry") ("_position" as) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AdditionalLemmas"
### 0.110s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "Draft.AdditionalLemmasMoreTemplates"
val templateLemmas =
   [("AdditionalLemmas.finite_valid_nodes",
     "finite {n. valid_node ?prog n}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("AdditionalLemmas.finite_labels", "finite {l. EX c. labels ?prog l c}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("AdditionalLemmas.finite_successors",
     "finite
       {n'.
        EX a'.
           valid_edge ?prog a' & sourcenode a' = ?n & targetnode a' = n'}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("AdditionalLemmas.valid_node_Entry_path",
     "valid_node ?prog ?n ==> EX as. While_CFG.path ?prog (_Entry_) as ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("AdditionalLemmas.valid_node_Exit_path",
     "valid_node ?prog ?n ==> EX as. While_CFG.path ?prog ?n as (_Exit_)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("AdditionalLemmas.path_SeqFirst",
     "While_CFG.path ?prog ?n ?as (_ ?l _) ==>
      While_CFG.path (?prog;; ?c\<^sub>2) ?n ?as (_ ?l _)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, t_empty), t_empty),
                    template_app (template_hole 2, template_var 4)),
                  template_var 3),
                template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, t_empty), t_empty),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0))),
                 template_var 3),
               template_var 2),
             template_app (template_hole 1, template_var 1))
           ))),
    ("AdditionalLemmas.inner_node_Entry_Exit_path",
     "?l < #:?prog ==>
      (EX as. While_CFG.path ?prog (_ ?l _) as (_Exit_)) &
      (EX as. While_CFG.path ?prog (_Entry_) as (_ ?l _))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 8, t_empty))
           ))),
    ("AdditionalLemmas.path_CondTrue",
     "While_CFG.path ?prog (_ ?l _) ?as ?n' ==>
      While_CFG.path (if (?b) ?prog else ?c\<^sub>2) ((_ ?l _) \<oplus> 1)
       (?as \<oplus>s 1) (?n' \<oplus> 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, t_empty), t_empty),
                    template_app (template_hole 5, template_var 5)),
                  template_app (template_hole 4, template_var 4)),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, t_empty), t_empty),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 5),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 4)),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1))
           ))),
    ("AdditionalLemmas.path_While",
     "While_CFG.path ?prog (_ ?l _) ?as (_ ?l' _) ==>
      While_CFG.path (while (?b) ?prog) ((_ ?l _) \<oplus> 2)
       (?as \<oplus>s 2) ((_ ?l' _) \<oplus> 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, t_empty), t_empty),
                    template_app (template_hole 7, template_var 4)),
                  template_app (template_hole 6, template_var 3)),
                template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, t_empty), t_empty),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 4))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_var 3)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))))
           ))),
    ("AdditionalLemmas.path_CondFalse",
     "While_CFG.path ?prog (_ ?l _) ?as ?n' ==>
      While_CFG.path (if (?b) ?c\<^sub>1 else ?prog)
       ((_ ?l _) \<oplus> #:?c\<^sub>1 + 1) (?as \<oplus>s #:?c\<^sub>1 + 1)
       (?n' \<oplus> #:?c\<^sub>1 + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, t_empty), t_empty),
                    template_app (template_hole 7, template_var 5)),
                  template_app (template_hole 6, template_var 4)),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, t_empty), t_empty),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0),
                       template_var 5))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 6, template_var 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 1))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)))
           ))),
    ("AdditionalLemmas.path_SeqSecond",
     "[| While_CFG.path ?prog ?n ?as ?n'; ?n ~= (_Entry_); ?as ~= [] |]
      ==> While_CFG.path (?c\<^sub>1;; ?prog) (?n \<oplus> #:?c\<^sub>1)
           (?as \<oplus>s #:?c\<^sub>1) (?n' \<oplus> #:?c\<^sub>1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, t_empty), t_empty),
                    template_app (template_hole 9, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 13, t_empty), t_empty),
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 4))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.AdditionalLemmasMoreTemplates"
### 0.396s elapsed time, 0.606s cpu time, 0.100s GC time
val it = (): unit
