Loading theory "Draft.Com" (required by "Draft.SemanticsMoreTemplates" via "Draft.Semantics" via "Draft.Labels")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.166s elapsed time, 0.688s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.932s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.384s elapsed time, 1.536s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.982s elapsed time, 3.714s cpu time, 0.869s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.091s elapsed time, 3.955s cpu time, 0.894s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 46 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Slicing/While/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 54 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Com"
### 2.160s elapsed time, 6.955s cpu time, 1.165s GC time
Loading theory "Draft.Labels" (required by "Draft.SemanticsMoreTemplates" via "Draft.Semantics")
### theory "HOL-Library.Tree"
### 1.998s elapsed time, 6.272s cpu time, 1.109s GC time
Loading theory "Draft.Templates" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 27 of "$AFP/Slicing/While/Labels.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###             ("\<^const>Groups.one_class.one"))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "labels"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.172s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemanticsMoreTemplates")
### theory "Draft.Labels"
### 0.090s elapsed time, 0.213s cpu time, 0.058s GC time
Loading theory "Draft.Semantics" (required by "Draft.SemanticsMoreTemplates")
### Ambiguous input (line 14 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_applC" ("_position" s)
###       ("\<^const>Com.cmd.LAss" ("_position" V)
###         ("_applC" ("_position" interpret)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" interpret)
###           ("_cargs" ("_position" e) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red"
  Proving monotonicity ...
### Ambiguous input (line 48 of "$AFP/Slicing/While/Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>step" ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("\<^const>Groups.zero_class.zero") ("_position" Skip)
###     ("_applC" ("_position" s)
###       ("\<^const>Com.cmd.LAss" ("_position" V)
###         ("_applC" ("_position" interpret)
###           ("_cargs" ("_position" e) ("_position" s)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>step" ("_position" e)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("\<^const>Groups.zero_class.zero") ("_position" Skip)
###       ("_applC" ("_position" s)
###         ("\<^const>Com.cmd.LAss" ("_position" V)
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" e) ("_position" s)))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>step" ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("\<^const>Groups.zero_class.zero") ("_position" Skip)
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" interpret)
###           ("_cargs" ("_position" e) ("_position" s)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>step" ("_position" e)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("\<^const>Groups.zero_class.zero") ("_position" Skip)
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" V)
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" e) ("_position" s)))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Slicing/While/Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus" ("_position" l)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus" ("_position" l')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>Groups.one_class.one"))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus" ("_position" l')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>Groups.one_class.one"))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus" ("_position" l)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" l')
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>Groups.one_class.one"))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>Groups.one_class.one"))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" l')
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/While/Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs"
###           ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("_cargs" ("_position" l)
###             ("\<^const>Com.cmd.Seq" ("_position" Skip)
###               ("_position" c\<^sub>2))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" labels)
###           ("_cargs"
###             ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###               ("_position" c\<^sub>2))
###             ("_cargs"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("_position" c\<^sub>2)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Seq" ("_position" Skip) ("_position" c\<^sub>2))
###       ("_position" s) ("_position" l) ("_position" c\<^sub>2)
###       ("_position" s)
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs"
###           ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("_cargs" ("_position" l)
###             ("\<^const>Com.cmd.Seq" ("_position" Skip)
###               ("_position" c\<^sub>2))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" labels)
###           ("_cargs"
###             ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###               ("_position" c\<^sub>2))
###             ("\<^const>Com.num_inner_nodes"
###               ("_applC" ("_position" c\<^sub>1) ("_position" c\<^sub>2))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Seq" ("_position" Skip) ("_position" c\<^sub>2))
###       ("_position" s) ("_position" l) ("_position" c\<^sub>2)
###       ("_position" s)
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs"
###           ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("_cargs" ("_position" l)
###             ("\<^const>Com.cmd.Seq" ("_position" Skip)
###               ("_position" c\<^sub>2))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" labels)
###           ("_cargs"
###             ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###               ("_position" c\<^sub>2))
###             ("_cargs"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("_position" c\<^sub>2)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Seq" ("_position" Skip) ("_position" c\<^sub>2))
###         ("_position" s) ("_position" l) ("_position" c\<^sub>2)
###         ("_position" s)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs"
###           ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("_cargs" ("_position" l)
###             ("\<^const>Com.cmd.Seq" ("_position" Skip)
###               ("_position" c\<^sub>2))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" labels)
###           ("_cargs"
###             ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###               ("_position" c\<^sub>2))
###             ("\<^const>Com.num_inner_nodes"
###               ("_applC" ("_position" c\<^sub>1) ("_position" c\<^sub>2))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Seq" ("_position" Skip) ("_position" c\<^sub>2))
###         ("_position" s) ("_position" l) ("_position" c\<^sub>2)
###         ("_position" s)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" cx) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>step" ("_position" cx)
###         ("\<^const>Com.cmd.Seq" ("_position" c)
###           ("\<^const>Com.cmd.While" ("_position" b) ("_position" cx)))
###         ("_position" s)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("\<^const>Com.cmd.Seq" ("_position" c')
###           ("\<^const>Com.cmd.While" ("_position" b) ("_position" cx)))
###         ("_position" s')
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" cx) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" cx))
###       ("\<^const>Com.cmd.Seq" ("_position" c)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" cx)))
###       ("_position" s)
###       ("\<^const>Groups.plus_class.plus" ("_position" l)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("\<^const>Com.cmd.Seq" ("_position" c')
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" cx)))
###       ("_position" s')
###       ("\<^const>Groups.plus_class.plus" ("_position" l')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("_cargs" ("_position" l)
###           ("\<^const>Com.cmd.Seq" ("_position" Skip)
###             ("\<^const>Com.cmd.While" ("_position" b) ("_position" c')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>step" ("_position" c')
###         ("\<^const>Com.cmd.Seq" ("_position" Skip)
###           ("\<^const>Com.cmd.While" ("_position" b) ("_position" c')))
###         ("_position" s) ("_position" l)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("_cargs" ("_position" l)
###           ("\<^const>Com.cmd.Seq" ("_position" Skip)
###             ("\<^const>Com.cmd.While" ("_position" b) ("_position" c')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>Com.cmd.Seq" ("_position" Skip)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c')))
###       ("_position" s) ("_position" l)
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_position" s) ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("\<^const>Groups.zero_class.zero")
###       ("_position" c\<^sub>1) ("_position" s)
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")
###         ("_position" c\<^sub>1) ("_position" s)
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/Slicing/While/Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("\<^const>Groups.zero_class.zero")
###       ("_position" c\<^sub>2) ("_position" s)
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")
###         ("_position" c\<^sub>2) ("_position" s)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("\<^const>Groups.zero_class.zero")
###       ("_position" c\<^sub>2) ("_position" s)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")
###         ("_position" c\<^sub>2) ("_position" s)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>step" ("_position" c)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")
###         ("\<^const>Com.cmd.Seq" ("_position" c)
###           ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###         ("_position" s) ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("_position" s) ("\<^const>Groups.zero_class.zero")
###       ("\<^const>Com.cmd.Seq" ("_position" c)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###       ("_position" s) ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>step" ("_position" c)
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("_position" s) ("\<^const>Groups.zero_class.zero")
###         ("_position" Skip) ("_position" s)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" b) ("_position" s)))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("_position" s) ("\<^const>Groups.zero_class.zero") ("_position" Skip)
###       ("_position" s) ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("\<^const>Com.cmd.Seq" ("_position" c) ("_position" c\<^sub>2))
###       ("_position" s) ("_position" l)
###       ("\<^const>Com.cmd.Seq" ("_position" c') ("_position" c\<^sub>2))
###       ("_position" s') ("_position" l'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^fixed>step" ("_position" c\<^sub>2)
###         ("\<^const>Com.cmd.Seq" ("_position" c) ("_position" c\<^sub>2))
###         ("_position" s) ("_position" l)
###         ("\<^const>Com.cmd.Seq" ("_position" c') ("_position" c\<^sub>2))
###         ("_position" s') ("_position" l')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus" ("_position" l)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus" ("_position" l')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("_position" c\<^sub>2))
###       ("_position" c) ("_position" s)
###       ("\<^const>Groups.plus_class.plus" ("_position" l)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" c') ("_position" s')
###       ("\<^const>Groups.plus_class.plus" ("_position" l')
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step" ("_position" prog) ("_position" c) ("_position" s)
###       ("_position" l) ("_position" c') ("_position" s') ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###       ("\<^fixed>step" ("_position" c\<^sub>2) ("_position" c)
###         ("_position" s)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" c') ("_position" s')
###         ("\<^const>Groups.plus_class.plus" ("_position" l')
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### Ambiguous input (line 95 of "$AFP/Slicing/While/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.step" ("_position" prog) ("_position" c)
###       ("_position" s) ("_position" l) ("_position" c') ("_position" s')
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>HOL.conj" ("_position" prog)
###           ("\<^const>Orderings.ord_class.less" ("_position" l')
###             ("\<^const>Com.num_inner_nodes" ("_position" prog))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.step" ("_position" prog) ("_position" c)
###       ("_position" s) ("_position" l) ("_position" c') ("_position" s')
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less" ("_position" l)
###         ("\<^const>Com.num_inner_nodes" ("_position" prog)))
###       ("\<^const>Orderings.ord_class.less" ("_position" l')
###         ("\<^const>Com.num_inner_nodes" ("_position" prog))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### 1 == Suc 0
### theory "Draft.Semantics"
### 0.257s elapsed time, 0.554s cpu time, 0.070s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 0.878s cpu time, 0.070s GC time
Loading theory "Draft.SemanticsMoreTemplates"
val templateLemmas =
   [("Semantics.step_red",
     "?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>
      \<langle>?c',?s',?l'\<rangle> ==>
      \<langle>?c,?s\<rangle> \<rightarrow> \<langle>?c',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Semantics.step_label_less",
     "?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>
      \<langle>?c',?s',?l'\<rangle> ==>
      ?l < #:?prog & ?l' < #:?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 6))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 6)))
           ))),
    ("Semantics.red_step",
     "[| labels ?prog ?l ?c;
         \<langle>?c,?s\<rangle> \<rightarrow> \<langle>?c',?s'\<rangle> |]
      ==> EX l'.
             ?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>
             \<langle>?c',?s',l'\<rangle> &
             labels ?prog l' ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Semantics.steps_reds",
     "?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>*
      \<langle>?c',?s',?l'\<rangle> ==>
      \<langle>?c,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, t_empty)),
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Semantics.reds_steps_bisimulation",
     "labels ?prog ?l ?c ==>
      \<langle>?c,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle> =
      (EX l'.
          ?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>*
          \<langle>?c',?s',l'\<rangle> &
          labels ?prog l' ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app (template_hole 9, t_empty)))),
    ("Semantics.reds_steps",
     "[| \<langle>?c,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle>;
         labels ?prog ?l ?c |]
      ==> EX l'.
             ?prog \<turnstile> \<langle>?c,?s,?l\<rangle> \<leadsto>*
             \<langle>?c',?s',l'\<rangle> &
             labels ?prog l' ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Semantics.converse_rtranclp_induct3",
     "[| ?r^** (?ax, ?ay, ?az) (?bx, ?by, ?bz); ?P ?bx ?by ?bz;
         !!a aa b ab ac ba.
            [| ?r (a, aa, b) (ab, ac, ba);
               ?r^** (ab, ac, ba) (?bx, ?by, ?bz); ?P ab ac ba |]
            ==> ?P a aa b |]
      ==> ?P ?ax ?ay ?az",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 6),
               template_var 5),
             template_var 4)
           ))),
    ("Semantics.red_induct",
     "[| \<langle>?x1a,?x1b\<rangle> \<rightarrow>
         \<langle>?x2a,?x2b\<rangle>;
         !!V e s. ?P (V:=e) s Skip (s(V := interpret e s));
         !!c\<^sub>1 s c\<^sub>1' s' c\<^sub>2.
            [| \<langle>c\<^sub>1,s\<rangle> \<rightarrow>
               \<langle>c\<^sub>1',s'\<rangle>;
               ?P c\<^sub>1 s c\<^sub>1' s' |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) s (c\<^sub>1';; c\<^sub>2) s';
         !!c\<^sub>2 s. ?P (Skip;; c\<^sub>2) s c\<^sub>2 s;
         !!b s c\<^sub>1 c\<^sub>2.
            interpret b s = Some true ==>
            ?P (if (b) c\<^sub>1 else c\<^sub>2) s c\<^sub>1 s;
         !!b s c\<^sub>1 c\<^sub>2.
            interpret b s = Some false ==>
            ?P (if (b) c\<^sub>1 else c\<^sub>2) s c\<^sub>2 s;
         !!b s c.
            interpret b s = Some true ==>
            ?P (while (b) c) s (c;; while (b) c) s;
         !!b s c.
            interpret b s = Some false ==> ?P (while (b) c) s Skip s |]
      ==> ?P ?x1a ?x1b ?x2a ?x2b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.SemanticsMoreTemplates"
### 0.358s elapsed time, 0.495s cpu time, 0.077s GC time
val it = (): unit
