Loading theory "Draft.AuxLemmas" (required by "Draft.WCFGMoreTemplates" via "Draft.WCFG" via "Draft.BasicDefs")
Loading theory "Draft.Com" (required by "Draft.WCFGMoreTemplates" via "Draft.WCFG")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.AuxLemmas"
### 0.060s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.WCFGMoreTemplates" via "Draft.WCFG")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.620s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.335s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.868s cpu time, 0.077s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.BasicDefs"
### 0.781s elapsed time, 3.064s cpu time, 0.372s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.091s elapsed time, 4.143s cpu time, 0.823s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.959s elapsed time, 3.314s cpu time, 0.719s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 46 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Slicing/While/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 54 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Com"
### 2.252s elapsed time, 7.653s cpu time, 1.232s GC time
Loading theory "Draft.WCFG" (required by "Draft.WCFGMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.023s elapsed time, 6.444s cpu time, 1.151s GC time
Loading theory "Draft.Templates" (required by "Draft.WCFGMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WCFGMoreTemplates")
### Ambiguous input (line 12 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("_position" i))
###     ("\<^const>WCFG.w_node.Node"
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry") ("_position" i))
###     ("\<^const>WCFG.w_node.Entry")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit") ("_position" i))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 17 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Exit")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Entry")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" s)
###           ("\<^const>Com.cmd.LAss" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_applC" ("_position" s)
###             ("\<^const>Com.cmd.LAss" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Slicing/While/WCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n'))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>While_CFG" ("_position" c')
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Slicing/While/WCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.w_node.Node"
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "While_CFG"
  Proving monotonicity ...
### Ambiguous input (line 365 of "$AFP/Slicing/While/WCFG.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" et)) ("_position" prog))
###           ("_position" n) ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("_position" prog))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)))
###       ("\<^const>WCFG.While_CFG" ("_position" prog)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>WCFG.While_CFG" ("_position" prog)
###             ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###             ("_position" n)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et) ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog)))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog)))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WCFG"
### 0.681s elapsed time, 1.467s cpu time, 0.157s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.562s elapsed time, 1.163s cpu time, 0.117s GC time
Loading theory "Draft.WCFGMoreTemplates"
val templateLemmas =
   [("WCFG.WCFG_intros",
     "?prog \<turnstile> (_Entry_) -(%s.
  False)\<^sub>\<surd>\<rightarrow> (_Exit_)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3),
             template_app (template_hole 2, t_empty)),
           template_hole 0)
         )),
    ("WCFG.WCFG_intros",
     "?prog \<turnstile> (_Entry_) -(%s.
  True)\<^sub>\<surd>\<rightarrow> (_ 0 _)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4),
             template_app (template_hole 3, t_empty)),
           template_app (template_hole 1, template_hole 0))
         )),
    ("WCFG.WCFG_Exit_no_sourcenode",
     "?prog \<turnstile> (_Exit_) -?et\<rightarrow> ?n' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WCFG.WCFG_Entry_no_targetnode",
     "?prog \<turnstile> ?n -?et\<rightarrow> (_Entry_) ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate (template_hole 0))),
    ("WCFG.WCFG_intros",
     "?V:=?e \<turnstile> (_ 1 _) -\<Up>id\<rightarrow> (_Exit_)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app (template_hole 4, template_hole 3)),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("WCFG.WCFG_intros",
     "while (?b) ?c' \<turnstile> (_ 1 _) -\<Up>id\<rightarrow> (_Exit_)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_app (template_hole 4, template_hole 3)),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("WCFG.Entry_label_incr",
     "(_Entry_) = ?n \<oplus> ?i ==> ?n = (_Entry_)",
     template_implication
      ([template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 1, template_hole 1))),
    ("WCFG.Exit_label_incr", "(_Exit_) = ?n \<oplus> ?i ==> ?n = (_Exit_)",
     template_implication
      ([template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 1, template_hole 1))),
    ("WCFG.label_incr_Entry",
     "?n \<oplus> ?i = (_Entry_) ==> ?n = (_Entry_)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("WCFG.label_incr_Exit", "?n \<oplus> ?i = (_Exit_) ==> ?n = (_Exit_)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("WCFG.label_incr_ge", "(_ ?l _) = ?n \<oplus> ?i ==> ?i <= ?l",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("WCFG.WCFG_targetlabel_less_num_nodes",
     "?prog \<turnstile> ?n -?et\<rightarrow> (_ ?l _) ==> ?l < #:?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 3)))),
    ("WCFG.WCFG_sourcelabel_less_num_nodes",
     "?prog \<turnstile> (_ ?l _) -?et\<rightarrow> ?n' ==> ?l < #:?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 3)))),
    ("WCFG.label_incr_inj", "?n \<oplus> ?c = ?n' \<oplus> ?c ==> ?n = ?n'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("WCFG.label_incr_start_Node_smaller",
     "(_ ?l _) = ?n \<oplus> ?i ==> ?n = (_ ?l - ?i _)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("WCFG.label_incr_0",
     "[| (_ 0 _) = ?n \<oplus> ?i; 0 < ?i |] ==> False",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_hole 3),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate (template_hole 0))),
    ("WCFG.label_incr_0_rev",
     "[| ?n \<oplus> ?i = (_ 0 _); 0 < ?i |] ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app (template_hole 3, template_hole 2)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate (template_hole 0))),
    ("WCFG.WCFG_intros",
     "?V:=?e \<turnstile> (_ 0 _) -\<Up>%s. s
     (?V := interpret ?e s)\<rightarrow> (_ 1 _)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, t_empty)),
           template_app (template_hole 5, template_hole 0))
         )),
    ("WCFG.label_incr_simp",
     "?n \<oplus> ?i = ?m \<oplus> ?i + ?j ==> ?n = ?m \<oplus> ?j",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("WCFG.label_incr_simp_rev",
     "?m \<oplus> ?j + ?i = ?n \<oplus> ?i ==> ?m \<oplus> ?j = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_var 0))),
    ("WCFG.WCFG_intros",
     "while (?b) ?c' \<turnstile> (_ 0 _) -(%s.
         interpret ?b s = Some false)\<^sub>\<surd>\<rightarrow> (_ 1 _)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_var 0)),
               template_app (template_hole 8, template_hole 7)),
             template_app (template_hole 6, t_empty)),
           template_app (template_hole 8, template_hole 0))
         )),
    ("WCFG.WCFG_edge_det",
     "[| ?prog \<turnstile> ?n -?et\<rightarrow> ?n';
         ?prog \<turnstile> ?n -?et'\<rightarrow> ?n' |]
      ==> ?et = ?et'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("WCFG.WCFG_intros",
     "if (?b) ?c\<^sub>1
      else ?c\<^sub>2 \<turnstile> (_ 0 _) -(%s.
          interpret ?b s =
          Some true)\<^sub>\<surd>\<rightarrow> (_ 0 _) \<oplus> 1",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app (template_hole 10, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 9, template_hole 8)),
             template_app (template_hole 7, t_empty)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 9, template_hole 8)),
             template_hole 0))
         )),
    ("WCFG.WCFG_intros",
     "[| ?c\<^sub>1 \<turnstile> ?n -?et\<rightarrow> ?n';
         ?n' ~= (_Exit_) |]
      ==> ?c\<^sub>1;; ?c\<^sub>2 \<turnstile> ?n -?et\<rightarrow> ?n'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WCFG.WCFG_intros",
     "while (?b) ?c' \<turnstile> (_ 0 _) -(%s.
         interpret ?b s =
         Some true)\<^sub>\<surd>\<rightarrow> (_ 0 _) \<oplus> 2",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_var 0)),
               template_app (template_hole 11, template_hole 10)),
             template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 11, template_hole 10)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))
         )),
    ("WCFG.less_num_nodes_edge_Exit",
     "(!!l et.
          [| l < #:?prog;
             ?prog \<turnstile> (_ l _) -et\<rightarrow> (_Exit_) |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("WCFG.WCFG_intros",
     "if (?b) ?c\<^sub>1
      else ?c\<^sub>2 \<turnstile> (_ 0 _) -(%s.
          interpret ?b s =
          Some
           false)\<^sub>\<surd>\<rightarrow> (_ 0 _) \<oplus> #:?c\<^sub>1 +
                        1",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_app (template_hole 12, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app (template_hole 11, template_hole 10)),
             template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 11, template_hole 10)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0)))
         )),
    ("WCFG.less_num_nodes_edge",
     "?l < #:?prog ==>
      EX n et.
         ?prog \<turnstile> n -et\<rightarrow> (_ ?l _) |
         ?prog \<turnstile> (_ ?l _) -et\<rightarrow> n",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("WCFG.WCFG_intros",
     "[| ?c\<^sub>1 \<turnstile> ?n -?et\<rightarrow> (_Exit_);
         ?n ~= (_Entry_) |]
      ==> ?c\<^sub>1;;
          ?c\<^sub>2 \<turnstile> ?n -?et\<rightarrow> (_ 0 _) \<oplus> #:?c\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 0)),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("WCFG.WCFG_intros",
     "[| ?c' \<turnstile> ?n -?et\<rightarrow> (_Exit_); ?n ~= (_Entry_) |]
      ==> while (?b) ?c' \<turnstile> ?n \<oplus> 2 -?et\<rightarrow> (_ 0 _)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 10)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_var 1),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("WCFG.WCFG_intros",
     "[| ?c\<^sub>1 \<turnstile> ?n -?et\<rightarrow> ?n';
         ?n ~= (_Entry_) |]
      ==> if (?b) ?c\<^sub>1
          else ?c\<^sub>2 \<turnstile> ?n \<oplus> 1 -?et\<rightarrow> ?n' \<oplus> 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 5),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_hole 0)),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("WCFG.WCFG_intros",
     "[| ?c\<^sub>2 \<turnstile> ?n -?et\<rightarrow> ?n';
         ?n ~= (_Entry_) |]
      ==> ?c\<^sub>1;;
          ?c\<^sub>2 \<turnstile> ?n \<oplus> #:?c\<^sub>1 -?et\<rightarrow> ?n' \<oplus> #:?c\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 0))),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("WCFG.WCFG_EntryD",
     "?prog \<turnstile> (_Entry_) -?et\<rightarrow> ?n' ==>
      ?n' = (_Exit_) & ?et = (%s. False)\<^sub>\<surd> |
      ?n' = (_ 0 _) & ?et = (%s. True)\<^sub>\<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 2),
                  template_hole 10),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 4, t_empty)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 4, t_empty))))
           ))),
    ("WCFG.WCFG_intros",
     "[| ?c\<^sub>2 \<turnstile> ?n -?et\<rightarrow> ?n';
         ?n ~= (_Entry_) |]
      ==> if (?b) ?c\<^sub>1
          else ?c\<^sub>2 \<turnstile> ?n \<oplus> #:?c\<^sub>1 +
             1 -?et\<rightarrow> ?n' \<oplus> #:?c\<^sub>1 + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0))),
               template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)))
           ))),
    ("WCFG.WCFG_intros",
     "[| ?c' \<turnstile> ?n -?et\<rightarrow> ?n'; ?n ~= (_Entry_);
         ?n' ~= (_Exit_) |]
      ==> while (?b) ?c' \<turnstile> ?n \<oplus> 2 -?et\<rightarrow> ?n' \<oplus> 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))))
           ))),
    ("WCFG.WCFG_deterministic",
     "[| ?prog \<turnstile> ?n\<^sub>1 -?et\<^sub>1\<rightarrow> ?n\<^sub>1';
         ?prog \<turnstile> ?n\<^sub>2 -?et\<^sub>2\<rightarrow> ?n\<^sub>2';
         ?n\<^sub>1 = ?n\<^sub>2; ?n\<^sub>1' ~= ?n\<^sub>2' |]
      ==> EX Q Q'.
             ?et\<^sub>1 = (Q)\<^sub>\<surd> &
             ?et\<^sub>2 = (Q')\<^sub>\<surd> &
             (ALL s. (Q s --> ~ Q' s) & (Q' s --> ~ Q s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_var 2),
        template_negation
         (template_equation (template_var 3, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("WCFG.WCFG_induct",
     "[| ?x1a \<turnstile> ?x2a -?x3a\<rightarrow> ?x4a;
         !!prog. ?P prog (_Entry_) (%s. False)\<^sub>\<surd> (_Exit_);
         !!prog. ?P prog (_Entry_) (%s. True)\<^sub>\<surd> (_ 0 _);
         ?P Skip (_ 0 _) \<Up>id (_Exit_);
         !!V e. ?P (V:=e) (_ 0 _) \<Up>%s. s(V := interpret e s) (_ 1 _);
         !!V e. ?P (V:=e) (_ 1 _) \<Up>id (_Exit_);
         !!c\<^sub>1 n et n' c\<^sub>2.
            [| c\<^sub>1 \<turnstile> n -et\<rightarrow> n';
               ?P c\<^sub>1 n et n'; n' ~= (_Exit_) |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) n et n';
         !!c\<^sub>1 n et c\<^sub>2.
            [| c\<^sub>1 \<turnstile> n -et\<rightarrow> (_Exit_);
               ?P c\<^sub>1 n et (_Exit_); n ~= (_Entry_) |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) n et
                 ((_ 0 _) \<oplus> #:c\<^sub>1);
         !!c\<^sub>2 n et n' c\<^sub>1.
            [| c\<^sub>2 \<turnstile> n -et\<rightarrow> n';
               ?P c\<^sub>2 n et n'; n ~= (_Entry_) |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) (n \<oplus> #:c\<^sub>1) et
                 (n' \<oplus> #:c\<^sub>1);
         !!b c\<^sub>1 c\<^sub>2.
            ?P (if (b) c\<^sub>1 else c\<^sub>2) (_ 0 _)
             (%s. interpret b s = Some true)\<^sub>\<surd>
             ((_ 0 _) \<oplus> 1);
         !!b c\<^sub>1 c\<^sub>2.
            ?P (if (b) c\<^sub>1 else c\<^sub>2) (_ 0 _)
             (%s. interpret b s = Some false)\<^sub>\<surd>
             ((_ 0 _) \<oplus> #:c\<^sub>1 + 1);
         !!c\<^sub>1 n et n' b c\<^sub>2.
            [| c\<^sub>1 \<turnstile> n -et\<rightarrow> n';
               ?P c\<^sub>1 n et n'; n ~= (_Entry_) |]
            ==> ?P (if (b) c\<^sub>1 else c\<^sub>2) (n \<oplus> 1) et
                 (n' \<oplus> 1);
         !!c\<^sub>2 n et n' b c\<^sub>1.
            [| c\<^sub>2 \<turnstile> n -et\<rightarrow> n';
               ?P c\<^sub>2 n et n'; n ~= (_Entry_) |]
            ==> ?P (if (b) c\<^sub>1 else c\<^sub>2)
                 (n \<oplus> #:c\<^sub>1 + 1) et
                 (n' \<oplus> #:c\<^sub>1 + 1);
         !!b c'.
            ?P (while (b) c') (_ 0 _)
             (%s. interpret b s = Some true)\<^sub>\<surd>
             ((_ 0 _) \<oplus> 2);
         !!b c'.
            ?P (while (b) c') (_ 0 _)
             (%s. interpret b s = Some false)\<^sub>\<surd> (_ 1 _);
         !!b c'. ?P (while (b) c') (_ 1 _) \<Up>id (_Exit_);
         !!c' n et n' b.
            [| c' \<turnstile> n -et\<rightarrow> n'; ?P c' n et n';
               n ~= (_Entry_); n' ~= (_Exit_) |]
            ==> ?P (while (b) c') (n \<oplus> 2) et (n' \<oplus> 2);
         !!c' n et b.
            [| c' \<turnstile> n -et\<rightarrow> (_Exit_);
               ?P c' n et (_Exit_); n ~= (_Entry_) |]
            ==> ?P (while (b) c') (n \<oplus> 2) et (_ 0 _) |]
      ==> ?P ?x1a ?x2a ?x3a ?x4a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 33, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_var 0, template_hole 24),
                  template_app (template_hole 26, template_hole 25)),
                template_app (template_hole 23, template_hole 22)),
              template_hole 28)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate (template_app (template_hole 32, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WCFG.WCFG_elims",
     "[| ?a1.0 \<turnstile> ?a2.0 -?a3.0\<rightarrow> ?a4.0;
         !!prog.
            [| ?a1.0 = prog; ?a2.0 = (_Entry_);
               ?a3.0 = (%s. False)\<^sub>\<surd>; ?a4.0 = (_Exit_) |]
            ==> ?P;
         !!prog.
            [| ?a1.0 = prog; ?a2.0 = (_Entry_);
               ?a3.0 = (%s. True)\<^sub>\<surd>; ?a4.0 = (_ 0 _) |]
            ==> ?P;
         [| ?a1.0 = Skip; ?a2.0 = (_ 0 _); ?a3.0 = \<Up>id;
            ?a4.0 = (_Exit_) |]
         ==> ?P;
         !!V e.
            [| ?a1.0 = V:=e; ?a2.0 = (_ 0 _);
               ?a3.0 = \<Up>%s. s(V := interpret e s); ?a4.0 = (_ 1 _) |]
            ==> ?P;
         !!V e.
            [| ?a1.0 = V:=e; ?a2.0 = (_ 1 _); ?a3.0 = \<Up>id;
               ?a4.0 = (_Exit_) |]
            ==> ?P;
         !!c\<^sub>1 n et n' c\<^sub>2.
            [| ?a1.0 = c\<^sub>1;; c\<^sub>2; ?a2.0 = n; ?a3.0 = et;
               ?a4.0 = n'; c\<^sub>1 \<turnstile> n -et\<rightarrow> n';
               n' ~= (_Exit_) |]
            ==> ?P;
         !!c\<^sub>1 n et c\<^sub>2.
            [| ?a1.0 = c\<^sub>1;; c\<^sub>2; ?a2.0 = n; ?a3.0 = et;
               ?a4.0 = (_ 0 _) \<oplus> #:c\<^sub>1;
               c\<^sub>1 \<turnstile> n -et\<rightarrow> (_Exit_);
               n ~= (_Entry_) |]
            ==> ?P;
         !!c\<^sub>2 n et n' c\<^sub>1.
            [| ?a1.0 = c\<^sub>1;; c\<^sub>2;
               ?a2.0 = n \<oplus> #:c\<^sub>1; ?a3.0 = et;
               ?a4.0 = n' \<oplus> #:c\<^sub>1;
               c\<^sub>2 \<turnstile> n -et\<rightarrow> n';
               n ~= (_Entry_) |]
            ==> ?P;
         !!b c\<^sub>1 c\<^sub>2.
            [| ?a1.0 = if (b) c\<^sub>1 else c\<^sub>2; ?a2.0 = (_ 0 _);
               ?a3.0 = (%s. interpret b s = Some true)\<^sub>\<surd>;
               ?a4.0 = (_ 0 _) \<oplus> 1 |]
            ==> ?P;
         !!b c\<^sub>1 c\<^sub>2.
            [| ?a1.0 = if (b) c\<^sub>1 else c\<^sub>2; ?a2.0 = (_ 0 _);
               ?a3.0 = (%s. interpret b s = Some false)\<^sub>\<surd>;
               ?a4.0 = (_ 0 _) \<oplus> #:c\<^sub>1 + 1 |]
            ==> ?P;
         !!c\<^sub>1 n et n' b c\<^sub>2.
            [| ?a1.0 = if (b) c\<^sub>1 else c\<^sub>2;
               ?a2.0 = n \<oplus> 1; ?a3.0 = et; ?a4.0 = n' \<oplus> 1;
               c\<^sub>1 \<turnstile> n -et\<rightarrow> n';
               n ~= (_Entry_) |]
            ==> ?P;
         !!c\<^sub>2 n et n' b c\<^sub>1.
            [| ?a1.0 = if (b) c\<^sub>1 else c\<^sub>2;
               ?a2.0 = n \<oplus> #:c\<^sub>1 + 1; ?a3.0 = et;
               ?a4.0 = n' \<oplus> #:c\<^sub>1 + 1;
               c\<^sub>2 \<turnstile> n -et\<rightarrow> n';
               n ~= (_Entry_) |]
            ==> ?P;
         !!b c'.
            [| ?a1.0 = while (b) c'; ?a2.0 = (_ 0 _);
               ?a3.0 = (%s. interpret b s = Some true)\<^sub>\<surd>;
               ?a4.0 = (_ 0 _) \<oplus> 2 |]
            ==> ?P;
         !!b c'.
            [| ?a1.0 = while (b) c'; ?a2.0 = (_ 0 _);
               ?a3.0 = (%s. interpret b s = Some false)\<^sub>\<surd>;
               ?a4.0 = (_ 1 _) |]
            ==> ?P;
         !!b c'.
            [| ?a1.0 = while (b) c'; ?a2.0 = (_ 1 _); ?a3.0 = \<Up>id;
               ?a4.0 = (_Exit_) |]
            ==> ?P;
         !!c' n et n' b.
            [| ?a1.0 = while (b) c'; ?a2.0 = n \<oplus> 2; ?a3.0 = et;
               ?a4.0 = n' \<oplus> 2; c' \<turnstile> n -et\<rightarrow> n';
               n ~= (_Entry_); n' ~= (_Exit_) |]
            ==> ?P;
         !!c' n et b.
            [| ?a1.0 = while (b) c'; ?a2.0 = n \<oplus> 2; ?a3.0 = et;
               ?a4.0 = (_ 0 _); c' \<turnstile> n -et\<rightarrow> (_Exit_);
               n ~= (_Entry_) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 35, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_implication
         ([template_equation (template_var 4, template_hole 23)],
          template_implication
           ([template_equation
              (template_var 3,
               template_app (template_hole 25, template_hole 24))],
            template_implication
             ([template_equation
                (template_var 2,
                 template_app (template_hole 22, template_hole 21))],
              template_implication
               ([template_equation (template_var 1, template_hole 27)],
                template_predicate (template_var 0))))),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.WCFGMoreTemplates"
### 0.420s elapsed time, 0.585s cpu time, 0.081s GC time
val it = (): unit
