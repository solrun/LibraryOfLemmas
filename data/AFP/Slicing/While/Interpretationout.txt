Loading theory "Draft.Com" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WCFG")
Loading theory "Draft.AuxLemmas" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WCFG" via "Draft.BasicDefs")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.AuxLemmas"
### 0.063s elapsed time, 0.289s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WCFG")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.532s cpu time, 0.054s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.792s cpu time, 0.083s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.384s cpu time, 0.137s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.BasicDefs"
### 0.743s elapsed time, 2.905s cpu time, 0.393s GC time
Loading theory "Draft.CFG" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.CFGExit")
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for inductive predicate(s) "path"
consts
  snth :: "'a stream => nat => 'a"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CFG"
### 0.335s elapsed time, 1.176s cpu time, 0.526s GC time
Loading theory "Draft.CFGExit" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.CFGExit"
### 0.106s elapsed time, 0.408s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.113s elapsed time, 4.236s cpu time, 0.920s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.815s elapsed time, 2.706s cpu time, 0.382s GC time
### Ambiguous input (line 46 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Slicing/While/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/Slicing/While/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 54 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Slicing/While/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Com"
### 2.505s elapsed time, 8.701s cpu time, 2.077s GC time
Loading theory "Draft.WCFG" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation")
### theory "HOL-Library.Tree"
### 2.322s elapsed time, 7.677s cpu time, 1.971s GC time
Loading theory "Draft.Templates" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.InterpretationMoreTemplates")
### Ambiguous input (line 12 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("_position" i))
###     ("\<^const>WCFG.w_node.Node"
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Node" ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry") ("_position" i))
###     ("\<^const>WCFG.w_node.Entry")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Entry")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit") ("_position" i))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("\<^const>WCFG.w_node.Exit")
###     ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 17 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Exit")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Exit")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Exit"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry") ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Entry")
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.w_node.Entry")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("\<^const>WCFG.w_node.Entry"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("\<^const>WCFG.w_node.Entry"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>WCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Slicing/While/WCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>WCFG.w_node.Node"
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>WCFG.w_node.Node" ("_position" l))
###       ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WCFG.label_incr" ("_position" n) ("_position" i))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_applC" ("_position" s)
###           ("\<^const>Com.cmd.LAss" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_applC" ("_position" s)
###             ("\<^const>Com.cmd.LAss" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Update"
###       ("_lambda" ("_position" s)
###         ("_Update" ("_position" s)
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" e) ("_position" s)))))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Update"
###         ("_lambda" ("_position" s)
###           ("_Update" ("_position" s)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" s)))))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>While_CFG" ("_position" e)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n')
###           ("\<^const>WCFG.w_node.Exit")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 81 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.label_incr"
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node"
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Slicing/While/WCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/Slicing/While/WCFG.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>WCFG.label_incr"
###         ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n'))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>While_CFG" ("_position" c')
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###       ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###       ("\<^const>WCFG.w_node.Exit"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.one_class.one"))
###     ("\<^const>BasicDefs.edge_kind.Update" ("_position" id))
###     ("\<^const>WCFG.w_node.Exit")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" true)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Slicing/While/WCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>While_CFG" ("_position" c')
###           ("\<^const>WCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n')
###             ("\<^const>WCFG.w_node.Exit"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.label_incr"
###       ("\<^fixed>While_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Slicing/While/WCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>While_CFG" ("_position" c')
###         ("\<^const>WCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>WCFG.w_node.Node"
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>While_CFG" ("_position" c') ("_position" n)
###         ("_position" et) ("\<^const>WCFG.w_node.Exit")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n)
###           ("\<^const>WCFG.w_node.Entry")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>WCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Slicing/While/WCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^fixed>While_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>While_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>BasicDefs.edge_kind.Predicate"
###       ("_lambda" ("_position" s)
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" interpret)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>WCFG.label_incr"
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###       ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>BasicDefs.edge_kind.Predicate"
###         ("_lambda" ("_position" s)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" interpret)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" Some) ("_position" false)))))
###       ("\<^const>WCFG.label_incr"
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WCFG.label_incr"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>While_CFG" ("_position" c\<^sub>2)
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>BasicDefs.edge_kind.Predicate"
###           ("_lambda" ("_position" s)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" b) ("_position" s)))
###               ("_applC" ("_position" Some) ("_position" false)))))
###         ("\<^const>WCFG.w_node.Node" ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "While_CFG"
  Proving monotonicity ...
### Ambiguous input (line 365 of "$AFP/Slicing/While/WCFG.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" et)) ("_position" prog))
###           ("_position" n) ("_position" et)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("_position" prog))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)))
###       ("\<^const>WCFG.While_CFG" ("_position" prog)
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("\<^const>WCFG.While_CFG" ("_position" prog)
###             ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###             ("_position" n)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>HOL.disj"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et) ("\<^const>WCFG.w_node.Node" ("_position" l)))
###         ("\<^const>WCFG.While_CFG" ("_position" prog)
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###           ("_position" prog))
###         ("_position" n) ("_position" et)
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog)))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("_position" prog))
###       ("_position" n) ("_position" et)
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###           ("_position" prog))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###         ("_position" et)
###         ("\<^const>WCFG.While_CFG"
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))
###           ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###           ("_position" n))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WCFG.While_CFG"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog))))
###       ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n) ("_position" et))
###       ("\<^const>WCFG.While_CFG"
###         ("\<^const>WCFG.While_CFG" ("_position" prog) ("_position" n)
###           ("_position" et)
###           ("\<^const>HOL.disj" ("\<^const>WCFG.w_node.Node" ("_position" l))
###             ("_position" prog)))
###         ("\<^const>WCFG.w_node.Node" ("_position" l)) ("_position" et)
###         ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WCFG"
### 0.723s elapsed time, 1.557s cpu time, 0.190s GC time
Loading theory "Draft.Interpretation" (required by "Draft.InterpretationMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.609s elapsed time, 1.322s cpu time, 0.159s GC time
### Ambiguous input (line 21 of "$AFP/Slicing/While/Interpretation.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_edge)
###     ("_cargs" ("_position" prog) ("_position" a)))
###   ("\<^const>WCFG.While_CFG" ("_position" prog)
###     ("_applC" ("_position" sourcenode) ("_position" a))
###     ("_applC" ("_position" kind) ("_position" a))
###     ("_applC" ("_position" targetnode) ("_position" a))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_edge)
###     ("_cargs" ("_position" prog) ("_position" a)))
###   ("_applC"
###     ("\<^const>WCFG.While_CFG" ("_position" prog)
###       ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_applC" ("_position" kind) ("_position" a))
###       ("_position" targetnode))
###     ("_position" a)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Interpretation"
### 0.177s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.InterpretationMoreTemplates"
val templateLemmas =
   [("Interpretation.While_CFG_aux",
     "CFG sourcenode targetnode (valid_edge ?prog) (_Entry_)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, t_empty), t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Interpretation.While_CFGExit_aux",
     "CFGExit sourcenode targetnode kind (valid_edge ?prog) (_Entry_)
       (_Exit_)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, t_empty), t_empty),
                 t_empty),
               template_app (template_hole 2, template_var 0)),
             template_hole 1),
           template_hole 0)
         ))]:
   (string * thm * template) list
### theory "Draft.InterpretationMoreTemplates"
### 0.383s elapsed time, 0.550s cpu time, 0.074s GC time
val it = (): unit
