Loading theory "Draft.AuxLemmas" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence" via "Draft.CFG" via "Draft.BasicDefs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.AuxLemmas"
### 0.060s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence" via "Draft.CFG")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.589s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.271s elapsed time, 1.107s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.505s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.BasicDefs"
### 0.699s elapsed time, 2.751s cpu time, 0.309s GC time
Loading theory "Draft.CFG" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.CFG"
### 0.174s elapsed time, 0.684s cpu time, 0.072s GC time
Loading theory "Draft.CFG_wf" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence" via "Draft.DataDependence" via "Draft.DynDataDependence")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### theory "Draft.CFG_wf"
### 0.270s elapsed time, 0.904s cpu time, 0.541s GC time
Loading theory "Draft.DynDataDependence" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence" via "Draft.DataDependence")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 15 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.list.Cons"
###       ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###         ("_position" n') ("_position" a))
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Ambiguous input (line 20 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DynDataDependence"
### 0.082s elapsed time, 0.318s cpu time, 0.041s GC time
Loading theory "Draft.DataDependence" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.WeakOrderDependence")
### theory "HOL-Library.BigO"
### 0.986s elapsed time, 3.730s cpu time, 0.814s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 9 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence"
###     ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" V) ("_position" n') ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_data_dependence" ("_position" n)
###           ("_position" V) ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Def) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a')
###                   ("_position" as'))
###                 ("_position" n'))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Def) ("_position" n)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("_position" n'))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DataDependence"
### 0.059s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "Draft.WeakOrderDependence" (required by "Draft.WeakOrderDependenceMoreTemplates")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/WeakOrderDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("\<^const>Pure.eq" ("_position" n\<^sub>2)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###           ("_position" n\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("_position" n\<^sub>1))
###               ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("_position" n\<^sub>2))
###                 ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))
###             ("\<^const>HOL.Ex_binder" ("_position" a)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" sourcenode) ("_position" a)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>1))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>2))
###                             ("\<^const>Set.member" ("_position" n\<^sub>1)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>2))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>1))
###                             ("\<^const>Set.member" ("_position" n\<^sub>2)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("_position" n\<^sub>2))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###       ("_position" n\<^sub>2))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("_position" n\<^sub>1))
###           ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Ex_binder" ("_position" as)
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("_position" n\<^sub>2))
###             ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))))
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>1))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>2))
###                         ("\<^const>Set.member" ("_position" n\<^sub>1)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>2))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>1))
###                         ("\<^const>Set.member" ("_position" n\<^sub>2)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "wod_backward_slicep"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.085s cpu time, 0.895s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.WeakOrderDependence"
### 0.205s elapsed time, 0.574s cpu time, 0.081s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.924s elapsed time, 5.696s cpu time, 1.055s GC time
Loading theory "Draft.Templates" (required by "Draft.WeakOrderDependenceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WeakOrderDependenceMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.463s elapsed time, 0.500s cpu time, 0.045s GC time
Loading theory "Draft.WeakOrderDependenceMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.WeakOrderDependenceMoreTemplates"
### 0.324s elapsed time, 0.452s cpu time, 0.058s GC time
val it = (): unit
