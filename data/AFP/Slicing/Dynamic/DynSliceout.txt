Loading theory "Draft.AuxLemmas" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf" via "Draft.CFG" via "Draft.BasicDefs")
Loading theory "Draft.BitVector" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ambiguous input (line 8 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>bv_leqs" ("\<^const>List.list.Nil")
###       ("\<^const>List.list.Nil"))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>bv_leqs" ("\<^const>List.list.Nil")
###     ("\<^const>HOL.eq" ("\<^const>List.list.Nil") ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>bv_leqs"
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###       ("\<^const>List.list.Cons" ("_position" y) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_position" x) ("_position" y))
###       ("\<^fixed>bv_leqs" ("_position" xs) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>bv_leqs"
###     ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" y) ("_position" ys))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" x) ("_position" y))
###         ("\<^fixed>bv_leqs" ("_position" xs) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>bv_leqs"
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###       ("\<^const>List.list.Cons" ("_position" y) ("_position" ys)))
###     ("\<^fixed>bv_leqs"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" x) ("_position" y))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>bv_leqs"
###     ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###     ("\<^const>HOL.eq"
###       ("\<^const>List.list.Cons" ("_position" y) ("_position" ys))
###       ("\<^fixed>bv_leqs"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.implies" ("_position" x) ("_position" y))
###           ("_position" xs))
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>bv_leqs" ("_position" xs) ("_position" ys))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>bv_leqs" ("_position" xs)
###     ("\<^const>HOL.eq" ("_position" ys) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.AuxLemmas"
### 0.064s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf" via "Draft.CFG")
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.526s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 29 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>List.append" ("_position" xs) ("_position" xs'))
###         ("\<^const>List.append" ("_position" ys) ("_position" ys'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BitVector.bv_leqs"
###       ("\<^const>HOL.conj"
###         ("\<^const>BitVector.bv_leqs" ("_position" xs) ("_position" ys))
###         ("_position" xs'))
###       ("_position" ys'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>List.append" ("_position" xs) ("_position" xs'))
###         ("\<^const>List.append" ("_position" ys) ("_position" ys'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>BitVector.bv_leqs" ("_position" xs) ("_position" ys))
###       ("\<^const>BitVector.bv_leqs" ("_position" xs') ("_position" ys')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>List.append" ("_position" xs) ("_position" xs'))
###         ("\<^const>List.append" ("_position" ys) ("_position" ys'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BitVector.bv_leqs" ("_position" xs)
###       ("\<^const>HOL.conj" ("_position" ys)
###         ("\<^const>BitVector.bv_leqs" ("_position" xs')
###           ("_position" ys'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>List.append" ("_position" xs) ("_position" xs'))
###         ("\<^const>List.append" ("_position" ys) ("_position" ys'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BitVector.bv_leqs"
###       ("\<^const>BitVector.bv_leqs" ("_position" xs)
###         ("\<^const>HOL.conj" ("_position" ys) ("_position" xs')))
###       ("_position" ys'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>List.append" ("_position" xs) ("_position" xs'))
###         ("\<^const>List.append" ("_position" ys) ("_position" ys'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BitVector.bv_leqs" ("_position" xs)
###       ("\<^const>BitVector.bv_leqs"
###         ("\<^const>HOL.conj" ("_position" ys) ("_position" xs'))
###         ("_position" ys')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>BitVector.bv_leqs" ("_position" xs) ("_position" ys))
###     ("\<^const>HOL.conj"
###       ("_All_less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>List.nth" ("_position" xs) ("_position" i))
###           ("\<^const>List.nth" ("_position" ys) ("_position" i))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###         ("_applC" ("_position" length) ("_position" ys))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BitVector.bv_leqs" ("_position" xs)
###     ("\<^const>HOL.eq" ("_position" ys)
###       ("\<^const>HOL.conj"
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" xs))
###           ("\<^const>HOL.implies"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("\<^const>List.nth" ("_position" ys) ("_position" i))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" xs))
###           ("_applC" ("_position" length) ("_position" ys)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ambiguous input (line 103 of "$AFP/Slicing/Dynamic/BitVector.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>bv_less" ("_position" xs) ("_position" ys))
###   ("\<^const>HOL.not_equal"
###     ("\<^const>BitVector.bv_leqs" ("_position" xs)
###       ("\<^const>HOL.conj" ("_position" ys) ("_position" xs)))
###     ("_position" ys)))
### ("\<^const>Pure.eq" ("\<^fixed>bv_less" ("_position" xs) ("_position" ys))
###   ("\<^const>HOL.conj"
###     ("\<^const>BitVector.bv_leqs" ("_position" xs) ("_position" ys))
###     ("\<^const>HOL.not_equal" ("_position" xs) ("_position" ys))))
### ("\<^const>Pure.eq" ("\<^fixed>bv_less" ("_position" xs) ("_position" ys))
###   ("\<^const>BitVector.bv_leqs" ("_position" xs)
###     ("\<^const>HOL.conj" ("_position" ys)
###       ("\<^const>HOL.not_equal" ("_position" xs) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.BitVector"
### 0.309s elapsed time, 1.237s cpu time, 0.140s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.851s cpu time, 0.096s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.505s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.BasicDefs"
### 0.754s elapsed time, 2.962s cpu time, 0.323s GC time
Loading theory "Draft.CFG" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.CFG"
### 0.189s elapsed time, 0.733s cpu time, 0.119s GC time
Loading theory "Draft.CFGExit" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.CFGExit_wf")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.CFGExit"
### 0.088s elapsed time, 0.350s cpu time, 0.000s GC time
Loading theory "Draft.Postdomination" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynStandardControlDependence")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 17 of "$AFP/Slicing/Basic/Postdomination.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^fixed>Exit"))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^fixed>Exit"))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies" ("\<^fixed>Exit")
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies" ("\<^fixed>Exit")
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.BigO"
### 1.036s elapsed time, 3.942s cpu time, 0.871s GC time
Loading theory "Draft.CFG_wf" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence")
### Ambiguous input (line 182 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate" ("\<^fixed>Exit")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.postdominate" ("\<^fixed>Exit") ("_position" n)))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 334 of "$AFP/Slicing/Basic/Postdomination.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>Set.member"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" nx)
###                       ("\<^const>Orderings.ord_class.greater_eq"
###                         ("_applC" ("_position" length) ("_position" as))
###                         ("_position" k)))
###                     ("_position" n')))
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("_position" n')))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k)))
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("\<^const>Set.member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFG_wf"
### 0.099s elapsed time, 0.385s cpu time, 0.043s GC time
Loading theory "Draft.CFGExit_wf" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
### theory "HOL-Library.Stream"
### 1.125s elapsed time, 4.296s cpu time, 0.913s GC time
Loading theory "Draft.DynDataDependence" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
### Ambiguous input (line 341 of "$AFP/Slicing/Basic/Postdomination.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>Set.member"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>Orderings.ord_class.greater_eq"
###               ("_applC" ("_position" length) ("_position" as))
###               ("_position" k)))
###           ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k)))
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k))))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" nx))
###         ("\<^const>Orderings.ord_class.greater_eq"
###           ("_applC" ("_position" length) ("_position" as)) ("_position" k)))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("_applC" ("_position" length) ("_position" as))))
###         ("_position" k))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### theory "Draft.Postdomination"
### 0.463s elapsed time, 1.674s cpu time, 0.611s GC time
Loading theory "Draft.DynStandardControlDependence" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
### Ambiguous input (line 15 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.list.Cons"
###       ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###         ("_position" n') ("_position" a))
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.DynDataDependence"
### 0.082s elapsed time, 0.324s cpu time, 0.000s GC time
Loading theory "Draft.DynWeakControlDependence" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 30 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" targetnodes) ("_position" as)))
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n'')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("_position" n')
###     ("\<^const>HOL.eq" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.DynWeakControlDependence"
### 0.085s elapsed time, 0.334s cpu time, 0.065s GC time
Loading theory "Draft.SemanticsCFG" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice")
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_)"
### Ambiguous input (line 217 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###       ("_position" n) ("_position" a))
###     ("_position" as')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###     ("_position" n)
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFGExit_wf"
### 0.201s elapsed time, 0.791s cpu time, 0.065s GC time
### theory "Draft.DynStandardControlDependence"
### 0.128s elapsed time, 0.492s cpu time, 0.065s GC time
Loading theory "Draft.DynPDG" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice" via "Draft.DependentLiveVariables")
### Ambiguous input (line 13 of "$AFP/Slicing/Basic/SemanticsCFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" n')))))
###         ("_position" c')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s))))))
###         ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("\<^fixed>identifies" ("_position" n')
###                 ("_position" c')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" transfers)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n')
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))))
###           ("_position" s'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_) sem
      identifies"
### theory "Draft.SemanticsCFG"
### 0.074s elapsed time, 0.238s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n') ("_position" as)))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.conj" ("_position" n')
###         ("\<^const>HOL.not_equal" ("_position" as)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.not_equal" ("_position" as)
###         ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale DynPDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
  assumes
    "DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_) dyn_control_dependence"
### Ambiguous input (line 37 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" DynPDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" None)
###             ("_cargs" ("_position" as) ("_position" n'))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cdep_edge" ("_position" n) ("_position" as) ("_position" n'))
###   ("_applC" ("_position" DynPDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_position" None)
###         ("_cargs" ("_position" as) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" DynPDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###             ("_cargs" ("_position" as) ("_position" n'))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" as)
###     ("_position" n'))
###   ("_applC" ("_position" DynPDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###         ("_cargs" ("_position" as) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "DynPDG_edge"
  Proving monotonicity ...
Proofs for inductive predicate(s) "DynPDG_path"
  Proving monotonicity ...
### Ambiguous input (line 61 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###     ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" as) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" asx) ("_position" asx')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.cdep_edge" ("_position" n)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" V)
###           ("_idts" ("_position" asx) ("_position" asx'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###           ("_position" asx) ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.DynPDG_path" ("_position" n'') ("_position" asx')
###             ("_position" n'))
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" asx)
###               ("_position" asx'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###             ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" asx) ("_position" asx')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.cdep_edge" ("_position" n)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" V)
###                   ("_idts" ("_position" asx) ("_position" asx'))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" n'')
###             ("_idts" ("_position" asx) ("_position" asx')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.cdep_edge" ("_position" n) ("_position" asx)
###               ("_position" n''))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.DynPDG_path" ("_position" n'')
###                 ("_position" asx') ("_position" n'))
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.append" ("_position" asx)
###                   ("_position" asx'))))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" n'')
###             ("_idts" ("_position" V)
###               ("_idts" ("_position" asx) ("_position" asx'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###               ("_position" asx) ("_position" n''))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.DynPDG_path" ("_position" n'')
###                 ("_position" asx') ("_position" n'))
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.append" ("_position" asx)
###                   ("_position" asx'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###             ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n'')
###           ("_idts" ("_position" asx) ("_position" asx')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.cdep_edge" ("_position" n) ("_position" asx)
###             ("_position" n''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.DynPDG_path" ("_position" n'')
###               ("_position" asx') ("_position" n'))
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" asx)
###                 ("_position" asx'))))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n'')
###           ("_idts" ("_position" V)
###             ("_idts" ("_position" asx) ("_position" asx'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###             ("_position" asx) ("_position" n''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.DynPDG_path" ("_position" n'')
###               ("_position" asx') ("_position" n'))
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" asx)
###                 ("_position" asx')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale DynStandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "DynStandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
locale DynWeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "DynWeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### theory "Draft.DynPDG"
### 0.620s elapsed time, 1.346s cpu time, 0.119s GC time
Loading theory "Draft.DependentLiveVariables" (required by "Draft.DynSliceMoreTemplates" via "Draft.DynSlice")
### theory "HOL-Library.Tree"
### 2.054s elapsed time, 6.772s cpu time, 1.098s GC time
Loading theory "Draft.Templates" (required by "Draft.DynSliceMoreTemplates" via "Draft.ExtrEqs")
locale DynPDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
  assumes
    "DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_) dyn_control_dependence"
Proofs for inductive predicate(s) "dependent_live_varsp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.154s cpu time, 0.043s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DynSliceMoreTemplates")
### Ambiguous input (line 75 of "$AFP/Slicing/Dynamic/DependentLiveVariables.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.DynPDG_path"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###               ("_position" as'')
###               ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###                 ("_applC" ("_position" Use) ("_position" nx)))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("_position" nx))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("\<^const>local.DynPDG_path" ("_position" nx)
###                 ("_position" as'')
###                 ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###               ("_applC" ("_position" Use) ("_position" nx)))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Set.member"
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###                 ("_applC" ("_position" Use) ("_position" nx)))))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" nx)
###                     ("_position" as'') ("_position" n'))
###                   ("_position" V))))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.DynPDG_path"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###           ("_position" as'')
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member" ("_position" V)
###                 ("_applC" ("_position" Use) ("_position" nx)))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>local.DynPDG_path" ("_position" nx)
###               ("_position" as'')
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" V)
###                     ("_applC" ("_position" Use) ("_position" nx)))
###                   ("_Ball" ("_position" n'')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as')))
###                     ("\<^const>Set.not_member" ("_position" V)
###                       ("_applC" ("_position" Def)
###                         ("_position" n'')))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("_position" nx))
###           ("\<^const>local.DynPDG_path" ("_position" nx) ("_position" as'')
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" V)
###                   ("_applC" ("_position" Use) ("_position" nx)))
###                 ("_Ball" ("_position" n'')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes) ("_position" as')))
###                   ("\<^const>Set.not_member" ("_position" V)
###                     ("_applC" ("_position" Def) ("_position" n''))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.DynPDG_path"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###             ("_position" as'') ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" nx)))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DependentLiveVariables"
### 0.329s elapsed time, 0.693s cpu time, 0.076s GC time
Loading theory "Draft.DynSlice" (required by "Draft.DynSliceMoreTemplates")
locale DynPDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
  assumes
    "DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_) dyn_control_dependence"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.132s cpu time, 0.082s GC time
Found termination order: "length <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. select_edge_kinds (v # va) [] = arbitrary
### !!v va. select_edge_kinds [] (v # va) = arbitrary
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale BackwardPathSlice_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "BackwardPathSlice_wf sourcenode targetnode kind valid_edge (_Entry_)
      Def Use state_val dyn_control_dependence (_Exit_) sem identifies"
### theory "Draft.DynSlice"
### 0.570s elapsed time, 0.915s cpu time, 0.049s GC time
Loading theory "Draft.DynSliceMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.DynSliceMoreTemplates"
### 0.341s elapsed time, 0.534s cpu time, 0.037s GC time
val it = (): unit
