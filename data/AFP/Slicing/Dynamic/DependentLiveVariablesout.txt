Loading theory "Draft.AuxLemmas" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf" via "Draft.CFG" via "Draft.BasicDefs")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.AuxLemmas"
### 0.062s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf" via "Draft.CFG")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.540s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.884s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.309s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.BasicDefs"
### 0.725s elapsed time, 2.855s cpu time, 0.274s GC time
Loading theory "Draft.CFG" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence" via "Draft.CFG_wf")
Found termination order: "size <*mlex*> {}"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for inductive predicate(s) "path"
consts
  snth :: "'a stream => nat => 'a"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.CFG"
### 0.172s elapsed time, 0.676s cpu time, 0.061s GC time
Loading theory "Draft.CFGExit" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.CFGExit_wf")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.CFGExit"
### 0.289s elapsed time, 0.979s cpu time, 0.574s GC time
Loading theory "Draft.Postdomination" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynStandardControlDependence")
### theory "HOL-Library.BigO"
### 1.045s elapsed time, 3.959s cpu time, 0.867s GC time
Loading theory "Draft.CFG_wf" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG" via "Draft.DynDataDependence")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 17 of "$AFP/Slicing/Basic/Postdomination.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^fixed>Exit"))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^fixed>Exit"))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies" ("\<^fixed>Exit")
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies" ("\<^fixed>Exit")
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 182 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate" ("\<^fixed>Exit")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.postdominate" ("\<^fixed>Exit") ("_position" n)))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFG_wf"
### 0.104s elapsed time, 0.412s cpu time, 0.000s GC time
Loading theory "Draft.CFGExit_wf" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.327s cpu time, 0.863s GC time
Loading theory "Draft.DynDataDependence" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
### Ambiguous input (line 334 of "$AFP/Slicing/Basic/Postdomination.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>Set.member"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" nx)
###                       ("\<^const>Orderings.ord_class.greater_eq"
###                         ("_applC" ("_position" length) ("_position" as))
###                         ("_position" k)))
###                     ("_position" n')))
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("_position" n')))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k)))
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("\<^const>Set.member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/Slicing/Basic/Postdomination.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>Set.member"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>Orderings.ord_class.greater_eq"
###               ("_applC" ("_position" length) ("_position" as))
###               ("_position" k)))
###           ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k)))
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k))))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" nx))
###         ("\<^const>Orderings.ord_class.greater_eq"
###           ("_applC" ("_position" length) ("_position" as)) ("_position" k)))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("_applC" ("_position" length) ("_position" as))))
###         ("_position" k))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 15 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.list.Cons"
###       ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###         ("_position" n') ("_position" a))
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DynDataDependence"
### 0.071s elapsed time, 0.288s cpu time, 0.000s GC time
### theory "Draft.Postdomination"
### 0.287s elapsed time, 1.129s cpu time, 0.076s GC time
Loading theory "Draft.DynStandardControlDependence" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
Loading theory "Draft.DynWeakControlDependence" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables" via "Draft.DynPDG")
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_)"
### theory "Draft.CFGExit_wf"
### 0.200s elapsed time, 0.790s cpu time, 0.076s GC time
Found termination order: "size <*mlex*> {}"
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 30 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" targetnodes) ("_position" as)))
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n'')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("_position" n')
###     ("\<^const>HOL.eq" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DynWeakControlDependence"
### 0.075s elapsed time, 0.261s cpu time, 0.000s GC time
### Ambiguous input (line 217 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###       ("_position" n) ("_position" a))
###     ("_position" as')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###     ("_position" n)
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.DynStandardControlDependence"
### 0.118s elapsed time, 0.361s cpu time, 0.052s GC time
Loading theory "Draft.DynPDG" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.DependentLiveVariables")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n') ("_position" as)))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.conj" ("_position" n')
###         ("\<^const>HOL.not_equal" ("_position" as)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>dyn_control_dependence" ("_position" n) ("_position" n')
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.not_equal" ("_position" as)
###         ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale DynPDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
  assumes
    "DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_) dyn_control_dependence"
### Ambiguous input (line 37 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" DynPDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" None)
###             ("_cargs" ("_position" as) ("_position" n'))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cdep_edge" ("_position" n) ("_position" as) ("_position" n'))
###   ("_applC" ("_position" DynPDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_position" None)
###         ("_cargs" ("_position" as) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" DynPDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###             ("_cargs" ("_position" as) ("_position" n'))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" as)
###     ("_position" n'))
###   ("_applC" ("_position" DynPDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###         ("_cargs" ("_position" as) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "DynPDG_edge"
  Proving monotonicity ...
Proofs for inductive predicate(s) "DynPDG_path"
  Proving monotonicity ...
### Ambiguous input (line 61 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###     ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" as) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 130 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Slicing/Dynamic/DynPDG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.list.Nil"))
###               ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" asx) ("_position" asx')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.cdep_edge" ("_position" n)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" V)
###           ("_idts" ("_position" asx) ("_position" asx'))))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###           ("_position" asx) ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.DynPDG_path" ("_position" n'') ("_position" asx')
###             ("_position" n'))
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" asx)
###               ("_position" asx'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###             ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###           ("\<^const>HOL.disj"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" asx) ("_position" asx')))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.cdep_edge" ("_position" n)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" n'')
###                 ("_idts" ("_position" V)
###                   ("_idts" ("_position" asx) ("_position" asx'))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###                   ("_position" asx) ("_position" n''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" n'')
###                     ("_position" asx') ("_position" n'))
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" asx)
###                       ("_position" asx'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n')))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" n'')
###             ("_idts" ("_position" asx) ("_position" asx')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.cdep_edge" ("_position" n) ("_position" asx)
###               ("_position" n''))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.DynPDG_path" ("_position" n'')
###                 ("_position" asx') ("_position" n'))
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.append" ("_position" asx)
###                   ("_position" asx'))))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" n'')
###             ("_idts" ("_position" V)
###               ("_idts" ("_position" asx) ("_position" asx'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###               ("_position" asx) ("_position" n''))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.DynPDG_path" ("_position" n'')
###                 ("_position" asx') ("_position" n'))
###               ("\<^const>HOL.eq" ("_position" as)
###                 ("\<^const>List.append" ("_position" asx)
###                   ("_position" asx'))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.DynPDG_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))
###             ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n'')
###           ("_idts" ("_position" asx) ("_position" asx')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.cdep_edge" ("_position" n) ("_position" asx)
###             ("_position" n''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.DynPDG_path" ("_position" n'')
###               ("_position" asx') ("_position" n'))
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" asx)
###                 ("_position" asx'))))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n'')
###           ("_idts" ("_position" V)
###             ("_idts" ("_position" asx) ("_position" asx'))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###             ("_position" asx) ("_position" n''))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.DynPDG_path" ("_position" n'')
###               ("_position" asx') ("_position" n'))
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" asx)
###                 ("_position" asx')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale DynStandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "DynStandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### theory "HOL-Library.Tree"
### 2.101s elapsed time, 6.981s cpu time, 1.100s GC time
Loading theory "Draft.Templates" (required by "Draft.DependentLiveVariablesMoreTemplates" via "Draft.ExtrEqs")
locale DynWeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "DynWeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### theory "Draft.DynPDG"
### 0.600s elapsed time, 1.249s cpu time, 0.105s GC time
Loading theory "Draft.DependentLiveVariables" (required by "Draft.DependentLiveVariablesMoreTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DependentLiveVariablesMoreTemplates")
locale DynPDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    dyn_control_dependence :: "'node => 'node => 'edge list => bool"
      (\<open>_ controls _ via _\<close> [51, 0, 0])
  assumes
    "DynPDG sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_) dyn_control_dependence"
Proofs for inductive predicate(s) "dependent_live_varsp"
  Proving monotonicity ...
### Ambiguous input (line 75 of "$AFP/Slicing/Dynamic/DependentLiveVariables.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.DynPDG_path"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###               ("_position" as'')
###               ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###                 ("_applC" ("_position" Use) ("_position" nx)))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("_position" nx))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("\<^const>local.DynPDG_path" ("_position" nx)
###                 ("_position" as'')
###                 ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###               ("_applC" ("_position" Use) ("_position" nx)))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Set.member"
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))
###                 ("_applC" ("_position" Use) ("_position" nx)))))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>local.DynPDG_path" ("_position" nx)
###                   ("_position" as'')
###                   ("\<^const>HOL.conj" ("_position" n') ("_position" V)))))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.DynPDG_path" ("_position" nx)
###                     ("_position" as'') ("_position" n'))
###                   ("_position" V))))
###             ("_applC" ("_position" Use) ("_position" nx)))
###           ("_Ball" ("_position" n'')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as')))
###             ("\<^const>Set.not_member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" n'')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.DynPDG_path"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###           ("_position" as'')
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member" ("_position" V)
###                 ("_applC" ("_position" Use) ("_position" nx)))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>local.DynPDG_path" ("_position" nx)
###               ("_position" as'')
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" V)
###                     ("_applC" ("_position" Use) ("_position" nx)))
###                   ("_Ball" ("_position" n'')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as')))
###                     ("\<^const>Set.not_member" ("_position" V)
###                       ("_applC" ("_position" Def)
###                         ("_position" n'')))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as')
###             ("_position" nx))
###           ("\<^const>local.DynPDG_path" ("_position" nx) ("_position" as'')
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" V)
###                   ("_applC" ("_position" Use) ("_position" nx)))
###                 ("_Ball" ("_position" n'')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes) ("_position" as')))
###                   ("\<^const>Set.not_member" ("_position" V)
###                     ("_applC" ("_position" Def) ("_position" n''))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" V)
###           ("_tuple_args" ("_position" as') ("_tuple_arg" ("_position" as))))
###         ("_applC" ("_position" dependent_live_vars) ("_position" n'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" nx) ("_position" as''))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as') ("_position" as'')))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.DynPDG_path"
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.conj" ("_position" nx) ("_position" nx)))
###             ("_position" as'') ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" nx)))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DependentLiveVariables"
### 0.316s elapsed time, 0.659s cpu time, 0.051s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 0.884s cpu time, 0.051s GC time
Loading theory "Draft.DependentLiveVariablesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.DependentLiveVariablesMoreTemplates"
### 0.315s elapsed time, 0.434s cpu time, 0.049s GC time
val it = (): unit
