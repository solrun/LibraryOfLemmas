Loading theory "Draft.AuxLemmas" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Draft.BasicDefs")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### theory "Draft.AuxLemmas"
### 0.065s elapsed time, 0.288s cpu time, 0.000s GC time
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
Loading theory "Draft.BasicDefs" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG")
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.082s elapsed time, 0.355s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.597s cpu time, 0.046s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Code_Target_Int"
### 0.192s elapsed time, 0.779s cpu time, 0.046s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Code_Target_Nat"
### 0.159s elapsed time, 0.621s cpu time, 0.046s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Code_Target_Numeral"
### 0.129s elapsed time, 0.504s cpu time, 0.095s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects" via "Jinja.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.819s cpu time, 0.095s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.310s cpu time, 0.212s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Transitive_Closure_Table"
### 0.315s elapsed time, 1.238s cpu time, 0.224s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.BasicDefs"
### 0.779s elapsed time, 3.042s cpu time, 0.489s GC time
Loading theory "Draft.CFG" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.CFGExit")
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
### theory "Draft.CFG"
### 0.328s elapsed time, 1.158s cpu time, 0.569s GC time
Loading theory "Draft.CFGExit" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation")
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.CFGExit"
### 0.102s elapsed time, 0.400s cpu time, 0.041s GC time
Loading theory "Draft.SemanticsCFG" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 13 of "$AFP/Slicing/Basic/SemanticsCFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" n')))))
###         ("_position" c')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s))))))
###         ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("\<^fixed>identifies" ("_position" n')
###                 ("_position" c')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" transfers)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n')
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))))
###           ("_position" s'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_) sem
      identifies"
### theory "Draft.SemanticsCFG"
### 0.064s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.700s elapsed time, 2.626s cpu time, 0.733s GC time
Loading theory "Jinja.Auxiliary" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Decl" via "Jinja.Type")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Auxiliary"
### 0.119s elapsed time, 0.457s cpu time, 0.089s GC time
Loading theory "Jinja.Type" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Decl")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.206s elapsed time, 4.619s cpu time, 1.032s GC time
Loading theory "Jinja.Semilat" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Type"
### 0.430s elapsed time, 1.698s cpu time, 0.194s GC time
Loading theory "Jinja.Decl" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses")
### theory "Jinja.Semilat"
### 0.288s elapsed time, 1.140s cpu time, 0.092s GC time
Loading theory "Jinja.Err" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Jinja.Decl"
### 0.055s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Jinja.TypeRel" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.103s elapsed time, 4.181s cpu time, 1.244s GC time
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### theory "HOL-Library.Tree"
### 2.495s elapsed time, 9.164s cpu time, 2.408s GC time
Loading theory "Draft.Templates" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.ExtrEqs")
### theory "Jinja.Err"
### 0.918s elapsed time, 3.081s cpu time, 1.167s GC time
Loading theory "Jinja.Opt" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Listn" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemanticsWFMoreTemplates")
consts
  coalesce :: "'a err list => 'a list err"
### theory "Jinja.Opt"
### 0.103s elapsed time, 0.415s cpu time, 0.000s GC time
Loading theory "Jinja.Product" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.122s elapsed time, 0.484s cpu time, 0.088s GC time
### theory "Jinja.Listn"
### 0.358s elapsed time, 1.322s cpu time, 0.168s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType")
### theory "Jinja.TypeRel"
### 1.428s elapsed time, 4.848s cpu time, 1.335s GC time
Loading theory "Jinja.Value" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects")
### theory "Jinja.Semilattices"
### 0.544s elapsed time, 1.768s cpu time, 1.036s GC time
Loading theory "Jinja.Typing_Framework_1" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg")
### theory "Jinja.Typing_Framework_1"
### 0.047s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Jinja.SemilatAlg" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err")
Loading theory "Jinja.Typing_Framework_2" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
### theory "Jinja.Typing_Framework_2"
### 0.063s elapsed time, 0.239s cpu time, 0.046s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.971s elapsed time, 3.297s cpu time, 1.249s GC time
consts
  pluslussub :: "'a list => ('a => 'a => 'a) => 'a => 'a"
semilat (?A, ?r, ?f) =
(order ?r ?A &
 closed ?A ?f &
 (ALL x:?A. ALL y:?A. x <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. y <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. ALL z:?A. x <=_?r z & y <=_?r z --> x +_?f y <=_?r z))
semilat (?A, ?r, ?f) ==> Semilat ?A ?r ?f
### theory "Jinja.SemilatAlg"
### 0.145s elapsed time, 0.437s cpu time, 0.046s GC time
Loading theory "Jinja.Kildall_1" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Kildall_2")
Loading theory "Jinja.LBVSpec" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.LBVCorrect")
consts
  merges :: "('s => 's => 's) => (nat * 's) list => 's list => 's list"
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
Loading theory "Jinja.Typing_Framework_err" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
consts
  merge ::
    "'s list
     => ('s => 's => 's)
        => ('s => 's => bool) => 's => nat => (nat * 's) list => 's => 's"
### theory "Jinja.Kildall_1"
### 0.090s elapsed time, 0.365s cpu time, 0.000s GC time
Loading theory "Jinja.Kildall_2" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
consts
  wtl_inst_list ::
    "'a list
     => 's list
        => ('s => 's => 's)
           => ('s => 's => bool)
              => 's => 's => (nat => 's => (nat * 's) list)
                             => nat => 's => 's"
consts
  propa ::
    "('s => 's => 's)
     => (nat * 's) list => 's list => nat set => 's list * nat set"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Jinja.Value"
### 0.760s elapsed time, 2.589s cpu time, 1.179s GC time
Loading theory "Jinja.Objects" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions")
locale lbv
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
  assumes "lbv A r f \<top> \<bottom>"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
### theory "Jinja.Typing_Framework_err"
### 0.200s elapsed time, 0.785s cpu time, 0.098s GC time
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Jinja.Kildall_2"
### 0.187s elapsed time, 0.709s cpu time, 0.098s GC time
### theory "Jinja.Objects"
### 0.129s elapsed time, 0.432s cpu time, 0.000s GC time
Loading theory "Jinja.Exceptions" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses")
Loading theory "Jinja.JVMState" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec" via "Jinja.JVMExecInstr" via "Jinja.JVMInstructions")
### theory "Jinja.JVMState"
### 0.026s elapsed time, 0.074s cpu time, 0.000s GC time
Loading theory "Jinja.JVMInstructions" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec" via "Jinja.JVMExecInstr")
### theory "Jinja.Exceptions"
### 0.118s elapsed time, 0.371s cpu time, 0.108s GC time
Loading theory "Jinja.Conform" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform")
Loading theory "Jinja.SystemClasses" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
### theory "Jinja.LBVSpec"
### 0.451s elapsed time, 1.613s cpu time, 0.206s GC time
Loading theory "Jinja.LBVComplete" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
### Ambiguous input (line 26 of "$AFP/Jinja/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.SystemClasses"
### 0.072s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "Jinja.WellForm" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType")
locale lbvc
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and \<tau>s :: "'a list"
    and c :: "'a list"
  assumes "lbvc A r f \<top> \<bottom> step \<tau>s"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and "c == make_cert step \<tau>s \<bottom>"
### theory "Jinja.Conform"
### 0.147s elapsed time, 0.578s cpu time, 0.000s GC time
Loading theory "Jinja.LBVCorrect" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
locale lbvs
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and s\<^sub>0 :: "'a"
    and c :: "'a list"
    and ins :: "'b list"
    and \<tau>s :: "'a list"
  assumes "lbvs A r f \<top> \<bottom> step c ins"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and
    "\<tau>s ==
     map (%pc. if c ! pc = \<bottom> then wtl (take pc ins) c 0 s\<^sub>0
               else c ! pc)
      [0..<length ins]"
### theory "Jinja.LBVComplete"
### 0.271s elapsed time, 1.079s cpu time, 0.105s GC time
### theory "Jinja.LBVCorrect"
### 0.232s elapsed time, 0.867s cpu time, 0.245s GC time
Loading theory "Jinja.Abstract_BV" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
### theory "Jinja.WellForm"
### 0.330s elapsed time, 1.233s cpu time, 0.245s GC time
Loading theory "Jinja.SemiType" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType")
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Jinja.SemiType"
### 0.282s elapsed time, 0.857s cpu time, 0.087s GC time
Loading theory "Jinja.JVM_SemiType" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect")
### theory "Jinja.Abstract_BV"
### 0.325s elapsed time, 0.988s cpu time, 0.087s GC time
### theory "Jinja.JVM_SemiType"
### 0.234s elapsed time, 0.524s cpu time, 0.093s GC time
### theory "Jinja.JVMInstructions"
### 1.341s elapsed time, 3.571s cpu time, 0.533s GC time
Loading theory "Jinja.JVMExceptions" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec")
Loading theory "Jinja.JVMExecInstr" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Jinja.JVMExceptions"
### 0.178s elapsed time, 0.409s cpu time, 0.078s GC time
Loading theory "Jinja.Effect" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec")
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
locale prog
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
locale jvm_method
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### theory "Jinja.JVMExecInstr"
### 0.397s elapsed time, 0.887s cpu time, 0.149s GC time
Loading theory "Jinja.JVMExec" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (10 more)
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Jinja.JVMExec"
### 0.537s elapsed time, 1.128s cpu time, 0.096s GC time
Loading theory "Jinja.JVMListExample" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
### theory "Jinja.JVMListExample"
### 0.315s elapsed time, 0.922s cpu time, 0.086s GC time
Found termination order: "{}"
Found termination order: "{}"
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Null, Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 1))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 2))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 3))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 1), Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 4))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 5))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 6))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 7))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 8))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 2), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 9))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 10))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 11))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 12))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 13))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 3), Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 14))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 15))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 16))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 18))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 19))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 20))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool false, Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 13)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 15)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 22))))])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val it = SOME (NONE, (fn, [])):
   (Isabelle5593106.Generated_Code.nat option *
    ((Isabelle5593106.Generated_Code.nat ->
        (Isabelle5593106.Generated_Code.char list *
         (Isabelle5593106.Generated_Code.char list *
          Isabelle5593106.Generated_Code.char list
            -> Isabelle5593106.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5593106.Generated_Code.vala list *
      (Isabelle5593106.Generated_Code.vala list *
       (Isabelle5593106.Generated_Code.char list *
        (Isabelle5593106.Generated_Code.char list *
         Isabelle5593106.Generated_Code.nat)))
     )
     list)
   )
   option
val h = fn:
   Isabelle5593106.Generated_Code.nat ->
     (Isabelle5593106.Generated_Code.char list *
      (Isabelle5593106.Generated_Code.char list *
       Isabelle5593106.Generated_Code.char list
         -> Isabelle5593106.Generated_Code.vala option)
     )
     option
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
Found termination order: "{}"
locale eff
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Jinja.Effect"
### 5.024s elapsed time, 8.913s cpu time, 0.798s GC time
Loading theory "Jinja.BVSpec" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform")
Loading theory "Jinja.EffectMono" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.TF_JVM")
### theory "Jinja.EffectMono"
### 0.052s elapsed time, 0.122s cpu time, 0.000s GC time
### theory "Jinja.BVSpec"
### 0.080s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Jinja.BVConform" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe")
Loading theory "Jinja.TF_JVM" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
consts
  conf_fs ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => (nat => (char list * (char list * char list => val option)) option)
        => (char list => char list => (ty list * ty err list) option list)
           => char list
              => nat
                 => ty => (val list *
                           val list * char list * char list * nat) list
                          => bool"
locale JVM_sl
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### theory "Jinja.BVConform"
### 0.397s elapsed time, 0.845s cpu time, 0.116s GC time
Loading theory "Jinja.BVSpecTypeSafe" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
### Rewrite rule not in simpset:
### is_relevant_entry ?P1 ?i1 ?pc1 ?e1 ==
### let (f, t, C, h, d) = ?e1 in is_relevant_class ?i1 ?P1 C & ?pc1 : {f..<t}
"find_handler"
  :: "(char list *
       char list *
       (char list * ty) list *
       (char list *
        ty list *
        ty *
        nat *
        nat *
        instr list * (nat * nat * char list * nat * nat) list) list) list
      => nat
         => (nat
             => (char list * (char list * char list => val option)) option)
            => (val list * val list * char list * char list * nat) list
               => nat option *
                  (nat
                   => (char list *
                       (char list * char list => val option)) option) *
                  (val list * val list * char list * char list * nat) list"
### theory "Jinja.TF_JVM"
### 0.439s elapsed time, 0.933s cpu time, 0.116s GC time
Loading theory "Jinja.BVExec" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
### Ambiguous input (line 54 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 568 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 580 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 658 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 661 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 724 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### Ambiguous input (line 801 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 817 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 819 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 865 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 881 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.BVExec"
### 0.446s elapsed time, 0.947s cpu time, 0.115s GC time
### Ambiguous input (line 896 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 927 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 943 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 961 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 999 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1031 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1066 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.BVSpecTypeSafe"
### 0.667s elapsed time, 1.205s cpu time, 0.115s GC time
Loading theory "Jinja.BVExample" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation" via "Draft.JVMCFG")
### Ignoring duplicate rewrite rule:
### eff ?i1 ?P1 ?pc1 ?et1 ?t1 ==
### case ?t1 of None => []
### | \<lfloor>\<tau>\<rfloor> =>
###     norm_eff ?i1 ?P1 ?pc1 \<tau> @ xcpt_eff ?i1 ?P1 ?pc1 \<tau> ?et1
### Ignoring duplicate rewrite rule:
### norm_eff ?i1 ?P1 ?pc1 ?\<tau>1 ==
### map (%pc'. (pc', \<lfloor>eff\<^sub>i (?i1, ?P1, ?\<tau>1)\<rfloor>))
###  (succs ?i1 ?\<tau>1 ?pc1)
### Ambiguous input (line 458 of "$AFP/Jinja/BV/BVExample.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" E)
###     ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" E) ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### app\<^sub>i (Getfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T # ?ST, ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C & subtype ?P ?T (Class ?C)
### Code generator: dropping subsumed code equation
### app\<^sub>i
###  (Putfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T\<^sub>1 # ?T\<^sub>2 # ?ST,
###   ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C &
###    subtype ?P ?T\<^sub>2 (Class ?C) & subtype ?P ?T\<^sub>1 T\<^sub>f
### Code generator: dropping subsumed code equation
### app\<^sub>i (Invoke ?M ?n, ?P, ?pc, ?mxs, ?T\<^sub>r, ?ST, ?LT) ==
### ?n < length ?ST &
### (?ST ! ?n ~= NT -->
###  (EX C D Ts T m.
###      ?ST ! ?n = Class C &
###      ?P \<turnstile> C sees ?M: Ts\<rightarrow>T = m in D &
###      ?P \<turnstile> rev (take ?n ?ST) [\<le>] Ts))
### Code generator: dropping subsumed code equation
### SemiType.sup ?P ?T\<^sub>1 ?T\<^sub>2 ==
### if is_refT ?T\<^sub>1 & is_refT ?T\<^sub>2
### then OK (if ?T\<^sub>1 = NT then ?T\<^sub>2
###          else if ?T\<^sub>2 = NT then ?T\<^sub>1
###               else Class
###                     (while (%z. (the_Class ?T\<^sub>1, z) ~: (subcls1 ?P)^*)
###                       (super ?P) (the_Class ?T\<^sub>2)))
### else if ?T\<^sub>1 = ?T\<^sub>2 then OK ?T\<^sub>1 else Err
### theory "Jinja.BVExample"
### 0.532s elapsed time, 0.583s cpu time, 0.070s GC time
Loading theory "Draft.JVMCFG" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF" via "Draft.JVMInterpretation")
val it = (): unit
val it = (): unit
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "JVM_CFG"
  Proving monotonicity ...
### theory "Draft.JVMCFG"
### 3.166s elapsed time, 4.905s cpu time, 0.477s GC time
Loading theory "Draft.JVMInterpretation" (required by "Draft.SemanticsWFMoreTemplates" via "Draft.SemanticsWF")
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
### Ambiguous input (line 38 of "$AFP/Slicing/JinjaVM/JVMInterpretation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_node)
###       ("_cargs" ("_position" prog)
###         ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###           ("\<^const>Option.option.Some"
###             ("_tuple" ("_position" cs') ("_tuple_arg" ("_position" xf)))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_callstack)
###         ("_cargs" ("_position" prog) ("_position" cs)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_callstack)
###           ("_cargs" ("_position" prog) ("_position" cs')))
###         ("\<^const>HOL.conj"
###           ("\<^const>JVMCFG.JVM_CFG"
###             ("\<^const>HOL.Ex_binder" ("_position" Q) ("_position" prog))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("_position" None))
###             ("\<^const>BasicDefs.edge_kind.Predicate" ("_position" Q))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" cs')
###                   ("_tuple_arg" ("_position" xf))))))
###           ("\<^const>JVMCFG.JVM_CFG"
###             ("\<^const>HOL.Ex_binder" ("_position" f) ("_position" prog))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" cs')
###                   ("_tuple_arg" ("_position" xf)))))
###             ("\<^const>BasicDefs.edge_kind.Update" ("_position" f))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs')
###               ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_node)
###       ("_cargs" ("_position" prog)
###         ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###           ("\<^const>Option.option.Some"
###             ("_tuple" ("_position" cs') ("_tuple_arg" ("_position" xf)))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_callstack)
###         ("_cargs" ("_position" prog) ("_position" cs)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_callstack)
###           ("_cargs" ("_position" prog) ("_position" cs')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" Q)
###             ("\<^const>JVMCFG.JVM_CFG" ("_position" prog)
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("_position" None))
###               ("\<^const>BasicDefs.edge_kind.Predicate" ("_position" Q))
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("\<^const>Option.option.Some"
###                   ("_tuple" ("_position" cs')
###                     ("_tuple_arg" ("_position" xf)))))))
###           ("\<^const>JVMCFG.JVM_CFG"
###             ("\<^const>HOL.Ex_binder" ("_position" f) ("_position" prog))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" cs')
###                   ("_tuple_arg" ("_position" xf)))))
###             ("\<^const>BasicDefs.edge_kind.Update" ("_position" f))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs')
###               ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_node)
###       ("_cargs" ("_position" prog)
###         ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###           ("\<^const>Option.option.Some"
###             ("_tuple" ("_position" cs') ("_tuple_arg" ("_position" xf)))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_callstack)
###         ("_cargs" ("_position" prog) ("_position" cs)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_callstack)
###           ("_cargs" ("_position" prog) ("_position" cs')))
###         ("\<^const>HOL.conj"
###           ("\<^const>JVMCFG.JVM_CFG"
###             ("\<^const>HOL.Ex_binder" ("_position" Q) ("_position" prog))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("_position" None))
###             ("\<^const>BasicDefs.edge_kind.Predicate" ("_position" Q))
###             ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" cs')
###                   ("_tuple_arg" ("_position" xf))))))
###           ("\<^const>HOL.Ex_binder" ("_position" f)
###             ("\<^const>JVMCFG.JVM_CFG" ("_position" prog)
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("\<^const>Option.option.Some"
###                   ("_tuple" ("_position" cs')
###                     ("_tuple_arg" ("_position" xf)))))
###               ("\<^const>BasicDefs.edge_kind.Update" ("_position" f))
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs')
###                 ("_position" None)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_node)
###       ("_cargs" ("_position" prog)
###         ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###           ("\<^const>Option.option.Some"
###             ("_tuple" ("_position" cs') ("_tuple_arg" ("_position" xf)))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_callstack)
###         ("_cargs" ("_position" prog) ("_position" cs)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_callstack)
###           ("_cargs" ("_position" prog) ("_position" cs')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" Q)
###             ("\<^const>JVMCFG.JVM_CFG" ("_position" prog)
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("_position" None))
###               ("\<^const>BasicDefs.edge_kind.Predicate" ("_position" Q))
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("\<^const>Option.option.Some"
###                   ("_tuple" ("_position" cs')
###                     ("_tuple_arg" ("_position" xf)))))))
###           ("\<^const>HOL.Ex_binder" ("_position" f)
###             ("\<^const>JVMCFG.JVM_CFG" ("_position" prog)
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs)
###                 ("\<^const>Option.option.Some"
###                   ("_tuple" ("_position" cs')
###                     ("_tuple_arg" ("_position" xf)))))
###               ("\<^const>BasicDefs.edge_kind.Update" ("_position" f))
###               ("\<^const>JVMCFG.j_node.Node" ("_position" cs')
###                 ("_position" None)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMInterpretation"
### 0.579s elapsed time, 0.697s cpu time, 0.129s GC time
Loading theory "Draft.SemanticsWF" (required by "Draft.SemanticsWFMoreTemplates")
### Ambiguous input (line 253 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state"
###         ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###         ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###         ("_applC" ("_position" state_to_jvm_state)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" cs)
###               ("_tuple" ("_position" h)
###                 ("_tuple_args" ("_position" stk)
###                   ("_tuple_arg" ("_position" loc)))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###           ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###           ("_applC" ("_position" find_handler)
###             ("_cargs"
###               ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###               ("_cargs" ("_position" a)
###                 ("_cargs" ("_position" h)
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" stkss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs) ("_position" stk))))
###                       ("_applC" ("_position" zip)
###                         ("_cargs"
###                           ("_applC" ("_position" locss)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" cs)
###                                 ("_position" loc))))
###                           ("_position" cs)))))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" find_handler_for)
###               ("_cargs" ("_position" P)
###                 ("_cargs"
###                   ("_applC" ("_position" cname_of)
###                     ("_cargs" ("_position" h) ("_position" a)))
###                   ("_position" cs))))
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" C')
###                 ("_tuple_args" ("_position" M')
###                   ("_tuple_arg" ("_position" pc'))))
###               ("_position" cs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple"
###                 ("_applC" ("_position" stks)
###                   ("_cargs"
###                     ("_applC" ("_position" stkLength)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" C')
###                           ("_cargs" ("_position" M') ("_position" pc')))))
###                     ("_lambda" ("_position" a')
###                       ("_applC"
###                         ("_Update" ("_position" stk)
###                           ("_updbind"
###                             ("_tuple"
###                               ("_applC" ("_position" length)
###                                 ("_position" cs'))
###                               ("_tuple_arg"
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" C') ("_cargs" ("_position" M') ("_position" pc')))))
###                                   ("_applC" ("_position" Suc)
###                                     ("\<^const>Groups.zero_class.zero")))))
###                             ("_applC" ("_position" Addr) ("_position" a))))
###                         ("_tuple"
###                           ("_applC" ("_position" length) ("_position" cs'))
###                           ("_tuple_arg" ("_position" a')))))))
###                 ("_tuple_args"
###                   ("_applC" ("_position" locs)
###                     ("_cargs"
###                       ("_applC" ("_position" locLength)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" C')
###                             ("_cargs" ("_position" M') ("_position" pc')))))
###                       ("_lambda" ("_position" a)
###                         ("_applC" ("_position" loc)
###                           ("_tuple"
###                             ("_applC" ("_position" length)
###                               ("_position" cs'))
###                             ("_tuple_arg" ("_position" a)))))))
###                   ("_tuple_args" ("_position" C')
###                     ("_tuple_args" ("_position" M')
###                       ("_tuple_arg" ("_position" pc'))))))
###               ("_applC" ("_position" zip)
###                 ("_cargs"
###                   ("_applC" ("_position" stkss)
###                     ("_cargs" ("_position" P)
###                       ("_cargs" ("_position" cs') ("_position" stk))))
###                   ("_applC" ("_position" zip)
###                     ("_cargs"
###                       ("_applC" ("_position" locss)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" cs') ("_position" loc))))
###                       ("_position" cs'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "sem"
  Proving monotonicity ...
### Ambiguous input (line 991 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" stkLength)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M) ("_position" pc)))))
###       ("_applC" ("_position" length) ("_position" stk)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" stkLength)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M) ("_position" pc)))))
###       ("_applC" ("_position" length) ("_position" stk)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 995 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" locLength)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M) ("_position" pc)))))
###       ("_applC" ("_position" length) ("_position" loc)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" locLength)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M) ("_position" pc)))))
###       ("_applC" ("_position" length) ("_position" loc)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 999 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons" ("_position" a)
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons" ("_position" a)
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons" ("_position" a)
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons" ("_position" a)
###               ("_position" frs')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1029 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h')
###           ("_tuple_arg" ("_position" frs'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_to_jvm_state)
###         ("_cargs" ("_position" P)
###           ("_cargs"
###             ("_applC" ("_position" framestack_to_callstack)
###               ("_position" frs'))
###             ("_tuple" ("_position" h)
###               ("_tuple_args"
###                 ("_applC" ("_position" update_stk)
###                   ("_cargs" ("_position" stk) ("_position" frs')))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" update_loc)
###                     ("_cargs" ("_position" loc) ("_position" frs')))))))))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###       ("\<^const>JVMCFG.rep_jvmprog_phi" ("_position" P))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h')
###           ("_tuple_arg" ("_position" frs'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_to_jvm_state)
###         ("_cargs" ("_position" P)
###           ("_cargs"
###             ("_applC" ("_position" framestack_to_callstack)
###               ("_position" frs'))
###             ("_tuple" ("_position" h)
###               ("_tuple_args"
###                 ("_applC" ("_position" update_stk)
###                   ("_cargs" ("_position" stk) ("_position" frs')))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" update_loc)
###                     ("_cargs" ("_position" loc) ("_position" frs')))))))))
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg" ("_position" frs')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1056 of "$AFP/Slicing/JinjaVM/SemanticsWF.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("\<^const>JVMCFG.rep_jvmprog_jvm_prog" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" h) ("_position" frs)))))
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h')
###             ("_tuple_arg" ("_position" frs'))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" last) ("_position" frs))
###           ("_tuple" ("_position" stk)
###             ("_tuple_args" ("_position" loc)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" M)
###                   ("_tuple_arg" ("_position" pc))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" last) ("_position" frs'))
###             ("_tuple" ("_position" stk')
###               ("_tuple_args" ("_position" loc')
###                 ("_tuple_args" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_arg" ("_position" pc')))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" C) ("_position" C'))
###       ("\<^const>HOL.eq" ("_position" M) ("_position" M')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>JVMCFG.rep_jvmprog_jvm_prog"
###             ("_applC" ("_position" find_handler) ("_position" P)))
###           ("_cargs" ("_position" a)
###             ("_cargs" ("_position" h) ("_position" frs))))
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h')
###             ("_tuple_arg" ("_position" frs'))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" last) ("_position" frs))
###           ("_tuple" ("_position" stk)
###             ("_tuple_args" ("_position" loc)
###               ("_tuple_args" ("_position" C)
###                 ("_tuple_args" ("_position" M)
###                   ("_tuple_arg" ("_position" pc))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" last) ("_position" frs'))
###             ("_tuple" ("_position" stk')
###               ("_tuple_args" ("_position" loc')
###                 ("_tuple_args" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_arg" ("_position" pc')))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" C) ("_position" C'))
###       ("\<^const>HOL.eq" ("_position" M) ("_position" M')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SemanticsWF"
### 0.586s elapsed time, 0.680s cpu time, 0.126s GC time
Loading theory "Draft.SemanticsWFMoreTemplates"
val templateLemmas =
   [("SemanticsWF.bool_sym", "Bool (?a = ?b) = Bool (?b = ?a)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ),
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("SemanticsWF.f2c_emptyD'",
     "[] = framestack_to_callstack ?frs ==> ?frs = []",
     template_implication
      ([template_equation
         (template_hole 3, template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("SemanticsWF.f2c_emptyD",
     "framestack_to_callstack ?frs = [] ==> ?frs = []",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation (template_var 0, template_hole 0))),
    ("SemanticsWF.find_handler_nonempty_frs",
     "find_handler ?P ?a ?h ?frs ~= (None, ?h', [])",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("SemanticsWF.valid_callstack_tl",
     "valid_callstack ?prog ((?C, ?M, ?pc) # ?cs) ==>
      valid_callstack ?prog ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4), template_var 0)
           ))),
    ("SemanticsWF.find_handler_heap_eqD",
     "find_handler ?P ?a ?h ?frs = (?xp, ?h', ?frs') ==> ?h' = ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_equation (template_var 1, template_var 4))),
    ("SemanticsWF.find_handler_decrD",
     "find_handler ?P ?a ?h ?frs = (?xp, ?h', ?f # ?frs) ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))))],
       template_predicate (template_hole 0))),
    ("SemanticsWF.Suc_minus_Suc_Suc",
     "?b < ?n - 1 ==> Suc (?n - Suc (Suc ?b)) = ?n - Suc ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("SemanticsWF.find_handler_frs_decrD",
     "find_handler ?P ?a ?h ?frs = (?xp, ?h', ?frs') ==>
      length ?frs' <= length ?frs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("SemanticsWF.valid_callstack_append_last_class",
     "valid_callstack (?P, ?C0.0, ?Main) (?cs @ [(?C, ?M, ?pc)]) ==>
      ?C = ?C0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 6),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))),
                  template_hole 1)))
            )],
       template_equation (template_var 2, template_var 5))),
    ("SemanticsWF.valid_callstack_append_last_method",
     "valid_callstack (?P, ?C0.0, ?Main) (?cs @ [(?C, ?M, ?pc)]) ==>
      ?M = ?Main",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 6),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4))),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))),
                  template_hole 1)))
            )],
       template_equation (template_var 1, template_var 4))),
    ("SemanticsWF.find_handler_decrD'",
     "[| find_handler ?P ?a ?h ?frs = (?xp, ?h', ?f # ?frs');
         length ?frs = length ?frs' |]
      ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0)))),
        template_equation
         (template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("SemanticsWF.hd_tl_equalityI",
     "[| length ?xs = length ?ys; hd ?xs = hd ?ys; tl ?xs = tl ?ys |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("SemanticsWF.stks_purge'",
     "?b <= ?d ==>
      stks ?b (%x. if x = ?d then ?e else ?stk x) = stks ?b ?stk",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3))),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3)))))),
    ("SemanticsWF.find_handler_find_handler_forD",
     "find_handler ?P\<^bsub>wf\<^esub> ?a ?h ?frs = (?xp', ?h', ?frs') ==>
      find_handler_for ?P (cname_of ?h ?a) (framestack_to_callstack ?frs) =
      framestack_to_callstack ?frs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 6))),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_var 4, template_var 5)))),
           template_app (template_hole 0, template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("SemanticsWF.correct_state_frs_tlD",
     "?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h,
                  ?a # ?frs') [ok] ==>
      ?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h,
                  ?frs') [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 3))),
                template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 3))),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 3))),
               template_app
                (template_hole 4,
                 template_app (template_hole 5, template_var 3))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)))
           ))),
    ("SemanticsWF.correct_state_imp_valid_callstack",
     "[| ?P,?cs \<turnstile>\<^bsub>BV\<^esub> ?s \<surd>;
         fst (last ?cs) = ?C0.0; fst (snd (last ?cs)) = ?Main |]
      ==> valid_callstack (?P, ?C0.0, ?Main) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 3)),
          template_var 1),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 3))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 3)
           ))),
    ("SemanticsWF.locss_invoke_purge",
     "length ?cs < ?z ==>
      locss ?P ?cs
       (%(a, b). if a = ?z --> ?Q b then ?loc (a, b) else ?u b) =
      locss ?P ?cs ?loc",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 5),
           template_app (template_hole 4, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 5),
           template_var 1)))),
    ("SemanticsWF.locs_invoke_purge",
     "?c < ?z ==>
      locs ?l (%b. if ?z = ?c --> ?Q b then ?loc (?c, b) else ?u b) =
      locs ?l (%a. ?loc (?c, a))",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4)],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("SemanticsWF.nth_rev_equalityI",
     "[| length ?xs = length ?ys;
         ALL i<length ?xs.
            ?xs ! (length ?xs - Suc i) = ?ys ! (length ?ys - Suc i) |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("SemanticsWF.locLength_is_length_loc",
     "?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h,
                  (?stk, ?loc, ?C, ?M, ?pc) # ?frs') [ok] ==>
      locLength ?P ?C ?M ?pc = length ?loc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 7))),
                template_app
                 (template_hole 14,
                  template_app (template_hole 15, template_var 7))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 5),
                        template_app
                         (template_app (template_hole 8, template_var 4),
                          template_app
                           (template_app (template_hole 7, template_var 3),
                            template_app
                             (template_app
                               (template_hole 6, template_var 2),
                              template_var 1))))),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 14,
                         template_app (template_hole 15, template_var 7)),
                       template_var 3),
                     template_var 2)),
                 template_var 1)))),
         template_app (template_hole 0, template_var 4)))),
    ("SemanticsWF.stkLength_is_length_stk",
     "?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h,
                  (?stk, ?loc, ?C, ?M, ?pc) # ?frs') [ok] ==>
      stkLength ?P ?C ?M ?pc = length ?stk",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 7))),
                template_app
                 (template_hole 14,
                  template_app (template_hole 15, template_var 7))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 5),
                        template_app
                         (template_app (template_hole 8, template_var 4),
                          template_app
                           (template_app (template_hole 7, template_var 3),
                            template_app
                             (template_app
                               (template_hole 6, template_var 2),
                              template_var 1))))),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 14,
                         template_app (template_hole 15, template_var 7)),
                       template_var 3),
                     template_var 2)),
                 template_var 1)))),
         template_app (template_hole 0, template_var 5)))),
    ("SemanticsWF.find_handler_last_cs_eqD",
     "[| find_handler ?P\<^bsub>wf\<^esub> ?a ?h ?frs = (None, ?h', ?frs');
         last ?frs = (?stk, ?loc, ?C, ?M, ?pc);
         last ?frs' = (?stk', ?loc', ?C', ?M', ?pc') |]
      ==> ?C = ?C' & ?M = ?M'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 15))),
                template_var 14),
              template_var 13),
            template_var 12),
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_app (template_hole 8, template_var 11),
              template_var 10))),
        template_equation
         (template_app (template_hole 6, template_var 12),
          template_app
           (template_app (template_hole 5, template_var 9),
            template_app
             (template_app (template_hole 4, template_var 8),
              template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5))))),
        template_equation
         (template_app (template_hole 6, template_var 10),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 1))
           ))),
    ("SemanticsWF.length_locss",
     "?i < length ?cs ==>
      length (locss ?P ?cs ?loc ! (length ?cs - Suc ?i)) =
      locLength ?P (fst (?cs ! (length ?cs - Suc ?i)))
       (fst (snd (?cs ! (length ?cs - Suc ?i))))
       (snd (snd (?cs ! (length ?cs - Suc ?i))))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 17, template_var 2))],
       template_equation
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app (template_hole 13, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 17, template_var 2)),
               template_app (template_hole 11, template_var 3)))),
         template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 1)),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 17, template_var 2)),
                             template_app
                              (template_hole 11, template_var 3))))),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 17, template_var 2)),
                             template_app
                              (template_hole 11, template_var 3))))))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app (template_hole 17, template_var 2)),
                         template_app
                          (template_hole 11, template_var 3)))))))))))),
    ("SemanticsWF.find_handler_loc_fun_eq'",
     "find_handler ?P\<^bsub>wf\<^esub> ?a ?h
       (zip (stkss ?P ?cs ?stk) (zip (locss ?P ?cs ?loc) ?cs)) =
      (?xf, ?h', ?frs) ==>
      update_loc ?loc ?frs = ?loc",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 8))),
                template_var 7),
              template_var 6),
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_app (template_hole 18, template_var 8),
                    template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 8),
                      template_var 5),
                    template_var 3)),
                template_var 5))),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)))],
       template_equation
        (template_app (template_hole 12, t_empty), template_var 3))),
    ("SemanticsWF.exec_last_frs_eq_class",
     "[| JVMExec.exec (?P\<^bsub>wf\<^esub>, None, ?h, ?frs) =
         \<lfloor>(None, ?h', ?frs')\<rfloor>;
         last ?frs = (?stk, ?loc, ?C, ?M, ?pc);
         last ?frs' = (?stk', ?loc', ?C', ?M', ?pc'); ?frs ~= [];
         ?frs' ~= [] |]
      ==> ?C = ?C'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 17,
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 14))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 13),
                  template_var 12)))),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_app
               (template_app (template_hole 11, template_var 11),
                template_var 10)))),
        template_equation
         (template_app (template_hole 8, template_var 12),
          template_app
           (template_app (template_hole 7, template_var 9),
            template_app
             (template_app (template_hole 6, template_var 8),
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5))))),
        template_equation
         (template_app (template_hole 8, template_var 10),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))))),
        template_negation
         (template_equation (template_var 12, template_hole 1)),
        template_negation
         (template_equation (template_var 10, template_hole 1))],
       template_equation (template_var 7, template_var 2))),
    ("SemanticsWF.exec_last_frs_eq_method",
     "[| JVMExec.exec (?P\<^bsub>wf\<^esub>, None, ?h, ?frs) =
         \<lfloor>(None, ?h', ?frs')\<rfloor>;
         last ?frs = (?stk, ?loc, ?C, ?M, ?pc);
         last ?frs' = (?stk', ?loc', ?C', ?M', ?pc'); ?frs ~= [];
         ?frs' ~= [] |]
      ==> ?M = ?M'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 17,
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 14))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 13),
                  template_var 12)))),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_app
               (template_app (template_hole 11, template_var 11),
                template_var 10)))),
        template_equation
         (template_app (template_hole 8, template_var 12),
          template_app
           (template_app (template_hole 7, template_var 9),
            template_app
             (template_app (template_hole 6, template_var 8),
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5))))),
        template_equation
         (template_app (template_hole 8, template_var 10),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0))))),
        template_negation
         (template_equation (template_var 12, template_hole 1)),
        template_negation
         (template_equation (template_var 10, template_hole 1))],
       template_equation (template_var 6, template_var 1))),
    ("SemanticsWF.locs_rev_stks",
     "?z <= ?x ==>
      locs ?z
       (%b. if ?z < b then ?loc (Suc ?y, b)
            else if b <= ?z then ?stk (?y, ?x + b - Suc ?z)
                 else arbitrary) @
      [?stk (?y, ?x - Suc 0)] =
      ?stk (?y, ?x - Suc ?z) # rev (take ?z (stks ?x (%a. ?stk (?y, a))))",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, t_empty),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_var 0,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app (template_hole 10, template_hole 5))))),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_var 0,
               template_app
                (template_app (template_hole 11, template_var 1),
                 template_app
                  (template_app (template_hole 9, template_var 3),
                   template_app (template_hole 10, template_var 4))))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 14, t_empty),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 3))))))))),
    ("SemanticsWF.update_loc_s2jvm'",
     "update_loc ?loc
       (zip (stkss ?P ?cs ?stk) (zip (locss ?P ?cs ?loc) ?cs)) =
      ?loc",
     template_equation
      (template_app (template_hole 16, t_empty), template_var 0)),
    ("SemanticsWF.update_stk_s2jvm'",
     "update_stk ?stk
       (zip (stkss ?P ?cs ?stk) (zip (locss ?P ?cs ?loc) ?cs)) =
      ?stk",
     template_equation
      (template_app (template_hole 15, t_empty), template_var 1)),
    ("SemanticsWF.locss_cong",
     "[| ?P = ?P'; ?cs = ?cs';
         !!a b.
            [| a < length ?cs;
               b < locLength ?P (fst (?cs ! (length ?cs - Suc a)))
                    (fst (snd (?cs ! (length ?cs - Suc a))))
                    (snd (snd (?cs ! (length ?cs - Suc a)))) |]
            ==> ?loc (a, b) = ?loc' (a, b) |]
      ==> locss ?P ?cs ?loc = locss ?P' ?cs' ?loc'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("SemanticsWF.stkss_cong",
     "[| ?P = ?P'; ?cs = ?cs';
         !!a b.
            [| a < length ?cs;
               b < stkLength ?P (fst (?cs ! (length ?cs - Suc a)))
                    (fst (snd (?cs ! (length ?cs - Suc a))))
                    (snd (snd (?cs ! (length ?cs - Suc a)))) |]
            ==> ?stk (a, b) = ?stk' (a, b) |]
      ==> stkss ?P ?cs ?stk = stkss ?P' ?cs' ?stk'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("SemanticsWF.find_handler_loc_fun_eq",
     "find_handler ?P\<^bsub>wf\<^esub> ?a ?h
       (snd (snd (state_to_jvm_state ?P ?cs (?h, ?stk, ?loc)))) =
      (?xf, ?h', ?frs) ==>
      update_loc ?loc ?frs = ?loc",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 31,
                  template_app
                   (template_hole 30,
                    template_app (template_hole 29, template_var 8))),
                template_var 7),
              template_var 6),
            template_app
             (template_hole 28,
              template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_hole 25),
                  template_app
                   (template_app
                     (template_hole 24,
                      template_app
                       (template_hole 23,
                        template_app
                         (template_app (template_hole 22, template_var 6),
                          template_app
                           (template_app (template_hole 21, template_var 5),
                            template_var 4)))),
                    template_app
                     (template_app
                       (template_hole 20,
                        template_app
                         (template_app
                           (template_app (template_hole 19, template_var 8),
                            template_var 3),
                          template_app
                           (template_hole 18,
                            template_app
                             (template_hole 17,
                              template_app
                               (template_app
                                 (template_hole 22, template_var 6),
                                template_app
                                 (template_app
                                   (template_hole 21, template_var 5),
                                  template_var 4)))))),
                      template_app
                       (template_app
                         (template_hole 16,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 15, template_var 8),
                              template_var 3),
                            template_app
                             (template_hole 14,
                              template_app
                               (template_hole 17,
                                template_app
                                 (template_app
                                   (template_hole 22, template_var 6),
                                  template_app
                                   (template_app
                                     (template_hole 21, template_var 5),
                                    template_var 4)))))),
                        template_var 3))))))),
          template_app
           (template_app (template_hole 26, template_var 2),
            template_app
             (template_app (template_hole 24, template_var 1),
              template_var 0)))],
       template_equation
        (template_app (template_hole 12, t_empty), template_var 4))),
    ("SemanticsWF.find_handler_stk_fun_eq'",
     "[| find_handler ?P\<^bsub>wf\<^esub> ?a ?h
          (zip (stkss ?P ?cs ?stk) (zip (locss ?P ?cs ?loc) ?cs)) =
         (None, ?h', ?frs);
         ?cd = length ?frs - 1; ?i = length (fst (hd ?frs)) - 1 |]
      ==> update_stk ?stk ?frs = ?stk((?cd, ?i) := Addr ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app
                   (template_hole 26,
                    template_app (template_hole 25, template_var 9))),
                template_var 8),
              template_var 7),
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 9),
                    template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_app (template_hole 21, template_var 9),
                      template_var 6),
                    template_var 4)),
                template_var 6))),
          template_app
           (template_app (template_hole 20, template_hole 19),
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 2)),
            template_hole 14)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2)))),
            template_hole 14))],
       template_equation
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 8))))),
    ("SemanticsWF.find_handler_stk_fun_eq",
     "find_handler ?P\<^bsub>wf\<^esub> ?a ?h
       (snd (snd (state_to_jvm_state ?P ?cs (?h, ?stk, ?loc)))) =
      (None, ?h', ?frs) ==>
      update_stk ?stk ?frs = ?stk
      ((length ?frs - 1, length (fst (hd ?frs)) - 1) := Addr ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app
                   (template_hole 33,
                    template_app (template_hole 32, template_var 7))),
                template_var 6),
              template_var 5),
            template_app
             (template_hole 31,
              template_app
               (template_hole 30,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_app
                   (template_app
                     (template_hole 27,
                      template_app
                       (template_hole 26,
                        template_app
                         (template_app (template_hole 25, template_var 5),
                          template_app
                           (template_app (template_hole 24, template_var 4),
                            template_var 3)))),
                    template_app
                     (template_app
                       (template_hole 23,
                        template_app
                         (template_app
                           (template_app (template_hole 22, template_var 7),
                            template_var 2),
                          template_app
                           (template_hole 21,
                            template_app
                             (template_hole 20,
                              template_app
                               (template_app
                                 (template_hole 25, template_var 5),
                                template_app
                                 (template_app
                                   (template_hole 24, template_var 4),
                                  template_var 3)))))),
                      template_app
                       (template_app
                         (template_hole 19,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 18, template_var 7),
                              template_var 2),
                            template_app
                             (template_hole 17,
                              template_app
                               (template_hole 20,
                                template_app
                                 (template_app
                                   (template_hole 25, template_var 5),
                                  template_app
                                   (template_app
                                     (template_hole 24, template_var 4),
                                    template_var 3)))))),
                        template_var 2))))))),
          template_app
           (template_app (template_hole 29, template_hole 28),
            template_app
             (template_app (template_hole 27, template_var 1),
              template_var 0)))],
       template_equation
        (template_app (template_hole 15, t_empty),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 12, template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 1, template_var 0)))),
                 template_hole 2))),
           template_app (template_hole 0, template_var 6))))),
    ("SemanticsWF.update_loc_Cons",
     "locss ?P (framestack_to_callstack ?frs')
       (update_loc ?loc ((?stk', ?loc', ?C', ?M', ?pc') # ?frs')) =
      locss ?P (framestack_to_callstack ?frs') (update_loc ?loc ?frs')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 19, template_var 7),
           template_app (template_hole 18, template_var 6)),
         template_app (template_hole 17, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 19, template_var 7),
           template_app (template_hole 18, template_var 6)),
         template_app (template_hole 17, t_empty)))),
    ("SemanticsWF.zip_stkss_locss_append_single",
     "zip (stkss ?P (?cs @ [(?C, ?M, ?pc)]) ?stk)
       (zip (locss ?P (?cs @ [(?C, ?M, ?pc)]) ?loc)
         (?cs @ [(?C, ?M, ?pc)])) =
      zip (stkss ?P (?cs @ [(?C, ?M, ?pc)]) ?stk)
       (zip (locss ?P (?cs @ [(?C, ?M, ?pc)]) ?loc) ?cs) @
      [(stks (stkLength ?P ?C ?M ?pc) (%a. ?stk (0, a)),
        locs (locLength ?P ?C ?M ?pc) (%a. ?loc (0, a)), ?C, ?M, ?pc)]",
     template_equation
      (template_app
        (template_app
          (template_hole 27,
           template_app
            (template_app
              (template_app (template_hole 26, template_var 6),
               template_app
                (template_app (template_hole 25, template_var 5),
                 template_app
                  (template_app
                    (template_hole 24,
                     template_app
                      (template_app (template_hole 23, template_var 4),
                       template_app
                        (template_app (template_hole 22, template_var 3),
                         template_var 2))),
                   template_hole 21))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 20,
             template_app
              (template_app
                (template_app (template_hole 19, template_var 6),
                 template_app
                  (template_app (template_hole 25, template_var 5),
                   template_app
                    (template_app
                      (template_hole 24,
                       template_app
                        (template_app (template_hole 23, template_var 4),
                         template_app
                          (template_app (template_hole 22, template_var 3),
                           template_var 2))),
                     template_hole 21))),
               template_var 0)),
           template_app
            (template_app (template_hole 25, template_var 5),
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 23, template_var 4),
                   template_app
                    (template_app (template_hole 22, template_var 3),
                     template_var 2))),
               template_hole 21)))),
       template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app
              (template_hole 27,
               template_app
                (template_app
                  (template_app (template_hole 26, template_var 6),
                   template_app
                    (template_app (template_hole 25, template_var 5),
                     template_app
                      (template_app
                        (template_hole 24,
                         template_app
                          (template_app (template_hole 23, template_var 4),
                           template_app
                            (template_app
                              (template_hole 22, template_var 3),
                             template_var 2))),
                       template_hole 21))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app
                    (template_app (template_hole 19, template_var 6),
                     template_app
                      (template_app (template_hole 25, template_var 5),
                       template_app
                        (template_app
                          (template_hole 24,
                           template_app
                            (template_app
                              (template_hole 23, template_var 4),
                             template_app
                              (template_app
                                (template_hole 22, template_var 3),
                               template_var 2))),
                         template_hole 21))),
                   template_var 0)),
               template_var 5))),
         template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 15, t_empty),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_hole 13),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 6, template_app (template_hole 5, template_var 6)),
                                     template_var 4),
                                   template_var 3)),
                               template_var 2)))))))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_app
                      (template_app (template_hole 11, template_hole 13),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 6, template_app (template_hole 5, template_var 6)),
                                     template_var 4),
                                   template_var 3)),
                               template_var 2))))))),
                 template_app
                  (template_app (template_hole 23, template_var 4),
                   template_app
                    (template_app (template_hole 22, template_var 3),
                     template_var 2))))),
           template_hole 0)))),
    ("SemanticsWF.bv_invariant",
     "[| valid_edge (?P, ?C0.0, ?Main) ?a;
         sourcenode ?a = (_ (?C, ?M, ?pc) # ?cs,?x _);
         targetnode ?a = (_ (?C', ?M', ?pc') # ?cs',?x' _);
         pred (kind ?a) ?s;
         ?x ~= None -->
         (EX a_pred.
             identifies (sourcenode a_pred) ((?C, ?M, ?pc) # ?cs) &
             targetnode a_pred = sourcenode ?a &
             valid_edge (?P, ?C0.0, ?Main) a_pred & pred (kind a_pred) ?s);
         ?P,(?C, ?M, ?pc) # ?cs \<turnstile>\<^bsub>BV\<^esub> ?s \<surd> |]
      ==> ?P,(?C', ?M', ?pc') #
             ?cs' \<turnstile>\<^bsub>BV\<^esub> transfer (kind ?a)
            ?s \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 14),
                  template_app
                   (template_app (template_hole 18, template_var 13),
                    template_var 12))),
              template_var 11)
            ),
        template_equation
         (template_app (template_hole 16, template_var 11),
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 10),
                    template_app
                     (template_app (template_hole 12, template_var 9),
                      template_var 8))),
                template_var 7)),
            template_var 6)),
        template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 11)),
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 5),
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_var 3))),
                template_var 2)),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 10, template_var 11))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_hole 4))),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 14),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 10),
                      template_app
                       (template_app (template_hole 12, template_var 9),
                        template_var 8))),
                  template_var 7)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 14),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 5),
                     template_app
                      (template_app (template_hole 12, template_var 4),
                       template_var 3))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 10, template_var 11))),
               template_var 0))
           ))),
    ("SemanticsWF.update_stk_Cons",
     "stkss ?P (framestack_to_callstack ?frs')
       (update_stk ?stk ((?stk', ?loc', ?C', ?M', ?pc') # ?frs')) =
      stkss ?P (framestack_to_callstack ?frs') (update_stk ?stk ?frs')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 18, template_var 7),
           template_app (template_hole 17, template_var 6)),
         template_app (template_hole 16, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 18, template_var 7),
           template_app (template_hole 17, template_var 6)),
         template_app (template_hole 16, t_empty)))),
    ("SemanticsWF.update_loc_s2jvm",
     "update_loc ?loc
       (snd (snd (state_to_jvm_state ?P ?cs (?h, ?stk, ?loc)))) =
      ?loc",
     template_equation
      (template_app (template_hole 27, t_empty), template_var 2)),
    ("SemanticsWF.update_stk_s2jvm",
     "update_stk ?stk
       (snd (snd (state_to_jvm_state ?P ?cs (?h, ?stk, ?loc)))) =
      ?stk",
     template_equation
      (template_app (template_hole 26, t_empty), template_var 3)),
    ("SemanticsWF.find_handler_exec_correct",
     "[| ?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- state_to_jvm_state
                     ?P ?cs (?h, ?stk, ?loc) [ok];
         ?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- find_handler
                     ?P\<^bsub>wf\<^esub> ?a ?h
                     (zip (stkss ?P ?cs ?stk)
                       (zip (locss ?P ?cs ?loc) ?cs)) [ok];
         find_handler_for ?P (cname_of ?h ?a) ?cs =
         (?C', ?M', ?pc') # ?cs' |]
      ==> ?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h,
                      (stks (stkLength ?P ?C' ?M' ?pc')
                        (%a'. (?stk
                               ((length ?cs',
                                 stkLength ?P ?C' ?M' ?pc' - Suc 0) :=
                                  Addr ?a))
                               (length ?cs', a')),
                       locs (locLength ?P ?C' ?M' ?pc')
                        (%a. ?loc (length ?cs', a)),
                       ?C', ?M', ?pc') #
                      zip (stkss ?P ?cs' ?stk)
                       (zip (locss ?P ?cs' ?loc) ?cs')) [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 43,
                  template_app
                   (template_hole 42,
                    template_app (template_hole 41, template_var 9))),
                template_app
                 (template_hole 40,
                  template_app (template_hole 41, template_var 9))),
              template_app
               (template_app (template_hole 39, template_hole 38),
                template_app
                 (template_app
                   (template_hole 37,
                    template_app
                     (template_hole 36,
                      template_app
                       (template_app (template_hole 35, template_var 8),
                        template_app
                         (template_app (template_hole 34, template_var 7),
                          template_var 6)))),
                  template_app
                   (template_app
                     (template_hole 33,
                      template_app
                       (template_app
                         (template_app (template_hole 32, template_var 9),
                          template_var 5),
                        template_app
                         (template_hole 31,
                          template_app
                           (template_hole 30,
                            template_app
                             (template_app
                               (template_hole 35, template_var 8),
                              template_app
                               (template_app
                                 (template_hole 34, template_var 7),
                                template_var 6)))))),
                    template_app
                     (template_app
                       (template_hole 29,
                        template_app
                         (template_app
                           (template_app (template_hole 28, template_var 9),
                            template_var 5),
                          template_app
                           (template_hole 27,
                            template_app
                             (template_hole 30,
                              template_app
                               (template_app
                                 (template_hole 35, template_var 8),
                                template_app
                                 (template_app
                                   (template_hole 34, template_var 7),
                                  template_var 6)))))),
                      template_var 5)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 43,
                  template_app
                   (template_hole 42,
                    template_app (template_hole 41, template_var 9))),
                template_app
                 (template_hole 40,
                  template_app (template_hole 41, template_var 9))),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 26,
                      template_app
                       (template_hole 42,
                        template_app (template_hole 41, template_var 9))),
                    template_var 4),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 33,
                    template_app
                     (template_app
                       (template_app (template_hole 32, template_var 9),
                        template_var 5),
                      template_var 7)),
                  template_app
                   (template_app
                     (template_hole 29,
                      template_app
                       (template_app
                         (template_app (template_hole 28, template_var 9),
                          template_var 5),
                        template_var 6)),
                    template_var 5))))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 24, template_var 9),
              template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app (template_var 8, template_var 4)))),
            template_var 5),
          template_app
           (template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 20, template_var 3),
                template_app
                 (template_app (template_hole 19, template_var 2),
                  template_var 1))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 43,
                 template_app
                  (template_hole 42,
                   template_app (template_hole 41, template_var 9))),
               template_app
                (template_hole 40,
                 template_app (template_hole 41, template_var 9))),
             template_app
              (template_app (template_hole 39, template_hole 38),
               template_app
                (template_app (template_hole 37, template_var 8),
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app (template_hole 16, t_empty),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_hole 6),
                               template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10,
                                   template_app
                                    (template_hole 9,
                                     template_app
(template_app
  (template_hole 8,
   template_app
    (template_app
      (template_app
        (template_hole 40, template_app (template_hole 41, template_var 9)),
       template_var 3),
     template_var 2)),
 template_var 1)))))))),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 16, t_empty),
                             template_app
                              (template_app
                                (template_hole 3, template_hole 6),
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 0,
                                   template_app
                                    (template_hole 9,
                                     template_app
(template_app
  (template_hole 8,
   template_app
    (template_app
      (template_app
        (template_hole 40, template_app (template_hole 41, template_var 9)),
       template_var 3),
     template_var 2)),
 template_var 1))))))),
                         template_app
                          (template_app (template_hole 20, template_var 3),
                           template_app
                            (template_app
                              (template_hole 19, template_var 2),
                             template_var 1))))),
                   template_app
                    (template_app
                      (template_hole 33,
                       template_app
                        (template_app
                          (template_app (template_hole 32, template_var 9),
                           template_var 0),
                         template_var 7)),
                     template_app
                      (template_app
                        (template_hole 29,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 28, template_var 9),
                             template_var 0),
                           template_var 6)),
                       template_var 0))))))
           ))),
    ("SemanticsWF.s2j_id",
     "?P\<^bsub>wf\<^esub>,?P\<^bsub>\<Phi>\<^esub> |- (None, ?h',
                  ?frs') [ok] ==>
      state_to_jvm_state ?P (framestack_to_callstack ?frs')
       (?h, update_stk ?stk ?frs', update_loc ?loc ?frs') =
      (None, ?h, ?frs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app
                   (template_hole 31,
                    template_app (template_hole 30, template_var 5))),
                template_app
                 (template_hole 29,
                  template_app (template_hole 30, template_var 5))),
              template_app
               (template_app (template_hole 28, template_hole 27),
                template_app
                 (template_app (template_hole 26, template_var 4),
                  template_var 3)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 28, template_hole 27),
           template_app
            (template_app
              (template_hole 26,
               template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 23, template_var 2),
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app (template_hole 21, t_empty)),
                     template_app (template_hole 21, t_empty))))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 5),
                     template_app (template_hole 5, template_var 3)),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 23, template_var 2),
                         template_app
                          (template_app
                            (template_hole 22,
                             template_app (template_hole 21, t_empty)),
                           template_app (template_hole 21, t_empty))))))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 5),
                       template_app (template_hole 5, template_var 3)),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 23, template_var 2),
                           template_app
                            (template_app
                              (template_hole 22,
                               template_app (template_hole 21, t_empty)),
                             template_app (template_hole 21, t_empty))))))),
                 template_app (template_hole 5, template_var 3))))),
         template_app
          (template_app (template_hole 28, template_hole 27),
           template_app
            (template_app (template_hole 26, template_var 2),
             template_var 3)))))]:
   (string * thm * template) list
### theory "Draft.SemanticsWFMoreTemplates"
### 0.504s elapsed time, 0.756s cpu time, 0.169s GC time
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
Exception- TOPLEVEL_ERROR raised
