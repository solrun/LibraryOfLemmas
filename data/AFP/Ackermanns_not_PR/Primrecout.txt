Loading theory "Draft.Primrec" (required by "Draft.PrimrecMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.561s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  hd0 :: "nat list => nat"
Found termination order: "{}"
Proofs for inductive predicate(s) "PRIMREC"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.269s elapsed time, 1.091s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Primrec"
### 0.330s elapsed time, 1.317s cpu time, 0.170s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.401s elapsed time, 1.530s cpu time, 0.170s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.797s elapsed time, 2.477s cpu time, 0.369s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.038s elapsed time, 2.990s cpu time, 0.804s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.926s elapsed time, 4.669s cpu time, 1.006s GC time
Loading theory "Draft.Templates" (required by "Draft.PrimrecMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.070s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PrimrecMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.518s cpu time, 0.074s GC time
Loading theory "Draft.PrimrecMoreTemplates"
val templateLemmas =
   [("Primrec.less_ack1", "?i < ack ?i ?j",
     template_inequation
      (less_than, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Primrec.less_ack2", "?j < ack ?i ?j",
     template_inequation
      (less_than, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Primrec.SC", "SC (?x # ?l) = Suc ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Primrec.PROJ_0", "PROJ 0 (?x # ?l) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Primrec.SC_case", "SC ?l < ack 1 (sum_list ?l)",
     template_inequation
      (less_than, template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Primrec.CONSTANT_case", "CONSTANT ?k ?l < ack ?k (sum_list ?l)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Primrec.PROJ_case", "PROJ ?i ?l < ack 0 (sum_list ?l)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Primrec.ack_less_ack_Suc2", "ack ?i ?j < ack ?i (Suc ?j)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Primrec.ack_less_ack_Suc1", "ack ?i ?j < ack (Suc ?i) ?j",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Primrec.PREC_0", "PREC ?f ?g (0 # ?l) = ?f ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_var 2, template_var 0))),
    ("Primrec.ack2_le_ack1", "ack ?i (Suc ?j) <= ack (Suc ?i) ?j",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Primrec.ack_1", "ack (Suc 0) ?j = ?j + 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Primrec.ack_less_mono1_aux", "ack ?i ?k < ack (Suc (?i + ?i')) ?k",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 2, template_var 2), template_var 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_var 1))),
    ("Primrec.COMP_1", "COMP ?g [?f] ?l = ?g [?f ?l]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 1, template_var 0)),
           template_hole 0)))),
    ("Primrec.ack_less_mono1", "?i < ?j ==> ack ?i ?k < ack ?j ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Primrec.ack_less_mono2", "?j < ?k ==> ack ?i ?j < ack ?i ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Primrec.ack_le_mono1", "?i <= ?j ==> ack ?i ?k <= ack ?j ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Primrec.ack_le_mono2", "?j <= ?k ==> ack ?i ?j <= ack ?i ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Primrec.ack_2", "ack (Suc (Suc 0)) ?j = 2 * ?j + 3",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 7, template_hole 6))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_hole 1))))),
    ("Primrec.ack_nest_bound",
     "ack ?i1.0 (ack ?i2.0 ?j) < ack (2 + (?i1.0 + ?i2.0)) ?j",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Primrec.ack_bounds_PRIMREC",
     "PRIMREC ?f ==> EX k. ALL l. ?f l < ack k (sum_list l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Primrec.ack_add_bound",
     "ack ?i1.0 ?j + ack ?i2.0 ?j < ack (4 + (?i1.0 + ?i2.0)) ?j",
     template_inequation
      (less_than,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 1, template_hole 0)))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))),
         template_var 1))),
    ("Primrec.PREC_Suc",
     "PREC ?f ?g (Suc ?x # ?l) = ?g (PREC ?f ?g (?x # ?l) # ?x # ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Primrec.ack_add_bound2",
     "?i < ack ?k ?j ==> ?i + ?j < ack (4 + ?k) ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 1, template_hole 0)))),
               template_var 1)),
           template_var 0)))),
    ("Primrec.ack_3", "ack (Suc (Suc (Suc 0))) ?j = 2 ^ (?j + 3) - 3",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 8,
               template_app (template_hole 8, template_hole 7)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_hole 2))))),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_hole 2))))),
    ("Primrec.COMP_map_aux",
     "ALL f:set ?fs.
         PRIMREC f & (EX kf. ALL l. f l < ack kf (sum_list l)) ==>
      EX k. ALL l. (SUM f<-?fs. f l) < ack k (sum_list l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Primrec.PREC_case",
     "[| !!l. ?f l < ack ?kf (sum_list l);
         !!l. ?g l < ack ?kg (sum_list l) |]
      ==> EX k. ALL l. PREC ?f ?g l < ack k (sum_list l)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Primrec.PREC_case_aux",
     "[| !!l. ?f l + sum_list l < ack ?kf (sum_list l);
         !!l. ?g l + sum_list l < ack ?kg (sum_list l) |]
      ==> PREC ?f ?g ?l + sum_list ?l
          < ack (Suc (?kf + ?kg)) (sum_list ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 0)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1))),
           template_app (template_hole 3, template_var 0))))),
    ("Primrec.COMP_case",
     "[| ALL l. ?g l < ack ?kg (sum_list l);
         ALL f:set ?fs.
            PRIMREC f & (EX kf. ALL l. f l < ack kf (sum_list l)) |]
      ==> EX k. ALL l. COMP ?g ?fs l < ack k (sum_list l)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.PrimrecMoreTemplates"
### 0.254s elapsed time, 0.335s cpu time, 0.000s GC time
val it = (): unit
