Loading theory "Draft.Misc" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.KPL_execution_thread" via "Draft.KPL_state" via "Draft.KPL_syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Misc"
### 0.044s elapsed time, 0.214s cpu time, 0.000s GC time
Loading theory "Draft.KPL_syntax" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.KPL_execution_thread" via "Draft.KPL_state")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.523s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.844s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.280s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.852s cpu time, 0.907s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.069s elapsed time, 3.908s cpu time, 0.826s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.KPL_syntax"
### 1.900s elapsed time, 6.173s cpu time, 1.089s GC time
Loading theory "Draft.KPL_state" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.KPL_execution_thread")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.994s elapsed time, 6.235s cpu time, 1.098s GC time
Loading theory "Draft.Templates" (required by "Draft.KPL_execution_threadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KPL_execution_threadMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.KPL_state"
### 0.454s elapsed time, 0.965s cpu time, 0.111s GC time
Loading theory "Draft.KPL_execution_thread" (required by "Draft.KPL_execution_threadMoreTemplates")
### Missing patterns in function definition:
### !!va b. eval_word (Loc (Name va)) b = undefined
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.555s elapsed time, 1.187s cpu time, 0.130s GC time
Proofs for inductive predicate(s) "step_t"
  Proving monotonicity ...
### theory "Draft.KPL_execution_thread"
### 0.539s elapsed time, 0.970s cpu time, 0.129s GC time
Loading theory "Draft.KPL_execution_threadMoreTemplates"
val templateLemmas =
   [("KPL_execution_thread.T_Assign_helper",
     "[| eval_bool ?p ?\<tau>;
         ?l' = (l ?\<tau>)(Inl ?v := eval_word ?e ?\<tau>);
         ?\<tau>' = ?\<tau>(| l := ?l' |) |]
      ==> step_t ?a (?\<tau>, Assign (Var ?v) ?e, ?p) ?\<tau>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              template_app (template_hole 8, template_var 3)),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 5))),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 5, t_empty), template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_var 2)),
                   template_var 6))),
             template_var 1)
           ))),
    ("KPL_execution_thread.T_Write_helper",
     "[| eval_bool ?p ?\<tau>;
         ?sh' = (sh ?\<tau>)
         (eval_word ?e1.0 ?\<tau> := eval_word ?e2.0 ?\<tau>);
         ?W' = W ?\<tau> Un {eval_word ?e1.0 ?\<tau>};
         ?a : {No_Abst, Eq_Abst};
         ?\<tau>' = ?\<tau>(| sh := ?sh', W := ?W' |) |]
      ==> step_t ?a (?\<tau>, Write ?e1.0 ?e2.0, ?p) ?\<tau>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 6)),
              template_app
               (template_app (template_hole 17, template_var 4),
                template_var 6)),
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 6))),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 6)),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 17, template_var 4),
                  template_var 6)),
              template_hole 12))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 10, template_hole 8),
                  template_hole 7)))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 5, t_empty),
            template_app
             (template_app (template_hole 4, t_empty), template_var 6)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3)),
                   template_var 7))),
             template_var 0)
           ))),
    ("KPL_execution_thread.T_Read_helper",
     "[| eval_bool ?p ?\<tau>;
         ?l' = (l ?\<tau>)(Inl ?v := sh ?\<tau> (eval_word ?e ?\<tau>));
         ?R' = R ?\<tau> Un {eval_word ?e ?\<tau>}; ?a : {No_Abst, Eq_Abst};
         ?\<tau>' = ?\<tau>(| l := ?l', R := ?R' |) |]
      ==> step_t ?a (?\<tau>, Read (Var ?v) ?e, ?p) ?\<tau>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_hole 22,
                template_app (template_hole 21, template_var 6)),
              template_app (template_hole 20, template_var 4)),
            template_app
             (template_app (template_hole 19, template_var 6),
              template_app
               (template_app (template_hole 18, template_var 3),
                template_var 6)))),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 6)),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 6)),
              template_hole 13))),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app (template_hole 11, template_hole 9),
                  template_hole 8)))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 6, t_empty),
            template_app
             (template_app (template_hole 5, t_empty), template_var 6)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 4)),
                       template_var 3)),
                   template_var 7))),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.KPL_execution_threadMoreTemplates"
### 0.371s elapsed time, 0.548s cpu time, 0.050s GC time
val it = (): unit
