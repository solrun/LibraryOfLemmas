Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.501s cpu time, 0.041s GC time
Loading theory "List_Interleaving.ListInterleaving" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.DeterministicProcesses" via "Draft.IpurgeUnwinding")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.820s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.256s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.778s cpu time, 0.847s GC time
Loading theory "Noninterference_CSP.CSPNoninterference" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.DeterministicProcesses" via "Draft.IpurgeUnwinding")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 4.104s cpu time, 0.844s GC time
Found termination order: "size <*mlex*> {}"
### theory "List_Interleaving.ListInterleaving"
### 1.304s elapsed time, 4.972s cpu time, 0.935s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Noninterference_CSP.CSPNoninterference"
### 0.517s elapsed time, 1.489s cpu time, 0.180s GC time
Loading theory "Draft.IpurgeUnwinding" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.DeterministicProcesses")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.052s elapsed time, 6.840s cpu time, 1.186s GC time
Loading theory "Draft.Templates" (required by "Draft.DeterministicProcessesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DeterministicProcessesMoreTemplates")
consts
  sources :: "('d * 'd) set => ('a => 'd) => 'd => 'a list => 'd set"
consts
  ipurge_tr_rev :: "('d * 'd) set => ('a => 'd) => 'd => 'a list => 'a list"
consts
  sources_aux ::
    "('d * 'd) set => ('a => 'd) => 'd set => 'a list => 'd set"
consts
  ipurge_tr_rev_aux ::
    "('d * 'd) set => ('a => 'd) => 'd set => 'a list => 'a list"
consts
  offset :: "nat => 'a => 'a list => nat option"
### theory "Draft.IpurgeUnwinding"
### 0.814s elapsed time, 1.725s cpu time, 0.179s GC time
Loading theory "Draft.DeterministicProcesses" (required by "Draft.DeterministicProcessesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.573s elapsed time, 1.254s cpu time, 0.225s GC time
### theory "Draft.DeterministicProcesses"
### 0.136s elapsed time, 0.278s cpu time, 0.088s GC time
Loading theory "Draft.DeterministicProcessesMoreTemplates"
val templateLemmas =
   [("DeterministicProcesses.trace_set_traces", "trace_set (traces ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("DeterministicProcesses.d_implies_ruc",
     "deterministic ?P ==> ref_union_closed ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("DeterministicProcesses.ts_process_d",
     "trace_set ?T ==> deterministic (ts_process ?T)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("DeterministicProcesses.d_equals_ts_process_traces",
     "deterministic ?P = (ts_process (traces ?P) = ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("DeterministicProcesses.d_divergences",
     "deterministic ?P ==> divergences ?P = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("DeterministicProcesses.d_implies_ts_process_traces",
     "deterministic ?P ==> ts_process (traces ?P) = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("DeterministicProcesses.ts_process_traces",
     "trace_set ?T ==> traces (ts_process ?T) = ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("DeterministicProcesses.ts_process_traces_implies_d",
     "ts_process (traces ?P) = ?P ==> deterministic ?P",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)),
          template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("DeterministicProcesses.dfc_implies_dwfc",
     "d_future_consistent ?P ?D ?R ==>
      d_weakly_future_consistent ?P ?I ?D ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("DeterministicProcesses.d_fc_equals_dfc",
     "deterministic ?P ==>
      future_consistent ?P ?D ?R = d_future_consistent ?P ?D ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DeterministicProcesses.d_wfc_equals_dwfc",
     "deterministic ?P ==>
      weakly_future_consistent ?P ?I ?D ?R =
      d_weakly_future_consistent ?P ?I ?D ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("DeterministicProcesses.dfc_equals_dwfc_rel_ipurge",
     "d_future_consistent ?P ?D (rel_ipurge ?P ?I ?D) =
      d_weakly_future_consistent ?P ?I ?D (rel_ipurge ?P ?I ?D)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1)))),
    ("DeterministicProcesses.d_ipurge_unwinding",
     "deterministic ?P ==>
      secure ?P ?I ?D =
      d_weakly_future_consistent ?P ?I ?D (rel_ipurge ?P ?I ?D)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("DeterministicProcesses.ts_process_next_events",
     "trace_set ?T ==>
      (?x : next_events (ts_process ?T) ?xs) = (?xs @ [?x] : ?T)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_var 2)))),
    ("DeterministicProcesses.ts_ipurge_unwinding",
     "trace_set ?T ==>
      secure (ts_process ?T) ?I ?D =
      d_weakly_future_consistent (ts_process ?T) ?I ?D
       (rel_ipurge (ts_process ?T) ?I ?D)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_var 0))))),
    ("DeterministicProcesses.ts_process_failures",
     "trace_set ?T ==>
      failures (ts_process ?T) =
      {(xs, X). xs : ?T & (ALL x:X. xs @ [x] ~: ?T)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_equation
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))))),
    ("DeterministicProcesses.ts_process_refusals",
     "[| trace_set ?T; ?xs : ?T |]
      ==> refusals (ts_process ?T) ?xs = {X. ALL x:X. ?xs @ [x] ~: ?T}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("DeterministicProcesses.ts_process_rep",
     "trace_set ?T ==>
      Rep_process (ts_process ?T) =
      ({(xs, X). xs : ?T & (ALL x:X. xs @ [x] ~: ?T)}, {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 0)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9, template_app (template_hole 8, t_empty))),
           template_hole 0)))),
    ("DeterministicProcesses.ts_process_futures",
     "trace_set ?T ==>
      futures (ts_process ?T) ?xs =
      {(ys, Y). ?xs @ ys : ?T & (ALL y:Y. ?xs @ ys @ [y] ~: ?T)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 1)),
           template_var 0),
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.DeterministicProcessesMoreTemplates"
### 0.525s elapsed time, 1.149s cpu time, 0.760s GC time
val it = (): unit
