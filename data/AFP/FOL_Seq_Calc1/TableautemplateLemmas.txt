   [("Tableau.ex_all_closed", "EX m. list_all (FOL_Fitting.closed m) ?G",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Tableau.map_sub_consts_Nil", "map (sub_consts []) ?G = ?G",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Tableau.Shift", "\<stileturn> rotate1 ?G ==> \<stileturn> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Tableau.sub_consts_Neg",
     "sub_consts ?cs (Neg ?p) = Neg (sub_consts ?cs ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Tableau.subcs_map", "subcs ?c ?s ?G = map (subc ?c ?s) ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Tableau.infinite_nonempty", "infinite ?A ==> EX x. x : ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Tableau.eval_conjoin",
     "list_all (eval ?e ?f ?g) ?G = eval ?e ?f ?g (conjoin ?G)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tableau.sub_consts_And",
     "sub_consts ?cs (And ?p ?q) =
      And (sub_consts ?cs ?p) (sub_consts ?cs ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Tableau.TC_soundness",
     "\<stileturn> ?G ==> EX p:set ?G. ~ eval ?e ?f ?g p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             t_empty)
           ))),
    ("Tableau.Swap",
     "\<stileturn> ?B # ?A # ?G ==> \<stileturn> ?A # ?B # ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Tableau.TC_subcs",
     "[| infinite UNIV; \<stileturn> ?G |] ==> \<stileturn> subcs ?c ?s ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_hole 2))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Tableau.TC_psubst",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (psubst ?f) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Tableau.TC_map_subc",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (subc ?c ?s) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Tableau.new_conjoin", "new ?c (conjoin ?G) ==> news ?c ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)
           ))),
    ("Tableau.TC_vars_for_consts",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (%p. vars_for_consts p ?cs) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Tableau.closed_sub_consts",
     "length ?cs = ?k ==>
      FOL_Fitting.closed ?m (sub_consts ?cs ?p) =
      FOL_Fitting.closed (?m + ?k) ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Tableau.sub_consts_conjoin",
     "eval ?e ?f ?g (sub_consts ?cs (conjoin ?G)) =
      eval ?e ?f ?g (conjoin (map (sub_consts ?cs) ?G))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("Tableau.all_sub_consts_conjoin",
     "list_all (eval ?e ?f ?g) (map (sub_consts ?cs) ?G) =
      eval ?e ?f ?g (sub_consts ?cs (conjoin ?G))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Tableau.closed_sub",
     "?k <= ?m ==>
      FOL_Fitting.closed (Suc ?m) ?p =
      FOL_Fitting.closed ?m (?p[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.closed_sub'",
     "?k <= ?m ==> closedt (Suc ?m) ?t = closedt ?m (?t[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.closed_sub'",
     "?k <= ?m ==> closedts (Suc ?m) ?l = closedts ?m (?l[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.tableau_soundness",
     "[| tableauproof ?ps ?p; list_all (eval ?e ?f ?g) ?ps |]
      ==> eval ?e ?f ?g ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Tableau.valid_sub_consts",
     "ALL e f g. eval e f g ?p ==> eval ?e ?f ?g (sub_consts ?cs ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Tableau.tableau_completeness",
     "ALL e f g. list_all (eval e f g) ?G --> eval e f g ?p ==>
      tableauproof ?G ?p",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Tableau.all_fresh_constants",
     "infinite UNIV ==>
      EX cs. length cs = ?m & list_all (%c. news c ?G) cs & distinct cs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_hole 9))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Tableau.vars_for_consts_sub_consts",
     "[| FOL_Fitting.closed (length ?cs) ?p; list_all (%c. new c ?p) ?cs;
         distinct ?cs |]
      ==> vars_for_consts (sub_consts ?cs ?p) ?cs = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Tableau.tableau_completeness'",
     "[| FOL_Fitting.closed 0 ?p; list_all (FOL_Fitting.closed 0) ?ps;
         ALL e f g. list_all (eval e f g) ?ps --> eval e f g ?p |]
      ==> tableauproof ?ps ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 8, template_hole 7)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Tableau.eval_sub_consts",
     "[| ALL e f g. eval e f g ?p --> eval e f g ?q;
         eval ?e ?f ?g (sub_consts ?cs ?p) |]
      ==> eval ?e ?f ?g (sub_consts ?cs ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Tableau.all_vars_for_consts_sub_consts",
     "[| list_all (FOL_Fitting.closed (length ?cs)) ?G;
         list_all (%c. news c ?G) ?cs; distinct ?cs |]
      ==> map (%p. vars_for_consts p ?cs) (map (sub_consts ?cs) ?G) = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Tableau.valid_sub",
     "ALL e f g. eval e f g ?p --> eval e f g ?q ==>
      eval ?e ?f ?g (?p[?t/?m]) --> eval ?e ?f ?g (?q[?t/?m])",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Tableau.valid_all_sub_consts",
     "ALL e f g. list_all (eval e f g) ?G --> eval e f g ?p ==>
      list_all (eval ?e ?f ?g) (map (sub_consts ?cs) ?G) -->
      eval ?e ?f ?g (sub_consts ?cs ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 5))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)))
           )))]
