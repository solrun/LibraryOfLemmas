   [("Sequent.Shift", "\<turnstile> rotate1 ?G ==> \<turnstile> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Sequent.TC_SC", "\<stileturn> ?G ==> \<turnstile> map compl ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Sequent.SC_soundness",
     "\<turnstile> ?G ==> EX p:set ?G. eval ?e ?f ?g p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             t_empty)
           ))),
    ("Sequent.new_compl", "new ?n ?p ==> new ?n (compl ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("Sequent.Swap",
     "\<turnstile> ?B # ?A # ?G ==> \<turnstile> ?A # ?B # ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Sequent.compl",
     "compl ?p = Neg ?p | (EX q. compl ?p = q & ?p = Neg q)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 1, t_empty))
         )),
    ("Sequent.news_compl", "news ?n ?G ==> news ?n (map compl ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Sequent.SC_completeness",
     "ALL e f g. list_all (eval e f g) ?ps --> eval e f g ?p ==>
      \<turnstile> ?p # map compl ?ps",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)))
           )))]
