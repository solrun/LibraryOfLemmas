Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.TableauMoreTemplates" via "Draft.Tableau" via "Draft.Common" via "FOL-Fitting.FOL_Fitting" via "HOL-Library.Countable")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.513s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.799s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.288s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.423s elapsed time, 1.680s cpu time, 0.122s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.TableauMoreTemplates" via "Draft.Tableau" via "Draft.Common" via "FOL-Fitting.FOL_Fitting")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.804s elapsed time, 3.172s cpu time, 0.330s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.059s elapsed time, 3.838s cpu time, 0.865s GC time
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.322s elapsed time, 4.210s cpu time, 0.926s GC time
Loading theory "FOL-Fitting.FOL_Fitting" (required by "Draft.TableauMoreTemplates" via "Draft.Tableau" via "Draft.Common")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.044s elapsed time, 6.296s cpu time, 1.135s GC time
Loading theory "Draft.Templates" (required by "Draft.TableauMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TableauMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.776s elapsed time, 1.875s cpu time, 0.837s GC time
consts
  size_form :: "('a, 'b) form => nat"
consts
  closedt :: "nat => 'a FOL_Fitting.term => bool"
  closedts :: "nat => 'a FOL_Fitting.term list => bool"
consts
  closed :: "nat => ('a, 'b) form => bool"
### Ambiguous input (line 120 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Var) ("_position" i))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" k) ("_position" i))
###       ("_applC" ("_position" Var)
###         ("\<^const>Groups.minus_class.minus" ("_position" i)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" i) ("_position" k))
###         ("_position" s) ("_applC" ("_position" Var) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt" ("_applC" ("_position" Var) ("_position" i))
###       ("_position" s) ("_position" k))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" k) ("_position" i))
###       ("_applC" ("_position" Var)
###         ("\<^const>Groups.minus_class.minus" ("_position" i)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" i) ("_position" k))
###         ("_position" s) ("_applC" ("_position" Var) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts" ("_applC" ("_position" Var) ("_position" i))
###       ("_position" s) ("_position" k))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" k) ("_position" i))
###       ("_applC" ("_position" Var)
###         ("\<^const>Groups.minus_class.minus" ("_position" i)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" i) ("_position" k))
###         ("_position" s) ("_applC" ("_position" Var) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("\<^fixed>substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("_applC" ("_position" ts)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("_applC" ("_position" ts)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" a) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" a)
###         ("_applC" ("_position" ts)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>List.list.Nil")
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt" ("\<^const>List.list.Nil") ("_position" s)
###       ("_position" k))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts" ("\<^const>List.list.Nil") ("_position" s)
###       ("_position" k))
###     ("\<^const>List.list.Nil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 27 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" t)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k))))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" t)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k))))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" t)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k))))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substt" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substt" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substt" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substts" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substt"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substts" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>substts"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_position" s) ("_position" k))
###     ("\<^const>List.list.Cons"
###       ("\<^fixed>substts" ("_position" t) ("_position" s) ("_position" k))
###       ("_applC" ("_position" ts)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" t)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###             ("_position" k))))
###       ("\<^fixed>substt" ("_position" ts) ("_position" s)
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  substt ::
    "'a FOL_Fitting.term
     => 'a FOL_Fitting.term => nat => 'a FOL_Fitting.term"
  substts ::
    "'a FOL_Fitting.term list
     => 'a FOL_Fitting.term => nat => 'a FOL_Fitting.term list"
consts
  liftt :: "'a FOL_Fitting.term => 'a FOL_Fitting.term"
  liftts :: "'a FOL_Fitting.term list => 'a FOL_Fitting.term list"
### Ambiguous input (line 135 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" FF)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_position" FF)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_position" FF) ("_position" s) ("_position" k))
###     ("_position" FF)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts" ("_position" FF) ("_position" s)
###       ("_position" k))
###     ("_position" FF)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt" ("_position" FF) ("_position" s)
###       ("_position" k))
###     ("_position" FF)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TT)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_position" TT)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_position" TT) ("_position" s) ("_position" k))
###     ("_position" TT)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts" ("_position" TT) ("_position" s)
###       ("_position" k))
###     ("_position" TT)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt" ("_position" TT) ("_position" s)
###       ("_position" k))
###     ("_position" TT)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substt" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^const>FOL_Fitting.substts" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^fixed>subst" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Pred)
###         ("_cargs" ("_position" b) ("_position" ts)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Pred)
###       ("_cargs" ("_position" b)
###         ("\<^fixed>subst" ("_position" ts) ("_position" s)
###           ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" And)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" And)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Or) ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Or)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("_applC" ("_position" p)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###               ("_position" k))))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst"
###       ("_applC" ("_position" Impl)
###         ("_cargs" ("_position" p) ("_position" q)))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Impl)
###       ("_cargs"
###         ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###           ("_position" k))
###         ("\<^const>FOL_Fitting.substt" ("_position" q) ("_position" s)
###           ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Neg) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substt" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Neg) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substt" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Neg) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substt" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Neg) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substt" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Neg) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Neg) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Neg) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Neg) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" s)
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Neg) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Neg)
###       ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Neg) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Neg)
###       ("\<^fixed>subst" ("_position" p) ("_position" s) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Forall) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Forall) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Forall) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Forall) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Forall) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Forall) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Forall) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Forall) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Forall) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Forall)
###       ("\<^fixed>subst" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Forall) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Forall)
###       ("\<^fixed>subst" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 143 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Exists) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Exists) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Exists) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Exists) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substt" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Exists) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Exists) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substts"
###       ("_applC" ("_position" Exists) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>FOL_Fitting.substt"
###       ("_applC" ("_position" Exists) ("_position" p)) ("_position" s)
###       ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^const>FOL_Fitting.substts" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" Exists) ("_position" p))
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" s)
###           ("_position" k))))
###     ("_applC" ("_position" Exists)
###       ("\<^fixed>subst" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subst" ("_applC" ("_position" Exists) ("_position" p))
###       ("_position" s) ("_position" k))
###     ("_applC" ("_position" Exists)
###       ("\<^fixed>subst" ("_position" p)
###         ("_applC" ("_position" liftt) ("_position" s))
###         ("_applC" ("_position" Suc) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subst :: "('a, 'b) form => 'a FOL_Fitting.term => nat => ('a, 'b) form"
### Ambiguous input (line 152 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" t))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.substt" ("_position" t) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" t))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.substts" ("_position" t) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" t))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.subst" ("_position" t) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" t))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("_position" i)
###         ("_applC" ("_position" t)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" u)
###               ("_position" i))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" ts))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.substt" ("_position" ts) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" ts))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.substts" ("_position" ts) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" ts))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_position" i)
###         ("\<^const>FOL_Fitting.subst" ("_position" ts) ("_position" u)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###         ("_position" ts))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedts)
###       ("_cargs" ("_position" i)
###         ("_applC" ("_position" ts)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" u)
###               ("_position" i))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###           ("_position" p))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_position" i)
###           ("\<^const>FOL_Fitting.substt" ("_position" p) ("_position" t)
###             ("_position" i)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###           ("_position" p))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_position" i)
###           ("\<^const>FOL_Fitting.substts" ("_position" p) ("_position" t)
###             ("_position" i)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###           ("_position" p))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_position" i)
###           ("\<^const>FOL_Fitting.subst" ("_position" p) ("_position" t)
###             ("_position" i)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" closedt)
###       ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_applC" ("_position" Suc) ("_position" i))
###           ("_position" p))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" closed)
###         ("_cargs" ("_position" i)
###           ("_applC" ("_position" p)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" t) ("_position" i)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  paramst :: "'a FOL_Fitting.term => 'a set"
  paramsts :: "'a FOL_Fitting.term list => 'a set"
consts
  params :: "('a, 'b) form => 'a set"
consts
  psubstt :: "('a => 'c) => 'a FOL_Fitting.term => 'c FOL_Fitting.term"
  psubstts ::
    "('a => 'c) => 'a FOL_Fitting.term list => 'c FOL_Fitting.term list"
consts
  psubst :: "('a => 'c) => ('a, 'b) form => ('c, 'b) form"
consts
  evalt ::
    "(nat => 'c) => ('a => 'c list => 'c) => 'a FOL_Fitting.term => 'c"
  evalts ::
    "(nat => 'c)
     => ('a => 'c list => 'c) => 'a FOL_Fitting.term list => 'c list"
consts
  eval ::
    "(nat => 'c)
     => ('a => 'c list => 'c)
        => ('b => 'c list => bool) => ('a, 'b) form => bool"
### Ambiguous input (line 412 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.subst" ("_position" a)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" p)
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" p))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" n)
###           ("_applC" ("_position" params) ("_position" a))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>deriv" ("_position" G)
###           ("_applC" ("_position" Forall) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substts" ("_position" a)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" p)
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" p))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" n)
###           ("_applC" ("_position" params) ("_position" a))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>deriv" ("_position" G)
###           ("_applC" ("_position" Forall) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substt" ("_position" a)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" p)
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" p))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" n)
###           ("_applC" ("_position" params) ("_position" a))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>deriv" ("_position" G)
###           ("_applC" ("_position" Forall) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" a)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero"))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" p)
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" p))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" n)
###           ("_applC" ("_position" params) ("_position" a))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>deriv" ("_position" G)
###           ("_applC" ("_position" Forall) ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Forall) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" a)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Forall) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.subst" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Forall) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substts" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Forall) ("_position" a))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substt" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" a)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###             ("\<^const>Groups.zero_class.zero"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.subst" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substts" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("\<^const>FOL_Fitting.substt" ("_position" a) ("_position" t)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 416 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>deriv"
###         ("\<^const>List.list.Cons"
###           ("\<^const>FOL_Fitting.subst" ("_position" a)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_position" G))
###         ("_position" b)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" list_all)
###           ("_cargs"
###             ("_lambda" ("_position" p)
###               ("\<^const>Set.not_member" ("_position" n)
###                 ("_applC" ("_position" params) ("_position" p))))
###             ("_position" G))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" n)
###             ("_applC" ("_position" params) ("_position" a))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" b))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>deriv" ("_position" G) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>deriv"
###         ("\<^const>List.list.Cons"
###           ("\<^const>FOL_Fitting.substts" ("_position" a)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_position" G))
###         ("_position" b)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" list_all)
###           ("_cargs"
###             ("_lambda" ("_position" p)
###               ("\<^const>Set.not_member" ("_position" n)
###                 ("_applC" ("_position" params) ("_position" p))))
###             ("_position" G))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" n)
###             ("_applC" ("_position" params) ("_position" a))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" b))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>deriv" ("_position" G) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>deriv"
###         ("\<^const>List.list.Cons"
###           ("\<^const>FOL_Fitting.substt" ("_position" a)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero"))
###           ("_position" G))
###         ("_position" b)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" list_all)
###           ("_cargs"
###             ("_lambda" ("_position" p)
###               ("\<^const>Set.not_member" ("_position" n)
###                 ("_applC" ("_position" params) ("_position" p))))
###             ("_position" G))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" n)
###             ("_applC" ("_position" params) ("_position" a))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" b))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>deriv" ("_position" G) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>deriv" ("_position" G)
###       ("_applC" ("_position" Exists) ("_position" a))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>deriv"
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" a)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" n) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero"))))
###           ("_position" G))
###         ("_position" b)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" list_all)
###           ("_cargs"
###             ("_lambda" ("_position" p)
###               ("\<^const>Set.not_member" ("_position" n)
###                 ("_applC" ("_position" params) ("_position" p))))
###             ("_position" G))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" n)
###             ("_applC" ("_position" params) ("_position" a))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" n)
###               ("_applC" ("_position" params) ("_position" b))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>deriv" ("_position" G) ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "deriv"
  Proving monotonicity ...
### Ambiguous input (line 660 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 256 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("_applC" ("_position" P)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("_applC" ("_position" P)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("\<^const>FOL_Fitting.subst" ("_position" P)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder" ("_position" P)
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Forall) ("_position" P)))
###   ("_position" S))
### ("\<^const>HOL.Ex_binder" ("_position" x)
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("_applC" ("_position" P)
###             ("_list"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###                 ("\<^const>Groups.zero_class.zero")))))))
###     ("_position" C))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 685 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 256 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("_applC" ("_position" P)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###               ("\<^const>Groups.zero_class.zero")))))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("_applC" ("_position" P)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" t)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.subst" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substt" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alt_consistency) ("_position" C))
###     ("\<^const>HOL.All_binder" ("_position" S)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" S) ("_position" C))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" p) ("_position" ts))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Pred)
###                     ("_cargs" ("_position" p) ("_position" ts)))
###                   ("_position" S))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" Neg)
###                     ("_applC" ("_position" Pred)
###                       ("_cargs" ("_position" p) ("_position" ts))))
###                   ("_position" S)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" FF) ("_position" S))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member"
###                 ("_applC" ("_position" Neg) ("_position" TT))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.All_binder" ("_position" Z)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" Neg)
###                         ("_applC" ("_position" Neg) ("_position" Z)))
###                       ("_position" S))
###                     ("\<^const>Set.member"
###                       ("\<^const>Set.union" ("_position" S)
###                         ("_Finset" ("_position" Z)))
###                       ("_position" C))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" A) ("_position" B))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" And)
###                           ("_cargs" ("_position" A) ("_position" B)))
###                         ("_position" S))
###                       ("\<^const>Set.member"
###                         ("\<^const>Set.union" ("_position" S)
###                           ("_Finset"
###                             ("_args" ("_position" A) ("_position" B))))
###                         ("_position" C))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" A) ("_position" B))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_applC" ("_position" Neg)
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B))))
###                           ("_position" S))
###                         ("\<^const>Set.member"
###                           ("\<^const>Set.union" ("_position" S)
###                             ("_Finset"
###                               ("_args"
###                                 ("_applC" ("_position" Neg) ("_position" A))
###                                 ("_applC" ("_position" Neg)
###                                   ("_position" B)))))
###                           ("_position" C))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" A) ("_position" B))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" Or)
###                               ("_cargs" ("_position" A) ("_position" B)))
###                             ("_position" S))
###                           ("\<^const>HOL.disj"
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" A)))
###                               ("_position" C))
###                             ("\<^const>Set.member"
###                               ("\<^const>Set.union" ("_position" S)
###                                 ("_Finset" ("_position" B)))
###                               ("_position" C)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" A) ("_position" B))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Set.member"
###                               ("_applC" ("_position" Neg)
###                                 ("_applC" ("_position" And)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B))))
###                               ("_position" S))
###                             ("\<^const>HOL.disj"
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" A))))
###                                 ("_position" C))
###                               ("\<^const>Set.member"
###                                 ("\<^const>Set.union" ("_position" S)
###                                   ("_Finset"
###                                     ("_applC" ("_position" Neg)
### ("_position" B))))
###                                 ("_position" C)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" A) ("_position" B))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>Set.member"
###                                 ("_applC" ("_position" Impl)
###                                   ("_cargs" ("_position" A)
###                                     ("_position" B)))
###                                 ("_position" S))
###                               ("\<^const>HOL.disj"
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_applC" ("_position" Neg) ("_position" A))))
###                                   ("_position" C))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset" ("_position" B)))
###                                   ("_position" C)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" A) ("_position" B))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_applC" ("_position" Neg)
###                                     ("_applC" ("_position" Impl)
### ("_cargs" ("_position" A) ("_position" B))))
###                                   ("_position" S))
###                                 ("\<^const>Set.member"
###                                   ("\<^const>Set.union" ("_position" S)
###                                     ("_Finset"
### ("_args" ("_position" A) ("_applC" ("_position" Neg) ("_position" B)))))
###                                   ("_position" C))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" P) ("_position" t))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" closedt)
###                                     ("_cargs"
### ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_applC" ("_position" Forall) ("_position" P)) ("_position" S))
###                                     ("\<^const>Set.member"
### ("\<^const>Set.union" ("_position" S)
###   ("_Finset"
###     ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###       ("\<^const>Groups.zero_class.zero"))))
### ("_position" C)))))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.All_binder"
###                                   ("_idts" ("_position" P) ("_position" t))
###                                   ("\<^const>HOL.implies"
###                                     ("_applC" ("_position" closedt)
### ("_cargs" ("\<^const>Groups.zero_class.zero") ("_position" t)))
###                                     ("\<^const>HOL.implies"
### ("\<^const>Set.member"
###   ("_applC" ("_position" Neg)
###     ("_applC" ("_position" Exists) ("_position" P)))
###   ("_position" S))
### ("\<^const>Set.member"
###   ("\<^const>Set.union" ("_position" S)
###     ("_Finset"
###       ("_applC" ("_position" Neg)
###         ("\<^const>FOL_Fitting.substts" ("_position" P) ("_position" t)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("_position" C)))))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member" ("_applC" ("_position" Exists) ("_position" P))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" P)
###           ("_list"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_applC" ("_position" App)
###                 ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###               ("\<^const>Groups.zero_class.zero"))))))
###     ("_position" C)))))
###                                   ("\<^const>HOL.All_binder"
###                                     ("_idts" ("_position" P)
### ("_position" x))
###                                     ("\<^const>HOL.implies"
### ("_Ball" ("_position" a) ("_position" S)
###   ("\<^const>Set.not_member" ("_position" x)
###     ("_applC" ("_position" params) ("_position" a))))
### ("\<^const>HOL.implies"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" Forall) ("_position" P)))
###     ("_position" S))
###   ("\<^const>Set.member"
###     ("\<^const>Set.union" ("_position" S)
###       ("_Finset"
###         ("_applC" ("_position" Neg)
###           ("\<^const>FOL_Fitting.subst" ("_position" P)
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" x) ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_position" C))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  dest_Neg :: "('a, 'b) form => ('a, 'b) form"
consts
  dest_Forall :: "('a, 'b) form => ('a, 'b) form"
consts
  dest_Exists :: "('a, 'b) form => ('a, 'b) form"
consts
  extend ::
    "(nat, 'b) form set
     => (nat, 'b) form set set
        => (nat => (nat, 'b) form) => nat => (nat, 'b) form set"
consts
  term_of_hterm :: "'a hterm => 'a FOL_Fitting.term"
  terms_of_hterms :: "'a hterm list => 'a FOL_Fitting.term list"
### Ambiguous input (line 1989 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" P)
###       ("_list"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("_applC" ("_position" App)
###             ("_cargs"
###               ("_Eps" ("_position" k)
###                 ("\<^const>Set.not_member" ("_position" k)
###                   ("_UNION" ("_position" p)
###                     ("\<^const>Set.union"
###                       ("_applC" ("_position" extend)
###                         ("_cargs" ("_position" S)
###                           ("_cargs" ("_position" C)
###                             ("_cargs" ("_position" f) ("_position" n)))))
###                       ("_Finset"
###                         ("_applC" ("_position" f) ("_position" n))))
###                     ("_applC" ("_position" params) ("_position" p)))))
###               ("\<^const>List.list.Nil")))
###           ("\<^const>Groups.zero_class.zero"))))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>FOL_Fitting.subst" ("_position" P)
###       ("_applC" ("_position" App)
###         ("_cargs"
###           ("_Eps" ("_position" k)
###             ("\<^const>Set.not_member" ("_position" k)
###               ("_UNION" ("_position" p)
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" extend)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" f) ("_position" n)))))
###                   ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                 ("_applC" ("_position" params) ("_position" p)))))
###           ("\<^const>List.list.Nil")))
###       ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>FOL_Fitting.substts" ("_position" P)
###       ("_applC" ("_position" App)
###         ("_cargs"
###           ("_Eps" ("_position" k)
###             ("\<^const>Set.not_member" ("_position" k)
###               ("_UNION" ("_position" p)
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" extend)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" f) ("_position" n)))))
###                   ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                 ("_applC" ("_position" params) ("_position" p)))))
###           ("\<^const>List.list.Nil")))
###       ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>FOL_Fitting.substt" ("_position" P)
###       ("_applC" ("_position" App)
###         ("_cargs"
###           ("_Eps" ("_position" k)
###             ("\<^const>Set.not_member" ("_position" k)
###               ("_UNION" ("_position" p)
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" extend)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" f) ("_position" n)))))
###                   ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                 ("_applC" ("_position" params) ("_position" p)))))
###           ("\<^const>List.list.Nil")))
###       ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2008 of "$AFP/FOL-Fitting/FOL_Fitting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substt" ("_position" P)
###         ("_applC" ("_position" App)
###           ("_cargs"
###             ("_Eps" ("_position" k)
###               ("\<^const>Set.not_member" ("_position" k)
###                 ("_UNION" ("_position" p)
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" extend)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" f) ("_position" n)))))
###                     ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                   ("_applC" ("_position" params) ("_position" p)))))
###             ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero")))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.substts" ("_position" P)
###         ("_applC" ("_position" App)
###           ("_cargs"
###             ("_Eps" ("_position" k)
###               ("\<^const>Set.not_member" ("_position" k)
###                 ("_UNION" ("_position" p)
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" extend)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" f) ("_position" n)))))
###                     ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                   ("_applC" ("_position" params) ("_position" p)))))
###             ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero")))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("\<^const>FOL_Fitting.subst" ("_position" P)
###         ("_applC" ("_position" App)
###           ("_cargs"
###             ("_Eps" ("_position" k)
###               ("\<^const>Set.not_member" ("_position" k)
###                 ("_UNION" ("_position" p)
###                   ("\<^const>Set.union"
###                     ("_applC" ("_position" extend)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" f) ("_position" n)))))
###                     ("_Finset" ("_applC" ("_position" f) ("_position" n))))
###                   ("_applC" ("_position" params) ("_position" p)))))
###             ("\<^const>List.list.Nil")))
###         ("\<^const>Groups.zero_class.zero")))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" Neg)
###       ("_applC" ("_position" P)
###         ("_list"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("_applC" ("_position" App)
###               ("_cargs"
###                 ("_Eps" ("_position" k)
###                   ("\<^const>Set.not_member" ("_position" k)
###                     ("_UNION" ("_position" p)
###                       ("\<^const>Set.union"
###                         ("_applC" ("_position" extend)
###                           ("_cargs" ("_position" S)
###                             ("_cargs" ("_position" C)
###                               ("_cargs" ("_position" f) ("_position" n)))))
###                         ("_Finset"
###                           ("_applC" ("_position" f) ("_position" n))))
###                       ("_applC" ("_position" params) ("_position" p)))))
###                 ("\<^const>List.list.Nil")))
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_applC" ("_position" extend)
###       ("_cargs" ("_position" S)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" f)
###             ("_applC" ("_position" Suc) ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subc_term ::
    "'a => 'a FOL_Fitting.term
           => 'a FOL_Fitting.term => 'a FOL_Fitting.term"
  subc_list ::
    "'a => 'a FOL_Fitting.term
           => 'a FOL_Fitting.term list => 'a FOL_Fitting.term list"
consts
  subc :: "'a => 'a FOL_Fitting.term => ('a, 'b) form => ('a, 'b) form"
consts
  subcs ::
    "'a => 'a FOL_Fitting.term => ('a, 'b) form list => ('a, 'b) form list"
consts
  put_imps :: "('a, 'b) form => ('a, 'b) form list => ('a, 'b) form"
consts
  put_unis :: "nat => ('a, 'b) form => ('a, 'b) form"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  vars_for_consts :: "('a, 'b) form => 'a list => ('a, 'b) form"
### theory "FOL-Fitting.FOL_Fitting"
### 5.633s elapsed time, 10.570s cpu time, 3.888s GC time
Loading theory "Draft.Common" (required by "Draft.TableauMoreTemplates" via "Draft.Tableau")
### theory "Draft.Common"
### 0.025s elapsed time, 0.043s cpu time, 0.000s GC time
Loading theory "Draft.Tableau" (required by "Draft.TableauMoreTemplates")
Proofs for inductive predicate(s) "TC"
  Proving monotonicity ...
consts
  sub_consts :: "'a list => ('a, 'b) form => ('a, 'b) form"
consts
  conjoin :: "('a, 'b) form list => ('a, 'b) form"
### theory "Draft.Tableau"
### 0.199s elapsed time, 0.202s cpu time, 0.000s GC time
Loading theory "Draft.TableauMoreTemplates"
val templateLemmas =
   [("Tableau.ex_all_closed", "EX m. list_all (FOL_Fitting.closed m) ?G",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Tableau.map_sub_consts_Nil", "map (sub_consts []) ?G = ?G",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Tableau.Shift", "\<stileturn> rotate1 ?G ==> \<stileturn> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Tableau.sub_consts_Neg",
     "sub_consts ?cs (Neg ?p) = Neg (sub_consts ?cs ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Tableau.subcs_map", "subcs ?c ?s ?G = map (subc ?c ?s) ?G",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Tableau.infinite_nonempty", "infinite ?A ==> EX x. x : ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Tableau.eval_conjoin",
     "list_all (eval ?e ?f ?g) ?G = eval ?e ?f ?g (conjoin ?G)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Tableau.sub_consts_And",
     "sub_consts ?cs (And ?p ?q) =
      And (sub_consts ?cs ?p) (sub_consts ?cs ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Tableau.TC_soundness",
     "\<stileturn> ?G ==> EX p:set ?G. ~ eval ?e ?f ?g p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             t_empty)
           ))),
    ("Tableau.Swap",
     "\<stileturn> ?B # ?A # ?G ==> \<stileturn> ?A # ?B # ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Tableau.TC_subcs",
     "[| infinite UNIV; \<stileturn> ?G |] ==> \<stileturn> subcs ?c ?s ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_hole 2))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Tableau.TC_psubst",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (psubst ?f) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Tableau.TC_map_subc",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (subc ?c ?s) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Tableau.new_conjoin", "new ?c (conjoin ?G) ==> news ?c ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)
           ))),
    ("Tableau.TC_vars_for_consts",
     "[| infinite UNIV; \<stileturn> ?G |]
      ==> \<stileturn> map (%p. vars_for_consts p ?cs) ?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Tableau.closed_sub_consts",
     "length ?cs = ?k ==>
      FOL_Fitting.closed ?m (sub_consts ?cs ?p) =
      FOL_Fitting.closed (?m + ?k) ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Tableau.sub_consts_conjoin",
     "eval ?e ?f ?g (sub_consts ?cs (conjoin ?G)) =
      eval ?e ?f ?g (conjoin (map (sub_consts ?cs) ?G))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("Tableau.all_sub_consts_conjoin",
     "list_all (eval ?e ?f ?g) (map (sub_consts ?cs) ?G) =
      eval ?e ?f ?g (sub_consts ?cs (conjoin ?G))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Tableau.closed_sub",
     "?k <= ?m ==>
      FOL_Fitting.closed (Suc ?m) ?p =
      FOL_Fitting.closed ?m (?p[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.closed_sub'",
     "?k <= ?m ==> closedt (Suc ?m) ?t = closedt ?m (?t[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.closed_sub'",
     "?k <= ?m ==> closedts (Suc ?m) ?l = closedts ?m (?l[App ?c []/?k])",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 3))))),
    ("Tableau.tableau_soundness",
     "[| tableauproof ?ps ?p; list_all (eval ?e ?f ?g) ?ps |]
      ==> eval ?e ?f ?g ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Tableau.valid_sub_consts",
     "ALL e f g. eval e f g ?p ==> eval ?e ?f ?g (sub_consts ?cs ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Tableau.tableau_completeness",
     "ALL e f g. list_all (eval e f g) ?G --> eval e f g ?p ==>
      tableauproof ?G ?p",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Tableau.all_fresh_constants",
     "infinite UNIV ==>
      EX cs. length cs = ?m & list_all (%c. news c ?G) cs & distinct cs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_hole 9))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Tableau.vars_for_consts_sub_consts",
     "[| FOL_Fitting.closed (length ?cs) ?p; list_all (%c. new c ?p) ?cs;
         distinct ?cs |]
      ==> vars_for_consts (sub_consts ?cs ?p) ?cs = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Tableau.tableau_completeness'",
     "[| FOL_Fitting.closed 0 ?p; list_all (FOL_Fitting.closed 0) ?ps;
         ALL e f g. list_all (eval e f g) ?ps --> eval e f g ?p |]
      ==> tableauproof ?ps ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 8, template_hole 7)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Tableau.eval_sub_consts",
     "[| ALL e f g. eval e f g ?p --> eval e f g ?q;
         eval ?e ?f ?g (sub_consts ?cs ?p) |]
      ==> eval ?e ?f ?g (sub_consts ?cs ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Tableau.all_vars_for_consts_sub_consts",
     "[| list_all (FOL_Fitting.closed (length ?cs)) ?G;
         list_all (%c. news c ?G) ?cs; distinct ?cs |]
      ==> map (%p. vars_for_consts p ?cs) (map (sub_consts ?cs) ?G) = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Tableau.valid_sub",
     "ALL e f g. eval e f g ?p --> eval e f g ?q ==>
      eval ?e ?f ?g (?p[?t/?m]) --> eval ?e ?f ?g (?q[?t/?m])",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Tableau.valid_all_sub_consts",
     "ALL e f g. list_all (eval e f g) ?G --> eval e f g ?p ==>
      list_all (eval ?e ?f ?g) (map (sub_consts ?cs) ?G) -->
      eval ?e ?f ?g (sub_consts ?cs ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 5))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)))
           )))]:
   (string * thm * template) list
### theory "Draft.TableauMoreTemplates"
### 0.355s elapsed time, 0.543s cpu time, 0.128s GC time
val it = (): unit
