Loading theory "Draft.ListTools" (required by "Draft.ListToolsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.ListTools"
### 0.089s elapsed time, 0.392s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.542s cpu time, 0.037s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.766s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.130s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.732s elapsed time, 2.239s cpu time, 0.275s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.761s elapsed time, 2.176s cpu time, 0.194s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.789s elapsed time, 4.059s cpu time, 0.806s GC time
Loading theory "Draft.Templates" (required by "Draft.ListToolsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.080s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListToolsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.454s elapsed time, 0.484s cpu time, 0.035s GC time
Loading theory "Draft.ListToolsMoreTemplates"
val templateLemmas =
   [("ListTools.is_first_cons", "is_first ?x (?y # ?ys) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation (template_var 2, template_var 1))),
    ("ListTools.is_proper_suffix_length_cmp",
     "is_proper_suffix ?a ?b ==> length ?a < length ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListTools.is_prefix_eq_proper_prefix",
     "is_prefix ?a ?b = (?a = ?b | is_proper_prefix ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListTools.is_suffix_eq_proper_suffix",
     "is_suffix ?a ?b = (?a = ?b | is_proper_suffix ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListTools.is_proper_prefix_eq_prefix",
     "is_proper_prefix ?a ?b = (?a ~= ?b & is_prefix ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListTools.is_proper_suffix_eq_suffix",
     "is_proper_suffix ?a ?b = (?a ~= ?b & is_suffix ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ListTools.is_prefix_unsplit",
     "is_prefix ?u ?a ==> ?u @ drop (length ?u) ?a = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("ListTools.le_take_same",
     "[| ?i <= ?j; take ?j ?a = take ?j ?b |] ==> take ?i ?a = take ?i ?b",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("ListTools.split_list_at",
     "?k < length ?D ==> ?D = take ?k ?D @ [?D ! ?k] @ drop (Suc ?k) ?D",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)))))),
    ("ListTools.take_eq_take_append",
     "[| ?i <= ?j; ?j <= length ?a |]
      ==> EX u. take ?j ?a = take ?i ?a @ u",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListTools.list_all_pos_neg_ex",
     "[| list_all ?P ?D; ~ list_all ?Q ?D |]
      ==> EX k<length ?D. ?P (?D ! k) & ~ ?Q (?D ! k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ListTools.is_first_drop_length",
     "[| ?k <= length ?a; length ?u < ?k; ?v = ?X # ?w;
         take ?k ?a = take ?k (?u @ ?v) |]
      ==> is_first ?X (drop (length ?u) ?a)",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app (template_hole 7, template_var 4)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 3),
          template_var 5),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 3, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 7, template_var 3)),
               template_var 4))
           )))]:
   (string * thm * template) list
### theory "Draft.ListToolsMoreTemplates"
### 0.282s elapsed time, 0.420s cpu time, 0.061s GC time
val it = (): unit
