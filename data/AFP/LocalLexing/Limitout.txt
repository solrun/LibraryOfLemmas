Loading theory "Draft.CFG" (required by "Draft.LimitMoreTemplates" via "Draft.Limit" via "Draft.LocalLexing")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale CFG
  fixes \<NN> :: "symbol set"
    and \<TT> :: "symbol set"
    and \<RR> :: "(symbol * symbol list) set"
    and \<SS> :: "symbol"
  assumes "CFG \<NN> \<TT> \<RR> \<SS>"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.CFG"
### 0.137s elapsed time, 0.570s cpu time, 0.049s GC time
Loading theory "Draft.LocalLexing" (required by "Draft.LimitMoreTemplates" via "Draft.Limit")
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.569s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list (%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.865s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.384s elapsed time, 1.545s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs")
locale LocalLexing
  fixes \<NN> :: "symbol set"
    and \<TT> :: "symbol set"
    and \<RR> :: "(symbol * symbol list) set"
    and \<SS> :: "symbol"
    and Lex :: "symbol => character list => nat => nat set"
    and
    Sel ::
      "(symbol * character list) set
       => (symbol * character list) set => (symbol * character list) set"
    and Doc :: "character list"
  assumes "LocalLexing \<NN> \<TT> \<RR> \<SS> Lex Sel"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order:
  "case_sum (%p. size (fst p)) (case_sum size (%p. size (fst p))) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*>
   case_sum (%p. size (snd p)) (case_sum size (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LocalLexing"
### 0.625s elapsed time, 2.471s cpu time, 0.219s GC time
Loading theory "Draft.Limit" (required by "Draft.LimitMoreTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Limit"
### 0.410s elapsed time, 1.496s cpu time, 0.691s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.683s cpu time, 0.910s GC time
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.041s elapsed time, 3.540s cpu time, 0.892s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.911s elapsed time, 5.248s cpu time, 1.085s GC time
Loading theory "Draft.Templates" (required by "Draft.LimitMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LimitMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.530s cpu time, 0.069s GC time
Loading theory "Draft.LimitMoreTemplates"
val templateLemmas =
   [("Limit.pointbase_is_continuous", "Limit.continuous (pointbase ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Limit.pointbase_is_mono", "mono (pointbase ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Limits.continuous_on_norm_id", "continuous_on ?S norm",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Limit.pointbased_mk_regular1", "pointbased (mk_regular1 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limit.pointbased_mk_regular2", "pointbased (mk_regular2 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limit.regular1", "regular (mk_regular1 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limit.regular2", "regular (mk_regular2 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limit.setmonotone_mk_regular1", "setmonotone (mk_regular1 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limit.setmonotone_mk_regular2", "setmonotone (mk_regular2 ?P ?F)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limits.Bfun_const", "Bfun (%_. ?c) ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)
         )),
    ("Limits.Zfun_zero", "Zfun (%x. 0::?'b) ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Limits.continuous_on_op_minus", "continuous_on ?s ((-) ?x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Limits.continuous_on_mult_const", "continuous_on ?s ((*) ?c)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Limits.compact_Icc", "compact {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Limits.linear_times", "linear ((*) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Limits.range_diff", "surj ((-) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Limits.range_add", "surj ((+) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Limits.continuous_at_dist", "isCont (dist ?a) ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Limit.chain_implies_mono", "chain ?C ==> incseq ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.continuous_imp_mono", "Limit.continuous ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.pointbased_implies_continuous",
     "pointbased ?f ==> Limit.continuous ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.pointwise_implies_pointbased", "pointwise ?f ==> pointbased ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.regular_implies_continuous",
     "regular ?f ==> Limit.continuous ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.regular_implies_setmonotone", "regular ?f ==> setmonotone ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limit.regular_implies_mono", "regular ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limits.eventually_not_equal_at_infinity",
     "\<forall>\<^sub>F x in at_infinity. x ~= ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Limits.Bseq_conv_Bfun", "Bseq ?X = Bseq ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Limit.continuous_limit",
     "Limit.continuous ?f ==> Limit.continuous (limit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limit.regular_limit", "regular ?f ==> regular (limit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limit.setmonotone_limit", "setmonotone ?f ==> setmonotone (limit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limit.mono_limit", "mono ?f ==> mono (limit ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limits.convergent_imp_Bseq", "convergent ?f ==> Bseq ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Limits.Cauchy_Bseq", "Cauchy ?X ==> Bseq ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Limits.convergent_minus_iff",
     "convergent ?X = convergent (%n. - ?X n)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Limits.convergent_Suc_iff",
     "convergent (%n. ?f (Suc n)) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Limit.continuous_funpower",
     "Limit.continuous ?f ==> Limit.continuous (funpower ?f ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limit.regular_funpower", "regular ?f ==> regular (funpower ?f ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limit.setmonotone_funpower",
     "setmonotone ?f ==> setmonotone (funpower ?f ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limit.subset_setmonotone", "setmonotone ?f ==> ?X <= ?f ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 1, template_var 0)))),
    ("Limit.mono_funpower", "mono ?f ==> mono (funpower ?f ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limits.lim_const_over_n",
     "(%n. ?a / of_nat n) \<longlonglongrightarrow> (0::?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("Limits.convergent_diff_const_right_iff",
     "convergent (%n. ?f n - ?c) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Limits.convergent_add_const_iff",
     "convergent (%n. ?c + ?f n) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 0))),
    ("Limits.convergent_add_const_right_iff",
     "convergent (%n. ?f n + ?c) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Limits.convergent_ignore_initial_segment",
     "convergent (%n. ?f (n + ?m)) = convergent ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, template_var 1))),
    ("Limits.convergent_norm",
     "convergent ?f ==> convergent (%n. norm (?f n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.convergent_of_real",
     "convergent ?f ==> convergent (%n. of_real (?f n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.Bseq_bdd_above", "Bseq ?X ==> bdd_above (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Limits.Bseq_bdd_below", "Bseq ?X ==> bdd_below (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Limits.filterlim_at_infinity_imp_not_convergent",
     "filterlim ?f at_infinity sequentially ==> ~ convergent ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Limits.Bseq_minus_iff", "Bseq (%n. - ?X n) = Bseq ?X",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Limits.Bseq_Suc_iff", "Bseq (%n. ?f (Suc n)) = Bseq ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Limits.filtermap_nhds_minus",
     "filtermap uminus (nhds ?a) = nhds (- ?a)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Limit.setmonotone_implies_chain_funpower",
     "setmonotone ?f ==> chain (%n. funpower ?f n ?I)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.monoseq_imp_convergent_iff_Bseq",
     "monoseq ?f ==> convergent ?f = Bseq ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Limits.isUCont_isCont", "isUCont ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 2)),
             template_var 1)
           ))),
    ("Limits.filterlim_at_top_imp_at_infinity",
     "filterlim ?f at_top ?F ==> filterlim ?f at_infinity ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Limit.natUnion_elem", "?x : ?f ?n ==> ?x : natUnion ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Limits.LIMSEQ_inverse_real_of_nat_add",
     "(%n. ?r + inverse (real (Suc n))) \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Limits.Bseq_add_iff", "Bseq (%x. ?f x + ?c) = Bseq ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_hole 0))),
    ("Limits.Bseq_subseq", "Bseq ?f ==> Bseq (%x. ?f (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Limits.Zfun_minus", "Zfun ?f ?F ==> Zfun (%x. - ?f x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Limits.continuous_minus",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. - ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_norm",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_rabs",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. \<bar>?f x\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_of_real",
     "Topological_Spaces.continuous ?F ?g ==>
      Topological_Spaces.continuous ?F (%x. of_real (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_norm",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_rabs",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. \<bar>?f x\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_minus",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. - ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_of_real",
     "continuous_on ?s ?g ==> continuous_on ?s (%x. of_real (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limit.fix_is_fix_of_limit", "?f ?I = ?I ==> limit ?f ?I = ?I",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Limits.Bseq_monoseq_convergent",
     "[| Bseq ?X; monoseq ?X |] ==> convergent ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limits.LIMSEQ_inverse_real_of_nat_add_minus",
     "(%n. ?r + - inverse (real (Suc n))) \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Limits.filterlim_at_infinity_conv_norm_at_top",
     "filterlim ?f at_infinity ?G = (LIM x ?G. norm (?f x) :> at_top)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_hole 3),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 0),
         template_var 0))),
    ("Limits.Zfun_norm_iff", "Zfun (%x. norm (?f x)) ?F = Zfun ?f ?F",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Limits.at_to_0", "at ?a = filtermap (%x. x + ?a) (at (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 0),
           template_hole 3)))),
    ("Limits.filtermap_at_minus", "filtermap uminus (at ?a) = at (- ?a)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Limits.filtermap_nhds_shift",
     "filtermap (%x. x - ?d) (nhds ?a) = nhds (?a - ?d)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Limit.regular_fixpoint",
     "regular ?f ==> ?f (limit ?f ?I) = limit ?f ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Limits.Bseq_ignore_initial_segment",
     "Bseq ?X ==> Bseq (%n. ?X (n + ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Limits.Bseq_bdd_above'",
     "Bseq ?X ==> bdd_above (range (%n. norm (?X n)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_hole 0))
           ))),
    ("Limits.Bseq_add", "Bseq ?f ==> Bseq (%x. ?f x + ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Limits.Zfun_mult_right", "Zfun ?f ?F ==> Zfun (%x. ?a * ?f x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_mult_left", "Zfun ?f ?F ==> Zfun (%x. ?f x * ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.mult_nat_right_at_top",
     "0 < ?c ==> LIM x sequentially. x * ?c :> sequentially",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_hole 0)
           ))),
    ("Limits.mult_nat_left_at_top",
     "0 < ?c ==> filterlim ((*) ?c) sequentially sequentially",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_hole 0)
           ))),
    ("Limits.continuous_power",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. ?f x ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_mult_left",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. ?c * ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_mult_right",
     "Topological_Spaces.continuous ?F ?f ==>
      Topological_Spaces.continuous ?F (%x. ?f x * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_mult_left",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. ?c * ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_mult_right",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. ?f x * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_power",
     "continuous_on ?s ?f ==> continuous_on ?s (%x. ?f x ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limit.subset_natUnion", "ALL n. ?X <= ?f n ==> ?X <= natUnion ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Limit.elem_natUnion", "ALL n. ?x : ?f n ==> ?x : natUnion ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limit.natUnion_upperbound", "(!!n. ?f n <= ?G) ==> natUnion ?f <= ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Limits.Bseq_offset", "Bseq (%n. ?X (n + ?k)) ==> Bseq ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0)
           ))),
    ("Limits.Bseq_eq_bounded", "range ?f <= {?a..?b} ==> Bseq ?f",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)
           ))),
    ("Limits.BseqI'", "(!!n. norm (?X n) <= ?K) ==> Bseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Limit.continuous_comp",
     "[| Limit.continuous ?f; Limit.continuous ?g |]
      ==> Limit.continuous (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Limit.regular_comp",
     "[| regular ?f; regular ?g |] ==> regular (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Limit.setmonotone_comp",
     "[| setmonotone ?f; setmonotone ?g |] ==> setmonotone (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Limit.mono_maps_chain_to_chain",
     "[| mono ?f; chain ?C |] ==> chain (?f o ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limits.range_mult", "range ((*) ?a) = (if ?a = 0 then {0} else UNIV)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 2),
                 template_hole 0)),
             template_hole 5)
           ))),
    ("Limits.eventually_at_top_to_right",
     "eventually ?P at_top =
      (\<forall>\<^sub>F x in at_right 0. ?P (inverse x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_hole 1))))),
    ("Limits.tendsto_Zfun_iff",
     "(?f \<longlongrightarrow> ?a) ?F = Zfun (%x. ?f x - ?a) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Limits.eventually_at_right_to_top",
     "eventually ?P (at_right 0) =
      (\<forall>\<^sub>F x in at_top. ?P (inverse x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_hole 3))),
       template_app
        (template_app (template_hole 5, t_empty), template_hole 0))),
    ("Limit.natUnion_shift",
     "chain ?C ==> natUnion (%n. ?C (n + ?m)) = natUnion ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, template_var 1)))),
    ("Limit.limit_is_idempotent",
     "regular ?f ==> limit ?f (limit ?f ?I) = limit ?f ?I",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Limits.filterlim_at_infinity_imp_norm_at_top",
     "filterlim ?f at_infinity ?F ==> LIM x ?F. norm (?f x) :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_var 0)
           ))),
    ("Limits.filterlim_realpow_sequentially_gt1",
     "1 < norm ?x ==> filterlim ((^) ?x) at_infinity sequentially",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 1),
             template_hole 0)
           ))),
    ("Limit.limit_elem", "?x : funpower ?f ?n ?X ==> ?x : limit ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Limits.filterlim_norm_at_top_imp_at_infinity",
     "LIM x ?F. norm (?f x) :> at_top ==> filterlim ?f at_infinity ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Limits.filterlim_int_of_nat_at_topD",
     "LIM x sequentially. ?f (int x) :> ?F ==> filterlim ?f ?F at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Limits.BfunI",
     "\<forall>\<^sub>F x in ?F. norm (?f x) <= ?K ==> Bfun ?f ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Limit.elem_setmonotone",
     "[| setmonotone ?f; ?x : ?X |] ==> ?x : ?f ?X",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_var 2, template_var 0))
           ))),
    ("Limits.LIMSEQ_inverse_real_of_nat_add_minus_mult",
     "(%n. ?r * (1 + - inverse (real (Suc n))))
      \<longlonglongrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 9, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Limit.elem_limit_simp",
     "(?x : limit ?f ?X) = (EX n. ?x : funpower ?f n ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Limits.filterlim_uminus_at_bot",
     "filterlim ?f at_bot ?F = (LIM x ?F. - ?f x :> at_top)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_hole 0),
         template_var 0))),
    ("Limits.filterlim_uminus_at_top",
     "filterlim ?f at_top ?F = (LIM x ?F. - ?f x :> at_bot)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_hole 0),
         template_var 0))),
    ("Limits.filterlim_at_bot_mirror",
     "filterlim ?f ?F at_bot = (LIM x at_top. ?f (- x) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_hole 2),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_hole 0))),
    ("Limits.filterlim_at_top_mirror",
     "filterlim ?f ?F at_top = (LIM x at_bot. ?f (- x) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_hole 2),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_hole 0))),
    ("Limits.tendsto_rabs_zero_iff",
     "((%x. \<bar>?f x\<bar>) \<longlongrightarrow> 0) ?F =
      (?f \<longlongrightarrow> 0) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Limits.tendsto_norm_zero_iff",
     "((%x. norm (?f x)) \<longlongrightarrow> 0) ?F =
      (?f \<longlongrightarrow> (0::?'b)) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Limits.filtermap_at_shift",
     "filtermap (%x. x - ?d) (at ?a) = at (?a - ?d)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Limits.at_right_to_0",
     "at_right ?a = filtermap (%x. x + ?a) (at_right 0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 0),
           template_app (template_hole 3, template_hole 0))))),
    ("Limits.LIMSEQ_inverse_realpow_zero",
     "1 < ?x ==> (%n. inverse (?x ^ n)) \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.filterlim_at_infinity_imp_eventually_ne",
     "filterlim ?f at_infinity ?F ==>
      \<forall>\<^sub>F z in ?F. ?f z ~= ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)
           ))),
    ("Limits.LIMSEQ_abs_realpow_zero2",
     "\<bar>?c\<bar> < 1 ==> (^) ?c \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.LIMSEQ_power_zero",
     "norm ?x < 1 ==> (^) ?x \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.isUCont_Cauchy",
     "[| isUCont ?f; Cauchy ?X |] ==> Cauchy (%n. ?f (?X n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Limit.natUnion_swap",
     "natUnion (%i. natUnion (?f i)) =
      natUnion (%j. natUnion (%i. ?f i j))",
     template_equation
      (template_app (template_hole 0, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Limits.eventually_at_infinity",
     "eventually ?P at_infinity = (EX b. ALL x. b <= norm x --> ?P x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_app (template_hole 4, t_empty))),
    ("Limits.Bseq_iff1a",
     "Bseq ?X = (EX N. ALL n. norm (?X n) < real (Suc N))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0), template_hole 6),
       template_app (template_hole 5, t_empty))),
    ("Limits.Bseq_iff",
     "Bseq ?X = (EX N. ALL n. norm (?X n) <= real (Suc N))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0), template_hole 6),
       template_app (template_hole 5, t_empty))),
    ("Limits.filterlim_at_top_to_right",
     "filterlim ?f ?F at_top = (LIM x at_right 0. ?f (inverse x) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty), template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_hole 1))))),
    ("Limits.eventually_at_to_0",
     "eventually ?P (at ?a) =
      (\<forall>\<^sub>F x in at (0::?'a). ?P (x + ?a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 2)))),
    ("Limits.lim_at_infinity_0",
     "(?f \<longlongrightarrow> ?l) at_infinity =
      (?f o inverse) \<midarrow>0::?'a\<rightarrow> ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 1),
           template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Limits.tendsto_minus_cancel_left",
     "(?f \<longlongrightarrow> - ?y) ?F =
      ((%x. - ?f x) \<longlongrightarrow> ?y) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Limits.filterlim_at_right_to_top",
     "filterlim ?f ?F (at_right 0) = (LIM x at_top. ?f (inverse x) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_hole 3))),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty), template_var 0),
         template_hole 0))),
    ("Limits.LIM_zero_iff",
     "((%x. ?f x - ?l) \<longlongrightarrow> (0::?'b)) ?F =
      (?f \<longlongrightarrow> ?l) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Limits.tendsto_of_real_iff",
     "((%x. of_real (?f x)) \<longlongrightarrow> of_real ?c) ?F =
      (?f \<longlongrightarrow> ?c) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Limits.at_right_minus",
     "at_right ?a = filtermap uminus (at_left (- ?a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Limits.at_left_minus",
     "at_left ?a = filtermap uminus (at_right (- ?a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Limits.LIMSEQ_divide_realpow_zero",
     "1 < ?x ==> (%n. ?a / ?x ^ n) \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.convergent_mult_const_iff",
     "?c ~= (0::?'a) ==> convergent (%n. ?c * ?f n) = convergent ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, template_var 0)))),
    ("Limits.convergent_mult_const_right_iff",
     "?c ~= (0::?'a) ==> convergent (%n. ?f n * ?c) = convergent ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, template_var 0)))),
    ("Limits.LIMSEQ_abs_realpow_zero",
     "\<bar>?c\<bar> < 1 ==>
      (^) \<bar>?c\<bar> \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.tendsto_norm_zero",
     "(?f \<longlongrightarrow> (0::?'b)) ?F ==>
      ((%x. norm (?f x)) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_hole 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Limits.tendsto_rabs_zero",
     "(?f \<longlongrightarrow> 0) ?F ==>
      ((%x. \<bar>?f x\<bar>) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 0)
           ))),
    ("Limits.lim_infinity_imp_sequentially",
     "(?f \<longlongrightarrow> ?l) at_infinity ==>
      (%n. ?f (real n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 4, template_var 0)),
             template_hole 0)
           ))),
    ("Limits.isCont_minus", "isCont ?f ?a ==> isCont (%x. - ?f x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_norm", "isCont ?f ?a ==> isCont (%x. norm (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Limits.isCont_rabs",
     "isCont ?f ?a ==> isCont (%x. \<bar>?f x\<bar>) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_of_real",
     "isCont ?g ?a ==> isCont (%x. of_real (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)
           ))),
    ("Limits.convergent_cong",
     "\<forall>\<^sub>F x in sequentially. ?f x = ?g x ==>
      convergent ?f = convergent ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_hole 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Limits.tendsto_rabs_zero_cancel",
     "((%x. \<bar>?f x\<bar>) \<longlongrightarrow> 0) ?F ==>
      (?f \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_hole 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Limits.tendsto_norm_zero_cancel",
     "((%x. norm (?f x)) \<longlongrightarrow> 0) ?F ==>
      (?f \<longlongrightarrow> (0::?'b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 4, template_hole 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Limits.decseq_bounded",
     "[| decseq ?X; ALL i. ?B <= ?X i |] ==> Bseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Limits.incseq_bounded",
     "[| incseq ?X; ALL i. ?X i <= ?B |] ==> Bseq ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Limits.monoseq_realpow",
     "[| 0 <= ?x; ?x <= 1 |] ==> monoseq ((^) ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.convergent_realpow",
     "[| 0 <= ?x; ?x <= 1 |] ==> convergent ((^) ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.filterlim_inverse_at_iff",
     "(LIM x ?F. inverse (?g x) :> at (0::?'b)) =
      filterlim ?g at_infinity ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty), template_hole 0),
         template_var 0))),
    ("Limits.filtermap_nhds_times",
     "?c ~= (0::?'a) ==> filtermap ((*) ?c) (nhds ?a) = nhds (?c * ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Limits.tendsto_norm",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. norm (?f x)) \<longlongrightarrow> norm ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Limits.LIM_zero",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. ?f x - ?l) \<longlongrightarrow> (0::?'b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 0)),
             template_var 0)
           ))),
    ("Limits.tendsto_rabs",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. \<bar>?f x\<bar>) \<longlongrightarrow> \<bar>?l\<bar>) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Limits.tendsto_divide_zero",
     "(?f \<longlongrightarrow> (0::?'a)) ?F ==>
      ((%x. ?f x / ?c) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.tendsto_of_real",
     "(?g \<longlongrightarrow> ?a) ?F ==>
      ((%x. of_real (?g x)) \<longlongrightarrow> of_real ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Limits.tendsto_mult_right_zero",
     "(?f \<longlongrightarrow> (0::?'a)) ?F ==>
      ((%x. ?c * ?f x) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.tendsto_mult_left_zero",
     "(?f \<longlongrightarrow> (0::?'a)) ?F ==>
      ((%x. ?f x * ?c) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.isCont_power", "isCont ?f ?a ==> isCont (%x. ?f x ^ ?n) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.tendsto_inverse_0_at_top",
     "filterlim ?f at_top ?F ==>
      ((%x. inverse (?f x)) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 1, template_hole 0)),
             template_var 0)
           ))),
    ("Limits.LIM_zero_cancel",
     "((%x. ?f x - ?l) \<longlongrightarrow> (0::?'b)) ?F ==>
      (?f \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 1, template_hole 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("Limits.tendsto_minus_cancel",
     "((%x. - ?f x) \<longlongrightarrow> - ?a) ?F ==>
      (?f \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty),
                template_app
                 (template_hole 0,
                  template_app (template_hole 1, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Limit.natUnion_subset",
     "(!!n. EX m. ?f n <= ?g m) ==> natUnion ?f <= natUnion ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Limit.continuous_apply",
     "[| Limit.continuous ?f; chain ?C |]
      ==> ?f (natUnion ?C) = natUnion (?f o ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Limits.Bseq_realpow", "[| 0 <= ?x; ?x <= 1 |] ==> Bseq ((^) ?x)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Limits.eventually_at_right_to_0",
     "eventually ?P (at_right ?a) =
      (\<forall>\<^sub>F x in at_right 0. ?P (x + ?a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_app (template_hole 2, template_hole 0))))),
    ("Limits.filterlim_at_to_0",
     "filterlim ?f ?F (at ?a) = (LIM x at (0::?'a). ?f (x + ?a) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 2)))),
    ("Limits.tendsto_add_const_iff",
     "((%x. ?c + ?f x) \<longlongrightarrow> ?c + ?d) ?F =
      (?f \<longlongrightarrow> ?d) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Limits.linear_plus_1_le_power",
     "0 <= ?x ==> real ?n * ?x + 1 <= (?x + 1) ^ ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_var 1)),
           template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1)),
           template_var 0)))),
    ("Limits.Bseq_cmult_iff",
     "?c ~= (0::?'a) ==> Bseq (%x. ?c * ?f x) = Bseq ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Limits.BseqI", "[| 0 < ?K; ALL n. norm (?X n) <= ?K |] ==> Bseq ?X",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Limits.isCont_iff",
     "isCont ?f ?x =
      (%h. ?f (?x + h)) \<midarrow>0::?'a\<rightarrow> ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_var 0, template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 0),
           template_hole 4)))),
    ("Limits.eventually_at_left_to_right",
     "eventually ?P (at_left ?a) =
      (\<forall>\<^sub>F x in at_right (- ?a). ?P (- x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Limits.filterlim_shift_iff",
     "filterlim (?f o (+) ?d) ?F (at (?a - ?d)) = filterlim ?f ?F (at ?a)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 3, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_hole 0)),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 0)))),
    ("Limits.filtermap_at_right_shift",
     "filtermap (%x. x - ?d) (at_right ?a) = at_right (?a - ?d)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Limits.BseqD", "Bseq ?X ==> EX K>0. ALL n. norm (?X n) <= K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Limits.tendsto_power",
     "(?f \<longlongrightarrow> ?a) ?F ==>
      ((%x. ?f x ^ ?n) \<longlongrightarrow> ?a ^ ?n) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Limits.tendsto_mult_left",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. ?c * ?f x) \<longlongrightarrow> ?c * ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_var 1)
           ))),
    ("Limits.tendsto_mult_right",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      ((%x. ?f x * ?c) \<longlongrightarrow> ?l * ?c) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Limits.lim_zero_infinity",
     "(%x. ?f ((1::?'a) / x)) \<midarrow>0::?'a\<rightarrow> ?l ==>
      (?f \<longlongrightarrow> ?l) at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 4, template_var 0)),
             template_hole 0)
           ))),
    ("Limits.Bseq_mult",
     "[| Bseq ?f; Bseq ?g |] ==> Bseq (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Limits.Zfun_diff",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x - ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_add",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x + ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.ZfunD",
     "[| Zfun ?f ?F; 0 < ?r |]
      ==> \<forall>\<^sub>F x in ?F. norm (?f x) < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_mult",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x * ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.LIMSEQ_realpow_zero",
     "[| 0 <= ?x; ?x < 1 |] ==> (^) ?x \<longlonglongrightarrow> 0",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_hole 6)),
             template_hole 0)
           ))),
    ("Limits.continuous_diff",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_power'",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x ^ ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)
           ))),
    ("Limits.continuous_dist",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_mult",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_add",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_mult'",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_scaleR",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x *\<^sub>R ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_power'",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. ?f x ^ ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_dist",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_mult",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_diff",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_add",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_mult'",
     "[| continuous_on ?A ?f; continuous_on ?A ?g |]
      ==> continuous_on ?A (%x. ?f x * ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_scaleR",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> continuous_on ?s (%x. ?f x *\<^sub>R ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Limits.Zfun_ssubst",
     "[| \<forall>\<^sub>F x in ?F. ?f x = ?g x; Zfun ?g ?F |]
      ==> Zfun ?f ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Limits.eventually_at_infinity_pos",
     "eventually ?p at_infinity = (EX b>0. ALL x. b <= norm x --> ?p x)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0), template_hole 8),
       template_app (template_hole 7, t_empty))),
    ("Limits.filterlim_at_right_to_0",
     "filterlim ?f ?F (at_right ?a) =
      (LIM x at_right 0. ?f (x + ?a) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_app (template_hole 2, template_hole 0))))),
    ("Limits.filterlim_shift",
     "filterlim ?f ?F (at ?a) ==>
      filterlim (?f o (+) ?d) ?F (at (?a - ?d))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_var 0))),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 3))
           ))),
    ("Limits.Zfun_le",
     "[| Zfun ?g ?F; ALL x. norm (?f x) <= norm (?g x) |] ==> Zfun ?f ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Limits.filterlim_power_at_infinity",
     "[| filterlim ?f at_infinity ?F; 0 < ?n |]
      ==> LIM x ?F. ?f x ^ ?n :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_hole 3),
             template_var 1)
           ))),
    ("Limits.filterlim_at_infinity_imp_filterlim_at_top",
     "[| filterlim ?f at_infinity ?F; \<forall>\<^sub>F x in ?F. 0 < ?f x |]
      ==> filterlim ?f at_top ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Limits.filterlim_at_infinity_imp_filterlim_at_bot",
     "[| filterlim ?f at_infinity ?F; \<forall>\<^sub>F x in ?F. ?f x < 0 |]
      ==> filterlim ?f at_bot ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Limits.convergent_diff",
     "[| convergent ?X; convergent ?Y |] ==> convergent (%n. ?X n - ?Y n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.convergent_add",
     "[| convergent ?X; convergent ?Y |] ==> convergent (%n. ?X n + ?Y n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.convergent_mult",
     "[| convergent ?X; convergent ?Y |] ==> convergent (%n. ?X n * ?Y n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.Bfun_inverse",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= (0::?'a) |]
      ==> Bfun (%x. inverse (?f x)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Limits.filterlim_at_left_to_right",
     "filterlim ?f ?F (at_left ?a) =
      (LIM x at_right (- ?a). ?f (- x) :> ?F)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Limits.LIM_offset_zero",
     "?f \<midarrow>?a\<rightarrow> ?L ==>
      (%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app (template_hole 3, template_hole 0),
               template_hole 2))
           ))),
    ("Limits.LIM_offset_zero_cancel",
     "(%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?L ==>
      ?f \<midarrow>?a\<rightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))
           ))),
    ("Limits.ZfunI",
     "(!!r. 0 < r ==> \<forall>\<^sub>F x in ?F. norm (?f x) < r) ==>
      Zfun ?f ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Limits.LIMSEQ_incseq_SUP",
     "[| bdd_above (range ?X); incseq ?X |]
      ==> ?X \<longlonglongrightarrow> Sup (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_hole 5)))),
             template_hole 0)
           ))),
    ("Limits.LIMSEQ_decseq_INF",
     "[| bdd_below (range ?X); decseq ?X |]
      ==> ?X \<longlonglongrightarrow> Inf (range ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_hole 5)))),
             template_hole 0)
           ))),
    ("Limits.Bseq_eventually_mono",
     "[| \<forall>\<^sub>F n in sequentially. norm (?f n) <= norm (?g n);
         Bseq ?g |]
      ==> Bseq ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_hole 2)
           ))),
    ("Limit.chain_cover_witness",
     "[| finite ?X; chain ?C; ?X <= natUnion ?C |] ==> EX n. ?X <= ?C n",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Limits.not_tendsto_and_filterlim_at_infinity",
     "[| ?F ~= bot; (?f \<longlongrightarrow> ?c) ?F;
         filterlim ?f at_infinity ?F |]
      ==> False",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 1),
              template_var 2)
            )],
       template_predicate (template_hole 0))),
    ("Limits.LIM_isCont_iff",
     "?f \<midarrow>?a\<rightarrow> ?f ?a =
      (%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?f ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app (template_var 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 4,
             template_app (template_var 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 2)))),
    ("Limits.filtermap_times_pos_at_right",
     "(0::?'a) < ?c ==>
      filtermap ((*) ?c) (at_right ?p) = at_right (?c * ?p)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))))),
    ("Limits.tendsto_zero_mult_left_iff",
     "?c ~= (0::?'a) ==>
      (%n. ?c * ?a n) \<longlonglongrightarrow> (0::?'a) =
      ?a \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0)))),
    ("Limits.tendsto_zero_mult_right_iff",
     "?c ~= (0::?'a) ==>
      (%n. ?a n * ?c) \<longlonglongrightarrow> (0::?'a) =
      ?a \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0)))),
    ("Limits.tendsto_zero_divide_iff",
     "?c ~= (0::?'a) ==>
      (%n. ?a n / ?c) \<longlonglongrightarrow> (0::?'a) =
      ?a \<longlonglongrightarrow> (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_hole 5)),
           template_hole 0)))),
    ("Limits.filterlim_pow_at_top",
     "[| 0 < ?n; filterlim ?f at_top ?F |]
      ==> LIM x ?F. ?f x ^ ?n :> at_top",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty), template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 1),
             template_var 0)
           ))),
    ("Limits.continuous_sgn",
     "[| Topological_Spaces.continuous ?F ?f;
         ?f (Lim ?F (%x. x)) ~= (0::?'b) |]
      ==> Topological_Spaces.continuous ?F (%x. sgn (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 2, template_var 1), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Limits.continuous_inverse",
     "[| Topological_Spaces.continuous ?F ?f;
         ?f (Lim ?F (%x. x)) ~= (0::?'b) |]
      ==> Topological_Spaces.continuous ?F (%x. inverse (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 2, template_var 1), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_sgn",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. sgn (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_inverse",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. inverse (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)
           ))),
    ("Limits.tendsto_power_zero",
     "[| filterlim ?f sequentially ?F; norm ?x < 1 |]
      ==> ((%y. ?x ^ ?f y) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 7),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 1, template_hole 0)),
             template_var 1)
           ))),
    ("Limits.tendsto_null_power",
     "[| (?f \<longlongrightarrow> (0::?'b)) ?F; 0 < ?n |]
      ==> ((%x. ?f x ^ ?n) \<longlongrightarrow> (0::?'b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_hole 3)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_hole 3)),
             template_var 1)
           ))),
    ("Limits.LIMSEQ_linear",
     "[| ?X \<longlonglongrightarrow> ?x; 0 < ?l |]
      ==> (%n. ?X (n * ?l)) \<longlonglongrightarrow> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_hole 3)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 1)),
             template_hole 3)
           ))),
    ("Limits.uniformly_continuous_imp_Cauchy_continuous",
     "[| uniformly_continuous_on ?S ?f; Cauchy ?\<sigma>;
         !!n. ?\<sigma> n : ?S |]
      ==> Cauchy (?f o ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Limits.Bseq_iff2",
     "Bseq ?X = (EX k>0. EX x. ALL n. norm (?X n + - x) <= k)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 0), template_hole 10),
       template_app (template_hole 9, t_empty))),
    ("Limit.pointwise_simp",
     "pointwise ?f ==> ?f ?X = \<Union> {?f {x} |x. x : ?X}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Limits.filterlim_inverse_at_top_iff",
     "\<forall>\<^sub>F x in ?F. 0 < ?f x ==>
      (LIM x ?F. inverse (?f x) :> at_top) =
      (?f \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_hole 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_hole 5)),
           template_var 0)))),
    ("Limits.LIM_offset",
     "?f \<midarrow>?a\<rightarrow> ?L ==>
      (%x. ?f (x + ?k)) \<midarrow>?a - ?k\<rightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 2))
           ))),
    ("Limits.isCont_sum",
     "ALL i:?A. isCont (?f i) ?a ==> isCont (%x. SUM i:?A. ?f i x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.continuous_sum",
     "(!!i. i : ?I ==> Topological_Spaces.continuous ?F (?f i)) ==>
      Topological_Spaces.continuous ?F (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_prod'",
     "(!!i. i : ?I ==> Topological_Spaces.continuous ?F (?f i)) ==>
      Topological_Spaces.continuous ?F (%x. PROD i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_sum",
     "(!!i. i : ?I ==> continuous_on ?S (?f i)) ==>
      continuous_on ?S (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_prod'",
     "(!!i. i : ?I ==> continuous_on ?S (?f i)) ==>
      continuous_on ?S (%x. PROD i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_prod",
     "(!!i. i : ?S ==> Topological_Spaces.continuous ?F (?f i)) ==>
      Topological_Spaces.continuous ?F (%x. PROD i:?S. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.continuous_on_prod",
     "(!!i. i : ?S ==> continuous_on ?s (?f i)) ==>
      continuous_on ?s (%x. PROD i:?S. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Limits.convergent_sum",
     "(!!i. i : ?A ==> convergent (?X i)) ==>
      convergent (%n. SUM i:?A. ?X i n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.Bseq_mono_convergent",
     "[| Bseq ?X; ALL m n. m <= n --> ?X m <= ?X n |] ==> convergent ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limits.continuous_power_int",
     "[| Topological_Spaces.continuous ?F ?f;
         ?f (Lim ?F (%x. x)) ~= (0::?'b) |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x powi ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 2, template_var 2), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_power_int",
     "[| continuous_on ?s ?f; ALL x:?s. ?f x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. ?f x powi ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Limits.tendsto_add_filterlim_at_infinity'",
     "[| filterlim ?f at_infinity ?F; (?g \<longlongrightarrow> ?c) ?F |]
      ==> LIM x ?F. ?f x + ?g x :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_hole 2),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 2),
             template_var 2)
           ))),
    ("Limit.natUnion_decompose",
     "[| ?p : natUnion ?S; !!n p. p : ?S n ==> ?P p |] ==> ?P ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Limits.eventually_ceiling_eq",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> \<forall>\<^sub>F x in ?F.
             \<lceil>?f x\<rceil> = \<lceil>?l\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)
           ))),
    ("Limits.eventually_floor_eq",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> \<forall>\<^sub>F x in ?F.
             \<lfloor>?f x\<rfloor> = \<lfloor>?l\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)
           ))),
    ("Limits.eventually_less_ceiling",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> \<forall>\<^sub>F x in ?F. ?f x < of_int \<lceil>?l\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("Limits.eventually_floor_less",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> \<forall>\<^sub>F x in ?F. of_int \<lfloor>?l\<rfloor> < ?f x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)
           ))),
    ("Limits.Lim_transform_eventually",
     "[| (?f \<longlongrightarrow> ?l) ?F;
         \<forall>\<^sub>F x in ?F. ?f x = ?g x |]
      ==> (?g \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2)),
             template_var 1)
           ))),
    ("Limits.tendsto_add_filterlim_at_infinity",
     "[| (?f \<longlongrightarrow> ?c) ?F; filterlim ?g at_infinity ?F |]
      ==> LIM x ?F. ?f x + ?g x :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.tendsto_sgn",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~= (0::?'a) |]
      ==> ((%x. sgn (?f x)) \<longlongrightarrow> sgn ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Limits.tendsto_inverse",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= (0::?'a) |]
      ==> ((%x. inverse (?f x)) \<longlongrightarrow> inverse ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Limits.isCont_sgn",
     "[| isCont ?f ?a; ?f ?a ~= (0::?'b) |] ==> isCont (%x. sgn (?f x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             t_empty)
           ))),
    ("Limits.continuous_at_within_sgn",
     "[| Topological_Spaces.continuous (at ?a within ?s) ?f;
         ?f ?a ~= (0::?'b) |]
      ==> Topological_Spaces.continuous (at ?a within ?s) (%x. sgn (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Limits.continuous_at_within_inverse",
     "[| Topological_Spaces.continuous (at ?a within ?s) ?f;
         ?f ?a ~= (0::?'b) |]
      ==> Topological_Spaces.continuous (at ?a within ?s)
           (%x. inverse (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Limits.uniformly_continuous_on_Cauchy",
     "[| uniformly_continuous_on ?S ?f; Cauchy ?X; !!n. ?X n : ?S |]
      ==> Cauchy (%n. ?f (?X n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Limits.Bseq_iff3",
     "Bseq ?X = (EX k>0. EX N. ALL n. norm (?X n + - ?X N) <= k)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 0), template_hole 10),
       template_app (template_hole 9, t_empty))),
    ("Limits.tendsto_mult_left_iff",
     "?c ~= (0::?'a) ==>
      ((%x. ?c * ?f x) \<longlongrightarrow> ?c * ?l) ?F =
      (?f \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Limits.tendsto_mult_right_iff",
     "?c ~= (0::?'a) ==>
      ((%x. ?f x * ?c) \<longlongrightarrow> ?l * ?c) ?F =
      (?f \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Limits.filterlim_at_top_iff_inverse_0",
     "\<forall>\<^sub>F x in ?F. 0 < ?f x ==>
      filterlim ?f at_top ?F = ((inverse o ?f) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty), template_hole 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app (template_hole 0, template_hole 6)),
           template_var 0)))),
    ("Limits.Lim_transform_eq",
     "((%x. ?f x - ?g x) \<longlongrightarrow> (0::?'a)) ?F ==>
      (?f \<longlongrightarrow> ?a) ?F = (?g \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Limits.tendsto_at_botI_sequentially",
     "(!!X. filterlim X at_bot sequentially ==>
            (%n. ?f (X n)) \<longlonglongrightarrow> ?y) ==>
      (?f \<longlongrightarrow> ?y) at_bot",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 4)
           ))),
    ("Limits.filterlim_inverse_at_top",
     "[| (?f \<longlongrightarrow> 0) ?F;
         \<forall>\<^sub>F x in ?F. 0 < ?f x |]
      ==> LIM x ?F. inverse (?f x) :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_hole 4)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 0),
             template_var 0)
           ))),
    ("Limits.filterlim_inverse_at_bot",
     "[| (?f \<longlongrightarrow> 0) ?F;
         \<forall>\<^sub>F x in ?F. ?f x < 0 |]
      ==> LIM x ?F. inverse (?f x) :> at_bot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_hole 4)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 0),
             template_var 0)
           ))),
    ("Limits.real_tendsto_divide_at_top",
     "[| (?f \<longlongrightarrow> ?c) ?F; filterlim ?g at_top ?F |]
      ==> ((%x. ?f x / ?g x) \<longlongrightarrow> 0) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, template_hole 0)),
             template_var 1)
           ))),
    ("Limits.continuous_at_within_power_int",
     "[| Topological_Spaces.continuous (at ?a within ?s) ?f;
         ?f ?a ~= (0::?'b) |]
      ==> Topological_Spaces.continuous (at ?a within ?s)
           (%x. ?f x powi ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Limit.limit_upperbound",
     "[| !!I. I <= ?G ==> ?f I <= ?G; ?I <= ?G |] ==> limit ?f ?I <= ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Limits.LIM_offset_zero_iff",
     "NO_MATCH (0::?'c) ?a ==>
      ?f \<midarrow>?a\<rightarrow> ?L =
      (%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_hole 2))))),
    ("Limits.open_Collect_positive",
     "continuous_on ?s ?f ==> EX A. open A & A Int ?s = {x: ?s. 0 < ?f x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Limits.LIMSEQ_inverse_zero",
     "(!!r. EX N. ALL n>=N. r < ?X n) ==>
      (%n. inverse (?X n)) \<longlonglongrightarrow> 0",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_hole 0)
           ))),
    ("Limits.Zfun_imp_Zfun",
     "[| Zfun ?f ?F;
         \<forall>\<^sub>F x in ?F. norm (?g x) <= norm (?f x) * ?K |]
      ==> Zfun ?g ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)
           ))),
    ("Limits.tendsto_of_int_ceiling",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> ((%x. of_int \<lceil>?f x\<rceil>) \<longlongrightarrow>
           of_int \<lceil>?l\<rceil>)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)))),
             template_var 0)
           ))),
    ("Limits.tendsto_of_int_floor",
     "[| (?f \<longlongrightarrow> ?l) ?F; ?l ~: \<int> |]
      ==> ((%x. of_int \<lfloor>?f x\<rfloor>) \<longlongrightarrow>
           of_int \<lfloor>?l\<rfloor>)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)))),
             template_var 0)
           ))),
    ("Limits.filterlim_tendsto_add_at_top",
     "[| (?f \<longlongrightarrow> ?c) ?F; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?f x + ?g x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.Lim_transform2",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         ((%x. ?f x - ?g x) \<longlongrightarrow> (0::?'a)) ?F |]
      ==> (?g \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 2, template_hole 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2)),
             template_var 1)
           ))),
    ("Limits.Lim_transform",
     "[| (?g \<longlongrightarrow> ?a) ?F;
         ((%x. ?f x - ?g x) \<longlongrightarrow> (0::?'a)) ?F |]
      ==> (?f \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty),
                template_app (template_hole 2, template_hole 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2)),
             template_var 1)
           ))),
    ("Limits.tendsto_power_int",
     "[| (?f \<longlongrightarrow> ?a) ?F; ?a ~= (0::?'a) |]
      ==> ((%x. ?f x powi ?n) \<longlongrightarrow> ?a powi ?n) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 1)
           ))),
    ("Limits.tendsto_mult_zero",
     "[| (?f \<longlongrightarrow> (0::?'a)) ?F;
         (?g \<longlongrightarrow> (0::?'a)) ?F |]
      ==> ((%x. ?f x * ?g x) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.tendsto_add_zero",
     "[| (?f \<longlongrightarrow> (0::?'b)) ?F;
         (?g \<longlongrightarrow> (0::?'b)) ?F |]
      ==> ((%x. ?f x + ?g x) \<longlongrightarrow> (0::?'b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.tendsto_mult_one",
     "[| (?f \<longlongrightarrow> (1::?'b)) ?F;
         (?g \<longlongrightarrow> (1::?'b)) ?F |]
      ==> ((%x. ?f x * ?g x) \<longlongrightarrow> (1::?'b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_hole 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 1)
           ))),
    ("Limits.isCont_add",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x + ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_diff",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x - ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_mult",
     "[| isCont ?f ?a; isCont ?g ?a |] ==> isCont (%x. ?f x * ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Limits.isCont_scaleR",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. ?f x *\<^sub>R ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Limits.filterlim_split_at_real",
     "[| filterlim ?f ?F (at_left ?x); filterlim ?f ?F (at_right ?x) |]
      ==> filterlim ?f ?F (at ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 0))
           ))),
    ("Limit.funpower_upperbound",
     "[| !!I. I <= ?G ==> ?f I <= ?G; ?I <= ?G |]
      ==> funpower ?f ?n ?I <= ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 3))),
    ("Limit.limit_step_pointwise",
     "[| ?x : limit ?f ?X; pointwise ?f; ?y : ?f {?x} |]
      ==> ?y : limit ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_var 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("Limits.BseqE",
     "[| Bseq ?X; !!K. [| 0 < K; ALL n. norm (?X n) <= K |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.tendsto_divide_0",
     "[| (?f \<longlongrightarrow> ?c) ?F; filterlim ?g at_infinity ?F |]
      ==> ((%x. ?f x / ?g x) \<longlongrightarrow> (0::?'a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, template_hole 0)),
             template_var 1)
           ))),
    ("Limits.filterlim_at_top_add_at_top",
     "[| filterlim ?f at_top ?F; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?f x + ?g x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty), template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty), template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.filterlim_at_top_mult_at_top",
     "[| filterlim ?f at_top ?F; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?f x * ?g x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty), template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, t_empty), template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.filterlim_at_infinity",
     "0 <= ?c ==>
      filterlim ?f at_infinity ?F =
      (ALL r>?c. \<forall>\<^sub>F x in ?F. r <= norm (?f x))",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, t_empty), template_hole 5),
           template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Limits.tendsto_null_sum",
     "(!!i. i : ?I ==> ((%x. ?f x i) \<longlongrightarrow> (0::?'c)) ?F) ==>
      ((%i. sum (?f i) ?I) \<longlongrightarrow> (0::?'c)) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 0)
           ))),
    ("Limits.tendsto_one_prod'",
     "(!!i. i : ?I ==> ((%x. ?f x i) \<longlongrightarrow> (1::?'c)) ?F) ==>
      ((%i. prod (?f i) ?I) \<longlongrightarrow> (1::?'c)) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 2, template_hole 1)),
             template_var 0)
           ))),
    ("Limits.BfunE",
     "[| Bfun ?f ?F;
         !!B. [| 0 < B; \<forall>\<^sub>F x in ?F. norm (?f x) <= B |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.tendsto_0_le",
     "[| (?f \<longlongrightarrow> (0::?'b)) ?F;
         \<forall>\<^sub>F x in ?F. norm (?g x) <= norm (?f x) * ?K |]
      ==> (?g \<longlongrightarrow> (0::?'c)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_app (template_hole 9, template_hole 8)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 0)),
             template_var 2)
           ))),
    ("Limits.tendsto_diff",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x - ?g x) \<longlongrightarrow> ?a - ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.tendsto_add",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x + ?g x) \<longlongrightarrow> ?a + ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.tendsto_dist",
     "[| (?f \<longlongrightarrow> ?l) ?F;
         (?g \<longlongrightarrow> ?m) ?F |]
      ==> ((%x. dist (?f x) (?g x)) \<longlongrightarrow> dist ?l ?m) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.tendsto_mult",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x * ?g x) \<longlongrightarrow> ?a * ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.tendsto_power_strong",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x ^ ?g x) \<longlongrightarrow> ?a ^ ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.tendsto_scaleR",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x *\<^sub>R ?g x) \<longlongrightarrow> ?a *\<^sub>R ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.monoseq_convergent",
     "[| monoseq ?X; !!i. \<bar>?X i\<bar> <= ?B;
         !!L. ?X \<longlonglongrightarrow> L ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.nonneg_incseq_Bseq_subseq_iff",
     "[| !!x. 0 <= ?f x; incseq ?f; strict_mono ?g |]
      ==> Bseq (%x. ?f (?g x)) = Bseq ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Limits.LIMSEQ_iff",
     "?X \<longlonglongrightarrow> ?L =
      (ALL r>0. EX no. ALL n>=no. norm (?X n - ?L) < r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 1),
           template_app (template_hole 10, template_var 0)),
         template_hole 9),
       template_app (template_hole 8, t_empty))),
    ("Limits.LIMSEQ_D",
     "[| ?X \<longlonglongrightarrow> ?L; 0 < ?r |]
      ==> EX no. ALL n>=no. norm (?X n - ?L) < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_hole 8)
            ),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Limit.natUnion_eq",
     "[| !!n. EX m. ?f n <= ?g m; !!n. EX m. ?g n <= ?f m |]
      ==> natUnion ?f = natUnion ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Limits.LIM_less_bound",
     "[| ?b < ?x; ALL x':{?b<..<?x}. 0 <= ?f x'; isCont ?f ?x |]
      ==> 0 <= ?f ?x",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 0)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 3,
         template_app (template_var 0, template_var 1)))),
    ("Limits.filterlim_tendsto_pos_mult_at_bot",
     "[| (?f \<longlongrightarrow> ?c) ?F; 0 < ?c; filterlim ?g at_bot ?F |]
      ==> LIM x ?F. ?f x * ?g x :> at_bot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.filterlim_tendsto_neg_mult_at_bot",
     "[| (?f \<longlongrightarrow> ?c) ?F; ?c < 0; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?f x * ?g x :> at_bot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_than, template_var 2, template_hole 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 0),
             template_var 1)
           ))),
    ("Limits.filterlim_pow_at_bot_even",
     "[| 0 < ?n; filterlim ?f at_bot ?F; even ?n |]
      ==> LIM x ?F. ?f x ^ ?n :> at_top",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty), template_hole 6),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty), template_hole 0),
             template_var 0)
           ))),
    ("Limits.continuous_divide",
     "[| Topological_Spaces.continuous ?F ?f;
         Topological_Spaces.continuous ?F ?g;
         ?g (Lim ?F (%x. x)) ~= (0::?'b) |]
      ==> Topological_Spaces.continuous ?F (%x. ?f x / ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 2, template_var 2), t_empty)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Limits.continuous_on_divide",
     "[| continuous_on ?s ?f; continuous_on ?s ?g;
         ALL x:?s. ?g x ~= (0::?'b) |]
      ==> continuous_on ?s (%x. ?f x / ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Limits.tendsto_mult_filterlim_at_infinity",
     "[| (?f \<longlongrightarrow> ?c) ?F; ?c ~= (0::?'a);
         filterlim ?g at_infinity ?F |]
      ==> LIM x ?F. ?f x * ?g x :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.LIMSEQ_I",
     "(!!r. 0 < r ==> EX no. ALL n>=no. norm (?X n - ?L) < r) ==>
      ?X \<longlonglongrightarrow> ?L",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Limits.continuous_image_closed_interval",
     "[| ?a <= ?b; continuous_on {?a..?b} ?f |]
      ==> EX c d. ?f ` {?a..?b} = {c..d} & c <= d",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Limits.filterlim_pow_at_bot_odd",
     "[| 0 < ?n; filterlim ?f at_bot ?F; odd ?n |]
      ==> LIM x ?F. ?f x ^ ?n :> at_bot",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty), template_hole 6),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty), template_hole 6),
             template_var 0)
           ))),
    ("Limits.filterlim_tendsto_pos_mult_at_top",
     "[| (?f \<longlongrightarrow> ?c) ?F; 0 < ?c; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?f x * ?g x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.filterlim_at_top_mult_tendsto_pos",
     "[| (?f \<longlongrightarrow> ?c) ?F; 0 < ?c; filterlim ?g at_top ?F |]
      ==> LIM x ?F. ?g x * ?f x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 1),
             template_var 1)
           ))),
    ("Limits.open_Collect_less_Int",
     "[| continuous_on ?s ?f; continuous_on ?s ?g |]
      ==> EX A. open A & A Int ?s = {x: ?s. ?f x < ?g x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Limits.filterlim_divide_at_infinity",
     "[| (?f \<longlongrightarrow> ?c) ?F; filterlim ?g (at (0::?'a)) ?F;
         ?c ~= (0::?'a) |]
      ==> LIM x ?F. ?f x / ?g x :> at_infinity",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 0),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_hole 4)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty), template_hole 0),
             template_var 1)
           ))),
    ("Limits.Cauchy_iff",
     "Cauchy ?X =
      (ALL e>0. EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < e)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Limits.tendsto_sum",
     "(!!i. i : ?I ==> (?f i \<longlongrightarrow> ?a i) ?F) ==>
      ((%x. SUM i:?I. ?f i x) \<longlongrightarrow> sum ?a ?I) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Limits.tendsto_prod'",
     "(!!i. i : ?I ==> (?f i \<longlongrightarrow> ?a i) ?F) ==>
      ((%x. PROD i:?I. ?f i x) \<longlongrightarrow> prod ?a ?I) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Limits.tendsto_prod",
     "(!!i. i : ?S ==> (?f i \<longlongrightarrow> ?L i) ?F) ==>
      ((%x. PROD i:?S. ?f i x) \<longlongrightarrow> prod ?L ?S) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3))),
             template_var 0)
           ))),
    ("Limits.CauchyD",
     "[| Cauchy ?X; 0 < ?e |]
      ==> EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < ?e",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Limits.isCont_divide",
     "[| isCont ?f ?a; isCont ?g ?a; ?g ?a ~= (0::?'b) |]
      ==> isCont (%x. ?f x / ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4)),
             t_empty)
           ))),
    ("Limits.continuous_at_within_divide",
     "[| Topological_Spaces.continuous (at ?a within ?s) ?f;
         Topological_Spaces.continuous (at ?a within ?s) ?g;
         ?g ?a ~= (0::?'b) |]
      ==> Topological_Spaces.continuous (at ?a within ?s)
           (%x. ?f x / ?g x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 0, template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             t_empty)
           ))),
    ("Limits.Bseq_monoseq_convergent'_dec",
     "[| Bseq (%n. ?f (n + ?M));
         !!m n. [| ?M <= m; m <= n |] ==> ?f n <= ?f m |]
      ==> convergent ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Limits.Bseq_monoseq_convergent'_inc",
     "[| Bseq (%n. ?f (n + ?M));
         !!m n. [| ?M <= m; m <= n |] ==> ?f m <= ?f n |]
      ==> convergent ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Limits.increasing_Bseq_subseq_iff",
     "[| !!x y. x <= y ==> norm (?f x) <= norm (?f y); strict_mono ?g |]
      ==> Bseq (%x. ?f (?g x)) = Bseq ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Limits.tendsto_divide",
     "[| (?f \<longlongrightarrow> ?a) ?F; (?g \<longlongrightarrow> ?b) ?F;
         ?b ~= (0::?'a) |]
      ==> ((%x. ?f x / ?g x) \<longlongrightarrow> ?a / ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Limits.filterlim_times_pos",
     "[| filterlim ?f (at_right ?p) ?F1.0; (0::?'a) < ?c; ?l = ?c * ?p |]
      ==> LIM x ?F1.0. ?c * ?f x :> at_right ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 3))),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 2, template_var 1),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_var 0))),
             template_var 2)
           ))),
    ("Limits.polyfun_extremal_lemma",
     "0 < ?e ==>
      EX M. ALL z.
               M <= norm z -->
               norm (SUM i<=?n. ?c i * z ^ i) <= ?e * norm z ^ Suc ?n",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2)],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Limits.CauchyI",
     "(!!e. 0 < e ==> EX M. ALL m>=M. ALL n>=M. norm (?X m - ?X n) < e) ==>
      Cauchy ?X",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Limits.decseq_convergent",
     "[| decseq ?X; ALL i. ?B <= ?X i;
         !!L. [| ?X \<longlonglongrightarrow> L; ALL i. L <= ?X i |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.incseq_convergent",
     "[| incseq ?X; ALL i. ?X i <= ?B;
         !!L. [| ?X \<longlonglongrightarrow> L; ALL i. ?X i <= L |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Limits.tendsto_offset_zero_iff",
     "[| NO_MATCH (0::?'c) ?a; ?a : ?S; open ?S |]
      ==> (?f \<longlongrightarrow> ?L) (at ?a within ?S) =
          (%h. ?f (?a + h)) \<midarrow>0::?'a\<rightarrow> ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 1),
             template_hole 0))))),
    ("Limits.polyfun_extremal",
     "[| ?c ?k ~= (0::?'a); 1 <= ?k; ?k <= ?n |]
      ==> \<forall>\<^sub>F z in at_infinity.
             ?B <= norm (SUM i<=?n. ?c i * z ^ i)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 2),
              template_hole 10)
            ),
        template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, t_empty), template_hole 0)
           ))),
    ("Limited_Sequence.map_seq_code",
     "Limited_Sequence.map_seq ?f ?xq ?i ?pol =
      (case Lazy_Sequence.yield ?xq of None => Some Lazy_Sequence.empty
       | Some (x, xq') =>
           case Limited_Sequence.eval (?f x) ?i ?pol of None => None
           | Some yq =>
               case Limited_Sequence.map_seq ?f xq' ?i ?pol of None => None
               | Some zq => Some (Lazy_Sequence.append yq zq))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Limits.LIM_imp_LIM",
     "[| ?f \<midarrow>?a\<rightarrow> ?l;
         !!x. x ~= ?a ==> norm (?g x - ?m) <= norm (?f x - ?l) |]
      ==> ?g \<midarrow>?a\<rightarrow> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_app (template_hole 12, template_var 3)),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_hole 10))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 11, template_var 2),
               template_hole 10))
           ))),
    ("Limits.LIM_at_top_divide",
     "[| (?f \<longlongrightarrow> ?a) ?F; 0 < ?a;
         (?g \<longlongrightarrow> 0) ?F;
         \<forall>\<^sub>F x in ?F. 0 < ?g x |]
      ==> LIM x ?F. ?f x / ?g x :> at_top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app (template_hole 5, template_hole 3)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 0),
             template_var 1)
           ))),
    ("Limits.isCont_bounded",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. ALL x. ?a <= x & x <= ?b --> ?f x <= M",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.LIM_fun_gt_zero",
     "[| ?f \<midarrow>?c\<rightarrow> ?l; 0 < ?l |]
      ==> EX r>0. ALL x. x ~= ?c & \<bar>?c - x\<bar> < r --> 0 < ?f x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            ),
        template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Limits.LIM_fun_less_zero",
     "[| ?f \<midarrow>?c\<rightarrow> ?l; ?l < 0 |]
      ==> EX r>0. ALL x. x ~= ?c & \<bar>?c - x\<bar> < r --> ?f x < 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            ),
        template_inequation (less_than, template_var 1, template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Limits.real_tendsto_sandwich",
     "[| \<forall>\<^sub>F n in ?net. ?f n <= ?g n;
         \<forall>\<^sub>F n in ?net. ?g n <= ?h n;
         (?f \<longlongrightarrow> ?c) ?net;
         (?h \<longlongrightarrow> ?c) ?net |]
      ==> (?g \<longlongrightarrow> ?c) ?net",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app (template_hole 0, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 0, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("Limits.LIM_fun_not_zero",
     "[| ?f \<midarrow>?c\<rightarrow> ?l; ?l ~= 0 |]
      ==> EX r>0. ALL x. x ~= ?c & \<bar>?c - x\<bar> < r --> ?f x ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app (template_hole 12, template_var 1)),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Limits.LIM_eq",
     "?f \<midarrow>?a\<rightarrow> ?L =
      (ALL r>0.
          EX s>0.
             ALL x. x ~= ?a & norm (x - ?a) < s --> norm (?f x - ?L) < r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 16, template_var 2),
           template_app (template_hole 15, template_var 1)),
         template_app
          (template_app (template_hole 14, template_var 0),
           template_hole 13)),
       template_app (template_hole 12, t_empty))),
    ("Limits.LIM_D",
     "[| ?f \<midarrow>?a\<rightarrow> ?L; 0 < ?r |]
      ==> EX s>0.
             ALL x. x ~= ?a & norm (x - ?a) < s --> norm (?f x - ?L) < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_app (template_hole 14, template_var 2)),
              template_app
               (template_app (template_hole 13, template_var 1),
                template_hole 12))
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Limits.Lim_transform_away_at",
     "[| ?a ~= ?b; ALL x. x ~= ?a & x ~= ?b --> ?f x = ?g x;
         ?f \<midarrow>?a\<rightarrow> ?l |]
      ==> ?g \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_hole 0))
           ))),
    ("Limits.Lim_transform_away_within",
     "[| ?a ~= ?b; ALL x:?S. x ~= ?a & x ~= ?b --> ?f x = ?g x;
         (?f \<longlongrightarrow> ?l) (at ?a within ?S) |]
      ==> (?g \<longlongrightarrow> ?l) (at ?a within ?S)",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 5),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 3))
           ))),
    ("Limits.LIM_I",
     "(!!r. 0 < r ==>
            EX s>0.
               ALL x.
                  x ~= ?a & norm (x - ?a) < s --> norm (?f x - ?L) < r) ==>
      ?f \<midarrow>?a\<rightarrow> ?L",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Limits.LIM_equal2",
     "[| 0 < ?R; !!x. [| x ~= ?a; norm (x - ?a) < ?R |] ==> ?f x = ?g x;
         ?g \<midarrow>?a\<rightarrow> ?l |]
      ==> ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 4),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0))
           ))),
    ("Limits.isCont_inverse_function",
     "[| 0 < ?d; !!z. \<bar>z - ?x\<bar> <= ?d ==> ?g (?f z) = z;
         !!z. \<bar>z - ?x\<bar> <= ?d ==> isCont ?f z |]
      ==> isCont ?g (?f ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Limit.limit_induct",
     "[| ?p : limit ?f ?X; !!p. p : ?X ==> ?P p;
         !!p Y. [| !!q. q : Y ==> ?P q; p : ?f Y |] ==> ?P p |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 3)))),
    ("Limits.real_LIM_sandwich_zero",
     "[| ?f \<midarrow>?a\<rightarrow> 0; !!x. x ~= ?a ==> 0 <= ?g x;
         !!x. x ~= ?a ==> ?g x <= ?f x |]
      ==> ?g \<midarrow>?a\<rightarrow> 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app (template_hole 7, template_hole 6)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_app (template_hole 7, template_hole 6)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4))
           ))),
    ("Limits.Lim_transform_within_open",
     "[| (?f \<longlongrightarrow> ?l) (at ?a within ?T); open ?s; ?a : ?s;
         !!x. [| x : ?s; x ~= ?a |] ==> ?f x = ?g x |]
      ==> (?g \<longlongrightarrow> ?l) (at ?a within ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app (template_hole 7, template_var 4)),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_app (template_hole 7, template_var 4)),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2))
           ))),
    ("Limits.Lim_transform_within",
     "[| (?f \<longlongrightarrow> ?l) (at ?x within ?S); 0 < ?d;
         !!x'. [| x' : ?S; 0 < dist x' ?x; dist x' ?x < ?d |]
               ==> ?f x' = ?g x' |]
      ==> (?g \<longlongrightarrow> ?l) (at ?x within ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app (template_hole 7, template_var 4)),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_app (template_hole 7, template_var 4)),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2))
           ))),
    ("Limits.Lim_cong_within",
     "[| ?a = ?b; ?x = ?y; ?S = ?T;
         !!x. [| x ~= ?b; x : ?T |] ==> ?f x = ?g x |]
      ==> (?f \<longlongrightarrow> ?x) (at ?a within ?S) =
          (?g \<longlongrightarrow> ?y) (at ?b within ?T)",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 5)),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 4)),
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 2))))),
    ("Limits.filterlim_transform_within",
     "[| filterlim ?g ?G (at ?x within ?S); ?G <= ?F; 0 < ?d;
         !!x'. [| x' : ?S; 0 < dist x' ?x; dist x' ?x < ?d |]
               ==> ?f x' = ?g x' |]
      ==> filterlim ?f ?F (at ?x within ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3))
           ))),
    ("Limits.isCont_eq_Lb",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> M <= ?f x) &
                (EX x>=?a. x <= ?b & ?f x = M)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Limits.isCont_eq_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> ?f x <= M) &
                (EX x>=?a. x <= ?b & ?f x = M)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Limits.isCont_inverse_function2",
     "[| ?a < ?x; ?x < ?b; !!z. [| ?a <= z; z <= ?b |] ==> ?g (?f z) = z;
         !!z. [| ?a <= z; z <= ?b |] ==> isCont ?f z |]
      ==> isCont ?g (?f ?x)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 3)),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Limits.isCont_LIM_compose2",
     "[| isCont ?f ?a; ?g \<midarrow>?f ?a\<rightarrow> ?l;
         EX d>0. ALL x. x ~= ?a & norm (x - ?a) < d --> ?f x ~= ?f ?a |]
      ==> (%x. ?g (?f x)) \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_hole 16)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 1),
                template_app (template_hole 14, template_var 0)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_var 2, template_var 3)),
                template_hole 12))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 14, template_var 0)),
             template_app
              (template_app (template_hole 17, template_var 3),
               template_hole 16))
           ))),
    ("Limits.LIM_compose2",
     "[| ?f \<midarrow>?a\<rightarrow> ?b; ?g \<midarrow>?b\<rightarrow> ?c;
         EX d>0. ALL x. x ~= ?a & norm (x - ?a) < d --> ?f x ~= ?b |]
      ==> (%x. ?g (?f x)) \<midarrow>?a\<rightarrow> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 4),
                template_app (template_hole 18, template_var 3)),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_hole 16))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 1),
                template_app (template_hole 14, template_var 0)),
              template_app
               (template_app (template_hole 13, template_var 3),
                template_hole 12))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_hole 14, template_var 0)),
             template_app
              (template_app (template_hole 17, template_var 2),
               template_hole 16))
           ))),
    ("Limits.isCont_has_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX M. (ALL x. ?a <= x & x <= ?b --> ?f x <= M) &
                (ALL N<M. EX x>=?a. x <= ?b & N < ?f x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Limits.nested_sequence_unique",
     "[| ALL n. ?f n <= ?f (Suc n); ALL n. ?g (Suc n) <= ?g n;
         ALL n. ?f n <= ?g n;
         (%n. ?f n - ?g n) \<longlonglongrightarrow> 0 |]
      ==> EX l. ((ALL n. ?f n <= l) & ?f \<longlonglongrightarrow> l) &
                (ALL n. l <= ?g n) & ?g \<longlonglongrightarrow> l",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 4, template_hole 3)),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.isCont_Lb_Ub",
     "[| ?a <= ?b; ALL x. ?a <= x & x <= ?b --> isCont ?f x |]
      ==> EX L M.
             (ALL x. ?a <= x & x <= ?b --> L <= ?f x & ?f x <= M) &
             (ALL y. L <= y & y <= M --> (EX x>=?a. x <= ?b & ?f x = y))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Limits.Bolzano",
     "[| ?a <= ?b; !!a b c. [| ?P a b; ?P b c; a <= b; b <= c |] ==> ?P a c;
         !!x. [| ?a <= x; x <= ?b |]
              ==> EX d>0. ALL a b. a <= x & x <= b & b - a < d --> ?P a b |]
      ==> ?P ?a ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.LimitMoreTemplates"
### 0.397s elapsed time, 0.459s cpu time, 0.000s GC time
val it = (): unit
