   [("IntegrateInsertCommute.assert_ok_simp", "(assert ?p = Inr ?z) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("IntegrateInsertCommute.fromSingleton_simp",
     "(fromSingleton ?xs = Inr ?x) = ([?x] = ?xs)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("IntegrateInsertCommute.substr_simp",
     "substr ?s ?l ?u = nths ?s {k. ?l < Suc k & Suc k < ?u}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app (template_hole 3, t_empty)))),
    ("IntegrateInsertCommute.filt_simp",
     "([?b] = filter ?p [0..<?n]) =
      (?p ?b & ?b < ?n & (ALL y<?n. ?p y --> ?b = y))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 2),
             template_hole 8)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_var 1, template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app (template_hole 2, t_empty)))))]
