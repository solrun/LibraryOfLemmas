   [("IntegrateInsertCommute.assert_ok_simp", "(assert ?p = Inr ?z) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("IntegrateInsertCommute.fromSingleton_simp",
     "(fromSingleton ?xs = Inr ?x) = ([?x] = ?xs)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("IntegrateInsertCommute.substr_simp",
     "substr ?s ?l ?u = nths ?s {k. ?l < Suc k & Suc k < ?u}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app (template_hole 3, t_empty)))),
    ("IntegrateInsertCommute.integrate_delete_result",
     "[| consistent (?M Un {Delete ?m}); is_associated_string ?M ?s |]
      ==> is_certified_associated_string (?M Un {Delete ?m})
           (integrate_delete ?m ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_hole 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_hole 3))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IntegrateInsertCommute.find_zip",
     "[| find (?cond o snd) (zip (?p # ?v) (?v @ [?s])) = Some (?x, ?y);
         ?v ~= [] |]
      ==> ?cond ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 5),
                template_hole 8)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_hole 4)))),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 4))],
       template_predicate (template_app (template_var 5, template_var 0)))),
    ("IntegrateInsertCommute.filt_simp",
     "([?b] = filter ?p [0..<?n]) =
      (?p ?b & ?b < ?n & (ALL y<?n. ?p y --> ?b = y))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 2),
             template_hole 8)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_var 1, template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app (template_hole 2, t_empty))))),
    ("IntegrateInsertCommute.int_ins_loop_term_1",
     "[| isOK (mapM (concurrent ?w ?l ?u) ?t);
         ?x : set (concat (projr (mapM (concurrent ?w ?l ?u) ?t))) |]
      ==> ?x : (InString o I) ` set ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_app (template_hole 9, template_var 4),
                            template_var 3),
                          template_var 2)),
                      template_var 1)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("IntegrateInsertCommute.integrate_insert_commute",
     "[| consistent (?M Un {?m}); is_delete ?m | ?m ~: ?M;
         is_associated_string ?M ?s |]
      ==> is_certified_associated_string (?M Un {?m}) (integrate ?s ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_hole 7))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IntegrateInsertCommute.substr_eff",
     "[| ?x : (InString o I) ` set (substr ?w ?l ?u); isOK (idx ?w ?x) |]
      ==> ?l < projr (idx ?w ?x) & projr (idx ?w ?x) < ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 7)),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3))),
               template_var 0))
           ))),
    ("IntegrateInsertCommute.find_zip",
     "[| find (?cond o snd) (zip (?p # ?v) (?v @ [?s])) = Some (?x, ?y);
         ?v ~= [] |]
      ==> ?y = ?s | ?y : set ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 5),
                template_hole 12)),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_hole 8)))),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("IntegrateInsertCommute.find_zip",
     "[| find (?cond o snd) (zip (?p # ?v) (?v @ [?s])) = Some (?x, ?y);
         ?v ~= [] |]
      ==> ?x : set ?v | ?y : set ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 5),
                template_hole 11)),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 7)))),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("IntegrateInsertCommute.integrate_insert_result",
     "[| consistent (?M Un {Insert ?m}); Insert ?m ~: ?M;
         is_associated_string ?M ?s |]
      ==> is_certified_associated_string (?M Un {Insert ?m})
           (integrate_insert ?m ?s (P ?m) (S ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_hole 7)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 8, template_var 1)),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 1)),
                   template_hole 7))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("IntegrateInsertCommute.find_zip",
     "[| find (?cond o snd) (zip (?p # ?v) (?v @ [?s])) = Some (?x, ?y);
         ?v ~= [] |]
      ==> ?x = ?p | ?x : set ?v & ~ ?cond ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 5),
                template_hole 13)),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_hole 9)))),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 3))),
               template_app
                (template_hole 6,
                 template_app (template_var 5, template_var 1))))
           ))),
    ("IntegrateInsertCommute.int_ins_loop_term",
     "[| idx ?w ?p = Inr ?l; idx ?w ?s = Inr ?u;
         mapM (concurrent ?w ?l ?u) (substr ?w ?l ?u) = Inr ?d;
         concat ?d ~= [];
         find ((%x. \<lbrakk>I ?m\<rbrakk> < x | x = ?s) o snd)
          (zip (?p # concat ?d) (concat ?d @ [?s])) =
         Some ?r |]
      ==> int_ins_measure (?m, ?w, ?r) < ?u - ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 28, template_var 7),
            template_var 6),
          template_app (template_hole 27, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 28, template_var 7),
            template_var 4),
          template_app (template_hole 27, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 25,
              template_app
               (template_app
                 (template_app (template_hole 24, template_var 7),
                  template_var 5),
                template_var 3)),
            template_app
             (template_app
               (template_app (template_hole 23, template_var 7),
                template_var 5),
              template_var 3)),
          template_app (template_hole 22, template_var 2)),
        template_negation
         (
            template_equation
             (template_app (template_hole 19, template_var 2),
              template_hole 18)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, t_empty), template_hole 9)),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 6),
                  template_app (template_hole 19, template_var 2))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 19, template_var 2)),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_hole 18)))),
          template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 7),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 5))))]
