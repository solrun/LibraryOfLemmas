Loading theory "Draft.Step_Conv" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.Stuttering_Extension")
Loading theory "HOL-Library.Stream" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Digraph_Basic" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.Stuttering_Extension" via "Draft.Simulation" via "Draft.Automata" via "Draft.Digraph")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.566s cpu time, 0.048s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Step_Conv"
### 0.160s elapsed time, 0.639s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale digraph
  fixes E :: "('v * 'v) set"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.906s cpu time, 0.095s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Digraph_Basic"
### 0.675s elapsed time, 2.640s cpu time, 0.351s GC time
Loading theory "Draft.Digraph" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.Stuttering_Extension" via "Draft.Simulation" via "Draft.Automata")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.976s elapsed time, 3.825s cpu time, 0.459s GC time
[| path ?E ?x1.0 ?x2.0 ?x3.0; !!u. ?P u [] u;
   !!u v l w.
      [| (u, v) : ?E; path ?E v l w; ?P v l w |] ==> ?P u (u # l) w |]
==> ?P ?x1.0 ?x2.0 ?x3.0
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.048s elapsed time, 3.752s cpu time, 1.027s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale graph_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "graph G"
Found termination order: "size <*mlex*> {}"
locale fb_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fb_graph G"
locale g_rename_precond
  fixes G :: "('u, 'more) graph_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'more) graph_rec_scheme => 'more'"
  assumes "g_rename_precond G f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Digraph"
### 1.259s elapsed time, 3.674s cpu time, 0.964s GC time
Loading theory "Draft.Automata" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.Stuttering_Extension" via "Draft.Simulation")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.125s elapsed time, 6.405s cpu time, 1.325s GC time
Loading theory "Draft.Templates" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.ExtrEqs")
locale gb_graph
  fixes G :: "('Q, 'more) gb_graph_rec_scheme"
  assumes "gb_graph G"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.196s cpu time, 0.067s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Stuttering_ExtensionTemplates")
locale gb_rename_precond
  fixes G :: "('u, 'more) gb_graph_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'more) gb_graph_rec_scheme => 'a"
  assumes "gb_rename_precond G f"
locale gba
  fixes G :: "('Q, 'L, 'more) gba_rec_scheme"
  assumes "gba G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 1.088s cpu time, 0.074s GC time
locale gba_rename_precond
  fixes G :: "('u, 'L, 'more) gba_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'L, 'more) gba_rec_scheme => 'a"
  assumes "gba_rename_precond G f"
locale b_graph
  fixes G :: "('Q, 'more) b_graph_rec_scheme"
  assumes "b_graph G"
locale ba
  fixes G :: "('Q, 'L, 'more) ba_rec_scheme"
  assumes "ba G"
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale igba
  fixes G :: "('Q, 'L, 'more) igba_rec_scheme"
  assumes "igba G"
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale sa
  fixes G :: "('Q, 'L, 'more) sa_rec_scheme"
  assumes "sa G"
locale igba_sys_prod_precond
  fixes G :: "('q, 'l, 'moreG) igba_rec_scheme"
    and S :: "('s, 'l, 'moreS) sa_rec_scheme"
  assumes "igba_sys_prod_precond G S"
### theory "Draft.Automata"
### 3.335s elapsed time, 4.565s cpu time, 0.457s GC time
Loading theory "Draft.Simulation" (required by "Draft.Stuttering_ExtensionTemplates" via "Draft.Stuttering_Extension")
locale simulation
  fixes R :: "('a * 'b) set"
    and A :: "('a, 'c) graph_rec_scheme"
    and B :: "('b, 'd) graph_rec_scheme"
  assumes "simulation R A B"
locale lsimulation
  fixes R :: "('a * 'b) set"
    and A :: "('a, 'l, 'c) sa_rec_scheme"
    and B :: "('b, 'l, 'd) sa_rec_scheme"
  assumes "lsimulation R A B"
locale bisimulation
  fixes R :: "('a * 'b) set"
    and A :: "('a, 'c) graph_rec_scheme"
    and B :: "('b, 'd) graph_rec_scheme"
  assumes "bisimulation R A B"
locale lbisimulation
  fixes R :: "('a * 'b) set"
    and A :: "('a, 'l, 'c) sa_rec_scheme"
    and B :: "('b, 'l, 'd) sa_rec_scheme"
  assumes "lbisimulation R A B"
### theory "Draft.Simulation"
### 0.237s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "Draft.Stuttering_Extension" (required by "Draft.Stuttering_ExtensionTemplates")
### theory "Draft.Stuttering_Extension"
### 0.267s elapsed time, 0.305s cpu time, 0.055s GC time
Loading theory "Draft.Stuttering_ExtensionTemplates"
val templateLemmas =
   [("Stuttering_Extension.stutter_extend_ex_None_eq",
     "stutter_extend_ex ?ex None = id",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Stuttering_Extension.stutter_extend_simps_sa",
     "sa_L (stutter_extend ?G) = sa_L ?G",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Stuttering_Extension.stutter_extend_simps",
     "g_V (stutter_extend ?G) = g_V ?G",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Stuttering_Extension.stutter_extend_simps",
     "g_V0 (stutter_extend ?G) = g_V0 ?G",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Stuttering_Extension.stutter_extend_domain",
     "?V <= Domain (stutter_extend_edges ?V ?E)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stuttering_Extension.stutter_extend_edges_rtrancl",
     "(stutter_extend_edges ?V ?E)^* = ?E^*",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Stuttering_Extension.stutter_extend_en_Some_eq",
     "stutter_extend_ex ?ex (Some ?a) ?gc = ?ex ?a ?gc",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Stuttering_Extension.stutter_extend_simps",
     "g_E (stutter_extend ?G) = stutter_extend_edges (g_V ?G) (g_E ?G)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Stuttering_Extension.stutter_extend_pred_of_enex_conv",
     "stutter_extend_edges UNIV (rel_of_enex ?enex) =
      rel_of_enex (stutter_extend_enex ?enex)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Stuttering_Extension.stutter_extend_en_Some_eq",
     "(Some ?a : stutter_extend_en ?en ?gc) = (?a : ?en ?gc)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_var 1, template_var 0)))),
    ("Stuttering_Extension.stutter_extend_edgesI_edge",
     "(?u, ?v) : ?E ==> (?u, ?v) : stutter_extend_edges ?V ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Stuttering_Extension.stutter_extend_wf",
     "?E <= ?V \<times> ?V ==>
      stutter_extend_edges ?V ?E <= ?V \<times> ?V",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 0), t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Stuttering_Extension.stutter_extend_edgesI_stutter",
     "[| ?v : ?V; ?v ~: Domain ?E |]
      ==> (?v, ?v) : stutter_extend_edges ?V ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Stuttering_Extension.stutter_extend_edgesE",
     "[| (?u, ?v) : stutter_extend_edges ?V ?E; (?u, ?v) : ?E ==> ?thesis;
         [| ?u : ?V; ?u ~: Domain ?E; ?u = ?v |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app (template_hole 1, template_var 1))
                     )
                 )],
            template_implication
             ([template_equation (template_var 4, template_var 3)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Stuttering_ExtensionTemplates"
### 2.282s elapsed time, 3.253s cpu time, 1.064s GC time
val it = (): unit
