Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Digraph_Basic" (required by "Draft.AutomataTemplates" via "Draft.Automata" via "Draft.Digraph")
Loading theory "HOL-Library.Stream" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.169s elapsed time, 0.692s cpu time, 0.069s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.264s elapsed time, 1.073s cpu time, 0.069s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs")
locale digraph
  fixes E :: "('v * 'v) set"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Digraph_Basic"
### 0.665s elapsed time, 2.602s cpu time, 0.326s GC time
Loading theory "Draft.Digraph" (required by "Draft.AutomataTemplates" via "Draft.Automata")
consts
  left :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.905s elapsed time, 3.543s cpu time, 0.396s GC time
[| path ?E ?x1.0 ?x2.0 ?x3.0; !!u. ?P u [] u;
   !!u v l w.
      [| (u, v) : ?E; path ?E v l w; ?P v l w |] ==> ?P u (u # l) w |]
==> ?P ?x1.0 ?x2.0 ?x3.0
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.970s elapsed time, 3.485s cpu time, 0.869s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale graph_defs
  fixes G :: "('v, 'more) graph_rec_scheme"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "graph G"
Found termination order: "size <*mlex*> {}"
locale fb_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fb_graph G"
locale g_rename_precond
  fixes G :: "('u, 'more) graph_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'more) graph_rec_scheme => 'more'"
  assumes "g_rename_precond G f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Digraph"
### 1.076s elapsed time, 3.028s cpu time, 0.723s GC time
Loading theory "Draft.Automata" (required by "Draft.AutomataTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.878s elapsed time, 5.579s cpu time, 1.031s GC time
Loading theory "Draft.Templates" (required by "Draft.AutomataTemplates" via "Draft.ExtrEqs")
locale gb_graph
  fixes G :: "('Q, 'more) gb_graph_rec_scheme"
  assumes "gb_graph G"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AutomataTemplates")
locale gb_rename_precond
  fixes G :: "('u, 'more) gb_graph_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'more) gb_graph_rec_scheme => 'a"
  assumes "gb_rename_precond G f"
locale gba
  fixes G :: "('Q, 'L, 'more) gba_rec_scheme"
  assumes "gba G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.799s elapsed time, 1.946s cpu time, 0.865s GC time
locale gba_rename_precond
  fixes G :: "('u, 'L, 'more) gba_rec_scheme"
    and f :: "'u => 'v"
    and ecnv :: "('u, 'L, 'more) gba_rec_scheme => 'a"
  assumes "gba_rename_precond G f"
locale b_graph
  fixes G :: "('Q, 'more) b_graph_rec_scheme"
  assumes "b_graph G"
locale ba
  fixes G :: "('Q, 'L, 'more) ba_rec_scheme"
  assumes "ba G"
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale igba
  fixes G :: "('Q, 'L, 'more) igba_rec_scheme"
  assumes "igba G"
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale sa
  fixes G :: "('Q, 'L, 'more) sa_rec_scheme"
  assumes "sa G"
locale igba_sys_prod_precond
  fixes G :: "('q, 'l, 'moreG) igba_rec_scheme"
    and S :: "('s, 'l, 'moreS) sa_rec_scheme"
  assumes "igba_sys_prod_precond G S"
### theory "Draft.Automata"
### 3.611s elapsed time, 5.310s cpu time, 1.139s GC time
Loading theory "Draft.AutomataTemplates"
val templateLemmas =
   [("Automata.F_to_idx_refine",
     "ALL A:?F. finite A ==> F_to_idx_impl ?F <= \<Down> Id (F_to_idx ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0), t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Automata.gba_rename_correct",
     "[| gba ?G; inj_on ?f (g_V ?G) |] ==> gba (gba_rename ?f ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, t_empty),
                         template_var 0)),
                     template_var 0)),
                 template_var 0),
               template_var 1))
           ))),
    ("Automata.gba_rename_correct",
     "[| gba ?G; inj_on ?f (g_V ?G) |]
      ==> gba.accept (gba_rename ?f ?G) = gba.accept ?G",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_var 0)),
                   template_var 0)),
               template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Automata.gba_rename_correct",
     "[| gba ?G; inj_on ?f (g_V ?G) |]
      ==> gba.lang (gba_rename ?f ?G) = gba.lang ?G",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_var 0)),
                   template_var 0)),
               template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Automata.gba_rename_correct",
     "[| gba ?G; inj_on ?f (g_V ?G); finite (g_V ?G) |]
      ==> finite (g_V (gba_rename ?f ?G))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, t_empty),
                           template_var 0)),
                       template_var 0)),
                   template_var 0),
                 template_var 1)))
           ))),
    ("Automata.mk_acc_impl_correct",
     "[| (?Flist', ?Flist) : Id; ALL A:set ?Flist. finite A |]
      ==> mk_acc_impl ?Flist'
          <= \<Down> Id
              (RETURN (%v. {i. i < length ?Flist & v : ?Flist ! i}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 0)),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 9, template_var 1),
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app (template_hole 6, t_empty))))),
    ("Automata.F_to_idx_correct",
     "F_to_idx ?F
      <= SPEC
          (%(num_acc, acc).
              ?F = {{q. i : acc q} |i. i < num_acc} &
              \<Union> (range acc) <= {0..<num_acc})",
     template_inequation
      (less_equals, template_app (template_hole 17, template_var 0),
       template_app
        (template_hole 16,
         template_app
          (template_hole 15, template_app (template_hole 14, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.AutomataTemplates"
### 2.302s elapsed time, 3.383s cpu time, 1.166s GC time
val it = (): unit
