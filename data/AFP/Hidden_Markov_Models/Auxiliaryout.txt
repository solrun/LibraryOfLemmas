Loading theory "Draft.Auxiliary" (required by "Draft.AuxiliaryTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AuxiliaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### Missing patterns in function definition:
### !!a. argmax a [] = undefined
### theory "Draft.Templates"
### 0.082s elapsed time, 0.271s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.322s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AuxiliaryTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "Draft.Auxiliary"
### 0.171s elapsed time, 0.475s cpu time, 0.064s GC time
### theory "HOL-Library.BigO"
### 0.599s elapsed time, 0.704s cpu time, 0.104s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.437s cpu time, 0.000s GC time
Loading theory "Draft.AuxiliaryTemplates"
val templateLemmas =
   [("Auxiliary.argmax", "?xs ~= [] ==> fst (argmax ?f ?xs) : set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Auxiliary.argmax",
     "?xs ~= [] ==> ?f (fst (argmax ?f ?xs)) = snd (argmax ?f ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_var 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Auxiliary.Max_ge_image",
     "[| finite ?S; ?x : ?S |] ==> ?f ?x <= Max (?f ` ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Auxiliary.Max_to_image", "Max {?f t |t. t : ?S} = Max (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Auxiliary.argmax",
     "?xs ~= [] ==> snd (argmax ?f ?xs) = Max (?f ` set ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Auxiliary.Max_to_image2",
     "Max {?f t |t. ?P t} = Max (?f ` {t. ?P t})",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, t_empty))))),
    ("Auxiliary.Max_image_commute",
     "finite ?S ==>
      (MAX x\<in>?S. Max (?f x ` ?S)) =
      (MAX y\<in>?S. MAX x\<in>?S. ?f x y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Auxiliary.Max_image_left_mult",
     "[| finite ?S; ?S ~= {} |]
      ==> (MAX x\<in>?S. ?c * ?f x) = ?c * Max (?f ` ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 2)))))),
    ("Auxiliary.Max_image_cong_simp",
     "[| ?S = ?T; !!x. x : ?T =simp=> ?f x = ?g x |]
      ==> Max (?f ` ?S) = Max (?g ` ?T)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Auxiliary.Max_image_cong",
     "[| ?S = ?T; !!x. x : ?T ==> ?f x = ?g x |]
      ==> Max (?f ` ?S) = Max (?g ` ?T)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Auxiliary.Max_in_image",
     "[| finite ?A; ?A ~= {};
         !!x. [| x : ?A; Max (?f ` ?A) = ?f x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Auxiliary.Max_image_pair",
     "[| finite ?S; finite ?T; ?T ~= {} |]
      ==> (MAX s\<in>?S. Max (?f s ` ?T)) =
          (MAX (s, t)\<in>?S \<times> ?T. ?f s t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 2),
               t_empty)))))),
    ("Auxiliary.Max_eq_image_if",
     "[| finite ?S; finite ?T; ALL x:?S. EX y:?T. ?f x <= ?g y;
         ALL x:?T. EX y:?S. ?g x <= ?f y |]
      ==> Max (?f ` ?S) = Max (?g ` ?T)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Auxiliary.list_cases",
     "[| ?xs = [] ==> ?P []; !!x. ?xs = [x] ==> ?P [x];
         !!x y ys. ?xs = x # y # ys ==> ?P (x # y # ys) |]
      ==> ?P ?xs",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate
           (template_app (template_var 0, template_hole 3))),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.AuxiliaryTemplates"
### 0.413s elapsed time, 0.558s cpu time, 0.084s GC time
val it = (): unit
