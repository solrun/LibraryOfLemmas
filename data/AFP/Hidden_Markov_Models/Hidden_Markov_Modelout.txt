Loading theory "Draft.Auxiliary" (required by "Draft.Hidden_Markov_ModelTemplates" via "Draft.Hidden_Markov_Model")
Loading theory "Draft.Templates" (required by "Draft.Hidden_Markov_ModelTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Hidden_Markov_ModelTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.243s cpu time, 0.000s GC time
### Missing patterns in function definition:
### !!a. argmax a [] = undefined
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.332s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Hidden_Markov_ModelTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "Draft.Auxiliary"
### 0.171s elapsed time, 0.467s cpu time, 0.042s GC time
Loading theory "Draft.Hidden_Markov_Model" (required by "Draft.Hidden_Markov_ModelTemplates")
### theory "HOL-Library.BigO"
### 0.615s elapsed time, 1.258s cpu time, 0.067s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Hidden_Markov_ModelTemplates")
locale Closed_Kernel
  fixes K :: "'s => 't pmf"
    and S :: "'t set"
  assumes "Closed_Kernel K S"
locale HMM_defs
  fixes \<K> :: "'s => 's pmf"
    and \<O> :: "'s => 't pmf"
    and \<O>\<^sub>s :: "'t set"
locale HMM
  fixes \<K> :: "'a => 'a pmf"
    and \<O> :: "'a => 'b pmf"
    and \<O>\<^sub>s :: "'b set"
  assumes "HMM \<O> \<O>\<^sub>s"
locale HMM2_defs
  fixes \<O>\<^sub>s :: "'t set"
    and \<K> :: "'s => 's pmf"
    and \<O> :: "'s => 't pmf"
    and \<S> :: "'s set"
locale HMM2
  fixes \<O>\<^sub>s :: "'a set"
    and \<K> :: "'b => 'b pmf"
    and \<O> :: "'b => 'a pmf"
    and \<S> :: "'b set"
  assumes "HMM2 \<O>\<^sub>s \<K> \<O> \<S>"
locale HMM3_defs
  fixes \<O> :: "'s => 't pmf"
    and \<S> :: "'s set"
    and \<O>\<^sub>s :: "'t set"
    and \<K> :: "'s => 's pmf"
    and state_list :: "'s list"
locale HMM3
  fixes \<O> :: "'s => 't pmf"
    and \<S> :: "'s set"
    and state_list :: "'s list"
    and \<O>\<^sub>s :: "'t set"
    and \<K> :: "'s => 's pmf"
  assumes "HMM3 \<O> \<S> state_list \<O>\<^sub>s \<K>"
locale HMM_defs
  fixes \<K> :: "'s => 's pmf"
    and \<O> :: "'s => 't pmf"
    and \<O>\<^sub>s :: "'t set"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.526s elapsed time, 1.087s cpu time, 0.144s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale HMM2
  fixes \<O>\<^sub>s :: "'a set"
    and \<K> :: "'b => 'b pmf"
    and \<O> :: "'b => 'a pmf"
    and \<S> :: "'b set"
  assumes "HMM2 \<O>\<^sub>s \<K> \<O> \<S>"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
sum ?g {} = (0::?'a)
[| finite ?A; ?x ~: ?A |] ==> sum ?g (insert ?x ?A) = ?g ?x + sum ?g ?A
[| finite (sets (stream_space (count_space UNIV)));
   {t} <= sets (stream_space (count_space UNIV));
   ALL i:sets (stream_space (count_space UNIV)) - {t}. ?g i = (0::?'a) |]
==> sum ?g (sets (stream_space (count_space UNIV))) = sum ?g {t}
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale HMM3
  fixes \<O> :: "'s => 't pmf"
    and \<S> :: "'s set"
    and state_list :: "'s list"
    and \<O>\<^sub>s :: "'t set"
    and \<K> :: "'s => 's pmf"
  assumes "HMM3 \<O> \<S> state_list \<O>\<^sub>s \<K>"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!a v va. val_of a (v # va) [] = undefined
### !!a v va. val_of a [] (v # va) = undefined
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Hidden_Markov_Model"
### 11.864s elapsed time, 14.939s cpu time, 3.009s GC time
Loading theory "Draft.Hidden_Markov_ModelTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Hidden_Markov_ModelTemplates"
### 1.226s elapsed time, 1.547s cpu time, 0.199s GC time
val it = (): unit
