Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.569s cpu time, 0.043s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.Finite_Automata_HF" via "Regular-Sets.Regular_Exp")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.883s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.368s elapsed time, 1.479s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs")
### theory "Regular-Sets.Regular_Set"
### 0.237s elapsed time, 0.931s cpu time, 0.082s GC time
Loading theory "HereditarilyFinite.HF" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.Finite_Automata_HF" via "HereditarilyFinite.Ordinal")
instantiation
  hf :: zero
  zero_hf == zero_class.zero :: hf
instantiation
  hf :: sup
  sup_hf == sup :: hf => hf => hf
instantiation
  hf :: inf
  inf_hf == inf :: hf => hf => hf
instantiation
  hf :: minus
  minus_hf == minus :: hf => hf => hf
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  hf :: order
  less_eq_hf == less_eq :: hf => hf => bool
  less_hf == less :: hf => hf => bool
instantiation
  hf :: distrib_lattice
instantiation
  hf :: bounded_lattice_bot
  bot_hf == bot :: hf
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  hf :: times
  times_hf == times :: hf => hf => hf
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  hf :: mult_zero
instantiation
  hf :: zero_neq_one
  one_hf == one_class.one :: hf
instantiation
  hf :: plus
  plus_hf == plus :: hf => hf => hf
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.040s elapsed time, 3.911s cpu time, 0.944s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.Finite_Automata_HF")
### theory "HereditarilyFinite.HF"
### 0.890s elapsed time, 3.329s cpu time, 0.863s GC time
Loading theory "HereditarilyFinite.Ordinal" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.Finite_Automata_HF")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.299s cpu time, 0.967s GC time
Found termination order: "size <*mlex*> {}"
### theory "HereditarilyFinite.Ordinal"
### 0.358s elapsed time, 1.331s cpu time, 0.208s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.158s elapsed time, 7.319s cpu time, 1.334s GC time
Loading theory "Draft.Templates" (required by "Draft.Finite_Automata_HFMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Finite_Automata_HFMoreTemplates")
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.566s elapsed time, 1.372s cpu time, 0.155s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 1.885s elapsed time, 4.385s cpu time, 0.523s GC time
Loading theory "Draft.Finite_Automata_HF" (required by "Draft.Finite_Automata_HFMoreTemplates")
locale dfa
  fixes M :: "'a dfa"
  assumes "dfa M"
consts
  nextl :: "hf => 'a list => hf"
locale dfa_isomorphism
  fixes M :: "'a dfa"
    and N :: "'a dfa"
    and h :: "hf => hf"
  assumes "dfa_isomorphism M N h"
locale dfa
  fixes M :: "'a dfa"
  assumes "dfa M"
locale MyhillNerode_dfa
  fixes L :: "'a list set"
    and R :: "('a list * 'a list) set"
    and A :: "'a list set"
    and n :: "nat"
    and h :: "'a list set => hf"
  assumes "MyhillNerode_dfa L R A n h"
locale nfa
  fixes M :: "'a nfa"
  assumes "nfa M"
consts
  nextl :: "hf set => 'a list => hf set"
locale dfa
  fixes M :: "'a dfa"
  assumes "dfa M"
locale dfa
  fixes M :: "'a dfa"
  assumes "dfa M"
### theory "Draft.Finite_Automata_HF"
### 1.030s elapsed time, 1.598s cpu time, 0.815s GC time
Loading theory "Draft.Finite_Automata_HFMoreTemplates"
val templateLemmas =
   [("Finite_Automata_HF.regular_lang", "regular (lang ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Finite_Automata_HF.right_invariant_eq_app_right",
     "right_invariant (eq_app_right ?L)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Finite_Automata_HF.equiv_eq_app_right",
     "equiv UNIV (eq_app_right ?L)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Finite_Automata_HF.regular_word", "regular {?u}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Finite_Automata_HF.eps_Reverse_nfa", "eps (Reverse_nfa ?MS) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Finite_Automata_HF.regular_singstr", "regular {[?a]}",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))
         )),
    ("Finite_Automata_HF.init_Reverse_nfa",
     "nfa.init (Reverse_nfa ?MS) = dfa.final ?MS",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Finite_Automata_HF.states_Reverse_nfa",
     "nfa.states (Reverse_nfa ?MS) = dfa.states ?MS",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Finite_Automata_HF.eq_app_right_eq", "eq_app_right ?L `` ?L = ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_var 0)),
    ("Finite_Automata_HF.regular_finite", "finite ?L ==> regular ?L",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata_HF.regular_Compl", "regular ?S ==> regular (- ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Finite_Automata_HF.regular_star", "regular ?S ==> regular (star ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Finite_Automata_HF.MN_imp_regular",
     "MyhillNerode ?L ?R ==> regular ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Finite_Automata_HF.final_Reverse_nfa",
     "nfa.final (Reverse_nfa ?MS) = {dfa.init ?MS}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Finite_Automata_HF.regular_Reverse",
     "regular ?S ==> regular (rev ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Finite_Automata_HF.L1_2", "regular ?L ==> EX R. MyhillNerode ?L R",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Finite_Automata_HF.MN_refines_eq_app_right",
     "MyhillNerode ?L ?R ==> ?R <= eq_app_right ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Finite_Automata_HF.L3_1",
     "finite (UNIV // eq_app_right ?L) ==> regular ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata_HF.MN_eq_app_right",
     "finite (UNIV // eq_app_right ?L) ==>
      MyhillNerode ?L (eq_app_right ?L)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Finite_Automata_HF.nfa_imp_regular",
     "[| nfa ?M; nfa.language ?M = ?L |] ==> regular ?L",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata_HF.regular_Int",
     "[| regular ?S; regular ?T |] ==> regular (?S Int ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata_HF.regular_Un",
     "[| regular ?S; regular ?T |] ==> regular (?S Un ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata_HF.regular_conc",
     "[| regular ?S; regular ?T |] ==> regular (?S @@ ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Finite_Automata_HF.nxt_Reverse_nfa",
     "nfa.nxt (Reverse_nfa ?MS) ?q ?x =
      {q': dfa.states ?MS. ?q = dfa.nxt ?MS q' ?x}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Finite_Automata_HF.MN_refines",
     "[| MyhillNerode ?L ?R; (?x, ?y) : ?R |] ==> (?x : ?L) = (?y : ?L)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Finite_Automata_HF.Inlr_rtrancl",
     "((%q. (HF.Inl q, HF.Inr ?a)) ` ?A)^* =
      ((%q. (HF.Inl q, HF.Inr ?a)) ` ?A)^=",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, t_empty), template_var 0)),
         template_hole 0))),
    ("Finite_Automata_HF.index_f_cong",
     "[| dfa.language ?M = dfa.language ?N; dfa ?M; dfa ?N |]
      ==> dfa.index_f ?M = dfa.index_f ?N",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Finite_Automata_HF.L2_3",
     "[| MyhillNerode ?L ?R;
         [| finite (UNIV // eq_app_right ?L);
            card (UNIV // eq_app_right ?L) <= card (UNIV // ?R) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 2)))
               )],
          template_implication
           ([template_inequation
              (less_equals,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Finite_Automata_HF.minimal_imp_isomorphic",
     "[| dfa.language ?M = dfa.language ?N; dfa.minimal ?M; dfa.minimal ?N;
         dfa ?M; dfa ?N |]
      ==> EX h. dfa_isomorphism ?M ?N h",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Finite_Automata_HF.MN_imp_dfa",
     "[| MyhillNerode ?L ?R;
         !!M. [| dfa M; dfa.language M = ?L;
                 card (dfa.states M) = card (UNIV // ?R) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Finite_Automata_HF.eq_app_right_finite_index_imp_dfa",
     "[| finite (UNIV // eq_app_right ?L);
         !!M. [| dfa M; dfa.language M = ?L;
                 card (dfa.states M) = card (UNIV // eq_app_right ?L) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Finite_Automata_HFMoreTemplates"
### 0.359s elapsed time, 0.482s cpu time, 0.039s GC time
val it = (): unit
