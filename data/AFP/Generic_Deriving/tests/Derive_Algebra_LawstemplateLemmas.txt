   [("Derive_Algebra_Laws.transfer_semigroup",
     "[| Derive.iso ?f ?g; semigroup_law ?MULT |]
      ==> semigroup_law (%x y. ?g (?MULT (?f x) (?f y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Derive_Algebra_Laws.semigroup_transfer",
     "[| Derive.iso ?from ?to; semigroup_class_law ?mult |]
      ==> semigroup_class_law (%x y. ?to (?mult (?from x) (?from y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Derive_Algebra_Laws.transfer_monoidl",
     "[| Derive.iso ?f ?g; monoidl_law ?NEUTRAL ?MULT |]
      ==> monoidl_law (?g ?NEUTRAL) (%x y. ?g (?MULT (?f x) (?f y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             t_empty)
           ))),
    ("Derive_Algebra_Laws.monoidl_transfer",
     "[| Derive.iso ?from ?to; monoidl_class_law ?mult ?neutral |]
      ==> monoidl_class_law (%x y. ?to (?mult (?from x) (?from y)))
           (?to ?neutral)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty),
             template_app (template_var 2, template_var 0))
           ))),
    ("Derive_Algebra_Laws.transfer_group",
     "[| Derive.iso ?f ?g; group_law ?INVERSE ?NEUTRAL ?MULT |]
      ==> group_law (%x. ?g (?INVERSE (?f x))) (?g ?NEUTRAL)
           (%x y. ?g (?MULT (?f x) (?f y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_var 3, template_var 1)),
             t_empty)
           ))),
    ("Derive_Algebra_Laws.group_transfer",
     "[| Derive.iso ?from ?to; group_class_law ?mult ?neutral ?inverse |]
      ==> group_class_law (%x y. ?to (?mult (?from x) (?from y)))
           (?to ?neutral) (%x. ?to (?inverse (?from x)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty),
               template_app (template_var 3, template_var 1)),
             t_empty)
           )))]
