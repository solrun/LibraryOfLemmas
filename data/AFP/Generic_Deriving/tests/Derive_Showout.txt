Loading theory "Draft.Derive_Datatypes" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.Derive_Show")
Loading theory "Draft.Tagged_Prod_Sum" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.Derive_Show" via "Draft.Derive")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.600s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.382s elapsed time, 1.529s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.939s cpu time, 0.082s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.103s elapsed time, 4.190s cpu time, 0.894s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Tagged_Prod_Sum"
### 1.643s elapsed time, 6.342s cpu time, 1.100s GC time
Loading theory "Draft.Derive" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.Derive_Show")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature DERIVE_UTIL =
  sig
    val add_conversion_info:
       Function_Common.info ->
         Function_Common.info -> type_info -> type_info
    val add_fun':
       (binding * typ option * mixfix) list ->
         Specification.multi_specs ->
           Function_Common.function_config ->
             local_theory -> Function_Common.info * Proof.context
    val add_iso_info: thm option -> type_info -> type_info
    val add_tvars: string -> string list -> string
    type class_info =
       {axioms: thm list option,
        axioms_def: thm option,
        class: sort,
        class_def: thm option,
        class_law: thm option,
        class_law_const: term option,
        classname: string,
        equivalence_thm: thm option,
        ops: term list option,
        params: (class * (string * typ)) list option,
        transfer_law: (string * thm list) list option}
    val collect_tfree_names: ctr_info -> string list
    val collect_tfrees: ctr_info -> (typ * sort) list
    type comb_type_info =
       {comb_type: typ,
        combname: string,
        combname_full: string,
        ctr_type: typ,
        inConst: term,
        inConst_free: term, inConst_type: typ, rep_type_instantiated: typ}
    val combs_to_list: term -> term list
    val constr_terms: Proof.context -> string -> term list
    type ctr_info = (string * (string * typ list) list) list
    val ctrs_arguments: ctr_info -> typ list
    val freeify_tvars: typ -> typ
    val get_mapping_function: Proof.context -> typ -> term
    val get_superclasses: sort -> string -> theory -> string list
    val get_tvar: typ list -> typ
    val has_class_law: string -> theory -> bool
    val insert_application: term -> term -> term
    type instance_info = {defs: thm list}
    val is_polymorphic: typ -> bool
    val is_typeT: typ -> bool
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val not_instantiated: theory -> string -> class -> bool
    type rep_type_info =
       {from_info: Function_Common.info option,
        rep_type: typ,
        repname: string,
        tFrees_mapping: (typ * typ) list,
        to_info: Function_Common.info option}
    val replace_tfree: string list -> string -> string -> string
    val tagged_function_termination_tac:
       Proof.context -> Function.info * local_theory
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    type type_info =
       {comb_info: comb_type_info option,
        is_mutually_rec: bool,
        is_rec: bool,
        iso_thm: thm option,
        mutual_Ts: typ list,
        mutual_ctrs: ctr_info,
        mutual_sels: (string * string list list) list,
        mutual_tnames: string list,
        rep_info: rep_type_info,
        tfrees: (typ * sort) list, tname: string, uses_metadata: bool}
    val zero_tvars: term -> term
    val zero_tvarsT: typ -> typ
  end
structure Derive_Util: DERIVE_UTIL
structure Type_Data: THEORY_DATA
structure Class_Data: THEORY_DATA
structure Instance_Data: THEORY_DATA
Found termination order: "size <*mlex*> {}"
type instance_info = {defs: thm list}
type class_info =
   {axioms: thm list option,
    axioms_def: thm option,
    class: sort,
    class_def: thm option,
    class_law: thm option,
    class_law_const: term option,
    classname: string,
    equivalence_thm: thm option,
    ops: term list option,
    params: (class * (string * typ)) list option,
    transfer_law: (string * thm list) list option}
type type_info =
   {comb_info: Derive_Util.comb_type_info option,
    is_mutually_rec: bool,
    is_rec: bool,
    iso_thm: thm option,
    mutual_Ts: typ list,
    mutual_ctrs: Derive_Util.ctr_info,
    mutual_sels: (string * string list list) list,
    mutual_tnames: string list,
    rep_info: Derive_Util.rep_type_info,
    tfrees: (typ * sort) list, tname: string, uses_metadata: bool}
type rep_type_info =
   {from_info: Function_Common.info option,
    rep_type: typ,
    repname: string,
    tFrees_mapping: (typ * typ) list, to_info: Function_Common.info option}
type comb_type_info =
   {comb_type: typ,
    combname: string,
    combname_full: string,
    ctr_type: typ,
    inConst: term,
    inConst_free: term, inConst_type: typ, rep_type_instantiated: typ}
type ctr_info = (string * (string * typ list) list) list
signature DERIVE_LAWS =
  sig
    val prove_combinator_instance:
       (thm list list -> local_theory -> Proof.context) ->
         local_theory -> Proof.state
    val prove_equivalence_law:
       class_info -> instance_info -> Proof.context -> thm
    val prove_instance_tac:
       typ ->
         class_info -> instance_info -> type_info -> Proof.context -> tactic
    val prove_isomorphism:
       type_info -> Proof.context -> thm option * Proof.context
  end
structure Derive_Laws: DERIVE_LAWS
val typ_and_vs_of_typname = fn:
   theory -> string -> sort -> typ * (string * sort) list
val freeify_tvars = fn: typ -> typ
val mutual_recursive_types = fn:
   string -> Proof.context -> string list * typ list
val collect_tfree_names = fn: ctr_info -> string list
val add_fun' = fn:
   (binding * typ option * mixfix) list ->
     Specification.multi_specs ->
       Function_Common.function_config ->
         local_theory -> Function_Common.info * Proof.context
val collect_tfrees = fn: ctr_info -> (typ * sort) list
val ctrs_arguments = fn: ctr_info -> typ list
val not_instantiated = fn: theory -> string -> class -> bool
val constr_terms = fn: Proof.context -> string -> term list
val combs_to_list = fn: term -> term list
val tagged_function_termination_tac = fn:
   Proof.context -> Function.info * local_theory
val zero_tvarsT = fn: typ -> typ
val add_conversion_info = fn:
   Function_Common.info -> Function_Common.info -> type_info -> type_info
val add_iso_info = fn: thm option -> type_info -> type_info
val is_typeT = fn: typ -> bool
val has_class_law = fn: string -> theory -> bool
val is_polymorphic = fn: typ -> bool
val get_superclasses = fn: sort -> string -> theory -> string list
val replace_tfree = fn: string list -> string -> string -> string
val insert_application = fn: term -> term -> term
val zero_tvars = fn: term -> term
val add_tvars = fn: string -> string list -> string
val get_tvar = fn: typ list -> typ
val get_mapping_function = fn: Proof.context -> typ -> term
type instance_info = {defs: thm list}
type class_info =
   {axioms: thm list option,
    axioms_def: thm option,
    class: sort,
    class_def: thm option,
    class_law: thm option,
    class_law_const: term option,
    classname: string,
    equivalence_thm: thm option,
    ops: term list option,
    params: (class * (string * typ)) list option,
    transfer_law: (string * thm list) list option}
type type_info =
   {comb_info: comb_type_info option,
    is_mutually_rec: bool,
    is_rec: bool,
    iso_thm: thm option,
    mutual_Ts: typ list,
    mutual_ctrs: ctr_info,
    mutual_sels: (string * string list list) list,
    mutual_tnames: string list,
    rep_info: rep_type_info,
    tfrees: (typ * sort) list, tname: string, uses_metadata: bool}
type rep_type_info =
   {from_info: Function_Common.info option,
    rep_type: typ,
    repname: string,
    tFrees_mapping: (typ * typ) list, to_info: Function_Common.info option}
type comb_type_info =
   {comb_type: typ,
    combname: string,
    combname_full: string,
    ctr_type: typ,
    inConst: term,
    inConst_free: term, inConst_type: typ, rep_type_instantiated: typ}
type ctr_info = (string * (string * typ list) list) list
signature DERIVE_SETUP =
  sig
    val define_class_law:
       string ->
         Proof.context -> thm * thm * thm option * term list * local_theory
    val prove_class_transfer: string -> theory -> Proof.state
  end
structure Derive_Setup: DERIVE_SETUP
val typ_and_vs_of_typname = fn:
   theory -> string -> sort -> typ * (string * sort) list
val freeify_tvars = fn: typ -> typ
val mutual_recursive_types = fn:
   string -> Proof.context -> string list * typ list
val collect_tfree_names = fn: ctr_info -> string list
val add_fun' = fn:
   (binding * typ option * mixfix) list ->
     Specification.multi_specs ->
       Function_Common.function_config ->
         local_theory -> Function_Common.info * Proof.context
val collect_tfrees = fn: ctr_info -> (typ * sort) list
val ctrs_arguments = fn: ctr_info -> typ list
val not_instantiated = fn: theory -> string -> class -> bool
val constr_terms = fn: Proof.context -> string -> term list
val combs_to_list = fn: term -> term list
val tagged_function_termination_tac = fn:
   Proof.context -> Function.info * local_theory
val zero_tvarsT = fn: typ -> typ
val add_conversion_info = fn:
   Function_Common.info -> Function_Common.info -> type_info -> type_info
val add_iso_info = fn: thm option -> type_info -> type_info
val is_typeT = fn: typ -> bool
val has_class_law = fn: string -> theory -> bool
val is_polymorphic = fn: typ -> bool
val get_superclasses = fn: sort -> string -> theory -> string list
val replace_tfree = fn: string list -> string -> string -> string
val insert_application = fn: term -> term -> term
val zero_tvars = fn: term -> term
val add_tvars = fn: string -> string list -> string
val get_tvar = fn: typ list -> typ
val get_mapping_function = fn: Proof.context -> typ -> term
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
type instance_info = {defs: thm list}
type class_info =
   {axioms: thm list option,
    axioms_def: thm option,
    class: sort,
    class_def: thm option,
    class_law: thm option,
    class_law_const: term option,
    classname: string,
    equivalence_thm: thm option,
    ops: term list option,
    params: (class * (string * typ)) list option,
    transfer_law: (string * thm list) list option}
type type_info =
   {comb_info: comb_type_info option,
    is_mutually_rec: bool,
    is_rec: bool,
    iso_thm: thm option,
    mutual_Ts: typ list,
    mutual_ctrs: ctr_info,
    mutual_sels: (string * string list list) list,
    mutual_tnames: string list,
    rep_info: rep_type_info,
    tfrees: (typ * sort) list, tname: string, uses_metadata: bool}
type rep_type_info =
   {from_info: Function_Common.info option,
    rep_type: typ,
    repname: string,
    tFrees_mapping: (typ * typ) list, to_info: Function_Common.info option}
type comb_type_info =
   {comb_type: typ,
    combname: string,
    combname_full: string,
    ctr_type: typ,
    inConst: term,
    inConst_free: term, inConst_type: typ, rep_type_instantiated: typ}
type ctr_info = (string * (string * typ list) list) list
signature DERIVE =
  sig
    val add_inst_info: string -> string -> thm list -> theory -> theory
    val define_combinator_type:
       string list ->
         (typ * class list) list ->
           rep_type_info ->
             local_theory -> comb_type_info option * local_theory
    val define_prod_sum_conv:
       type_info ->
         bool ->
           Proof.context ->
             Function_Common.info * Function_Common.info * Proof.context
    val define_rep_type:
       string list ->
         ctr_info -> bool -> local_theory -> rep_type_info * local_theory
    val generate_instance: string -> sort -> bool -> theory -> Proof.state
  end
structure Derive: DERIVE
val typ_and_vs_of_typname = fn:
   theory -> string -> sort -> typ * (string * sort) list
val freeify_tvars = fn: typ -> typ
val mutual_recursive_types = fn:
   string -> Proof.context -> string list * typ list
val collect_tfree_names = fn: ctr_info -> string list
val add_fun' = fn:
   (binding * typ option * mixfix) list ->
     Specification.multi_specs ->
       Function_Common.function_config ->
         local_theory -> Function_Common.info * Proof.context
val collect_tfrees = fn: ctr_info -> (typ * sort) list
val ctrs_arguments = fn: ctr_info -> typ list
val not_instantiated = fn: theory -> string -> class -> bool
val constr_terms = fn: Proof.context -> string -> term list
val combs_to_list = fn: term -> term list
val tagged_function_termination_tac = fn:
   Proof.context -> Function.info * local_theory
val zero_tvarsT = fn: typ -> typ
val add_conversion_info = fn:
   Function_Common.info -> Function_Common.info -> type_info -> type_info
val add_iso_info = fn: thm option -> type_info -> type_info
val is_typeT = fn: typ -> bool
val has_class_law = fn: string -> theory -> bool
val is_polymorphic = fn: typ -> bool
val get_superclasses = fn: sort -> string -> theory -> string list
val replace_tfree = fn: string list -> string -> string -> string
val insert_application = fn: term -> term -> term
val zero_tvars = fn: term -> term
val add_tvars = fn: string -> string list -> string
val get_tvar = fn: typ list -> typ
val get_mapping_function = fn: Proof.context -> typ -> term
### theory "Draft.Derive"
### 0.633s elapsed time, 2.488s cpu time, 0.290s GC time
### theory "HOL-Library.BigO"
### 1.109s elapsed time, 4.108s cpu time, 1.135s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.432s elapsed time, 8.761s cpu time, 2.046s GC time
Loading theory "Draft.Templates" (required by "Draft.Derive_ShowMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Derive_ShowMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.202s cpu time, 0.186s GC time
### theory "Draft.Derive_Datatypes"
### 4.981s elapsed time, 13.897s cpu time, 3.316s GC time
Loading theory "Draft.Derive_Show" (required by "Draft.Derive_ShowMoreTemplates")
class showable = type +
  fixes print :: "'a => char list"
Found termination order: "size <*mlex*> {}"
instantiation
  nat :: showable
  unit :: showable
  print_nat == print :: nat => char list
  print_unit == print :: unit => char list
instantiation
  Tagged_Prod_Sum.prod :: (showable, showable) showable
  Tagged_Prod_Sum.sum :: (showable, showable) showable
  print_prod == print :: ('a, 'b) Tagged_Prod_Sum.prod => char list
  print_sum == print :: ('a, 'b) Tagged_Prod_Sum.sum => char list
Defining representation type simple_rep
Generating conversions for type "Derive_Datatypes.simple"
Found termination order: "{}"
Found termination order: "{}"
Defining representation type either_rep
Generating conversions for type "Derive_Datatypes.either"
Found termination order: "{}"
Found termination order: "{}"
Defining representation type list_rep
Defining combinator type mulistF
Generating conversions for type "List.list"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Generating instance for type "mulistF"
Defining representation type tree_rep
Defining combinator type mutreeF
"''(L 2)''"
  :: "char list"
"''(A 3)''"
  :: "char list"
"''(B (left: 1) (right: 2))''"
  :: "char list"
Generating conversions for type "Derive_Datatypes.tree"
"''(C )''"
  :: "char list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Generating instance for type "mutreeF"
Defining representation type odd_nateven_nat_rep
Defining combinator type muodd_nateven_natF
Generating conversions for type "Derive_Datatypes.even_nat"
Generating conversions for type "Derive_Datatypes.odd_nat"
Found termination order: "case_sum size size <*mlex*> {}"
### Missing patterns in function definition:
### !!va vb. to_even_nat (muodd_nateven_natF.In (sum.Inr va vb)) = undefined
### !!va vb. to_odd_nat (muodd_nateven_natF.In (sum.Inl va vb)) = undefined
Found termination order: "case_sum size size <*mlex*> {}"
Generating instance for type "muodd_nateven_natF"
Defining representation type fcttrmexp_rep
Defining combinator type mufcttrmexpF
"''(Cons (hd: 1) (tl: (Cons (hd: 2) (tl: (Nil )))))''"
  :: "char list"
"''(Node 3 (Node 1 (Leaf ) (Leaf )) (Node 2 (Leaf ) (Leaf )))''"
  :: "char list"
Generating conversions for type "Derive_Datatypes.exp"
Generating conversions for type "Derive_Datatypes.trm"
Generating conversions for type "Derive_Datatypes.fct"
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
### Missing patterns in function definition:
### !!va vb. to_exp (mufcttrmexpF.In (sum.Inr va vb)) = undefined
### !!va vb. to_trm (mufcttrmexpF.In (sum.Inl va vb)) = undefined
### !!va vc vd.
###    to_trm (mufcttrmexpF.In (sum.Inr va (sum.Inr vc vd))) = undefined
### (2 more)
Found termination order: "case_sum size (case_sum size size) <*mlex*> {}"
Generating instance for type "mufcttrmexpF"
### theory "Draft.Derive_Show"
### 11.252s elapsed time, 18.268s cpu time, 1.312s GC time
Loading theory "Draft.Derive_ShowMoreTemplates"
"''(Odd_Succ (Even_Succ (Odd_Succ (Even_Zero ))))''"
  :: "char list"
val templateLemmas =
   [("Derive_Show.print_unit", "print ?x = []",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Derive_Show.print_nat", "print ?n = string_of_nat ?n",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Derive_ShowMoreTemplates"
### 0.503s elapsed time, 1.245s cpu time, 0.106s GC time
"''(Sum (left: (Factor (Const 0))) (right: (Term (Prod (Const 1) (Factor (Const 2))))))''"
  :: "char list"
val it = (): unit
