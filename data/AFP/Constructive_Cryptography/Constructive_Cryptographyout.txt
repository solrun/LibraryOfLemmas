Loading theory "HOL-Library.BigO" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Resource" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite" via "Draft.Converter")
Loading theory "Draft.Templates" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.247s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.654s elapsed time, 1.453s cpu time, 0.106s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Constructive_CryptographyTemplates")
consts
  map_resource :: "('a', 'b) resource => ('a, 'b') resource"
Proofs for coinductive predicate(s) "rel_resource"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "lossless_resource"
  Proving monotonicity ...
consts
  resource_of_oracle :: "'s => ('a, 'b) resource"
consts
  parallel_resource ::
    "('a, 'b) resource => ('c, 'd) resource => ('a + 'c, 'b + 'd) resource"
Proofs for coinductive predicate(s) "WT_resource"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.515s elapsed time, 1.062s cpu time, 0.109s GC time
  Proving monotonicity ...
### theory "Draft.Resource"
### 1.428s elapsed time, 2.801s cpu time, 0.215s GC time
Loading theory "Draft.Converter" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite")
consts
  map_converter ::
    "('a', 'b, 'out, 'in') converter => ('a, 'b', 'out', 'in) converter"
Proofs for inductive predicate(s) "outsp_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "resultsp_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "rel_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pred_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "WT_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "plossless_converter"
  Proving monotonicity ...
consts
  converter_of_callee :: "'s => ('a, 'b, 'out, 'in) converter"
consts
  parallel_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out, 'in) converter
        => ('a + 'c, 'b + 'd, 'out, 'in) converter"
consts
  id_converter :: "('a, 'b, 'a, 'b) converter"
consts
  parallel_converter2 ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out', 'in') converter
        => ('a + 'c, 'b + 'd, 'out + 'out', 'in + 'in') converter"
consts
  left_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out + 'out', 'in + 'in') converter"
consts
  right_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out' + 'out, 'in' + 'in) converter"
consts
  converter_of_resource :: "('a, 'b) resource => ('a, 'b, 'c, 'd) converter"
consts
  restrict_converter ::
    "('a, 'b, 'c, 'd) converter => ('a, 'b, 'c, 'd) converter"
consts
  attach ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in) resource => ('a, 'b) resource"
consts
  comp_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in, 'out', 'in') converter
        => ('a, 'b, 'out', 'in') converter"
Proofs for coinductive predicate(s) "interaction_any_bounded_converter"
  Proving monotonicity ...
### theory "Draft.Converter"
### 3.976s elapsed time, 4.395s cpu time, 0.632s GC time
Loading theory "Draft.Converter_Rewrite" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System")
Proofs for coinductive predicate(s) "eq_resource_on"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eq_\<I>_generat"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_gpv"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_converter"
  Proving monotonicity ...
### theory "Draft.Converter_Rewrite"
### 0.524s elapsed time, 0.585s cpu time, 0.073s GC time
Loading theory "Draft.Random_System" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher")
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "trace_callee_closure"
  Proving monotonicity ...
### theory "Draft.Random_System"
### 0.457s elapsed time, 0.464s cpu time, 0.000s GC time
Loading theory "Draft.Distinguisher" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography" via "Draft.Wiring")
### theory "Draft.Distinguisher"
### 0.117s elapsed time, 0.155s cpu time, 0.059s GC time
Loading theory "Draft.Wiring" (required by "Draft.Constructive_CryptographyTemplates" via "Draft.Constructive_Cryptography")
consts
  swap_sum :: "'a + 'b => 'b + 'a"
Proofs for inductive predicate(s) "wiring"
  Proving monotonicity ...
### theory "Draft.Wiring"
### 1.700s elapsed time, 2.156s cpu time, 0.671s GC time
Loading theory "Draft.Constructive_Cryptography" (required by "Draft.Constructive_CryptographyTemplates")
locale constructive_security_aux
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
  assumes
    "constructive_security_aux real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless"
locale constructive_security
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
    and w :: "nat => ('c => 'a) * ('b => 'd)"
  assumes
    "constructive_security real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless w"
locale constructive_security2
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
    and w :: "nat => ('c => 'a) * ('b => 'd)"
  assumes
    "constructive_security2 real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless w"
### theory "Draft.Constructive_Cryptography"
### 0.288s elapsed time, 0.334s cpu time, 0.069s GC time
Loading theory "Draft.Constructive_CryptographyTemplates"
val templateLemmas =
   [("Constructive_Cryptography.constructive_security_trivial",
     "(!!\<eta>.
          ?\<I> \<eta> \<oplus>\<^sub>\<I> ?\<I>_common \<eta> 
          \<turnstile>res ?res \<eta> \<surd>) ==>
      constructive_security ?res ?res (%_. 1\<^sub>C) ?\<I> ?\<I>
       ?\<I>_common ?bound ?lossless (%_. (id, id))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 2),
                         t_empty),
                       template_var 4),
                     template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0),
             t_empty)
           ))),
    ("Constructive_Cryptography.composability",
     "[| constructive_security ?middle ?ideal ?sim_inner ?\<I>_middle
          ?\<I>_inner ?\<I>_common ?bound_inner ?lossless_inner ?w1.0;
         constructive_security ?real ?middle ?sim_outer ?\<I>_real
          ?\<I>_middle ?\<I>_common ?bound_outer ?lossless_outer ?w2.0;
         !!\<eta>.
            interaction_any_bounded_converter (?sim_outer \<eta>)
             (?bound_sim \<eta>);
         !!\<eta>.
            ?bound_outer \<eta> * max (?bound_sim \<eta>) 1
            <= ?bound_inner \<eta>;
         !!\<eta>.
            ?lossless_inner ==>
            plossless_converter (?\<I>_real \<eta>) (?\<I>_middle \<eta>)
             (?sim_outer \<eta>) |]
      ==> constructive_security ?real ?ideal
           (%\<eta>. ?sim_outer \<eta> \<odot> ?sim_inner \<eta>) ?\<I>_real
           ?\<I>_inner ?\<I>_common ?bound_outer
           (?lossless_outer | ?lossless_inner)
           (%\<eta>. ?w1.0 \<eta> \<circ>\<^sub>w ?w2.0 \<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 12, template_var 15),
                            template_var 14),
                          template_var 13),
                        template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 11, template_var 6),
                            template_var 15),
                          template_var 5),
                        template_var 4),
                      template_var 12),
                    template_var 10),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 6),
                           template_var 14),
                         t_empty),
                       template_var 4),
                     template_var 11),
                   template_var 10),
                 template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 8)),
             t_empty)
           ))),
    ("Constructive_Cryptography.parallel_constructive_security",
     "[| constructive_security ?real1.0 ?ideal1.0 ?sim1.0 ?\<I>_real1.0
          ?\<I>_inner1.0 ?\<I>_common1.0 ?bound1.0 ?lossless1.0 ?w1.0;
         constructive_security ?real2.0 ?ideal2.0 ?sim2.0 ?\<I>_real2.0
          ?\<I>_inner2.0 ?\<I>_common2.0 ?bound2.0 ?lossless2.0 ?w2.0;
         !!\<eta>.
            ?lossless2.0 ==>
            lossless_resource
             (?\<I>_real1.0 \<eta> \<oplus>\<^sub>\<I>
              ?\<I>_common1.0 \<eta>)
             (?real1.0 \<eta>);
         !!\<eta>.
            ?lossless1.0 ==>
            plossless_converter (?\<I>_real2.0 \<eta>)
             (?\<I>_inner2.0 \<eta>) (?sim2.0 \<eta>);
         !!\<eta>.
            ?lossless1.0 ==>
            lossless_resource
             (?\<I>_inner2.0 \<eta> \<oplus>\<^sub>\<I>
              ?\<I>_common2.0 \<eta>)
             (?ideal2.0 \<eta>) |]
      ==> constructive_security
           (%\<eta>.
               parallel_wiring \<rhd>
               ?real1.0 \<eta> \<parallel> ?real2.0 \<eta>)
           (%\<eta>.
               parallel_wiring \<rhd>
               ?ideal1.0 \<eta> \<parallel> ?ideal2.0 \<eta>)
           (%\<eta>. ?sim1.0 \<eta> |\<^sub>= ?sim2.0 \<eta>)
           (%\<eta>.
               ?\<I>_real1.0 \<eta> \<oplus>\<^sub>\<I>
               ?\<I>_real2.0 \<eta>)
           (%\<eta>.
               ?\<I>_inner1.0 \<eta> \<oplus>\<^sub>\<I>
               ?\<I>_inner2.0 \<eta>)
           (%\<eta>.
               ?\<I>_common1.0 \<eta> \<oplus>\<^sub>\<I>
               ?\<I>_common2.0 \<eta>)
           (%\<eta>. min (?bound1.0 \<eta>) (?bound2.0 \<eta>))
           (?lossless1.0 | ?lossless2.0)
           (%\<eta>. ?w1.0 \<eta> |\<^sub>w ?w2.0 \<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 21, template_var 17),
                            template_var 16),
                          template_var 15),
                        template_var 14),
                      template_var 13),
                    template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 20, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 13, t_empty),
                           t_empty),
                         t_empty),
                       t_empty),
                     t_empty),
                   t_empty),
                 t_empty),
               template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Constructive_CryptographyTemplates"
### 2.194s elapsed time, 3.115s cpu time, 0.983s GC time
val it = (): unit
