   [("Distinguisher.distinguish_attach",
     "connect ?d (attach ?conv ?res) = connect (absorb ?d ?conv) ?res",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Distinguisher.absorb_comp_converter",
     "absorb ?d (comp_converter ?conv ?conv') =
      absorb (absorb ?d ?conv) ?conv'",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Distinguisher.WT_gpv_absorb",
     "[| ?\<I>' \<turnstile>g ?gpv \<surd>;
         ?\<I>', ?\<I> \<turnstile>\<^sub>C ?conv \<surd> |]
      ==> ?\<I> \<turnstile>g absorb ?gpv ?conv \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.interaction_any_bounded_by_absorb",
     "[| interaction_any_bounded_by ?gpv ?bound1.0;
         interaction_any_bounded_converter ?conv ?bound2.0 |]
      ==> interaction_any_bounded_by (absorb ?gpv ?conv)
           (?bound1.0 * ?bound2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.connect_eq_resource_cong",
     "[| ?\<I> \<turnstile>g ?distinguisher \<surd>;
         outs_\<I> ?\<I> \<turnstile>\<^sub>R ?res \<sim> ?res';
         ?\<I> \<turnstile>res ?res \<surd> |]
      ==> connect ?distinguisher ?res = connect ?distinguisher ?res'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Distinguisher.plossless_gpv_absorb",
     "[| plossless_gpv ?\<I>' ?gpv; plossless_converter ?\<I>' ?\<I> ?conv;
         ?\<I>' \<turnstile>g ?gpv \<surd>;
         ?\<I>', ?\<I> \<turnstile>\<^sub>C ?conv \<surd> |]
      ==> plossless_gpv ?\<I> (absorb ?gpv ?conv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.distinguish_trace_eq",
     "[| !!distinguisher.
            ?\<I> \<turnstile>g distinguisher \<surd> ==>
            connect distinguisher ?res = connect distinguisher ?res';
         ?\<I> \<turnstile>res ?res1.0 \<surd>;
         ?\<I> \<turnstile>res ?res2.0 \<surd> |]
      ==> outs_\<I> ?\<I> \<turnstile>\<^sub>R ?res \<approx> ?res'",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 3),
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Distinguisher.connect_cong_trace",
     "[| ?A \<turnstile>\<^sub>R ?res1.0 \<approx> ?res2.0;
         ?\<I> \<turnstile>g ?d \<surd>; outs_gpv ?\<I> ?d <= ?A;
         ?\<I> \<turnstile>res ?res1.0 \<surd>;
         ?\<I> \<turnstile>res ?res2.0 \<surd> |]
      ==> connect ?d ?res1.0 = connect ?d ?res2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 8),
                  template_var 4),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2))))]
