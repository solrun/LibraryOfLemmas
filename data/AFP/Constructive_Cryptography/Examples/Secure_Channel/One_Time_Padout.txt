Loading theory "HOL-Library.BigO" (required by "Draft.One_Time_PadTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Resource" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite" via "Draft.Converter")
Loading theory "Draft.Templates" (required by "Draft.One_Time_PadTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.276s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.636s elapsed time, 1.422s cpu time, 0.107s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.One_Time_PadTemplates")
consts
  map_resource :: "('a', 'b) resource => ('a, 'b') resource"
Proofs for coinductive predicate(s) "rel_resource"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "lossless_resource"
  Proving monotonicity ...
consts
  resource_of_oracle :: "'s => ('a, 'b) resource"
consts
  parallel_resource ::
    "('a, 'b) resource => ('c, 'd) resource => ('a + 'c, 'b + 'd) resource"
Proofs for coinductive predicate(s) "WT_resource"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.503s elapsed time, 1.035s cpu time, 0.111s GC time
### theory "Draft.Resource"
### 1.366s elapsed time, 2.718s cpu time, 0.217s GC time
Loading theory "Draft.Converter" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite")
consts
  map_converter ::
    "('a', 'b, 'out, 'in') converter => ('a, 'b', 'out', 'in) converter"
Proofs for inductive predicate(s) "outsp_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "resultsp_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "rel_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pred_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "WT_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "plossless_converter"
  Proving monotonicity ...
consts
  converter_of_callee :: "'s => ('a, 'b, 'out, 'in) converter"
consts
  parallel_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out, 'in) converter
        => ('a + 'c, 'b + 'd, 'out, 'in) converter"
consts
  id_converter :: "('a, 'b, 'a, 'b) converter"
consts
  parallel_converter2 ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out', 'in') converter
        => ('a + 'c, 'b + 'd, 'out + 'out', 'in + 'in') converter"
consts
  left_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out + 'out', 'in + 'in') converter"
consts
  right_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out' + 'out, 'in' + 'in) converter"
consts
  converter_of_resource :: "('a, 'b) resource => ('a, 'b, 'c, 'd) converter"
consts
  restrict_converter ::
    "('a, 'b, 'c, 'd) converter => ('a, 'b, 'c, 'd) converter"
consts
  attach ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in) resource => ('a, 'b) resource"
consts
  comp_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in, 'out', 'in') converter
        => ('a, 'b, 'out', 'in') converter"
Proofs for coinductive predicate(s) "interaction_any_bounded_converter"
  Proving monotonicity ...
### theory "Draft.Converter"
### 3.693s elapsed time, 4.095s cpu time, 0.605s GC time
Loading theory "Draft.Converter_Rewrite" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher" via "Draft.Random_System")
Proofs for coinductive predicate(s) "eq_resource_on"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eq_\<I>_generat"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_gpv"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_converter"
  Proving monotonicity ...
### theory "Draft.Converter_Rewrite"
### 0.474s elapsed time, 0.508s cpu time, 0.033s GC time
Loading theory "Draft.Random_System" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography" via "Draft.Wiring" via "Draft.Distinguisher")
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "trace_callee_closure"
  Proving monotonicity ...
### theory "Draft.Random_System"
### 0.431s elapsed time, 0.438s cpu time, 0.000s GC time
Loading theory "Draft.Distinguisher" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography" via "Draft.Wiring")
### theory "Draft.Distinguisher"
### 0.108s elapsed time, 0.146s cpu time, 0.057s GC time
Loading theory "Draft.Wiring" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction" via "Draft.Constructive_Cryptography")
consts
  swap_sum :: "'a + 'b => 'b + 'a"
Proofs for inductive predicate(s) "wiring"
  Proving monotonicity ...
### theory "Draft.Wiring"
### 1.677s elapsed time, 2.115s cpu time, 0.645s GC time
Loading theory "Draft.Constructive_Cryptography" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad" via "Draft.System_Construction")
locale constructive_security_aux
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
  assumes
    "constructive_security_aux real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless"
locale constructive_security
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
    and w :: "nat => ('c => 'a) * ('b => 'd)"
  assumes
    "constructive_security real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless w"
locale constructive_security2
  fixes real_resource :: "nat => ('a + 'e, 'b + 'f) resource"
    and ideal_resource :: "nat => ('c + 'e, 'd + 'f) resource"
    and sim :: "nat => ('a, 'b, 'c, 'd) converter"
    and \<I>_real :: "nat => ('a, 'b) \<I>"
    and \<I>_ideal :: "nat => ('c, 'd) \<I>"
    and \<I>_common :: "nat => ('e, 'f) \<I>"
    and bound :: "nat => enat"
    and lossless :: "bool"
    and w :: "nat => ('c => 'a) * ('b => 'd)"
  assumes
    "constructive_security2 real_resource ideal_resource sim \<I>_real
      \<I>_ideal \<I>_common bound lossless w"
### theory "Draft.Constructive_Cryptography"
### 0.287s elapsed time, 0.324s cpu time, 0.058s GC time
Loading theory "Draft.System_Construction" (required by "Draft.One_Time_PadTemplates" via "Draft.One_Time_Pad")
locale rorc
  fixes range :: "'r set"
Found termination order: "{}"
locale key
  fixes key_gen :: "'k spmf"
Found termination order: "{}"
locale channel
  fixes side_oracle :: "'m cstate => 'a => ('b option * 'm cstate) spmf"
Found termination order: "{}"
Found termination order: "{}"
locale insec_channel
Found termination order: "{}"
locale auth_channel
Found termination order: "{}"
Found termination order: "{}"
locale sec_channel
Found termination order: "{}"
locale cipher
  fixes key_alg :: "'k spmf"
    and enc_alg :: "'k => 'm => 'c spmf"
    and dec_alg :: "'k => 'c => 'm option"
locale macode
  fixes range :: "'r set"
    and mac_alg :: "'r => 'm => 'a spmf"
### theory "Draft.System_Construction"
### 3.366s elapsed time, 3.773s cpu time, 0.303s GC time
Loading theory "Draft.One_Time_Pad" (required by "Draft.One_Time_PadTemplates")
### Ambiguous input (line 33 of "$AFP/Constructive_Cryptography/Examples/Secure_Channel/One_Time_Pad.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" key_channel_send)
###     ("_cargs" ("_position" s) ("_position" m)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_pattern" ("_position" k) ("_position" s))
###         ("_applC"
###           ("_applC" ("_position" key.key_oracle)
###             ("_applC" ("_position" key) ("_position" \<eta>)))
###           ("_cargs"
###             ("\<^const>Computational_Model.extend_state_oracle"
###               ("_position" s))
###             ("\<^const>Product_Type.Unity"))))
###       ("_do_cons"
###         ("_do_bind" ("_position" c)
###           ("_applC" ("_position" enc)
###             ("_cargs" ("_position" \<eta>)
###               ("_cargs" ("_position" k) ("_position" m)))))
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_idtdummy") ("_position" s))
###             ("_applC"
###               ("\<^const>Computational_Model.extend_state_oracle"
###                 ("_position" channel.send_oracle))
###               ("_cargs" ("_position" s) ("_position" c))))
###           ("_do_final"
###             ("_applC" ("_position" return_spmf)
###               ("_tuple" ("\<^const>Product_Type.Unity")
###                 ("_tuple_arg" ("_position" s))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" key_channel_send)
###     ("_cargs" ("_position" s) ("_position" m)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_pattern" ("_position" k) ("_position" s))
###         ("_applC"
###           ("\<^const>Computational_Model.extend_state_oracle2"
###             ("_applC" ("_position" key.key_oracle)
###               ("_applC" ("_position" key) ("_position" \<eta>))))
###           ("_cargs" ("_position" s) ("\<^const>Product_Type.Unity"))))
###       ("_do_cons"
###         ("_do_bind" ("_position" c)
###           ("_applC" ("_position" enc)
###             ("_cargs" ("_position" \<eta>)
###               ("_cargs" ("_position" k) ("_position" m)))))
###         ("_do_cons"
###           ("_do_bind" ("_pattern" ("_idtdummy") ("_position" s))
###             ("_applC"
###               ("\<^const>Computational_Model.extend_state_oracle"
###                 ("_position" channel.send_oracle))
###               ("_cargs" ("_position" s) ("_position" c))))
###           ("_do_final"
###             ("_applC" ("_position" return_spmf)
###               ("_tuple" ("\<^const>Product_Type.Unity")
###                 ("_tuple_arg" ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Constructive_Cryptography/Examples/Secure_Channel/One_Time_Pad.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" key_channel_recv)
###     ("_cargs" ("_position" s) ("_position" m)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_pattern" ("_position" c) ("_position" s))
###         ("_applC"
###           ("\<^const>Computational_Model.extend_state_oracle"
###             ("_position" channel.recv_oracle))
###           ("_cargs" ("_position" s) ("\<^const>Product_Type.Unity"))))
###       ("_do_final"
###         ("_case_syntax" ("_position" c)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("_applC" ("_position" return_spmf)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_arg" ("_position" s)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" c'))
###               ("_do_block"
###                 ("_do_cons"
###                   ("_do_bind" ("_pattern" ("_position" k) ("_position" s))
###                     ("_applC"
###                       ("_applC" ("_position" key.key_oracle)
###                         ("_applC" ("_position" key) ("_position" \<eta>)))
###                       ("_cargs"
###                         ("\<^const>Computational_Model.extend_state_oracle"
###                           ("_position" s))
###                         ("\<^const>Product_Type.Unity"))))
###                   ("_do_final"
###                     ("_applC" ("_position" return_spmf)
###                       ("_tuple"
###                         ("_applC" ("_position" dec)
###                           ("_cargs" ("_position" \<eta>)
###                             ("_cargs" ("_position" k) ("_position" c'))))
###                         ("_tuple_arg" ("_position" s))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" key_channel_recv)
###     ("_cargs" ("_position" s) ("_position" m)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_pattern" ("_position" c) ("_position" s))
###         ("_applC"
###           ("\<^const>Computational_Model.extend_state_oracle"
###             ("_position" channel.recv_oracle))
###           ("_cargs" ("_position" s) ("\<^const>Product_Type.Unity"))))
###       ("_do_final"
###         ("_case_syntax" ("_position" c)
###           ("_case2"
###             ("_case1" ("_position" None)
###               ("_applC" ("_position" return_spmf)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_arg" ("_position" s)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" c'))
###               ("_do_block"
###                 ("_do_cons"
###                   ("_do_bind" ("_pattern" ("_position" k) ("_position" s))
###                     ("_applC"
###                       ("\<^const>Computational_Model.extend_state_oracle2"
###                         ("_applC" ("_position" key.key_oracle)
###                           ("_applC" ("_position" key)
###                             ("_position" \<eta>))))
###                       ("_cargs" ("_position" s)
###                         ("\<^const>Product_Type.Unity"))))
###                   ("_do_final"
###                     ("_applC" ("_position" return_spmf)
###                       ("_tuple"
###                         ("_applC" ("_position" dec)
###                           ("_cargs" ("_position" \<eta>)
###                             ("_cargs" ("_position" k) ("_position" c'))))
###                         ("_tuple_arg" ("_position" s))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "S"
  Proving monotonicity ...
### theory "Draft.One_Time_Pad"
### 0.471s elapsed time, 0.504s cpu time, 0.034s GC time
Loading theory "Draft.One_Time_PadTemplates"
val templateLemmas =
   [("One_Time_Pad.real_resource_wiring",
     "cipher.res (key ?\<eta>) (enc ?\<eta>) (dec ?\<eta>) =
      RES (\<dagger>auth_channel.auth_oracle \<oplus>\<^sub>O
           ??.One_Time_Pad.key_channel_send ?\<eta> \<oplus>\<^sub>O
           ??.One_Time_Pad.key_channel_recv ?\<eta>)
       (None, Void)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app (template_hole 12, template_var 0)),
           template_app (template_hole 11, template_var 0)),
         template_app (template_hole 10, template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app (template_hole 3, template_var 0)))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("One_Time_Pad.eq_\<I>_gpv_Done2",
     "eq_\<I>_gpv ?A ?\<I> ?gpv (Done ?x) =
      (lossless_spmf (the_gpv ?gpv) &
       (ALL a:set_spmf (the_gpv ?gpv).
           eq_\<I>_generat ?A ?\<I> (eq_\<I>_gpv ?A ?\<I>) a (Pure ?x)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1))),
           t_empty)))),
    ("One_Time_Pad.eq_\<I>_gpv_Done1",
     "eq_\<I>_gpv ?A ?\<I> (Done ?x) ?gpv =
      (lossless_spmf (the_gpv ?gpv) &
       (ALL a:set_spmf (the_gpv ?gpv).
           eq_\<I>_generat ?A ?\<I> (eq_\<I>_gpv ?A ?\<I>) (Pure ?x) a))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 0))),
           t_empty)))),
    ("One_Time_Pad.ideal_resource_wiring",
     "CNV ?callee ?s |\<^sub>= 1\<^sub>C \<rhd>
      channel.res sec_channel.sec_oracle =
      RES (??.One_Time_Pad.callee_sec_channel ?callee \<oplus>\<^sub>O
           \<dagger>\<dagger>channel.send_oracle \<oplus>\<^sub>O
           \<dagger>\<dagger>channel.recv_oracle)
       (?s, (), Void)",
     template_equation
      (template_app
        (template_app
          (template_hole 21,
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app (template_hole 19, template_var 1),
                 template_var 0)),
             template_hole 18)),
         template_app (template_hole 17, template_hole 16)),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_hole 16))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("One_Time_Pad.resources_indistinguishable",
     "(UNIV <+> nlists UNIV (id' ?\<eta>) <+> UNIV) \<turnstile>\<^sub>R
      RES (??.One_Time_Pad.callee_sec_channel sim \<oplus>\<^sub>O
           \<dagger>\<dagger>channel.send_oracle \<oplus>\<^sub>O
           \<dagger>\<dagger>channel.recv_oracle)
       (None, (), Void)
      \<approx> RES (\<dagger>auth_channel.auth_oracle \<oplus>\<^sub>O
                     ??.One_Time_Pad.key_channel_send
                      ?\<eta> \<oplus>\<^sub>O
                     ??.One_Time_Pad.key_channel_recv ?\<eta>)
                 (None, Void)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 37, template_hole 36),
                 template_hole 36),
               template_app
                (template_app (template_hole 35, template_hole 34),
                 template_app
                  (template_app
                    (template_hole 33,
                     template_app
                      (template_app (template_hole 32, template_hole 31),
                       template_app (template_hole 30, template_var 0))),
                   template_hole 29))),
             template_app
              (template_hole 28,
               template_app
                (template_hole 27,
                 template_app
                  (template_app
                    (template_hole 26,
                     template_app
                      (template_app
                        (template_hole 25,
                         template_app
                          (template_app
                            (template_hole 24, template_hole 23),
                           template_app
                            (template_app
                              (template_hole 22, template_hole 21),
                             template_hole 20))),
                       template_app
                        (template_app
                          (template_hole 19,
                           template_app
                            (template_hole 18,
                             template_app
                              (template_hole 17, template_hole 16))),
                         template_app
                          (template_hole 15,
                           template_app
                            (template_hole 14, template_hole 13))))),
                   template_app
                    (template_app (template_hole 12, template_hole 11),
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 8)))))),
           template_app
            (template_hole 28,
             template_app
              (template_hole 27,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_app (template_hole 1, template_var 0)))),
                 template_app
                  (template_app (template_hole 0, template_hole 11),
                   template_hole 8)))))
         ))]:
   (string * thm * template) list
### theory "Draft.One_Time_PadTemplates"
### 2.423s elapsed time, 3.476s cpu time, 1.171s GC time
val it = (): unit
