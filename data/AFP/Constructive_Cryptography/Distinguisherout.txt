Loading theory "HOL-Library.BigO" (required by "Draft.DistinguisherTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.DistinguisherTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Resource" (required by "Draft.DistinguisherTemplates" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite" via "Draft.Converter")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.286s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.651s elapsed time, 1.456s cpu time, 0.112s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DistinguisherTemplates")
consts
  map_resource :: "('a', 'b) resource => ('a, 'b') resource"
Proofs for coinductive predicate(s) "rel_resource"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "lossless_resource"
  Proving monotonicity ...
consts
  resource_of_oracle :: "'s => ('a, 'b) resource"
consts
  parallel_resource ::
    "('a, 'b) resource => ('c, 'd) resource => ('a + 'c, 'b + 'd) resource"
Proofs for coinductive predicate(s) "WT_resource"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.508s elapsed time, 1.046s cpu time, 0.106s GC time
### theory "Draft.Resource"
### 1.389s elapsed time, 2.770s cpu time, 0.218s GC time
Loading theory "Draft.Converter" (required by "Draft.DistinguisherTemplates" via "Draft.Distinguisher" via "Draft.Random_System" via "Draft.Converter_Rewrite")
consts
  map_converter ::
    "('a', 'b, 'out, 'in') converter => ('a, 'b', 'out', 'in) converter"
Proofs for inductive predicate(s) "outsp_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "resultsp_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "rel_converter"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pred_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "WT_converter"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "plossless_converter"
  Proving monotonicity ...
consts
  converter_of_callee :: "'s => ('a, 'b, 'out, 'in) converter"
consts
  parallel_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out, 'in) converter
        => ('a + 'c, 'b + 'd, 'out, 'in) converter"
consts
  id_converter :: "('a, 'b, 'a, 'b) converter"
consts
  parallel_converter2 ::
    "('a, 'b, 'out, 'in) converter
     => ('c, 'd, 'out', 'in') converter
        => ('a + 'c, 'b + 'd, 'out + 'out', 'in + 'in') converter"
consts
  left_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out + 'out', 'in + 'in') converter"
consts
  right_interface ::
    "('a, 'b, 'out, 'in) converter
     => ('a, 'b, 'out' + 'out, 'in' + 'in) converter"
consts
  converter_of_resource :: "('a, 'b) resource => ('a, 'b, 'c, 'd) converter"
consts
  restrict_converter ::
    "('a, 'b, 'c, 'd) converter => ('a, 'b, 'c, 'd) converter"
consts
  attach ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in) resource => ('a, 'b) resource"
consts
  comp_converter ::
    "('a, 'b, 'out, 'in) converter
     => ('out, 'in, 'out', 'in') converter
        => ('a, 'b, 'out', 'in') converter"
Proofs for coinductive predicate(s) "interaction_any_bounded_converter"
  Proving monotonicity ...
### theory "Draft.Converter"
### 3.697s elapsed time, 4.112s cpu time, 0.619s GC time
Loading theory "Draft.Converter_Rewrite" (required by "Draft.DistinguisherTemplates" via "Draft.Distinguisher" via "Draft.Random_System")
Proofs for coinductive predicate(s) "eq_resource_on"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eq_\<I>_generat"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_gpv"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "eq_\<I>_converter"
  Proving monotonicity ...
### theory "Draft.Converter_Rewrite"
### 0.478s elapsed time, 0.514s cpu time, 0.033s GC time
Loading theory "Draft.Random_System" (required by "Draft.DistinguisherTemplates" via "Draft.Distinguisher")
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "trace_callee_closure"
  Proving monotonicity ...
### theory "Draft.Random_System"
### 0.443s elapsed time, 0.473s cpu time, 0.040s GC time
Loading theory "Draft.Distinguisher" (required by "Draft.DistinguisherTemplates")
### theory "Draft.Distinguisher"
### 0.110s elapsed time, 0.148s cpu time, 0.057s GC time
Loading theory "Draft.DistinguisherTemplates"
val templateLemmas =
   [("Distinguisher.distinguish_attach",
     "connect ?d (attach ?conv ?res) = connect (absorb ?d ?conv) ?res",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Distinguisher.absorb_comp_converter",
     "absorb ?d (comp_converter ?conv ?conv') =
      absorb (absorb ?d ?conv) ?conv'",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Distinguisher.WT_gpv_absorb",
     "[| ?\<I>' \<turnstile>g ?gpv \<surd>;
         ?\<I>', ?\<I> \<turnstile>\<^sub>C ?conv \<surd> |]
      ==> ?\<I> \<turnstile>g absorb ?gpv ?conv \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.interaction_any_bounded_by_absorb",
     "[| interaction_any_bounded_by ?gpv ?bound1.0;
         interaction_any_bounded_converter ?conv ?bound2.0 |]
      ==> interaction_any_bounded_by (absorb ?gpv ?conv)
           (?bound1.0 * ?bound2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.connect_eq_resource_cong",
     "[| ?\<I> \<turnstile>g ?distinguisher \<surd>;
         outs_\<I> ?\<I> \<turnstile>\<^sub>R ?res \<sim> ?res';
         ?\<I> \<turnstile>res ?res \<surd> |]
      ==> connect ?distinguisher ?res = connect ?distinguisher ?res'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Distinguisher.plossless_gpv_absorb",
     "[| plossless_gpv ?\<I>' ?gpv; plossless_converter ?\<I>' ?\<I> ?conv;
         ?\<I>' \<turnstile>g ?gpv \<surd>;
         ?\<I>', ?\<I> \<turnstile>\<^sub>C ?conv \<surd> |]
      ==> plossless_gpv ?\<I> (absorb ?gpv ?conv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Distinguisher.distinguish_trace_eq",
     "[| !!distinguisher.
            ?\<I> \<turnstile>g distinguisher \<surd> ==>
            connect distinguisher ?res = connect distinguisher ?res';
         ?\<I> \<turnstile>res ?res1.0 \<surd>;
         ?\<I> \<turnstile>res ?res2.0 \<surd> |]
      ==> outs_\<I> ?\<I> \<turnstile>\<^sub>R ?res \<approx> ?res'",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 3),
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Distinguisher.connect_cong_trace",
     "[| ?A \<turnstile>\<^sub>R ?res1.0 \<approx> ?res2.0;
         ?\<I> \<turnstile>g ?d \<surd>; outs_gpv ?\<I> ?d <= ?A;
         ?\<I> \<turnstile>res ?res1.0 \<surd>;
         ?\<I> \<turnstile>res ?res2.0 \<surd> |]
      ==> connect ?d ?res1.0 = connect ?d ?res2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 8),
                  template_var 4),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3))),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.DistinguisherTemplates"
### 2.201s elapsed time, 3.089s cpu time, 0.919s GC time
val it = (): unit
