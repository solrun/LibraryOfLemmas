Loading theory "Draft.Refinement" (required by "Draft.ReactiveMoreTemplates" via "Draft.Reactive")
Loading theory "Draft.Temporal" (required by "Draft.ReactiveMoreTemplates" via "Draft.Reactive")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.549s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Refinement"
### 0.335s elapsed time, 1.339s cpu time, 0.118s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.353s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.824s cpu time, 0.074s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs")
class temporal = complete_boolean_algebra +
  fixes at :: "'a => nat => 'a"
  assumes "!!a i j. a !! i !! j = a !! (i + j)"
  assumes "!!a. a !! 0 = a"
  assumes "!!i. \<top> !! i = \<top>"
  assumes "!!a i. - a !! i = (- a) !! i"
  assumes "!!a b i. (a \<sqinter> b) !! i = a !! i \<sqinter> b !! i"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
class temporal = complete_boolean_algebra +
  fixes at :: "'a => nat => 'a"
  assumes "!!a i j. a !! i !! j = a !! (i + j)"
  assumes "!!a. a !! 0 = a"
  assumes "!!i. \<top> !! i = \<top>"
  assumes "!!a i. - a !! i = (- a) !! i"
  assumes "!!a b i. (a \<sqinter> b) !! i = a !! i \<sqinter> b !! i"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
instantiation
  bool :: temporal
  at_bool == at :: bool => nat => bool
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class trace = type +
  fixes suffix :: "'a => nat => 'a"
  assumes "!!a i j. a[i ..][j ..] = a[i + j ..]"
  assumes "!!a. a[0 ..] = a"
consts
  cycle :: "'a list => 'a stream"
instantiation
  fun :: (trace, temporal) temporal
  at_fun == at :: ('a => 'b) => nat => 'a => 'b
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class nat = minus + plus + zero +
  fixes RepNat :: "'a => nat"
    and AbsNat :: "nat => 'a"
  assumes "!!n. RepNat (AbsNat n) = n"
    and "!!x. AbsNat (RepNat x) = x"
    and "zero_Nat_def": "(0::'a) = AbsNat 0"
    and "plus_Nat_def": "!!a b. a + b = AbsNat (RepNat a + RepNat b)"
    and "minus_Nat_def": "!!a b. a - b = AbsNat (RepNat a - RepNat b)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.992s elapsed time, 3.790s cpu time, 0.801s GC time
"{.x, z. P x y.}"
  :: "('a * 'b => 'c) => 'a * 'b => 'c"
"[: id (%x. id (P x y y')) :]"
  :: "('d => bool) => 'a => bool"
"[: x, y \<leadsto> y', z . P x y y' z :]"
  :: "('c * 'd => bool) => 'a * 'b => bool"
"{: x, y \<leadsto> y', z . P x y y' z :}"
  :: "('c * 'd => bool) => 'a * 'b => bool"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.200s cpu time, 0.903s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  nat :: nat
  RepNat_nat == RepNat :: nat => nat
  AbsNat_nat == AbsNat :: nat => nat
instantiation
  fun :: (nat, type) trace
  suffix_fun == suffix :: ('a => 'b) => nat => 'a => 'b
### theory "Draft.Temporal"
### 1.543s elapsed time, 5.745s cpu time, 1.020s GC time
Loading theory "Draft.Reactive" (required by "Draft.ReactiveMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  count :: "(nat => bool) => nat => nat"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Reactive"
### 0.703s elapsed time, 1.521s cpu time, 0.236s GC time
### theory "HOL-Library.Tree"
### 1.988s elapsed time, 6.018s cpu time, 1.138s GC time
Loading theory "Draft.Templates" (required by "Draft.ReactiveMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.068s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ReactiveMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.671s elapsed time, 1.170s cpu time, 0.692s GC time
Loading theory "Draft.ReactiveMoreTemplates"
val templateLemmas =
   [("Reactive.monotonic_SymSystem", "mono (SymSystem ?init ?p ?r)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Reactive.prec_st_inpt",
     "prec_st (inpt_st ?r) ?r = \<box> lft_pred_st (inpt_st ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Reactive.inpt_always",
     "inpt (%(x, y). (\<box> lft_rel_st ?r) x y) =
      (%(x, y). (\<box> lft_pred_st (inpt_st ?r)) x y)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("Reactive.always_lft_rel_comp_a",
     "(\<box> lft_rel_st ?r) ?u OO (\<box> lft_rel_st ?r') ?v =
      (\<box> lft_rel_st (%(u, v) (u', v'). ?r u u' OO ?r' v v'))
       (?u || ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Reactive.RSysTmp_inpt_comp",
     "?u' : ?init' ==>
      SymSystem ?init (inpt_st ?r) ?r o SymSystem ?init' (inpt_st ?r') ?r' =
      SymSystem (zip_set ?init ?init') (inpt_st (rel_st ?r ?r'))
       (rel_st ?r ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_app (template_hole 6, template_var 1)),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app (template_hole 4, template_var 0)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Reactive.always_lft_rel_comp",
     "(\<box> lft_rel_st ?r) (fst o ?u) OO
      (\<box> lft_rel_st ?r') (snd o ?u) =
      (\<box> lft_rel_st (%(u, v) (u', v'). ?r u u' OO ?r' v v')) ?u",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 2)),
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_var 1))),
    ("Reactive.prec_st_simp",
     "prec_st ?p ?r ?u ?x =
      (ALL n.
          (ALL i<n. inpt_st ?r (?u i) (?u (Suc i)) (?x i)) -->
          ?p (?u n) (?u (Suc n)) (?x n))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Reactive.local_init_comp",
     "[| ?u' : ?init'; ALL u. sconjunctive (?S u) |]
      ==> local_init ?init ?S o local_init ?init' ?S' =
          local_init (zip_set ?init ?init')
           (%u. ?S (fst o u) o ?S' (snd o u))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 3)),
           t_empty)))),
    ("Reactive.SymSystem_rel",
     "SymSystem ?init ?p ?r =
      {.x. ALL u. u : ?init --> prec_st ?p ?r u x.} o
      [: x \<leadsto> y . EX u. u : ?init &
                                (\<box> lft_rel_st ?r) u x y :]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 14, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 13,
           template_app
            (template_hole 12, template_app (template_hole 11, t_empty))),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Reactive.inpt_str_comp",
     "(prec_st (inpt_st ?r) ?r (fst o ?u) ?x &
       (ALL y.
           (\<box> lft_rel_st ?r) (fst o ?u) ?x y -->
           prec_st (inpt_st ?r') ?r' (snd o ?u) y)) =
      (\<box> lft_pred_st (inpt_st (rel_st ?r ?r'))) ?u ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 15,
                   template_app (template_hole 14, template_var 3)),
                 template_var 3),
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_var 2)),
             template_var 1)),
         template_app (template_hole 11, t_empty)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)))),
           template_var 2),
         template_var 1))),
    ("Reactive.counter_b_aux",
     "[| ?u 0 = 0;
         ALL n.
            (?xa n --> ?u (Suc n) = Suc (?u n)) &
            (~ ?xa n --> ?u (Suc n) = ?u n) & ?xb n = ?u (Suc n) |]
      ==> count ?xa ?n = ?u (Suc ?n)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_hole 6), template_hole 6),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_var 3,
           template_app (template_hole 2, template_var 0))))),
    ("Reactive.counter_a_aux",
     "[| ?u 0 = 0;
         ALL i<?n.
            (?x i --> ?u (Suc i) = Suc (?u i)) &
            (~ ?x i --> ?u (Suc i) = ?u i) |]
      ==> ALL i<?n. count ?x i = ?u (Suc i)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 7), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Reactive.inpt_str_comp_b",
     "prec_st
       (%u u' x.
           inpt_st ?r (fst u) (fst u') x &
           (ALL y.
               ?r (fst u) (fst u') x y --> inpt_st ?r' (snd u) (snd u') y))
       (%(u, v) (u', v'). ?r u u' OO ?r' v v') ?u ?x =
      (\<box> lft_pred_st (inpt_st (rel_st ?r ?r'))) ?u ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, t_empty),
             template_app (template_hole 6, t_empty)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)))),
           template_var 1),
         template_var 0))),
    ("Reactive.local_demonic_init",
     "local_init ?init (%u. {. id (?p u) .} o [: id (%x. id (?r u x)) :]) =
      [: z \<leadsto> (u, x) . u : ?init & z = x :] o {.u, x. ?p u x.} o
      [: id (%(u, x). id (?r u x)) :]",
     template_equation
      (template_app
        (template_app (template_hole 19, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, t_empty))),
             template_app
              (template_hole 3,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, t_empty))))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("Reactive.inpt_str_comp_a",
     "(prec_st (inpt_st ?r) ?r (fst o ?u) ?x &
       (ALL y.
           (\<box> lft_rel_st ?r) (fst o ?u) ?x y -->
           prec_st (inpt_st ?r') ?r' (snd o ?u) y)) =
      prec_st
       (%u u' x.
           inpt_st ?r (fst u) (fst u') x &
           (ALL y.
               ?r (fst u) (fst u') x y --> inpt_st ?r' (snd u) (snd u') y))
       (%(u, v) (u', v'). ?r u u' OO ?r' v v') ?u ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_var 3)),
                 template_var 3),
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 2)),
             template_var 1)),
         template_app (template_hole 12, t_empty)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, t_empty)),
           template_var 2),
         template_var 1))),
    ("Reactive.init_state",
     "[: z \<leadsto> (u, x) . u : ?init & z = x :] o {.u, x. ?p u x.} o
      [: id (%(u, x). id (?r u x)) :] =
      [: z \<leadsto> (u, x) . z = x :] o {.u, x. u : ?init --> ?p u x.} o
      [: (u, x) \<leadsto> y . u : ?init & ?r u x y :]",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app (template_hole 11, t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, t_empty))))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app (template_hole 11, t_empty))),
             template_app
              (template_hole 5,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, t_empty))))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))))),
    ("Reactive.event_ex_aux_a",
     "[| ?a 0 = 0; ALL n. ?xa (Suc n) = (~ ?xa n);
         ALL n.
            ?xa n & ?a (Suc n) = ?a n + 1 |
            ~ ?xa n & ?a (Suc n) = ?a n - 1 | ?a (Suc n) = 0 |]
      ==> (?a ?n = - 1 --> ?xa ?n) &
          (?a ?n = 1 --> ~ ?xa ?n) & - 1 <= ?a ?n & ?a ?n <= 1",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 13),
          template_hole 12),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app (template_var 2, template_var 0)),
                     template_app (template_hole 1, template_hole 4))),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app (template_var 2, template_var 0)),
                       template_hole 4)),
                   template_app
                    (template_hole 8,
                     template_app (template_var 1, template_var 0)))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 1, template_hole 4)),
                     template_app (template_var 2, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 0)),
                   template_hole 4))))
           ))),
    ("Reactive.event_ex_aux",
     "[| ?a 0 = 0; ALL n. ?xa (Suc n) = (~ ?xa n);
         ALL n.
            ?xa n & ?a (Suc n) = ?a n + 1 |
            ~ ?xa n & ?a (Suc n) = ?a n - 1 | ?a (Suc n) = 0 |]
      ==> ALL n.
             (?a n = - 1 --> ?xa n) &
             (?a n = 1 --> ~ ?xa n) & - 1 <= ?a n & ?a n <= 1",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 13),
          template_hole 12),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Reactive.SymSystem_comp_a",
     "?u' : ?init' ==>
      SymSystem ?init ?p ?r o SymSystem ?init' ?p' ?r' =
      {.x.
       ALL u v.
          u : ?init & v : ?init' -->
          prec_st ?p ?r u x &
          (ALL y. (\<box> lft_rel_st ?r) u x y --> prec_st ?p' ?r' v y).} o
      [: x \<leadsto> y . EX u v.
                             u : ?init &
                             v : ?init' &
                             (\<box> lft_rel_st
(%(u, v) (u', v'). ?r u u' OO ?r' v v'))
                              (u || v) x y :]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 6),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 26,
             template_app
              (template_app
                (template_app (template_hole 25, template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 24, template_var 5),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 23,
             template_app
              (template_hole 22, template_app (template_hole 21, t_empty))),
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty)))))),
    ("Reactive.SymSystem_comp",
     "?u' : ?init' ==>
      SymSystem ?init ?p ?r o SymSystem ?init' ?p' ?r' =
      [: z \<leadsto> (u,
      x) . fst o u : ?init & snd o u : ?init' & z = x :] o
      {.u, x.
       prec_st ?p ?r (fst o u) x &
       (ALL y.
           (\<box> lft_rel_st ?r) (fst o u) x y -->
           prec_st ?p' ?r' (snd o u) y).} o
      [: id (%(u, x).
                id ((\<box> lft_rel_st
                             (%(u, v) (u', v'). ?r u u' OO ?r' v v'))
                     u x)) :]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 6),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 31,
             template_app
              (template_app
                (template_app (template_hole 30, template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 29, template_var 5),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 28,
             template_app
              (template_app
                (template_hole 27,
                 template_app
                  (template_hole 26,
                   template_app (template_hole 25, t_empty))),
               template_app
                (template_hole 15,
                 template_app
                  (template_hole 24,
                   template_app (template_hole 23, t_empty))))),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, t_empty))))))),
    ("Reactive.inpt_str_comp_aux_a",
     "ALL n.
         (ALL i<n.
             inpt_st (%(u, v) (u', v'). ?r u u' OO ?r' v v') (?u i)
              (?u (Suc i)) (?x i)) -->
         inpt_st ?r (fst (?u n)) (fst (?u (Suc n))) (?x n) &
         (ALL y.
             ?r (fst (?u n)) (fst (?u (Suc n))) (?x n) y -->
             inpt_st ?r' (snd (?u n)) (snd (?u (Suc n))) y) ==>
      inpt_st ?r ((fst o ?u) ?n) ((fst o ?u) (Suc ?n)) (?x ?n) &
      (ALL y.
          ?r (fst (?u ?n)) (fst (?u (Suc ?n))) (?x ?n) y -->
          inpt_st ?r' (snd (?u ?n)) (snd (?u (Suc ?n))) y)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_hole 4),
                         template_var 2),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_hole 4),
                       template_var 2),
                     template_app (template_hole 7, template_var 0))),
                 template_app (template_var 1, template_var 0))),
             template_app (template_hole 3, t_empty))
           ))),
    ("Reactive.inpt_str_comp_aux",
     "(ALL n.
          (ALL i<n.
              inpt_st (%(u, v) (u', v'). ?r u u' OO ?r' v v') (?u i)
               (?u (Suc i)) (?x i)) -->
          inpt_st ?r (fst (?u n)) (fst (?u (Suc n))) (?x n) &
          (ALL y.
              ?r (fst (?u n)) (fst (?u (Suc n))) (?x n) y -->
              inpt_st ?r' (snd (?u n)) (snd (?u (Suc n))) y)) -->
      (ALL i<?n.
          inpt_st ?r ((fst o ?u) i) ((fst o ?u) (Suc i)) (?x i) &
          (ALL y.
              ?r (fst (?u i)) (fst (?u (Suc i))) (?x i) y -->
              inpt_st ?r' (snd (?u i)) (snd (?u (Suc i))) y))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_app (template_hole 13, t_empty))
         ))]:
   (string * thm * template) list
### theory "Draft.ReactiveMoreTemplates"
### 0.351s elapsed time, 0.495s cpu time, 0.040s GC time
val it = (): unit
