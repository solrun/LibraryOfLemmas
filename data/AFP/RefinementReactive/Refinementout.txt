Loading theory "Draft.Refinement" (required by "Draft.RefinementMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.524s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.962s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Refinement"
### 0.292s elapsed time, 1.166s cpu time, 0.122s GC time
"{.x, z. P x y.}"
  :: "('a * 'b => 'c) => 'a * 'b => 'c"
"[: id (%x. id (P x y y')) :]"
  :: "('d => bool) => 'a => bool"
"[: x, y \<leadsto> y', z . P x y y' z :]"
  :: "('c * 'd => bool) => 'a * 'b => bool"
"{: x, y \<leadsto> y', z . P x y y' z :}"
  :: "('c * 'd => bool) => 'a * 'b => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.281s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.755s elapsed time, 2.343s cpu time, 0.278s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.953s elapsed time, 2.784s cpu time, 0.701s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.842s elapsed time, 4.308s cpu time, 0.851s GC time
Loading theory "Draft.Templates" (required by "Draft.RefinementMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RefinementMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.521s cpu time, 0.061s GC time
Loading theory "Draft.RefinementMoreTemplates"
val templateLemmas =
   [("Refinement.conjuncive_demonic", "conjunctive [: ?r :]",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refinement.sconjunctive_assert", "sconjunctive {. ?p .}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refinement.conjunctive_monotonic", "sconjunctive ?S ==> mono ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refinement.assert_assert_comp",
     "{. ?p .} o {. ?p' .} = {. ?p \<sqinter> ?p' .}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refinement.demonic_demonic", "[: ?r :] o [: ?r' :] = [: ?r OO ?r' :]",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refinement.fusion_assoc",
     "?S \<parallel> (?T \<parallel> ?U) =
      ?S \<parallel> ?T \<parallel> ?U",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Refinement.conjunctive_simp",
     "conjunctive ?S ==> ?S (Inf ?Q) = Inf (?S ` ?Q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refinement.demonic_comp",
     "[| sconjunctive ?S; sconjunctive ?S' |] ==> sconjunctive (?S o ?S')",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Refinement.relcompp_exists",
     "(?r OO ?r') ?x ?y = (EX u. ?r ?x u & ?r' u ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Refinement.assert_demonic_prop",
     "{. ?p .} o [: ?r :] = {. ?p .} o [: (%x y. ?p x) \<sqinter> ?r :]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Refinement.sconjunctive_simp",
     "[| ?x : ?Q; sconjunctive ?S |] ==> ?S (Inf ?Q) = Inf (?S ` ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_var 0, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Refinement.assert_demonic",
     "{. ?p .} o [: ?r :] = {. ?p .} o [: %x y. ?p x & ?r x y :]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("Refinement.demonic_assert_comp",
     "[: ?r :] o {. ?p .} = {.x. ALL y. ?r x y --> ?p y.} o [: ?r :]",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app (template_hole 6, template_var 1)))),
    ("Refinement.trs_demonic_choice",
     "trs ?r \<sqinter> trs ?r' =
      trs ((%x y. inpt ?r x & inpt ?r' x) \<sqinter> (?r \<squnion> ?r'))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refinement.left_comp",
     "?T o ?U = ?T' o ?U' ==> ?S o ?T o ?U = ?S o ?T' o ?U'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Refinement.spec_demonic_choice",
     "({. ?p .} o [: ?r :]) \<sqinter> ({. ?p' .} o [: ?r' :]) =
      {. ?p \<sqinter> ?p' .} o [: ?r \<squnion> ?r' :]",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Refinement.fusion_spec",
     "({. ?p .} o [: ?r :]) \<parallel> ({. ?p' .} o [: ?r' :]) =
      {. ?p \<sqinter> ?p' .} o [: ?r \<sqinter> ?r' :]",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Refinement.sconjunctive_INF_simp",
     "[| ?x : ?X; sconjunctive ?S |]
      ==> ?S (Inf (?Q ` ?X)) = Inf (?S ` ?Q ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)))))),
    ("Refinement.trs_trs",
     "trs ?r o trs ?r' =
      trs ((%s t. ALL s'. ?r s s' --> inpt ?r' s') \<sqinter> ?r OO ?r')",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refinement.assert_demonic_refinement",
     "({. ?p .} o [: ?r :] <= {. ?p' .} o [: ?r' :]) =
      (?p <= ?p' & (ALL x. ?p x --> ?r' x <= ?r x))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 3)),
             template_app (template_hole 5, template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Refinement.trs_refinement",
     "(trs ?r <= trs ?r') =
      ((ALL x. inpt ?r x --> inpt ?r' x) &
       (ALL x. inpt ?r x --> ?r' x <= ?r x))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 3, t_empty)))),
    ("Refinement.assert_demonic_comp",
     "{. ?p .} o [: ?r :] o {. ?p' .} o [: ?r' :] =
      {.x. ?p x & (ALL y. ?r x y --> ?p' y).} o [: ?r OO ?r' :]",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 3)),
                 template_app (template_hole 9, template_var 2))),
             template_app (template_hole 8, template_var 1))),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 10, template_app (template_hole 5, t_empty))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Refinement.fusion_spec_local_a",
     "?a : ?init ==>
      ([: x \<leadsto> (u, y) . u : ?init & x = y :] o {. ?p .} o
       [: ?r :]) \<parallel>
      [: ?r' :] =
      [: x \<leadsto> (u, y) . u : ?init & x = y :] o {. ?p .} o [: (u,
      x) \<leadsto> y . ?r (u, x) y & ?r' x y :]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, t_empty))),
                   template_app (template_hole 6, template_var 2))),
               template_app (template_hole 5, template_var 1))),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty))),
               template_app (template_hole 6, template_var 2))),
           template_app
            (template_hole 5,
             template_app
              (template_hole 3,
               template_app (template_hole 2, t_empty))))))),
    ("Refinement.fusion_spec_local",
     "?a : ?init ==>
      ([: x \<leadsto> (u, y) . u : ?init & x = y :] o {. ?p .} o
       [: ?r :]) \<parallel>
      ({. ?p' .} o [: ?r' :]) =
      [: x \<leadsto> (u, y) . u : ?init & x = y :] o
      {.u, x. ?p (u, x) & ?p' x.} o
      [: (u, x) \<leadsto> y . ?r (u, x) y & ?r' x y :]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_hole 14,
                       template_app (template_hole 13, t_empty))),
                   template_app (template_hole 8, template_var 3))),
               template_app (template_hole 7, template_var 2))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, t_empty))),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty))))),
           template_app
            (template_hole 7,
             template_app
              (template_hole 2,
               template_app (template_hole 1, t_empty))))))),
    ("Refinement.fusion_local_refinement",
     "[| ?a : ?init;
         !!x u y. [| u : ?init; ?p' x; ?r (u, x) y |] ==> ?r' x y |]
      ==> {. ?p' .} o
          ([: x \<leadsto> (u, y) . u : ?init & x = y :] o {. ?p .} o
           [: ?r :]) \<parallel>
          [: ?r' :]
          <= [: x \<leadsto> (u, y) . u : ?init & x = y :] o {. ?p .} o
             [: ?r :]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 13,
             template_app (template_hole 12, template_var 3)),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, t_empty))),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 1, template_var 2))),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty))),
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 1, template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.RefinementMoreTemplates"
### 0.298s elapsed time, 0.396s cpu time, 0.000s GC time
val it = (): unit
