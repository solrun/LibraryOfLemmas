Loading theory "Draft.HOModel" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof" via "Draft.LastVotingDefs")
Loading theory "Draft.Majorities" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers" via "HOL-Library.Omega_Words_Fun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Majorities"
### 0.059s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.485s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.290s elapsed time, 1.172s cpu time, 0.122s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.803s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.299s elapsed time, 1.166s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.326s elapsed time, 1.269s cpu time, 0.175s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOModel"
### 1.419s elapsed time, 5.454s cpu time, 1.040s GC time
Loading theory "Draft.LastVotingDefs" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.124s elapsed time, 4.266s cpu time, 0.918s GC time
Loading theory "Stuttering_Equivalence.Samplers" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.886s cpu time, 0.832s GC time
Found termination order: "size <*mlex*> {}"
### theory "Stuttering_Equivalence.Samplers"
### 0.245s elapsed time, 0.915s cpu time, 0.174s GC time
Loading theory "Stuttering_Equivalence.StutterEquivalence" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof" via "Draft.Reduction")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 134 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" n))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_applC" ("_position" f) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" n))
###       ("_position" \<sigma>))
###     ("_applC" ("_position" f) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>)))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" m)
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>)))
###         ("_position" j))
###       ("_position" \<tau>))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>)))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" j))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" m)
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>)))
###       ("_position" j))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>))
###         ("_position" j))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>)))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" n)
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>)))
###         ("_position" k))
###       ("_position" \<tau>))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>)))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" k))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" n)
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>)))
###       ("_position" k))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>))
###         ("_position" k))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Stuttering_Equivalence.StutterEquivalence"
### 0.096s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "Draft.Reduction" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.LastVotingProof")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### val Ack = undefined
### val Null = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. stamp (Vote v) = undefined
### stamp Ack = undefined
### stamp Null = undefined
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.151s elapsed time, 7.609s cpu time, 1.333s GC time
Loading theory "Draft.Templates" (required by "Draft.LastVotingProofMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.247s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LastVotingProofMoreTemplates")
### theory "Draft.LastVotingDefs"
### 1.158s elapsed time, 3.774s cpu time, 0.479s GC time
### theory "Draft.Reduction"
### 0.785s elapsed time, 2.387s cpu time, 0.304s GC time
Loading theory "Draft.LastVotingProof" (required by "Draft.LastVotingProofMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.558s elapsed time, 1.222s cpu time, 0.100s GC time
### theory "Draft.LastVotingProof"
### 0.505s elapsed time, 1.022s cpu time, 0.100s GC time
Loading theory "Draft.LastVotingProofMoreTemplates"
val templateLemmas =
   [("LastVotingProof.highestStampRcvd_max",
     "?msgs ?p = Some (ValStamp ?v ?ts) ==> ?ts <= highestStampRcvd ?msgs",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 3)))),
    ("LastVotingProof.timeStampsRcvdFinite",
     "finite {ts. EX q v. ?msgs q = Some (ValStamp v ts)}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("LastVotingProof.phase_Suc",
     "phase (Suc ?r) = (if step ?r = 3 then Suc (phase ?r) else phase ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_app
                (template_hole 5,
                 template_app (template_hole 6, template_var 0))),
             template_app (template_hole 6, template_var 0))
           ))),
    ("LastVotingProof.LV_timestamp_increasing",
     "CHORun LV_M ?rho ?HOs ?coords ==>
      timestamp (?rho ?n ?p) <= timestamp (?rho (Suc ?n) ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("LastVotingProof.lv_consensus",
     "[| CHORun LV_M ?rho ?HOs ?coords; CHOcommGlobal LV_M ?HOs ?coords |]
      ==> consensus (x o ?rho 0) decide ?rho",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_var 2, template_hole 1))),
               template_hole 0),
             template_var 2)
           ))),
    ("LastVotingProof.coordinators",
     "CHORun LV_M ?rho ?HOs ?coords ==>
      coord\<Phi> (?rho ?r ?p) = ?coords (4 * phase ?r) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 2, template_hole 1)))),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("LastVotingProof.LV_timestamp_monotonic",
     "[| CHORun LV_M ?rho ?HOs ?coords; ?m <= ?n |]
      ==> timestamp (?rho ?m ?p) <= timestamp (?rho ?n ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 1),
             template_var 0))))),
    ("LastVotingProof.committedProcsEqual",
     "[| CHORun LV_M ?rho ?HOs ?coords; commt (?rho ?r ?p);
         commt (?rho ?r ?p') |]
      ==> ?p = ?p'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("LastVotingProof.readyProcsEqual",
     "[| CHORun LV_M ?rho ?HOs ?coords; ready (?rho ?r ?p);
         ready (?rho ?r ?p') |]
      ==> ?p = ?p'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("LastVotingProof.LV_timestamp_bounded",
     "CHORun LV_M ?rho ?HOs ?coords ==>
      timestamp (?rho ?n ?p)
      <= (if step ?n < 2 then phase ?n else Suc (phase ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)))))),
    ("LastVotingProof.lv_termination",
     "[| CHORun LV_M ?rho ?HOs ?coords; CHOcommGlobal LV_M ?HOs ?coords |]
      ==> EX r. ALL p. decide (?rho r p) ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("LastVotingProof.notStep1EqualX",
     "[| CHORun LV_M ?rho ?HOs ?coords; step ?r ~= 1 |]
      ==> x (?rho (Suc ?r) ?p) = x (?rho ?r ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0))))),
    ("LastVotingProof.notStep1EqualTimestamp",
     "[| CHORun LV_M ?rho ?HOs ?coords; step ?r ~= 1 |]
      ==> timestamp (?rho (Suc ?r) ?p) = timestamp (?rho ?r ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0))))),
    ("LastVotingProof.notStep0EqualVote",
     "[| CHORun LV_M ?rho ?HOs ?coords; step ?r ~= 0 |]
      ==> vote (?rho (Suc ?r) ?p) = vote (?rho ?r ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0))))),
    ("LastVotingProof.lv_integrity",
     "[| CHORun LV_M ?rho ?HOs ?coords; decide (?rho ?n ?p) = Some ?v |]
      ==> EX q. ?v = x (?rho 0 q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_var 5, template_var 2),
              template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("LastVotingProof.highestStampRcvd_exists",
     "[| valStampsRcvd ?msgs ~= {};
         !!p v.
            ?msgs p = Some (ValStamp v (highestStampRcvd ?msgs)) ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("LastVotingProof.lv_irrevocability",
     "[| CHORun LV_M ?rho ?HOs ?coords; decide (?rho ?m ?p) = Some ?v |]
      ==> decide (?rho (?m + ?k) ?p) = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 6, template_var 3),
              template_var 2)),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_var 6,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)),
         template_app (template_hole 1, template_var 1)))),
    ("LastVotingProof.lv_consensus_fg",
     "[| fg_run LV_M ?rho ?HOs ?HOs ?coords;
         CHOcommGlobal LV_M ?HOs ?coords |]
      ==> consensus (%p. x (state (?rho 0) p)) decide (state o ?rho)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 2),
                  template_var 1),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 2))
           ))),
    ("LastVotingProof.notStep3EqualCoord",
     "[| CHORun LV_M ?rho ?HOs ?coords; step ?r ~= 3 |]
      ==> coord\<Phi> (?rho (Suc ?r) ?p) = coord\<Phi> (?rho ?r ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0))))),
    ("LastVotingProof.procsBeyondTS_monotonic",
     "[| CHORun LV_M ?rho ?HOs ?coords; ?p : procsBeyondTS ?ts (?rho ?m);
         ?m <= ?n |]
      ==> ?p : procsBeyondTS ?ts (?rho ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_var 6, template_var 1)))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_var 6, template_var 0)))
           ))),
    ("LastVotingProof.lv_agreement",
     "[| CHORun LV_M ?rho ?HOs ?coords; decide (?rho ?m ?p) = Some ?v;
         decide (?rho ?n ?q) = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 8, template_var 5),
              template_var 4)),
          template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 8, template_var 2),
              template_var 1)),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 3, template_var 0))),
    ("LastVotingProof.notStep03EqualCommit",
     "[| CHORun LV_M ?rho ?HOs ?coords; step ?r ~= 0 & step ?r ~= 3 |]
      ==> commt (?rho (Suc ?r) ?p) = commt (?rho ?r ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 1)),
                    template_hole 6))),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3)))))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0))))),
    ("LastVotingProof.decisionThenMajorityBeyondTS",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         decide (?rho (Suc ?r) ?p) ~= decide (?rho ?r ?p) |]
      ==> N div 2 < card (procsBeyondTS (Suc (phase ?r)) (?rho ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_var 4,
                    template_app (template_hole 9, template_var 1)),
                  template_var 0)),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_var 4, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 9,
                 template_app (template_hole 0, template_var 1))),
             template_app (template_var 4, template_var 1)))))),
    ("LastVotingProof.decisionNonNullThenDecided",
     "[| CHORun LV_M ?rho ?HOs ?coords; decide (?rho ?n ?p) = Some ?v |]
      ==> EX m<?n.
             decide (?rho (Suc m) ?p) ~= decide (?rho m ?p) &
             decide (?rho (Suc m) ?p) = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_var 5, template_var 2),
              template_var 1)),
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("LastVotingProof.XOfTimestampBeyondDecision",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         decide (?rho (Suc ?r) ?p) ~= decide (?rho ?r ?p) |]
      ==> ALL q:procsBeyondTS (Suc (phase ?r)) (?rho (?r + ?k)).
             x (?rho (?r + ?k) q) = the (decide (?rho (Suc ?r) ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_var 5,
                    template_app (template_hole 7, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_var 5, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 4, template_var 2))),
                 template_app
                  (template_var 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)))),
             t_empty)
           ))),
    ("LastVotingProof.commitThenVoteRecent",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         N div 2 < card (procsBeyondTS ?ts (?rho ?r)); commt (?rho ?r ?p) |]
      ==> EX q:procsBeyondTS ?ts (?rho ?r).
             vote (?rho ?r ?p) = Some (x (?rho ?r q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_var 5, template_var 1)))),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_var 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_var 5, template_var 1))),
             t_empty)
           ))),
    ("LastVotingProof.laterProcessDecidesSameValue",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         decide (?rho (Suc ?r) ?p) ~= decide (?rho ?r ?p);
         decide (?rho (Suc (?r + ?k)) ?q) ~= decide (?rho (?r + ?k) ?q) |]
      ==> decide (?rho (Suc (?r + ?k)) ?q) = decide (?rho (Suc ?r) ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_var 6,
                    template_app (template_hole 1, template_var 3)),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_var 6, template_var 3),
                  template_var 2)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_var 6,
                    template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 1))),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_var 6,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_var 6,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_var 6,
               template_app (template_hole 1, template_var 3)),
             template_var 2))))),
    ("LastVotingProof.currentTimestampE",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         timestamp (?rho ?r ?p) = Suc (phase ?r);
         [| 2 <= step ?r; commt (?rho ?r (coord\<Phi> (?rho ?r ?p)));
            x (?rho ?r ?p) =
            the (vote (?rho ?r (coord\<Phi> (?rho ?r ?p)))) |]
         ==> ?A |]
      ==> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_app (template_var 5, template_var 2),
              template_var 1)),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 2))),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7)),
             template_app (template_hole 6, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_var 5, template_var 2),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_var 5, template_var 2),
                         template_var 1))))
                 )],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_var 5, template_var 2),
                     template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_var 5, template_var 2),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_var 5, template_var 2),
                           template_var 1))))))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("LastVotingProof.commitE",
     "[| CHORun LV_M ?rho ?HOs ?coords; commt (?rho ?r ?p);
         [| 1 <= step ?r; coord\<Phi> (?rho ?r ?p) = ?p;
            vote (?rho ?r ?p) ~= None;
            N div 2 < card {q. coord\<Phi> (?rho ?r q) = ?p} |]
         ==> ?A |]
      ==> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_inequation
            (less_equals, template_hole 15,
             template_app (template_hole 14, template_var 2))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_var 5, template_var 2),
                   template_var 1)),
               template_var 1)],
            template_implication
             ([template_negation
                (
                   template_equation
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_var 5, template_var 2),
                         template_var 1)),
                     template_hole 8)
                   )],
              template_implication
               ([template_inequation
                  (less_than,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, t_empty)))],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("LastVotingProof.readyE",
     "[| CHORun LV_M ?rho ?HOs ?coords; ready (?rho ?r ?p);
         [| step ?r = 3; coord\<Phi> (?rho ?r ?p) = ?p;
            N div 2
            < card
               {q. coord\<Phi> (?rho ?r q) = ?p &
                   timestamp (?rho ?r q) = Suc (phase ?r)} |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_var 5, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 15, template_var 2),
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_var 5, template_var 2),
                   template_var 1)),
               template_var 1)],
            template_implication
             ([template_inequation
                (less_than,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)),
                   template_app
                    (template_hole 14,
                     template_app (template_hole 5, template_hole 12))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 4, t_empty)))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("LastVotingProof.decisionE",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         decide (?rho (Suc ?r) ?p) ~= decide (?rho ?r ?p);
         [| step ?r = 3;
            decide (?rho (Suc ?r) ?p) =
            Some (the (vote (?rho ?r (coord\<Phi> (?rho ?r ?p)))));
            ready (?rho ?r (coord\<Phi> (?rho ?r ?p)));
            commt (?rho ?r (coord\<Phi> (?rho ?r ?p))) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_var 5,
                    template_app (template_hole 11, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_var 5, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_var 5,
                     template_app (template_hole 11, template_var 2)),
                   template_var 1)),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_var 5, template_var 2),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_var 5, template_var 2),
                           template_var 1)))))))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_var 5, template_var 2),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_var 5, template_var 2),
                           template_var 1))))
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_var 5, template_var 2),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_var 5, template_var 2),
                             template_var 1))))
                     )],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("LastVotingProof.lv_integrityInvariant",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         [| range (x o ?rho ?n) <= range (x o ?rho 0);
            range (vote o ?rho ?n) <= {None} Un Some ` range (x o ?rho 0);
            range (decide o ?rho ?n)
            <= {None} Un Some ` range (x o ?rho 0) |]
         ==> ?A |]
      ==> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app (template_var 4, template_var 1))),
               template_hole 12),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app (template_var 4, template_hole 11))),
               template_hole 12))],
          template_implication
           ([template_inequation
              (less_equals,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app (template_var 4, template_var 1))),
                 template_hole 12),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app (template_hole 14, template_hole 13),
                         template_app (template_var 4, template_hole 11))),
                     template_hole 12))))],
            template_implication
             ([template_inequation
                (less_equals,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 0),
                       template_app (template_var 4, template_var 1))),
                   template_hole 12),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3)),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_hole 14, template_hole 13),
                           template_app
                            (template_var 4, template_hole 11))),
                       template_hole 12))))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("LastVotingProof.LV_Suc'",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         [| step ?r = 0; step (Suc ?r) = 1; phase (Suc ?r) = phase ?r;
            next0 ?r ?p (?rho ?r ?p)
             (HOrcvdMsgs LV_M ?r ?p (?HOs ?r ?p) (?rho ?r))
             (?coords (Suc ?r) ?p) (?rho (Suc ?r) ?p) |]
         ==> ?P ?p ?r;
         [| step ?r = 1; step (Suc ?r) = 2; phase (Suc ?r) = phase ?r;
            next1 ?r ?p (?rho ?r ?p)
             (HOrcvdMsgs LV_M ?r ?p (?HOs ?r ?p) (?rho ?r))
             (?coords (Suc ?r) ?p) (?rho (Suc ?r) ?p) |]
         ==> ?P ?p ?r;
         [| step ?r = 2; step (Suc ?r) = 3; phase (Suc ?r) = phase ?r;
            next2 ?r ?p (?rho ?r ?p)
             (HOrcvdMsgs LV_M ?r ?p (?HOs ?r ?p) (?rho ?r))
             (?coords (Suc ?r) ?p) (?rho (Suc ?r) ?p) |]
         ==> ?P ?p ?r;
         [| step ?r = 3; step (Suc ?r) = 0; phase (Suc ?r) = Suc (phase ?r);
            next3 ?r ?p (?rho ?r ?p)
             (HOrcvdMsgs LV_M ?r ?p (?HOs ?r ?p) (?rho ?r))
             (?coords (Suc ?r) ?p) (?rho (Suc ?r) ?p) |]
         ==> ?P ?p ?r |]
      ==> ?P ?p ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 13, template_var 2),
             template_hole 12)],
          template_implication
           ([template_equation
              (template_app
                (template_hole 13,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 9,
                   template_app (template_hole 11, template_var 2)),
                 template_app (template_hole 9, template_var 2))],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 8, template_var 2),
                               template_var 1),
                             template_app
                              (template_app
                                (template_var 5, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 7, template_hole 15),
                                   template_var 2),
                                 template_var 1),
                               template_app
                                (template_app
                                  (template_var 4, template_var 2),
                                 template_var 1)),
                             template_app
                              (template_var 5, template_var 2))),
                         template_app
                          (template_app
                            (template_var 3,
                             template_app
                              (template_hole 11, template_var 2)),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_var 5,
                           template_app (template_hole 11, template_var 2)),
                         template_var 1))
                     )],
                template_predicate
                 (
                    template_app
                     (template_app (template_var 0, template_var 1),
                      template_var 2)
                    ))))),
        template_implication
         ([template_equation
            (template_app (template_hole 13, template_var 2),
             template_hole 10)],
          template_implication
           ([template_equation
              (template_app
                (template_hole 13,
                 template_app (template_hole 11, template_var 2)),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4)))],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 9,
                   template_app (template_hole 11, template_var 2)),
                 template_app (template_hole 9, template_var 2))],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_var 2),
                               template_var 1),
                             template_app
                              (template_app
                                (template_var 5, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 7, template_hole 15),
                                   template_var 2),
                                 template_var 1),
                               template_app
                                (template_app
                                  (template_var 4, template_var 2),
                                 template_var 1)),
                             template_app
                              (template_var 5, template_var 2))),
                         template_app
                          (template_app
                            (template_var 3,
                             template_app
                              (template_hole 11, template_var 2)),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_var 5,
                           template_app (template_hole 11, template_var 2)),
                         template_var 1))
                     )],
                template_predicate
                 (
                    template_app
                     (template_app (template_var 0, template_var 1),
                      template_var 2)
                    ))))),
        template_implication
         ([template_equation
            (template_app (template_hole 13, template_var 2),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 13,
                 template_app (template_hole 11, template_var 2)),
               template_app
                (template_hole 6,
                 template_app (template_hole 2, template_hole 4)))],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 9,
                   template_app (template_hole 11, template_var 2)),
                 template_app (template_hole 9, template_var 2))],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 2),
                               template_var 1),
                             template_app
                              (template_app
                                (template_var 5, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 7, template_hole 15),
                                   template_var 2),
                                 template_var 1),
                               template_app
                                (template_app
                                  (template_var 4, template_var 2),
                                 template_var 1)),
                             template_app
                              (template_var 5, template_var 2))),
                         template_app
                          (template_app
                            (template_var 3,
                             template_app
                              (template_hole 11, template_var 2)),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_var 5,
                           template_app (template_hole 11, template_var 2)),
                         template_var 1))
                     )],
                template_predicate
                 (
                    template_app
                     (template_app (template_var 0, template_var 1),
                      template_var 2)
                    ))))),
        template_implication
         ([template_equation
            (template_app (template_hole 13, template_var 2),
             template_app
              (template_hole 6,
               template_app (template_hole 2, template_hole 4)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 13,
                 template_app (template_hole 11, template_var 2)),
               template_hole 12)],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 9,
                   template_app (template_hole 11, template_var 2)),
                 template_app
                  (template_hole 11,
                   template_app (template_hole 9, template_var 2)))],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 2),
                               template_var 1),
                             template_app
                              (template_app
                                (template_var 5, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 7, template_hole 15),
                                   template_var 2),
                                 template_var 1),
                               template_app
                                (template_app
                                  (template_var 4, template_var 2),
                                 template_var 1)),
                             template_app
                              (template_var 5, template_var 2))),
                         template_app
                          (template_app
                            (template_var 3,
                             template_app
                              (template_hole 11, template_var 2)),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_var 5,
                           template_app (template_hole 11, template_var 2)),
                         template_var 1))
                     )],
                template_predicate
                 (
                    template_app
                     (template_app (template_var 0, template_var 1),
                      template_var 2)
                    )))))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 1), template_var 2)
           ))),
    ("LastVotingProof.LV_Suc",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         [| step ?r = 0; step (Suc ?r) = 1; phase (Suc ?r) = phase ?r;
            ALL p.
               next0 ?r p (?rho ?r p)
                (HOrcvdMsgs LV_M ?r p (?HOs ?r p) (?rho ?r))
                (?coords (Suc ?r) p) (?rho (Suc ?r) p) |]
         ==> ?P ?r;
         [| step ?r = 1; step (Suc ?r) = 2; phase (Suc ?r) = phase ?r;
            ALL p.
               next1 ?r p (?rho ?r p)
                (HOrcvdMsgs LV_M ?r p (?HOs ?r p) (?rho ?r))
                (?coords (Suc ?r) p) (?rho (Suc ?r) p) |]
         ==> ?P ?r;
         [| step ?r = 2; step (Suc ?r) = 3; phase (Suc ?r) = phase ?r;
            ALL p.
               next2 ?r p (?rho ?r p)
                (HOrcvdMsgs LV_M ?r p (?HOs ?r p) (?rho ?r))
                (?coords (Suc ?r) p) (?rho (Suc ?r) p) |]
         ==> ?P ?r;
         [| step ?r = 3; step (Suc ?r) = 0; phase (Suc ?r) = Suc (phase ?r);
            ALL p.
               next3 ?r p (?rho ?r p)
                (HOrcvdMsgs LV_M ?r p (?HOs ?r p) (?rho ?r))
                (?coords (Suc ?r) p) (?rho (Suc ?r) p) |]
         ==> ?P ?r |]
      ==> ?P ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 14, template_var 1),
             template_hole 13)],
          template_implication
           ([template_equation
              (template_app
                (template_hole 14,
                 template_app (template_hole 12, template_var 1)),
               template_hole 11)],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 10, template_var 1))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 9, t_empty))],
                template_predicate
                 (template_app (template_var 0, template_var 1)))))),
        template_implication
         ([template_equation
            (template_app (template_hole 14, template_var 1),
             template_hole 11)],
          template_implication
           ([template_equation
              (template_app
                (template_hole 14,
                 template_app (template_hole 12, template_var 1)),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4)))],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 10, template_var 1))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 9, t_empty))],
                template_predicate
                 (template_app (template_var 0, template_var 1)))))),
        template_implication
         ([template_equation
            (template_app (template_hole 14, template_var 1),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 14,
                 template_app (template_hole 12, template_var 1)),
               template_app
                (template_hole 6,
                 template_app (template_hole 2, template_hole 4)))],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app (template_hole 10, template_var 1))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 9, t_empty))],
                template_predicate
                 (template_app (template_var 0, template_var 1)))))),
        template_implication
         ([template_equation
            (template_app (template_hole 14, template_var 1),
             template_app
              (template_hole 6,
               template_app (template_hole 2, template_hole 4)))],
          template_implication
           ([template_equation
              (template_app
                (template_hole 14,
                 template_app (template_hole 12, template_var 1)),
               template_hole 13)],
            template_implication
             ([template_equation
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 1)),
                 template_app
                  (template_hole 12,
                   template_app (template_hole 10, template_var 1)))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 9, t_empty))],
                template_predicate
                 (template_app (template_var 0, template_var 1))))))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("LastVotingProof.LV_induct'",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         CinitState LV_M ?p (?rho 0 ?p) (?coords 0 ?p) ==> ?P ?p 0;
         !!r. [| step r = 0; ?P ?p r; phase (Suc r) = phase r;
                 step (Suc r) = 1;
                 next0 r ?p (?rho r ?p)
                  (HOrcvdMsgs LV_M r ?p (?HOs r ?p) (?rho r))
                  (?coords (Suc r) ?p) (?rho (Suc r) ?p) |]
              ==> ?P ?p (Suc r);
         !!r. [| step r = 1; ?P ?p r; phase (Suc r) = phase r;
                 step (Suc r) = 2;
                 next1 r ?p (?rho r ?p)
                  (HOrcvdMsgs LV_M r ?p (?HOs r ?p) (?rho r))
                  (?coords (Suc r) ?p) (?rho (Suc r) ?p) |]
              ==> ?P ?p (Suc r);
         !!r. [| step r = 2; ?P ?p r; phase (Suc r) = phase r;
                 step (Suc r) = 3;
                 next2 r ?p (?rho r ?p)
                  (HOrcvdMsgs LV_M r ?p (?HOs r ?p) (?rho r))
                  (?coords (Suc r) ?p) (?rho (Suc r) ?p) |]
              ==> ?P ?p (Suc r);
         !!r. [| step r = 3; ?P ?p r; phase (Suc r) = Suc (phase r);
                 step (Suc r) = 0;
                 next3 r ?p (?rho r ?p)
                  (HOrcvdMsgs LV_M r ?p (?HOs r ?p) (?rho r))
                  (?coords (Suc r) ?p) (?rho (Suc r) ?p) |]
              ==> ?P ?p (Suc r) |]
      ==> ?P ?p ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 16, template_hole 17),
                     template_var 2),
                   template_app
                    (template_app (template_var 5, template_hole 15),
                     template_var 2)),
                 template_app
                  (template_app (template_var 3, template_hole 15),
                   template_var 2))
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 1, template_var 2),
                template_hole 15)
              )),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           ))),
    ("LastVotingProof.LV_induct",
     "[| CHORun LV_M ?rho ?HOs ?coords;
         ALL p. CinitState LV_M p (?rho 0 p) (?coords 0 p) ==> ?P 0;
         !!r. [| step r = 0; ?P r; phase (Suc r) = phase r;
                 step (Suc r) = 1;
                 ALL p.
                    next0 r p (?rho r p)
                     (HOrcvdMsgs LV_M r p (?HOs r p) (?rho r))
                     (?coords (Suc r) p) (?rho (Suc r) p) |]
              ==> ?P (Suc r);
         !!r. [| step r = 1; ?P r; phase (Suc r) = phase r;
                 step (Suc r) = 2;
                 ALL p.
                    next1 r p (?rho r p)
                     (HOrcvdMsgs LV_M r p (?HOs r p) (?rho r))
                     (?coords (Suc r) p) (?rho (Suc r) p) |]
              ==> ?P (Suc r);
         !!r. [| step r = 2; ?P r; phase (Suc r) = phase r;
                 step (Suc r) = 3;
                 ALL p.
                    next2 r p (?rho r p)
                     (HOrcvdMsgs LV_M r p (?HOs r p) (?rho r))
                     (?coords (Suc r) p) (?rho (Suc r) p) |]
              ==> ?P (Suc r);
         !!r. [| step r = 3; ?P r; phase (Suc r) = Suc (phase r);
                 step (Suc r) = 0;
                 ALL p.
                    next3 r p (?rho r p)
                     (HOrcvdMsgs LV_M r p (?HOs r p) (?rho r))
                     (?coords (Suc r) p) (?rho (Suc r) p) |]
              ==> ?P (Suc r) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 17, t_empty))],
          template_predicate
           (template_app (template_var 1, template_hole 15))),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.LastVotingProofMoreTemplates"
### 0.390s elapsed time, 0.525s cpu time, 0.064s GC time
val it = (): unit
