Loading theory "Draft.HOModel" (required by "Draft.ReductionMoreTemplates" via "Draft.Reduction")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.ReductionMoreTemplates" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.602s cpu time, 0.039s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.307s elapsed time, 1.226s cpu time, 0.131s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.ReductionMoreTemplates" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.353s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.291s elapsed time, 1.148s cpu time, 0.092s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.298s elapsed time, 1.175s cpu time, 0.098s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.133s elapsed time, 4.305s cpu time, 0.972s GC time
Loading theory "Stuttering_Equivalence.Samplers" (required by "Draft.ReductionMoreTemplates" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.HOModel"
### 1.589s elapsed time, 6.135s cpu time, 1.103s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.053s elapsed time, 3.958s cpu time, 0.966s GC time
Found termination order: "size <*mlex*> {}"
### theory "Stuttering_Equivalence.Samplers"
### 0.219s elapsed time, 0.772s cpu time, 0.092s GC time
Loading theory "Stuttering_Equivalence.StutterEquivalence" (required by "Draft.ReductionMoreTemplates" via "Draft.Reduction")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 134 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" n))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_applC" ("_position" f) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" n))
###       ("_position" \<sigma>))
###     ("_applC" ("_position" f) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>)))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" m)
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>)))
###         ("_position" j))
###       ("_position" \<tau>))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>)))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" j))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" m)
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>)))
###       ("_position" j))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>))
###         ("_position" j))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>)))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" n)
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>)))
###         ("_position" k))
###       ("_position" \<tau>))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>)))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" k))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" n)
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>)))
###       ("_position" k))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>))
###         ("_position" k))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Stuttering_Equivalence.StutterEquivalence"
### 0.094s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.Reduction" (required by "Draft.ReductionMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Reduction"
### 0.696s elapsed time, 1.507s cpu time, 0.247s GC time
### theory "HOL-Library.Tree"
### 2.101s elapsed time, 6.484s cpu time, 1.311s GC time
Loading theory "Draft.Templates" (required by "Draft.ReductionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.079s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ReductionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.680s elapsed time, 1.212s cpu time, 0.739s GC time
Loading theory "Draft.ReductionMoreTemplates"
val templateLemmas =
   [("Reduction.locally_similar_refl",
     "locally_similar ?\<sigma> ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Reduction.consensus_is_local",
     "local_property (consensus ?vals ?dec)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Reduction.weak_consensus_is_local",
     "local_property (weak_consensus ?vals ?dec)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Reduction.locally_similar_sym",
     "locally_similar ?\<sigma> ?\<tau> ==>
      locally_similar ?\<tau> ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Reduction.fg_start_round_strict_mono",
     "fg_run ?A ?rho ?HOs ?SHOs ?coords ==>
      strict_mono (fg_start_round ?rho ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Reduction.locally_similar_trans",
     "[| locally_similar ?\<rho> ?\<sigma>;
         locally_similar ?\<sigma> ?\<tau> |]
      ==> locally_similar ?\<rho> ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Reduction.fg_start_round_smallest",
     "config.round (?rho ?k) ?p = ?r ==> fg_start_round ?rho ?p ?r <= ?k",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_var 3, template_var 2)),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("Reduction.fg_start_round_0",
     "fg_run ?A ?rho ?HOs ?SHOs ?coords ==> fg_start_round ?rho ?p 0 = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0),
           template_hole 0),
         template_hole 0))),
    ("Reduction.coarse_run_locally_similar",
     "fg_run ?A ?rho ?HOs ?SHOs ?coords ==>
      locally_similar (state o ?rho) (coarse_run ?rho)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 3)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Reduction.reduction",
     "fg_run ?A ?rho ?HOs ?SHOs ?coords ==>
      CSHORun ?A (coarse_run ?rho) ?HOs ?SHOs ?coords",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Reduction.local_property_eq",
     "local_property ?P =
      (ALL \<sigma> \<tau>.
          locally_similar \<sigma> \<tau> --> ?P \<sigma> = ?P \<tau>)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Reduction.fg_start_round",
     "fg_run ?A ?rho ?HOs ?SHOs ?coords ==>
      config.round (?rho (fg_start_round ?rho ?p ?r)) ?p = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1),
                 template_var 0))),
           template_var 1),
         template_var 0))),
    ("Reduction.fg_round_numbers_increase",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords; ?n <= ?m |]
      ==> config.round (?rho ?n) ?p <= config.round (?rho ?m) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 6, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 6, template_var 1)),
           template_var 0)))),
    ("Reduction.termination_is_local",
     "[| locally_similar ?\<sigma> ?\<tau>;
         ?dec (?\<sigma> ?m ?p) = Some ?v |]
      ==> EX n. ?dec (?\<tau> n ?p) = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_var 3,
            template_app
             (template_app (template_var 5, template_var 2),
              template_var 1)),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Reduction.fg_invariant2a",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords;
         rcvd (?rho ?n) ?q ?p = Some ?m |]
      ==> ?p : ?HOs (config.round (?rho ?n) ?q) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app (template_var 7, template_var 3)),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_var 6,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 7, template_var 3)),
                   template_var 2)),
               template_var 2))
           ))),
    ("Reduction.fg_start_round_later",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords; config.round (?rho ?n) ?p = ?r;
         ?r < ?r' |]
      ==> ?n < fg_start_round ?rho ?p ?r'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_var 7, template_var 3)),
            template_var 2),
          template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 3,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 7),
             template_var 2),
           template_var 0)))),
    ("Reduction.fg_same_round_same_state",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords;
         config.round (?rho ?m) ?p = config.round (?rho ?n) ?p |]
      ==> state (?rho ?m) ?p = state (?rho ?n) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_var 6, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_var 6, template_var 0)),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 6, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 6, template_var 0)),
           template_var 1)))),
    ("Reduction.fg_state_change",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords;
         config.round (?rho (Suc ?n)) ?p = config.round (?rho ?n) ?p |]
      ==> state (?rho (Suc ?n)) ?p = state (?rho ?n) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_var 5,
                template_app (template_hole 2, template_var 1))),
            template_var 0),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_var 5, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 5,
               template_app (template_hole 2, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 5, template_var 1)),
           template_var 0)))),
    ("Reduction.fg_round_between_start_rounds",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords; fg_start_round ?rho ?p ?r <= ?n;
         ?n < fg_start_round ?rho ?p (Suc ?r) |]
      ==> config.round (?rho ?n) ?p = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 4, template_var 6),
              template_var 2),
            template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_app (template_hole 4, template_var 6),
              template_var 2),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 6, template_var 0)),
           template_var 2),
         template_var 1))),
    ("Reduction.validity_is_local",
     "[| locally_similar ?\<sigma> ?\<tau>;
         !!n. ?dec (?\<sigma> n ?p) = Some ?w ==> ?w = ?v;
         ?dec (?\<tau> ?n ?p) = Some ?w |]
      ==> ?w = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_equation
         (template_app
           (template_var 4,
            template_app
             (template_app (template_var 5, template_var 0),
              template_var 3)),
          template_app (template_hole 1, template_var 2))],
       template_equation (template_var 2, template_var 1))),
    ("Reduction.fg_invariant1",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords;
         (?p, ?r, ?q, ?m) : network (?rho ?n) |]
      ==> ?m =
          sendMsg ?A ?r ?p ?q
           (state (?rho (fg_start_round ?rho ?p ?r)) ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 4,
                template_app (template_var 8, template_var 0)))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 9),
                 template_var 3),
               template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 8,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 8),
                     template_var 4),
                   template_var 3))),
             template_var 4))))),
    ("Reduction.integrity_is_local",
     "[| locally_similar ?\<sigma> ?\<tau>;
         !!n. ?dec (?\<sigma> n ?p) = Some ?v ==> ?v : range ?vals;
         ?dec (?\<tau> ?n ?p) = Some ?v |]
      ==> ?v : range ?vals",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_var 4,
            template_app
             (template_app (template_var 5, template_var 0),
              template_var 3)),
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Reduction.local_property_reduction",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords; local_property ?P;
         !!crho.
            [| CSHORun ?A crho ?HOs ?SHOs ?coords;
               crho 0 = state (?rho 0) |]
            ==> ?P crho |]
      ==> ?P (state o ?rho)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 4))
           ))),
    ("Reduction.fg_invariant2b",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords; rcvd (?rho ?n) ?q ?p = Some ?m;
         ?p : ?SHOs (config.round (?rho ?n) ?q) ?q |]
      ==> ?m =
          sendMsg ?A (config.round (?rho ?n) ?q) ?p ?q
           (state
             (?rho (fg_start_round ?rho ?p (config.round (?rho ?n) ?q)))
             ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_var 7, template_var 3)),
              template_var 2),
            template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_var 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_var 7, template_var 3)),
                    template_var 2)),
                template_var 2))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 8),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_var 7, template_var 3)),
                   template_var 2)),
               template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 7,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_var 7, template_var 3)),
                     template_var 2)))),
             template_var 1))))),
    ("Reduction.fg_local_transition_from_round",
     "[| fg_run ?A ?rho ?HOs ?SHOs ?coords;
         !!n. [| config.round (?rho n) ?p = ?r;
                 fg_start_round ?rho ?p (Suc ?r) = Suc n;
                 fg_local ?A ?p (?HOs ?r ?p) (?coords (Suc ?r) ?p) (?rho n)
                  (?rho (Suc n)) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Reduction.agreement_is_local",
     "[| locally_similar ?\<sigma> ?\<tau>;
         !!m n.
            [| ?dec (?\<sigma> m ?p) = Some ?v;
               ?dec (?\<sigma> n ?q) = Some ?w |]
            ==> ?v = ?w;
         ?dec (?\<tau> ?m ?p) = Some ?v; ?dec (?\<tau> ?n ?q) = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 8),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_equation
         (template_app
           (template_var 6,
            template_app
             (template_app (template_var 7, template_var 1),
              template_var 5)),
          template_app (template_hole 1, template_var 4)),
        template_equation
         (template_app
           (template_var 6,
            template_app
             (template_app (template_var 7, template_var 0),
              template_var 3)),
          template_app (template_hole 1, template_var 2))],
       template_equation (template_var 4, template_var 2)))]:
   (string * thm * template) list
### theory "Draft.ReductionMoreTemplates"
### 0.369s elapsed time, 0.493s cpu time, 0.029s GC time
val it = (): unit
