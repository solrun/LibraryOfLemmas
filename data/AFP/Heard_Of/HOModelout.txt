Loading theory "Draft.HOModel" (required by "Draft.HOModelMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.555s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.816s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.312s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.034s elapsed time, 3.905s cpu time, 0.882s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.052s elapsed time, 3.851s cpu time, 0.790s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOModel"
### 1.412s elapsed time, 5.243s cpu time, 0.921s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.901s elapsed time, 5.440s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.HOModelMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HOModelMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.513s cpu time, 0.058s GC time
Loading theory "Draft.HOModelMoreTemplates"
val templateLemmas =
   [("HOModel.consensus_then_weak_consensus",
     "consensus ?vals ?dec ?rho ==> weak_consensus ?vals ?dec ?rho",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HOModel.binary_weak_consensus_then_consensus",
     "weak_consensus ?vals ?dec ?rho ==> consensus ?vals ?dec ?rho",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HOModel.HOinitConfig_eq",
     "HOinitConfig ?A ?cfg = (ALL p. initState ?A p (?cfg p))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("HOModel.SHOmsgVectors_HO",
     "SHOmsgVectors ?A ?r ?p ?cfg ?HO ?HO = {HOrcvdMsgs ?A ?r ?p ?HO ?cfg}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)),
         template_hole 0))),
    ("HOModel.HORun_eq",
     "HORun ?A ?rho ?HOs =
      (HOinitConfig ?A (?rho 0) &
       (ALL r. HOnextConfig ?A r (?rho r) (?HOs r) (?rho (Suc r))))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_var 1, template_hole 3))),
         template_app (template_hole 2, t_empty)))),
    ("HOModel.CHORun_0",
     "[| CHORun ?A ?rho ?HOs ?coords;
         !!cfg. CHOinitConfig ?A cfg (?coords 0) ==> ?P cfg |]
      ==> ?P (?rho 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_var 3, template_hole 0))
           ))),
    ("HOModel.HOnextConfig_eq",
     "HOnextConfig ?A ?r ?cfg ?HO ?cfg' =
      (ALL p.
          nextState ?A ?r p (?cfg p) (HOrcvdMsgs ?A ?r p (?HO p) ?cfg)
           (?cfg' p))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("HOModel.SHORun_eq",
     "SHORun ?A ?rho ?HOs ?SHOs =
      (HOinitConfig ?A (?rho 0) &
       (ALL r.
           SHOnextConfig ?A r (?rho r) (?HOs r) (?SHOs r) (?rho (Suc r))))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_var 2, template_hole 3))),
         template_app (template_hole 2, t_empty)))),
    ("HOModel.CHOnextConfig_eq",
     "CHOnextConfig ?A ?r ?cfg ?HO ?coord ?cfg' =
      (ALL p.
          CnextState ?A ?r p (?cfg p) (HOrcvdMsgs ?A ?r p (?HO p) ?cfg)
           (?coord p) (?cfg' p))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("HOModel.CHORun_eq",
     "CHORun ?A ?rho ?HOs ?coords =
      (CHOinitConfig ?A (?rho 0) (?coords 0) &
       (ALL r.
           CHOnextConfig ?A r (?rho r) (?HOs r) (?coords (Suc r))
            (?rho (Suc r))))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_var 2, template_hole 3)),
             template_app (template_var 0, template_hole 3))),
         template_app (template_hole 2, t_empty)))),
    ("HOModel.SHOnextConfig_eq",
     "SHOnextConfig ?A ?r ?cfg ?HO ?SHO ?cfg' =
      (ALL p.
          EX \<mu>:SHOmsgVectors ?A ?r p ?cfg (?HO p) (?SHO p).
             nextState ?A ?r p (?cfg p) \<mu> (?cfg' p))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("HOModel.CHORun_Suc",
     "[| CHORun ?A ?rho ?HOs ?coords;
         !!r. CHOnextConfig ?A r (?rho r) (?HOs r) (?coords (Suc r))
               (?rho (Suc r)) ==>
              ?P r |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("HOModel.CHORun_induct",
     "[| CHORun ?A ?rho ?HOs ?coords;
         CHOinitConfig ?A (?rho 0) (?coords 0) ==> ?P 0;
         !!r. [| ?P r;
                 CHOnextConfig ?A r (?rho r) (?HOs r) (?coords (Suc r))
                  (?rho (Suc r)) |]
              ==> ?P (Suc r) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app (template_var 4, template_hole 3)),
                 template_app (template_var 2, template_hole 3))
               )],
          template_predicate
           (template_app (template_var 1, template_hole 3))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.HOModelMoreTemplates"
### 0.304s elapsed time, 0.444s cpu time, 0.074s GC time
val it = (): unit
