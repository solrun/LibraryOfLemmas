Loading theory "Draft.HOModel" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof" via "Draft.OneThirdRuleDefs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers" via "HOL-Library.Omega_Words_Fun")
Loading theory "Draft.Majorities" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Majorities"
### 0.061s elapsed time, 0.276s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.484s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.308s elapsed time, 1.236s cpu time, 0.126s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.835s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.234s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.336s elapsed time, 1.317s cpu time, 0.210s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.HOModel"
### 1.440s elapsed time, 5.555s cpu time, 1.097s GC time
Loading theory "Draft.OneThirdRuleDefs" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.126s elapsed time, 4.288s cpu time, 0.971s GC time
Loading theory "Stuttering_Equivalence.Samplers" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.055s elapsed time, 4.025s cpu time, 0.921s GC time
### theory "Stuttering_Equivalence.Samplers"
### 0.240s elapsed time, 0.912s cpu time, 0.160s GC time
Loading theory "Stuttering_Equivalence.StutterEquivalence" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof" via "Draft.Reduction")
Found termination order: "size <*mlex*> {}"
### theory "Draft.OneThirdRuleDefs"
### 0.337s elapsed time, 1.275s cpu time, 0.160s GC time
### Ambiguous input (line 134 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" n))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_applC" ("_position" f) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" n))
###       ("_position" \<sigma>))
###     ("_applC" ("_position" f) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>)))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" m)
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>)))
###         ("_position" j))
###       ("_position" \<tau>))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>)))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" j))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" m)
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>)))
###       ("_position" j))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>))
###         ("_position" j))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>)))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" n)
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>)))
###         ("_position" k))
###       ("_position" \<tau>))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>)))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" k))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" n)
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>)))
###       ("_position" k))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>))
###         ("_position" k))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Stuttering_Equivalence.StutterEquivalence"
### 0.098s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "Draft.Reduction" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.OneThirdRuleProof")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.077s elapsed time, 6.868s cpu time, 1.302s GC time
Loading theory "Draft.Templates" (required by "Draft.OneThirdRuleProofMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OneThirdRuleProofMoreTemplates")
### theory "Draft.Reduction"
### 0.701s elapsed time, 1.537s cpu time, 0.229s GC time
Loading theory "Draft.OneThirdRuleProof" (required by "Draft.OneThirdRuleProofMoreTemplates")
### theory "Draft.OneThirdRuleProof"
### 0.294s elapsed time, 0.618s cpu time, 0.064s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 0.987s cpu time, 0.123s GC time
Loading theory "Draft.OneThirdRuleProofMoreTemplates"
val templateLemmas =
   [("OneThirdRuleProof.vinv_invariant",
     "HORun OTR_M ?rho ?HOs ==> VInv ?rho ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("OneThirdRuleProof.OTR_consensus",
     "[| HORun OTR_M ?rho ?HOs; HOcommGlobal OTR_M ?HOs |]
      ==> consensus (x o ?rho 0) decide ?rho",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_var 1, template_hole 1))),
               template_hole 0),
             template_var 1)
           ))),
    ("OneThirdRuleProof.OTR_termination",
     "[| HORun OTR_M ?rho ?HOs; HOcommGlobal OTR_M ?HOs |]
      ==> EX r v. decide (?rho r ?p) = Some v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OneThirdRuleProof.OTR_integrity",
     "[| HORun OTR_M ?rho ?HOs; decide (?rho ?n ?p) = Some ?v |]
      ==> EX q. ?v = x (?rho 0 q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_var 4, template_var 2),
              template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("OneThirdRuleProof.OTR_consensus_fg",
     "[| fg_run OTR_M ?rho ?HOs ?HOs (%r q. undefined);
         HOcommGlobal OTR_M ?HOs |]
      ==> consensus (%p. x (state (?rho 0) p)) decide (state o ?rho)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 1),
                  template_var 0),
                template_var 0),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 1))
           ))),
    ("OneThirdRuleProof.OTR_agreement",
     "[| HORun OTR_M ?rho ?HOs; decide (?rho ?n ?p) = Some ?v;
         decide (?rho ?m ?p') = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 7, template_var 5),
              template_var 4)),
          template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 7, template_var 2),
              template_var 1)),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 3, template_var 0))),
    ("OneThirdRuleProof.A5",
     "[| HORun OTR_M ?rho ?HOs; decide (?rho ?n ?p) = Some ?v;
         decide (?rho (?n + ?k) ?p') = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_var 7, template_var 5),
              template_var 4)),
          template_app (template_hole 2, template_var 3)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app
               (template_var 7,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 2)),
              template_var 1)),
          template_app (template_hole 2, template_var 0))],
       template_equation (template_var 3, template_var 0))),
    ("OneThirdRuleProof.nextState_decide",
     "[| HORun OTR_M ?rho ?HOs;
         decide (?rho (Suc ?n) ?p) ~= decide (?rho ?n ?p) |]
      ==> TwoThirds (HOrcvdMsgs OTR_M ?n ?p (?HOs ?n ?p) (?rho ?n))
           (the (decide (?rho (Suc ?n) ?p)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_var 3,
                    template_app (template_hole 3, template_var 1)),
                  template_var 0)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_var 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 7),
                       template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_var 2, template_var 1),
                     template_var 0)),
                 template_app (template_var 3, template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_var 3,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0))))
           ))),
    ("OneThirdRuleProof.A4",
     "[| HORun OTR_M ?rho ?HOs; decide (?rho ?n ?p) = Some ?v |]
      ==> ALL k. 2 * N div 3 < card {q. x (?rho (?n + k) q) = ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_app (template_var 4, template_var 2),
              template_var 1)),
          template_app (template_hole 14, template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("OneThirdRuleProof.nextState_change",
     "[| HORun OTR_M ?rho ?HOs;
         ~ 2 * N div 3
           < card
              {q. HOrcvdMsgs OTR_M ?n ?p (?HOs ?n ?p) (?rho ?n) q ~=
                  None} |]
      ==> ?rho (Suc ?n) ?p = ?rho ?n ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_inequation
             (less_than,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_hole 9))),
                    template_app (template_hole 8, template_hole 7))),
                template_app
                 (template_hole 11,
                  template_app (template_hole 6, template_hole 9))),
              template_app
               (template_hole 8, template_app (template_hole 5, t_empty)))
            )],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("OneThirdRuleProof.A1",
     "[| HORun OTR_M ?rho ?HOs; decide (?rho (Suc ?n) ?p) = Some ?v;
         decide (?rho (Suc ?n) ?p) ~= decide (?rho ?n ?p) |]
      ==> 2 * N div 3 < card {q. x (?rho ?n q) = ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 2)),
              template_var 1)),
          template_app (template_hole 13, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_var 4,
                    template_app (template_hole 14, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_var 4, template_var 2),
                  template_var 1)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_hole 8,
             template_app (template_hole 3, template_hole 6))),
         template_app
          (template_hole 5, template_app (template_hole 2, t_empty))))),
    ("OneThirdRuleProof.A3",
     "[| HORun OTR_M ?rho ?HOs;
         2 * N div 3 < card {q. x (?rho ?n q) = ?v} |]
      ==> 2 * N div 3 < card {q. x (?rho (?n + ?k) q) = ?v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_hole 13),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app (template_hole 6, template_hole 5))),
            template_app
             (template_hole 9,
              template_app (template_hole 4, template_hole 7))),
          template_app
           (template_hole 6, template_app (template_hole 3, t_empty)))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_hole 9,
             template_app (template_hole 4, template_hole 7))),
         template_app
          (template_hole 6, template_app (template_hole 3, t_empty))))),
    ("OneThirdRuleProof.A2",
     "[| HORun OTR_M ?rho ?HOs;
         2 * N div 3
         < card
            {q. HOrcvdMsgs OTR_M ?n ?p (?HOs ?n ?p) (?rho ?n) q ~= None};
         2 * N div 3 < card {q. x (?rho ?n q) = ?v} |]
      ==> x (?rho (Suc ?n) ?p) = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11))),
                template_app (template_hole 10, template_hole 9))),
            template_app
             (template_hole 13,
              template_app (template_hole 8, template_hole 11))),
          template_app
           (template_hole 10, template_app (template_hole 7, t_empty))),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11))),
                template_app (template_hole 10, template_hole 9))),
            template_app
             (template_hole 13,
              template_app (template_hole 8, template_hole 11))),
          template_app
           (template_hole 10, template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_var 4,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OneThirdRuleProofMoreTemplates"
### 0.350s elapsed time, 0.486s cpu time, 0.045s GC time
val it = (): unit
