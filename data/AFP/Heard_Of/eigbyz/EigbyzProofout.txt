Loading theory "Draft.HOModel" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof" via "Draft.EigbyzDefs")
Loading theory "Draft.Majorities" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers" via "HOL-Library.Omega_Words_Fun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Majorities"
### 0.052s elapsed time, 0.234s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.597s cpu time, 0.038s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.301s elapsed time, 1.194s cpu time, 0.146s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence" via "Stuttering_Equivalence.Samplers")
### theory "HOL-Library.Nat_Bijection"
### 0.311s elapsed time, 1.219s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.056s cpu time, 0.108s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.317s elapsed time, 1.241s cpu time, 0.206s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.HOModel"
### 1.491s elapsed time, 5.737s cpu time, 1.123s GC time
Loading theory "Draft.EigbyzDefs" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof")
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.304s cpu time, 0.976s GC time
Loading theory "Stuttering_Equivalence.Samplers" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof" via "Draft.Reduction" via "Stuttering_Equivalence.StutterEquivalence")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.018s elapsed time, 3.872s cpu time, 0.864s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Stuttering_Equivalence.Samplers"
### 0.251s elapsed time, 0.915s cpu time, 0.185s GC time
Loading theory "Stuttering_Equivalence.StutterEquivalence" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof" via "Draft.Reduction")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 134 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" n))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_applC" ("_position" f) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" n))
###       ("_position" \<sigma>))
###     ("_applC" ("_position" f) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>)))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>))
###           ("_position" j))
###         ("_position" \<tau>))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" m)
###           ("_Ex_less" ("_position" k) ("_position" n)
###             ("_position" \<sigma>)))
###         ("_position" j))
###       ("_position" \<tau>))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))
###         ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" m)
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>))))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" n)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" j))
###           ("_position" \<tau>)))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("_Ex_less" ("_position" k) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" j))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" m)
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>)))
###       ("_position" j))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" m)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" n) ("_position" \<sigma>))
###         ("_position" j))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###       ("_position" m))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<sigma>)
###         ("_position" m))
###       ("_position" \<tau>))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Stuttering_Equivalence/StutterEquivalence.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>)))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>))
###           ("_position" k))
###         ("_position" \<tau>))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_All_less" ("_position" j) ("_position" n)
###           ("_Ex_less" ("_position" k) ("_position" m)
###             ("_position" \<sigma>)))
###         ("_position" k))
###       ("_position" \<tau>))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))
###         ("_position" j)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.suffix_notation"
###     ("_All_less" ("_position" j) ("_position" n)
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>))))
###     ("_position" j)))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_Ex_less" ("_position" k) ("_position" m)
###         ("\<^const>StutterEquivalence.stutter_equiv"
###           ("\<^const>StutterEquivalence.suffix_notation"
###             ("_position" \<sigma>) ("_position" k))
###           ("_position" \<tau>)))
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("_Ex_less" ("_position" k) ("_position" m)
###       ("\<^const>StutterEquivalence.stutter_equiv"
###         ("\<^const>StutterEquivalence.suffix_notation"
###           ("_position" \<sigma>) ("_position" k))
###         ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###           ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StutterEquivalence.stutter_equiv"
###     ("\<^const>StutterEquivalence.suffix_notation"
###       ("_All_less" ("_position" j) ("_position" n)
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>)))
###       ("_position" k))
###     ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" j) ("_position" n)
###     ("\<^const>StutterEquivalence.stutter_equiv"
###       ("\<^const>StutterEquivalence.suffix_notation"
###         ("_Ex_less" ("_position" k) ("_position" m) ("_position" \<sigma>))
###         ("_position" k))
###       ("\<^const>StutterEquivalence.suffix_notation" ("_position" \<tau>)
###         ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Stuttering_Equivalence.StutterEquivalence"
### 0.096s elapsed time, 0.289s cpu time, 0.000s GC time
Loading theory "Draft.Reduction" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.EigbyzProof")
Found termination order: "size <*mlex*> {}"
### theory "Draft.EigbyzDefs"
### 0.392s elapsed time, 1.341s cpu time, 0.185s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.074s elapsed time, 6.737s cpu time, 1.327s GC time
Loading theory "Draft.Templates" (required by "Draft.EigbyzProofMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Reduction"
### 0.698s elapsed time, 1.553s cpu time, 0.230s GC time
Loading theory "Draft.EigbyzProof" (required by "Draft.EigbyzProofMoreTemplates")
### theory "Draft.Templates"
### 0.073s elapsed time, 0.188s cpu time, 0.065s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EigbyzProofMoreTemplates")
### theory "Draft.EigbyzProof"
### 0.620s elapsed time, 1.629s cpu time, 0.914s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.763s elapsed time, 1.787s cpu time, 0.914s GC time
Loading theory "Draft.EigbyzProofMoreTemplates"
val templateLemmas =
   [("EigbyzProof.last_lbl_inj_on_children",
     "inj_on last_lbl (children ?l)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("EigbyzProof.subtrees_root", "?l : EigbyzProof.subtrees root_node",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("EigbyzProof.subtrees_refl", "?l : EigbyzProof.subtrees ?l",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("EigbyzProof.card_set_lbl", "card (set_lbl ?l) = length_lbl ?l",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("EigbyzProof.children_not_root", "root_node : children ?l ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate (template_var 0))),
    ("EigbyzProof.not_leaf_length", "~ is_leaf ?l ==> length_lbl ?l <= f",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("EigbyzProof.children_butlast_lbl",
     "?c : children ?l ==> butlast_lbl ?c = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("EigbyzProof.children_in_subtree",
     "?l : children ?h ==> ?l : EigbyzProof.subtrees ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EigbyzProof.root_iff_no_child",
     "(?l = root_node) = (ALL l'. ?l ~: children l')",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("EigbyzProof.butlast_rep_in_label",
     "?l ~= root_node ==> butlast (Rep_Label ?l) : Label",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("EigbyzProof.children_length",
     "?l : children ?h ==> length_lbl ?l = Suc (length_lbl ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("EigbyzProof.subtrees_leaf",
     "[| is_leaf ?l; ?l' : EigbyzProof.subtrees ?l |] ==> ?l' = ?l",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_equation (template_var 0, template_var 1))),
    ("EigbyzProof.card_children",
     "~ is_leaf ?l ==> card (children ?l) = N - length_lbl ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))))),
    ("EigbyzProof.children_last_set",
     "~ is_leaf ?l ==> last_lbl ` children ?l = UNIV - set_lbl ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("EigbyzProof.subtrees_antisym",
     "[| ?l : EigbyzProof.subtrees ?l'; ?l' : EigbyzProof.subtrees ?l |]
      ==> ?l' = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_equation (template_var 0, template_var 1))),
    ("EigbyzProof.subtrees_trans",
     "[| ?l'' : EigbyzProof.subtrees ?l'; ?l' : EigbyzProof.subtrees ?l |]
      ==> ?l'' : EigbyzProof.subtrees ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EigbyzProof.Termination",
     "SHORun EIG_M ?rho ?HOs ?SHOs ==> EX r v. decide (?rho r ?p) = Some v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("EigbyzProof.Rep_Label_append",
     "~ is_leaf ?l ==> (Rep_Label ?l @ [?p] : Label) = (?p ~: set_lbl ?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3))),
           template_hole 2),
         template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("EigbyzProof.lynch_6_19_a",
     "[| subcovering ?C ?l; ?l ~: ?C; ?e : children ?l |]
      ==> subcovering ?C ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 0)
           ))),
    ("EigbyzProof.subtrees_tree",
     "[| ?l : EigbyzProof.subtrees ?l'; ?l : EigbyzProof.subtrees ?l'' |]
      ==> ?l' : EigbyzProof.subtrees ?l'' |
          ?l'' : EigbyzProof.subtrees ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 1)))
           ))),
    ("EigbyzProof.children_subtrees_equal",
     "[| ?c : children ?l; ?c' : children ?l;
         ?c' : EigbyzProof.subtrees ?c |]
      ==> ?c' = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_equation (template_var 0, template_var 2))),
    ("EigbyzProof.keep_vals",
     "SHORun EIG_M ?rho ?HOs ?SHOs ==>
      vals (?rho (length_lbl ?l + ?n) ?p) ?l =
      vals (?rho (length_lbl ?l) ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_var 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_var 5,
                 template_app (template_hole 0, template_var 2)),
               template_var 0)),
           template_var 2)))),
    ("EigbyzProof.label_children",
     "?c : children ?l ==>
      EX p. p ~: set_lbl ?l & Rep_Label ?c = Rep_Label ?l @ [p]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("EigbyzProof.lynch_6_19_b",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; subcovering ?C ?l;
         ALL l':?C. common ?rho l' |]
      ==> common ?rho ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 0)
           ))),
    ("EigbyzProof.lynch_6_20",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; EIG_commGlobal ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r) |]
      ==> common ?rho root_node",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)
           ))),
    ("EigbyzProof.decide",
     "SHORun EIG_M ?rho ?HOs ?SHOs ==>
      decide (?rho ?r ?p) =
      (if ?r < Suc f then None
       else Some (newvals (?rho (Suc f) ?p) root_node))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_var 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app (template_hole 5, template_hole 4))),
             template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_var 4,
                     template_app (template_hole 5, template_hole 4)),
                   template_var 0)),
               template_hole 0)))))),
    ("EigbyzProof.eig_weak_consensus",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r);
         EIG_commGlobal ?HOs ?SHOs |]
      ==> weak_consensus (%p. the (vals (?rho 0 p) root_node)) decide ?rho",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_hole 0),
             template_var 2)
           ))),
    ("EigbyzProof.subtrees_cases",
     "[| ?l' : EigbyzProof.subtrees ?l; ?l' = ?l ==> ?P;
         !!c. [| c : children ?l; ?l' : EigbyzProof.subtrees c |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("EigbyzProof.eig_weak_consensus_fg",
     "[| fg_run EIG_M ?rho ?HOs ?SHOs (%r q. undefined);
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r);
         EIG_commGlobal ?HOs ?SHOs |]
      ==> weak_consensus (%p. the (vals (state (?rho 0) p) root_node))
           decide (state o ?rho)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 2),
                  template_var 1),
                template_var 0),
              t_empty)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty), template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 4),
               template_var 2))
           ))),
    ("EigbyzProof.lynch_6_18_a",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r); ?l : children ?t;
         last_lbl ?l : SKr (?HOs (length_lbl ?t)) (?SHOs (length_lbl ?t)) |]
      ==> common ?rho ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_var 3,
                    template_app (template_hole 1, template_var 0))),
                template_app
                 (template_var 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 1)
           ))),
    ("EigbyzProof.lynch_6_18_b",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; EIG_commGlobal ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r) |]
      ==> covering {l. EX t. l : children t & last_lbl l : SK ?HOs ?SHOs}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_hole 0)
           ))),
    ("EigbyzProof.lynch_6_15",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; ?l' : children ?l;
         last_lbl ?l'
         : SKr (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l)) |]
      ==> vals (?rho (length_lbl ?l') ?p) ?l' =
          vals (?rho (length_lbl ?l') ?q) ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_var 5,
                    template_app (template_hole 2, template_var 2))),
                template_app
                 (template_var 4,
                  template_app (template_hole 2, template_var 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 6,
                 template_app (template_hole 2, template_var 3)),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 6,
                 template_app (template_hole 2, template_var 3)),
               template_var 0)),
           template_var 3)))),
    ("EigbyzProof.lynch_6_16_c",
     "[| EIG_commPerRd (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l));
         ~ is_leaf ?l |]
      ==> card (children ?l) div 2
          < card
             {l': children ?l.
              last_lbl l'
              : SKr (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l))}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_var 2,
                  template_app (template_hole 15, template_var 1))),
              template_app
               (template_var 0,
                template_app (template_hole 15, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 13, template_var 1))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_hole 10, template_app (template_hole 5, t_empty))))),
    ("EigbyzProof.Validity",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r);
         ALL q. the (vals (?rho 0 q) root_node) = ?v;
         decide (?rho ?r ?p) = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app (template_var 6, template_var 2),
              template_var 1)),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 3, template_var 0))),
    ("EigbyzProof.sho_correct_vals",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; ?l' : children ?l;
         last_lbl ?l'
         : ?SHOs (length_lbl ?l) ?p Int ?HOs (length_lbl ?l) ?p |]
      ==> vals (?rho (length_lbl ?l') ?p) ?l' =
          vals (?rho (length_lbl ?l) (last_lbl ?l')) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_var 3,
                      template_app (template_hole 2, template_var 1)),
                    template_var 0)),
                template_app
                 (template_app
                   (template_var 4,
                    template_app (template_hole 2, template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 5,
                 template_app (template_hole 2, template_var 2)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 5,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 4, template_var 2))),
           template_var 1)))),
    ("EigbyzProof.Agreement",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; EIG_commGlobal ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r);
         decide (?rho ?m ?p) = Some ?v; decide (?rho ?n ?q) = Some ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 8, template_var 5),
              template_var 4)),
          template_app (template_hole 1, template_var 3)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_var 8, template_var 2),
              template_var 1)),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 3, template_var 0))),
    ("EigbyzProof.lynch_6_16_d",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs;
         ALL r. EIG_commPerRd (?HOs r) (?SHOs r); ?l : children ?t;
         last_lbl ?l : SKr (?HOs (length_lbl ?t)) (?SHOs (length_lbl ?t)) |]
      ==> newvals (?rho (Suc f) ?p) ?l =
          fixupval (vals (?rho (length_lbl ?l) ?p) ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_var 4,
                    template_app (template_hole 6, template_var 1))),
                template_app
                 (template_var 3,
                  template_app (template_hole 6, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_var 5,
                 template_app (template_hole 3, template_hole 2)),
               template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_var 5,
                   template_app (template_hole 6, template_var 2)),
                 template_var 0)),
             template_var 2))))),
    ("EigbyzProof.lynch_6_16_a",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs; ?l : children ?t;
         last_lbl ?l : SKr (?HOs (length_lbl ?t)) (?SHOs (length_lbl ?t));
         ?l' : children ?l;
         last_lbl ?l'
         : SKr (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l)) |]
      ==> vals (?rho (length_lbl ?l') ?p) ?l' =
          vals (?rho (length_lbl ?l) ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_var 5,
                    template_app (template_hole 2, template_var 2))),
                template_app
                 (template_var 4,
                  template_app (template_hole 2, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_var 5,
                    template_app (template_hole 2, template_var 3))),
                template_app
                 (template_var 4,
                  template_app (template_hole 2, template_var 3))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 6,
                 template_app (template_hole 2, template_var 1)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_var 6,
                 template_app (template_hole 2, template_var 3)),
               template_var 0)),
           template_var 3)))),
    ("EigbyzProof.newvals_skr_uniform",
     "[| SHORun EIG_M ?rho ?HOs ?SHOs;
         EIG_commPerRd (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l));
         ~ is_leaf ?l;
         !!l'. [| l' : children ?l;
                  last_lbl l'
                  : SKr (?HOs (length_lbl ?l)) (?SHOs (length_lbl ?l)) |]
               ==> newvals (?rho (Suc f) ?p) l' = ?v |]
      ==> newvals (?rho (Suc f) ?p) ?l = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_var 4,
                  template_app (template_hole 12, template_var 2))),
              template_app
               (template_var 3,
                template_app (template_hole 12, template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_var 5,
                 template_app (template_hole 1, template_hole 0)),
               template_var 1)),
           template_var 2),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.EigbyzProofMoreTemplates"
### 0.395s elapsed time, 0.563s cpu time, 0.065s GC time
val it = (): unit
