Loading theory "Draft.PMF_Composition" (required by "Draft.LotteriesTemplates" via "Draft.Lotteries")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LotteriesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.LotteriesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.325s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.112s elapsed time, 0.356s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LotteriesTemplates" via "Draft.ExtrEqs")
### theory "Draft.PMF_Composition"
### 0.214s elapsed time, 0.585s cpu time, 0.042s GC time
Loading theory "Draft.Lotteries" (required by "Draft.LotteriesTemplates")
### theory "Draft.Lotteries"
### 0.071s elapsed time, 0.143s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.620s elapsed time, 0.863s cpu time, 0.113s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LotteriesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.435s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.LotteriesTemplates"
val templateLemmas =
   [("Lotteries.lotteries_on_subset",
     "?A <= ?B ==> lotteries_on ?A <= lotteries_on ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lotteries.lotteries_on_nonempty",
     "?outcomes ~= {} ==> lotteries_on ?outcomes ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Lotteries.one_outcome_card_lotteries_1",
     "card ?outcomes = 1 ==> card (lotteries_on ?outcomes) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 2))),
    ("Lotteries.finite_support_one_oc",
     "card ?outcomes = 1 ==>
      ALL l:lotteries_on ?outcomes. finite (set_pmf l)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Lotteries.one_outcome_card_support_1",
     "card ?outcomes = 1 ==>
      ALL l:lotteries_on ?outcomes. card (set_pmf l) = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Lotteries.return_pmf_card_equals_set",
     "card {return_pmf x |x. x : ?S} = card ?S",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Lotteries.card_degen_lotteries_equals_outcomes",
     "card {x: lotteries_on ?out. card (set_pmf x) = 1} = card ?out",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app (template_hole 2, template_var 0))),
    ("Lotteries.card_support_1_probability_1",
     "card (set_pmf ?p) = 1 ==> ALL e:set_pmf ?p. pmf ?p e = 1",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("Lotteries.finite_nempty_ex_degernate_in_lotteries",
     "[| ?out ~= {}; finite ?out |]
      ==> EX e:lotteries_on ?out. EX x:?out. pmf e x = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("Lotteries.mix_pmf_in_lotteries",
     "[| ?p : lotteries_on ?A; ?q : lotteries_on ?A; ?a : {0<..<1} |]
      ==> mix_pmf ?a ?p ?q : lotteries_on ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 1)),
             template_app (template_hole 5, template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.LotteriesTemplates"
### 1.194s elapsed time, 1.561s cpu time, 0.232s GC time
val it = (): unit
