Loading theory "Draft.PMF_Composition" (required by "Draft.Expected_UtilityTemplates" via "Draft.Expected_Utility" via "Draft.Neumann_Morgenstern_Utility_Theorem" via "Draft.Lotteries")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Expected_UtilityTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Expected_UtilityTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.258s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.437s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Expected_UtilityTemplates" via "Draft.ExtrEqs")
### theory "Draft.PMF_Composition"
### 0.223s elapsed time, 0.567s cpu time, 0.044s GC time
Loading theory "Draft.Lotteries" (required by "Draft.Expected_UtilityTemplates" via "Draft.Expected_Utility" via "Draft.Neumann_Morgenstern_Utility_Theorem")
### theory "Draft.Lotteries"
### 0.077s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.Neumann_Morgenstern_Utility_Theorem" (required by "Draft.Expected_UtilityTemplates" via "Draft.Expected_Utility")
### theory "HOL-Library.BigO"
### 0.662s elapsed time, 1.367s cpu time, 0.098s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Expected_UtilityTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 1.204s cpu time, 0.167s GC time
### theory "Draft.Neumann_Morgenstern_Utility_Theorem"
### 1.345s elapsed time, 2.569s cpu time, 0.310s GC time
Loading theory "Draft.Expected_Utility" (required by "Draft.Expected_UtilityTemplates")
locale vNM_utility
  fixes outcomes :: "'a set"
    and relation :: "('a pmf * 'a pmf) set"
    and u :: "'a => real"
  assumes "vNM_utility outcomes relation u"
locale vNM_utility
  fixes outcomes :: "'a set"
    and relation :: "('a pmf * 'a pmf) set"
    and u :: "'a => real"
  assumes "vNM_utility outcomes relation u"
### theory "Draft.Expected_Utility"
### 0.131s elapsed time, 0.131s cpu time, 0.000s GC time
Loading theory "Draft.Expected_UtilityTemplates"
val templateLemmas =
   [("Expected_Utility.vnm_utility_imp_reational_prefs",
     "vNM_utility ?outcomes ?relation ?u ==>
      rational_preference (\<P> ?outcomes) ?relation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("Expected_Utility.vnm_utility_is_ordinal_utility",
     "vNM_utility ?outcomes ?relation ?u ==>
      ordinal_utility (\<P> ?outcomes) ?relation
       (%p. measure_pmf.expectation p ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             t_empty)
           ))),
    ("Expected_Utility.expected_utilty_theorem_form_vnm_utility",
     "[| finite ?outcomes; ?outcomes ~= {} |]
      ==> (rational_preference (\<P> ?outcomes) ?\<R> &
           independent_vnm (\<P> ?outcomes) ?\<R> &
           continuous_vnm (\<P> ?outcomes) ?\<R>) =
          (EX u. vNM_utility ?outcomes ?\<R> u)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 1)),
               template_var 0))),
         template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Expected_UtilityTemplates"
### 1.449s elapsed time, 2.027s cpu time, 0.571s GC time
val it = (): unit
