Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PMF_CompositionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.PMF_Composition" (required by "Draft.PMF_CompositionTemplates")
Loading theory "Draft.Templates" (required by "Draft.PMF_CompositionTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.254s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.374s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PMF_CompositionTemplates" via "Draft.ExtrEqs")
### theory "Draft.PMF_Composition"
### 0.186s elapsed time, 0.488s cpu time, 0.043s GC time
### theory "HOL-Library.BigO"
### 0.585s elapsed time, 0.701s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PMF_CompositionTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.434s elapsed time, 0.434s cpu time, 0.000s GC time
Loading theory "Draft.PMF_CompositionTemplates"
val templateLemmas =
   [("PMF_Composition.pmf_mix_1", "mix_pmf 1 ?p ?q = ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 1)),
    ("PMF_Composition.pmf_mix_0", "mix_pmf 0 ?p ?q = ?q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("PMF_Composition.ex_certain_iff_singleton_support",
     "(EX x. pmf ?p x = 1) = (card (set_pmf ?p) = 1)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("PMF_Composition.set_pmf_mix_eq",
     "?a : {0..1} ==> mix_pmf ?a ?p ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0),
         template_var 0))),
    ("PMF_Composition.pmf_inverse_switch_eqals",
     "?a : {0..1} ==> mix_pmf ?a ?p ?q = mix_pmf (1 - ?a) ?q ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 3),
                 template_var 2)),
             template_var 0),
           template_var 1)))),
    ("PMF_Composition.mix_pmf_subset_of_original",
     "?a : {0..1} ==>
      set_pmf (mix_pmf ?a ?p ?q) <= set_pmf ?p Un set_pmf ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("PMF_Composition.set_pmf_mix",
     "?a : {0<..<1} ==>
      set_pmf (mix_pmf ?a ?p ?q) = set_pmf ?p Un set_pmf ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("PMF_Composition.pmf_equiv_intro1",
     "(!!e. e : set_pmf ?p ==> pmf ?p e = pmf ?q e) ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("PMF_Composition.mix_pmf_preserves_finite_support",
     "[| ?a : {0..1}; finite (set_pmf ?p); finite (set_pmf ?q) |]
      ==> finite (set_pmf (mix_pmf ?a ?p ?q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("PMF_Composition.distribute_alpha_over_sum",
     "(SUM i:set_pmf ?T. ?a * pmf ?p i * ?f i) =
      ?a * (SUM i:set_pmf ?T. pmf ?p i * ?f i)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("PMF_Composition.pmf_mix",
     "?a : {0..1} ==>
      pmf (mix_pmf ?a ?p ?q) ?x = ?a * pmf ?p ?x + (1 - ?a) * pmf ?q ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 6),
                 template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("PMF_Composition.product_mix_pmf_prob_distrib",
     "[| ?a : {0..1}; ?b : {0..1} |]
      ==> mix_pmf ?a (mix_pmf ?b ?p ?q) ?q = mix_pmf (?a * ?b) ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("PMF_Composition.pmf_mix_deeper",
     "?a : {0..1} ==>
      pmf (mix_pmf ?a ?p ?q) ?x =
      ?a * pmf ?p ?x + pmf ?q ?x - ?a * pmf ?q ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 0))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("PMF_Composition.mix_pmf_comp_with_dif_equiv",
     "[| ?\<alpha> : {0..1}; ?\<beta> : {0..1}; ?\<beta> < ?\<alpha> |]
      ==> mix_pmf (?\<beta> / ?\<alpha>) (mix_pmf ?\<alpha> ?p ?q) ?q =
          mix_pmf ?\<beta> ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            ),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("PMF_Composition.sum_over_subset_pmf_support",
     "[| finite ?T; set_pmf ?p <= ?T |]
      ==> (SUM i:?T. ?a * pmf ?p i * ?f i) =
          (SUM i:set_pmf ?p. ?a * pmf ?p i * ?f i)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 3),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 4, template_var 2))))),
    ("PMF_Composition.pmf_equiv_intro",
     "[| !!e. e : set_pmf ?p ==> pmf ?p e = pmf ?q e;
         !!e. e : set_pmf ?q ==> pmf ?q e = pmf ?p e |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("PMF_Composition.expected_value_mix_pmf",
     "[| finite (set_pmf ?p); finite (set_pmf ?q); ?a : {0..1} |]
      ==> measure_pmf.expectation (mix_pmf ?a ?p ?q) ?f =
          ?a * measure_pmf.expectation ?p ?f +
          (1 - ?a) * measure_pmf.expectation ?q ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 3)),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 7),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_var 0)))))),
    ("PMF_Composition.expected_value_mix_pmf_distrib",
     "[| finite (set_pmf ?p); finite (set_pmf ?q); ?a : {0<..<1} |]
      ==> measure_pmf.expectation (mix_pmf ?a ?p ?q) ?f =
          ?a * measure_pmf.expectation ?p ?f +
          (1 - ?a) * measure_pmf.expectation ?q ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 3)),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 7),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_var 0)))))),
    ("PMF_Composition.mix_pmf_comp_left_div",
     "[| ?\<alpha> : {0..1}; ?\<beta> : {0..1}; ?\<beta> < ?\<alpha> |]
      ==> pmf (mix_pmf (?\<beta> / ?\<alpha>) (mix_pmf ?\<alpha> ?p ?q) ?q)
           ?e =
          ?\<beta> * pmf ?p ?e + pmf ?q ?e - ?\<beta> * pmf ?q ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            ),
        template_inequation (less_than, template_var 3, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 2),
                   template_var 1)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))))),
    ("PMF_Composition.mix_pmf_partition",
     "[| ?y : set_pmf ?p; set_pmf ?p - {?y} ~= {};
         !!a q.
            [| a : {0<..<1}; set_pmf q = set_pmf ?p - {?y};
               ?p = mix_pmf a q (return_pmf ?y) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app (template_hole 14, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 14, template_var 1)),
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_hole 9)),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("PMF_Composition.finite_sum_distribute_mix_pmf",
     "[| finite (set_pmf (mix_pmf ?a ?p ?q)); finite (set_pmf ?p);
         finite (set_pmf ?q) |]
      ==> sum (pmf (mix_pmf ?a ?p ?q)) (set_pmf (mix_pmf ?a ?p ?q)) =
          (SUM i:set_pmf ?p. ?a * pmf ?p i) +
          (SUM i:set_pmf ?q. (1 - ?a) * pmf ?q i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 8, template_var 1))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 8, template_var 0)))))),
    ("PMF_Composition.pmf_mix_induct",
     "[| finite ?A; set_pmf ?p <= ?A; !!x. x : ?A ==> ?P (return_pmf x);
         !!p a y.
            [| set_pmf p <= ?A; a : {0<..<1}; y : ?A; ?P p |]
            ==> ?P (mix_pmf a p (return_pmf y)) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_var 2),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("PMF_Composition.pmf_mix_induct'",
     "[| finite ?A; set_pmf ?p <= ?A; !!x. x : ?A ==> ?P (return_pmf x);
         !!p q a.
            [| set_pmf p <= ?A; set_pmf q <= ?A; a : {0<..<1}; ?P p; ?P q |]
            ==> ?P (mix_pmf a p q) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_var 2),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.PMF_CompositionTemplates"
### 1.164s elapsed time, 1.474s cpu time, 0.213s GC time
val it = (): unit
