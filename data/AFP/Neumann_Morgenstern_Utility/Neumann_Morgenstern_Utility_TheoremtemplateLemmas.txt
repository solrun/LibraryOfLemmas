   [("Neumann_Morgenstern_Utility_Theorem.degenerate_lots_subset_all",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
           ?outcomes
          <= \<P> ?outcomes",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 1)))),
    ("Neumann_Morgenstern_Utility_Theorem.degen_outcome_cardinalities",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> card
           (??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
             ?outcomes) =
          card ?outcomes",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Neumann_Morgenstern_Utility_Theorem.finite_degenerate_lotteries",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> finite
           (??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
             ?outcomes)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_in_lot",
     "[| ?x : \<P> ?outcomes; ?y : \<P> ?outcomes; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?x ?y : \<P> ?outcomes",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 1)),
             template_app (template_hole 5, template_var 2))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.vNM_utilty_implies_continuity",
     "[| finite ?outcomes; ?outcomes ~= {};
         EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                (%x. measure_pmf.expectation x u) |]
      ==> continuous_vnm (\<P> ?outcomes) ?\<R>",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.vNM_utility_implies_independence",
     "[| finite ?outcomes; ?outcomes ~= {};
         EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                (%x. measure_pmf.expectation x u) |]
      ==> independent_vnm (\<P> ?outcomes) ?\<R>",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.vNM_utility_implies_rationality",
     "[| finite ?outcomes; ?outcomes ~= {};
         EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                (%x. measure_pmf.expectation x u) |]
      ==> rational_preference (\<P> ?outcomes) ?\<R>",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.relation_in_carrier",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?x \<succeq>[?\<R>] ?y |]
      ==> ?x : \<P> ?outcomes & ?y : \<P> ?outcomes",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 5, template_var 3))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 5, template_var 3)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.overall_best_nonempty",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R> ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.overall_worst_nonempty",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R> ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.some_best_in_best",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>
          : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.some_worst_in_worst",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>
          : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.degenerate_total",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL e:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                 ?outcomes.
             ALL m:\<P> ?outcomes.
                e \<succeq>[?\<R>] m | m \<succeq>[?\<R>] e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_weight_for_equality",
     "[| ?c < ?a; ?b <= ?a; ?c <= ?b |]
      ==> EX e:{0..1}. (1 - e) * ?a + e * ?c = ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_best_and_degenerate",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
           ?outcomes Int
          ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R> ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_worst_and_degenerate",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
           ?outcomes Int
          ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R> ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.best_indifferent",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL x:??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>.
             ALL y:??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes
                    ?\<R>.
                x \<approx>[?\<R>] y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.worst_indifferent",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL x:??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes
                 ?\<R>.
             ALL y:??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes
                    ?\<R>.
                x \<approx>[?\<R>] y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.neumann_3B_b_non_strict",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?u \<succeq>[?\<R>] ?v;
         ?\<alpha> : {0..1} |]
      ==> ?u \<succeq>[?\<R>] mix_pmf ?\<alpha> ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 1))),
             template_var 3)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.geq_imp_mix_geq_right",
     "[| ?x \<succeq>[?\<R>] ?y; rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?x ?y \<succeq>[?\<R>] ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 4),
                     template_var 3)),
                 template_var 3)),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.geq_imp_mix_geq_left",
     "[| ?x \<succeq>[?\<R>] ?y; rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?y ?x \<succeq>[?\<R>] ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 4)),
                 template_var 3)),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.worst_degenerate_in_worst_overall",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> EX x:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                ?outcomes.
             ALL y:\<P> ?outcomes. y \<succeq>[?\<R>] x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.best_degenerate_in_best_overall",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> EX x:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                ?outcomes.
             ALL y:\<P> ?outcomes. x \<succeq>[?\<R>] y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_worst_degenerate",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> EX x:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                ?outcomes.
             ALL y:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                    ?outcomes.
                y \<succeq>[?\<R>] x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_best_degenerate",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> EX x:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                ?outcomes.
             ALL y:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                    ?outcomes.
                x \<succeq>[?\<R>] y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.general_U_ordinal_Utility",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ordinal_utility (\<P> ?outcomes) ?\<R>
           (??.Neumann_Morgenstern_Utility_Theorem.general_U ?outcomes
             ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 8, template_var 1)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmD1",
     "independent_vnm ?C ?P ==>
      ALL p:?C.
         ALL q:?C.
            ALL r:?C.
               ALL \<alpha>:{0<..1}.
                  p \<succeq>[?P] q =
                  mix_pmf \<alpha> p r \<succeq>[?P] mix_pmf \<alpha> q r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 1), t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmI1",
     "ALL p:?C.
         ALL q:?C.
            ALL r:?C.
               ALL \<alpha>:{0<..1}.
                  p \<succeq>[?P] q =
                  mix_pmf \<alpha> p
                   r \<succeq>[?P] mix_pmf \<alpha> q r ==>
      independent_vnm ?C ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.Von_Neumann_Morgenstern_Utility_Theorem",
     "[| finite ?outcomes; ?outcomes ~= {} |]
      ==> (rational_preference (\<P> ?outcomes) ?\<R> &
           independent_vnm (\<P> ?outcomes) ?\<R> &
           continuous_vnm (\<P> ?outcomes) ?\<R>) =
          (EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                  (%x. measure_pmf.expectation x u))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 6, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 1)),
               template_var 0))),
         template_app (template_hole 3, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.system_U_implies_vNM_utility",
     "[| finite ?outcomes; ?outcomes ~= {};
         rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         continuous_vnm (\<P> ?outcomes) ?\<R> |]
      ==> EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                 (%x. measure_pmf.expectation x u)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.ordinal_utility_expected_value'",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R> |]
      ==> EX u. ordinal_utility (\<P> ?outcomes) ?\<R>
                 (%x. measure_pmf.expectation x u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.ordinal_utility_expected_value",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ordinal_utility (\<P> ?outcomes) ?\<R>
           (%x. measure_pmf.expectation x
                 (??.Neumann_Morgenstern_Utility_Theorem.ocU ?outcomes
                   ?\<R>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 10, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 10, template_var 1)),
               template_var 0),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.degenerate_has_min_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> {x: ??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
               ?outcomes.
           ALL y:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                  ?outcomes.
              y \<succeq>[?\<R>] x} ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_negation
        (
           template_equation
            (template_app (template_hole 7, t_empty), template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.degenerate_has_max_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {} |]
      ==> {x: ??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
               ?outcomes.
           ALL y:??.Neumann_Morgenstern_Utility_Theorem.degenerate_lotteries
                  ?outcomes.
              x \<succeq>[?\<R>] y} ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_negation
        (
           template_equation
            (template_app (template_hole 7, t_empty), template_hole 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_of_preferred_is_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?p \<succeq>[?\<R>] ?w;
         ?q \<succeq>[?\<R>] ?w; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?p ?q \<succeq>[?\<R>] ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 1)),
                 template_var 2)),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_of_not_preferred_is_not_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?w \<succeq>[?\<R>] ?p;
         ?w \<succeq>[?\<R>] ?q; ?\<alpha> : {0..1} |]
      ==> ?w \<succeq>[?\<R>] mix_pmf ?\<alpha> ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 1)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 1))),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_pmf_preferred_independence",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?r : \<P> ?outcomes;
         ?\<alpha> : {0..1}; ?p \<succeq>[?\<R>] ?q |]
      ==> mix_pmf ?\<alpha> ?p ?r \<succeq>[?\<R>] mix_pmf ?\<alpha> ?q ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 3))),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.geral_U_is_expected_value_of_ocU",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         set_pmf ?p <= ?outcomes |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.general_U ?outcomes ?\<R>
           ?p =
          measure_pmf.expectation ?p
           (??.Neumann_Morgenstern_Utility_Theorem.ocU ?outcomes ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 13, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 13, template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Neumann_Morgenstern_Utility_Theorem.best_always_at_least_as_good_mix",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?\<alpha> : {0..1}; ?p : \<P> ?outcomes |]
      ==> mix_pmf ?\<alpha>
           (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
             ?\<R>)
           ?p \<succeq>[?\<R>] ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 14, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 2)),
                     template_var 0)),
                 template_var 0)),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmD2",
     "[| ?\<alpha> : {0<..1}; ?p : ?C; ?q : ?C; ?r : ?C;
         independent_vnm ?C ?P; ?p \<succeq>[?P] ?q |]
      ==> mix_pmf ?\<alpha> ?p ?r \<succeq>[?P] mix_pmf ?\<alpha> ?q ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2),
                   template_var 1))),
             template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmD3",
     "[| ?\<alpha> : {0<..1}; ?p : ?C; ?q : ?C; ?r : ?C;
         independent_vnm ?C ?P;
         mix_pmf ?\<alpha> ?p ?r \<succeq>[?P] mix_pmf ?\<alpha> ?q ?r |]
      ==> ?p \<succeq>[?P] ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app
                       (template_app (template_hole 0, template_var 5),
                        template_var 4),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_app (template_hole 0, template_var 5),
                      template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.approx_indep_ge",
     "[| ?x \<approx>[?\<R>] ?y; ?\<alpha> : {0..1};
         rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL r:\<P> ?outcomes.
             mix_pmf ?\<alpha> ?y
              r \<succeq>[?\<R>] mix_pmf ?\<alpha> ?x r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 4)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.continuous_vnmD",
     "continuous_vnm ?C ?P ==>
      ALL p:?C.
         ALL q:?C.
            ALL r:?C.
               p \<succeq>[?P] q & q \<succeq>[?P] r -->
               (EX \<alpha>:{0..1}. mix_pmf \<alpha> p r \<approx>[?P] q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 1), t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.expected_value_is_utility_function",
     "[| finite ?outcomes; ?outcomes ~= {}; ?x : \<P> ?outcomes;
         ?y : \<P> ?outcomes;
         ordinal_utility (\<P> ?outcomes) ?\<R>
          (%x. measure_pmf.expectation x ?u) |]
      ==> (measure_pmf.expectation ?y ?u <= measure_pmf.expectation ?x ?u) =
          ?x \<succeq>[?\<R>] ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 4)),
                template_var 1),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 3)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1)))),
    ("Neumann_Morgenstern_Utility_Theorem.better_worse_good_mix_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?b \<succeq>[?\<R>] ?w;
         ?\<alpha> : {0..1}; ?\<beta> : {0..1}; ?\<beta> <= ?\<alpha> |]
      ==> mix_pmf ?\<alpha> ?b ?w \<succeq>[?\<R>] mix_pmf ?\<beta> ?b ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3),
                   template_var 2))),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmD4",
     "[| independent_vnm ?C ?P; refl_on ?C ?P; ?p : ?C; ?q : ?C; ?r : ?C;
         ?\<alpha> : {0..1}; ?p \<succeq>[?P] ?q |]
      ==> mix_pmf ?\<alpha> ?p ?r \<succeq>[?P] mix_pmf ?\<alpha> ?q ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 1))),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.neumann_3B_b",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?u \<succeq>[?\<R>] ?v & (?v, ?u) ~: ?\<R>; ?\<alpha> : {0<..<1} |]
      ==> ?u \<succeq>[?\<R>] mix_pmf ?\<alpha> ?u ?v &
          (mix_pmf ?\<alpha> ?u ?v, ?u) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_var 3)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 2)),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2),
                       template_var 1))),
                 template_var 3)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 2),
                         template_var 1)),
                     template_var 2)),
                 template_var 3)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.x_sg_y_sg_mpmf_right",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?x \<succeq>[?\<R>] ?y & (?y, ?x) ~: ?\<R>; ?b : {0<..1} |]
      ==> ?x \<succeq>[?\<R>] mix_pmf ?b ?y ?x &
          (mix_pmf ?b ?y ?x, ?x) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_var 3)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 2)),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1),
                       template_var 2))),
                 template_var 3)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 1),
                         template_var 2)),
                     template_var 2)),
                 template_var 3)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.sg_imp_mix_sg",
     "[| ?x \<succeq>[?\<R>] ?y & (?y, ?x) ~: ?\<R>;
         rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?\<alpha> : {0<..1} |]
      ==> mix_pmf ?\<alpha> ?x ?y \<succeq>[?\<R>] ?y &
          (?y, mix_pmf ?\<alpha> ?x ?y) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 4)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 4),
                         template_var 3)),
                     template_var 3)),
                 template_var 2)),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4),
                       template_var 3))),
                 template_var 2)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.independent_vnmI2",
     "(!!p q r \<alpha>.
          [| p : ?C; q : ?C; r : ?C; \<alpha> : {0<..1} |]
          ==> p \<succeq>[?P] q =
              mix_pmf \<alpha> p r \<succeq>[?P] mix_pmf \<alpha> q r) ==>
      independent_vnm ?C ?P",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.gamma_inverse",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?\<alpha> : {0<..<1}; ?\<beta> : {0<..<1} |]
      ==> 1 - (?\<alpha> - ?\<beta>) / (1 - ?\<beta>) =
          (1 - ?\<alpha>) / (1 - ?\<beta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 3),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 0))))),
    ("Neumann_Morgenstern_Utility_Theorem.best_worst_indiff_all_indiff",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?b : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>;
         ?w : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R>;
         ?b \<approx>[?\<R>] ?w |]
      ==> ALL e:\<P> ?outcomes. e \<approx>[?\<R>] ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 1)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 8, template_var 3)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.best_worst_indiff_all_indiff",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?b : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>;
         ?w : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R>;
         ?b \<approx>[?\<R>] ?w |]
      ==> ALL e:\<P> ?outcomes. e \<approx>[?\<R>] ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 1)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 8, template_var 3)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.ocU_is_expected_utility_bernoulli",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL x:\<P> ?outcomes.
             ALL y:\<P> ?outcomes.
                x \<succeq>[?\<R>] y =
                (measure_pmf.expectation y
                  (??.Neumann_Morgenstern_Utility_Theorem.ocU ?outcomes
                    ?\<R>)
                 <= measure_pmf.expectation x
                     (??.Neumann_Morgenstern_Utility_Theorem.ocU ?outcomes
                       ?\<R>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 14, template_var 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_pmf_preferred_independence_rev",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?p : \<P> ?outcomes;
         ?q : \<P> ?outcomes; ?r : \<P> ?outcomes; ?\<alpha> : {0<..1};
         mix_pmf ?\<alpha> ?p ?r \<succeq>[?\<R>] mix_pmf ?\<alpha> ?q ?r |]
      ==> ?p \<succeq>[?\<R>] ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 9, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 9, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app
                       (template_app (template_hole 0, template_var 0),
                        template_var 3),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_app (template_hole 0, template_var 0),
                      template_var 2),
                    template_var 1))),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.approx_imp_approx_ind",
     "[| ?x \<approx>[?\<R>] ?y; ?\<alpha> : {0..1};
         rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R> |]
      ==> ALL r:\<P> ?outcomes.
             mix_pmf ?\<alpha> ?y
              r \<approx>[?\<R>] mix_pmf ?\<alpha> ?x r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 4)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.trans_approx",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?x \<approx>[?\<R>] ?y; ?y \<approx>[?\<R>] ?z |]
      ==> ?x \<approx>[?\<R>] ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 2)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 1),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 0),
                    template_var 1)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 3))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.weak_pref_mix_with_my_U_weak_pref",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p \<succeq>[?\<R>] ?q |]
      ==> mix_pmf
           (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p)
           (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
             ?\<R>)
           (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
             ?\<R>) \<succeq>[?\<R>] mix_pmf
(??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q)
(??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
(??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 12, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 3),
                             template_var 2),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 2),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)))),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.geq_mix_imp_weak_pref",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?\<alpha> : {0..1}; ?\<beta> : {0..1};
         ?\<beta> <= ?\<alpha> |]
      ==> mix_pmf ?\<alpha>
           (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
             ?\<R>)
           (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
             ?\<R>) \<succeq>[?\<R>] mix_pmf ?\<beta>
(??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
(??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)))),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.continuous_vnmI",
     "(!!p q r.
          [| p : ?C; q : ?C; r : ?C;
             p \<succeq>[?P] q & q \<succeq>[?P] r |]
          ==> EX \<alpha>:{0..1}. mix_pmf \<alpha> p r \<approx>[?P] q) ==>
      continuous_vnm ?C ?P",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.approx_remains_after_same_comp",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?p \<approx>[?\<R>] ?q;
         ?r : \<P> ?outcomes; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?p ?r \<approx>[?\<R>] mix_pmf ?\<alpha> ?q ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3)),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 10, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 3),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2),
                       template_var 1))),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 1))),
               template_var 4))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.approx_remains_after_same_comp_left",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?p \<approx>[?\<R>] ?q;
         ?r : \<P> ?outcomes; ?\<alpha> : {0..1} |]
      ==> mix_pmf ?\<alpha> ?r ?p \<approx>[?\<R>] mix_pmf ?\<alpha> ?r ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3)),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 10, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 1),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1),
                       template_var 2))),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1),
                     template_var 3))),
               template_var 4))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.non_unique_continuous_unfolding",
     "[| continuous_vnm (\<P> ?outcomes) ?\<R>;
         rational_preference (\<P> ?outcomes) ?\<R>; ?p \<succeq>[?\<R>] ?q;
         ?q \<succeq>[?\<R>] ?r;
         ?p \<succeq>[?\<R>] ?r & (?r, ?p) ~: ?\<R> |]
      ==> EX \<alpha>:{0..1}. ?q \<approx>[?\<R>] mix_pmf \<alpha> ?p ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_var 2)),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_pmf_strict_preferred_independence",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; ?r : \<P> ?outcomes;
         ?\<alpha> : {0<..1}; ?p \<succeq>[?\<R>] ?q & (?q, ?p) ~: ?\<R> |]
      ==> mix_pmf ?\<alpha> ?p ?r \<succeq>[?\<R>] mix_pmf ?\<alpha> ?q ?r &
          (mix_pmf ?\<alpha> ?q ?r, mix_pmf ?\<alpha> ?p ?r) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 11, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)),
                  template_var 4)),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 2),
                           template_var 1),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0),
                       template_var 3))),
                 template_var 4)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 2),
                           template_var 0),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1),
                       template_var 3))),
                 template_var 4)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.is_linear",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes; ?\<alpha> : {0..1} |]
      ==> EX u. u (mix_pmf ?\<alpha> ?p ?q) =
                ?\<alpha> * u ?p + (1 - ?\<alpha>) * u ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.ge_mix_pmf_preferred",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?x \<succeq>[?\<R>] ?y & (?y, ?x) ~: ?\<R>;
         ?\<alpha> : {0..1}; ?\<beta> : {0..1}; ?\<beta> <= ?\<alpha> |]
      ==> mix_pmf ?\<alpha> ?x ?y \<succeq>[?\<R>] mix_pmf ?\<beta> ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_negation
         (template_equation (template_var 5, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 3)),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3),
                   template_var 2))),
             template_var 4)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.mix_pmf_pref_iff_more_likely",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?b \<succeq>[?\<R>] ?w & (?w, ?b) ~: ?\<R>; ?\<alpha> : {0..1};
         ?\<beta> : {0..1} |]
      ==> (?\<beta> < ?\<alpha>) =
          (mix_pmf ?\<alpha> ?b ?w \<succeq>[?\<R>] mix_pmf ?\<beta> ?b ?w &
           (mix_pmf ?\<beta> ?b ?w, mix_pmf ?\<alpha> ?b ?w) ~: ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 3)),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 3),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3),
                     template_var 2))),
               template_var 4)),
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 3),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3),
                     template_var 2))),
               template_var 4)))))),
    ("Neumann_Morgenstern_Utility_Theorem.greater_mix_pmf_greater_step_1_aux",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?v \<succeq>[?\<R>] ?u & (?u, ?v) ~: ?\<R>; ?\<alpha> : {0<..<1};
         ?\<beta> : {0<..<1}; ?\<alpha> < ?\<beta> |]
      ==> mix_pmf ?\<beta> ?v ?u \<succeq>[?\<R>] mix_pmf ?\<alpha> ?v ?u &
          (mix_pmf ?\<alpha> ?v ?u, mix_pmf ?\<beta> ?v ?u) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 3)),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 3),
                       template_var 2))),
                 template_var 4)),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 3),
                       template_var 2))),
                 template_var 4)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.step_1_most_general",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>;
         ?x \<succeq>[?\<R>] ?y & (?y, ?x) ~: ?\<R>; ?\<alpha> : {0..1};
         ?\<beta> : {0..1}; ?\<beta> < ?\<alpha> |]
      ==> mix_pmf ?\<alpha> ?x ?y \<succeq>[?\<R>] mix_pmf ?\<beta> ?x ?y &
          (mix_pmf ?\<beta> ?x ?y, mix_pmf ?\<alpha> ?x ?y) ~: ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 11, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)),
                  template_var 4)),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 3)),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 3),
                       template_var 2))),
                 template_var 4)),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 3),
                       template_var 2))),
                 template_var 4)))
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.exists_element_bw_mix_is_approx",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?l : \<P> ?outcomes;
         ?b : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>;
         ?w : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes
               ?\<R> |]
      ==> EX \<alpha>:{0..1}. ?l \<approx>[?\<R>] mix_pmf \<alpha> ?b ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.general_U_is_linear_function",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes; ?\<alpha> : {0..1} |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.general_U ?outcomes ?\<R>
           (mix_pmf ?\<alpha> ?p ?q) =
          ?\<alpha> *
          ??.Neumann_Morgenstern_Utility_Theorem.general_U ?outcomes ?\<R>
           ?p +
          (1 - ?\<alpha>) *
          ??.Neumann_Morgenstern_Utility_Theorem.general_U ?outcomes ?\<R>
           ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 17, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 6),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 1)))))),
    ("Neumann_Morgenstern_Utility_Theorem.my_U_represents_pref",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes |]
      ==> ?p \<succeq>[?\<R>] ?q =
          (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q
           <= ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
               ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 4, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_var 2))),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 15, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1))))),
    ("Neumann_Morgenstern_Utility_Theorem.all_mix_pmf_indiff_indiff_best_worst",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; ?l : \<P> ?outcomes;
         ?b : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>;
         ?w : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R>;
         ?b \<approx>[?\<R>] ?w |]
      ==> ALL \<alpha>:{0..1}. ?l \<approx>[?\<R>] mix_pmf \<alpha> ?b ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 16, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 16, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 0),
                    template_var 1)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1)),
             t_empty)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.geq_my_U_imp_weak_preference",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes;
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R>;
         ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q
         <= ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
             ?p |]
      ==> ?p \<succeq>[?\<R>] ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 14, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 14, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 2, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 2)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2),
            template_var 0),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Neumann_Morgenstern_Utility_Theorem.step_2_unique_continuous_unfolding",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p \<succeq>[?\<R>] ?q; ?q \<succeq>[?\<R>] ?r;
         ?p \<succeq>[?\<R>] ?r & (?r, ?p) ~: ?\<R> |]
      ==> EX! \<alpha>.
             \<alpha> : {0..1} &
             ?q \<approx>[?\<R>] mix_pmf \<alpha> ?p ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 15, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 15, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_var 2)),
                  template_var 3)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.leq_mix_imp_weak_inferior",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {};
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R>;
         ?\<alpha> : {0..1}; ?\<beta> : {0..1};
         mix_pmf ?\<beta>
          (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
          (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
            ?\<R>) \<succeq>[?\<R>] mix_pmf ?\<alpha>
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_best
 ?outcomes ?\<R>)
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_worst
 ?outcomes ?\<R>) |]
      ==> ?\<alpha> <= ?\<beta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 2))),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 0),
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2))),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 1),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 2)),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_var 2)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Neumann_Morgenstern_Utility_Theorem.create_unique_indiff_using_distinct_best_worst",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?l : \<P> ?outcomes;
         ?b : ??.Neumann_Morgenstern_Utility_Theorem.best ?outcomes ?\<R>;
         ?w : ??.Neumann_Morgenstern_Utility_Theorem.worst ?outcomes ?\<R>;
         ?b \<succeq>[?\<R>] ?w & (?w, ?b) ~: ?\<R> |]
      ==> EX! \<alpha>.
             \<alpha> : {0..1} &
             ?l \<approx>[?\<R>] mix_pmf \<alpha> ?b ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 18, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 18, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 18, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_var 1)),
                  template_var 3)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Neumann_Morgenstern_Utility_Theorem.my_U_is_linear_function",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes; ?\<alpha> : {0..1};
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R> |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
           (mix_pmf ?\<alpha> ?p ?q) =
          ?\<alpha> *
          ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p +
          (1 - ?\<alpha>) *
          ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 22, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 17)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 22, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app (template_hole 22, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 22, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3))),
                  template_var 3)),
              template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 6, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3))),
                  template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 11),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 1)))))),
    ("Neumann_Morgenstern_Utility_Theorem.indiff_imp_same_utility_value",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {};
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R>;
         ?\<alpha> : {0..1}; ?\<beta> : {0..1};
         mix_pmf ?\<beta>
          (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
          (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
            ?\<R>) \<approx>[?\<R>] mix_pmf ?\<alpha>
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_best
 ?outcomes ?\<R>)
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_worst
 ?outcomes ?\<R>) |]
      ==> ?\<beta> = ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 2))),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_app (template_hole 1, template_var 0),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_var 2)),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_var 2))),
                      template_app
                       (template_app
                         (template_app (template_hole 1, template_var 1),
                          template_app
                           (template_app (template_hole 7, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_var 2)))),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_app (template_hole 1, template_var 1),
                          template_app
                           (template_app (template_hole 7, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_var 2))),
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 0),
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2)))),
                template_var 2))
            )],
       template_equation (template_var 0, template_var 1))),
    ("Neumann_Morgenstern_Utility_Theorem.preferred_greater_my_U",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes;
         mix_pmf
          (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p)
          (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
          (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
            ?\<R>) \<succeq>[?\<R>] mix_pmf
                                     (??.Neumann_Morgenstern_Utility_Theorem.my_U
 ?outcomes ?\<R> ?q)
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_best
 ?outcomes ?\<R>)
                                     (??.Neumann_Morgenstern_Utility_Theorem.some_worst
 ?outcomes ?\<R>) &
         (mix_pmf
           (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q)
           (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
             ?\<R>)
           (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
             ?\<R>),
          mix_pmf
           (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p)
           (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
             ?\<R>)
           (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
             ?\<R>))
         ~: ?\<R> |]
      ==> ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q
          < ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 4,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 3, template_var 3),
                                  template_var 2),
                                template_var 1)),
                            template_app
                             (template_app
                               (template_hole 2, template_var 3),
                              template_var 2)),
                          template_app
                           (template_app (template_hole 1, template_var 3),
                            template_var 2))),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 4,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 3),
                                template_var 2),
                              template_var 0)),
                          template_app
                           (template_app (template_hole 2, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 1, template_var 3),
                          template_var 2)))),
                  template_var 2)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 4,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 3, template_var 3),
                                  template_var 2),
                                template_var 0)),
                            template_app
                             (template_app
                               (template_hole 2, template_var 3),
                              template_var 2)),
                          template_app
                           (template_app (template_hole 1, template_var 3),
                            template_var 2))),
                      template_app
                       (template_app
                         (template_app
                           (template_hole 4,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 3),
                                template_var 2),
                              template_var 1)),
                          template_app
                           (template_app (template_hole 2, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 1, template_var 3),
                          template_var 2)))),
                  template_var 2)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1)))),
    ("Neumann_Morgenstern_Utility_Theorem.first_iff_u_greater_strict_preff",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes;
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R> |]
      ==> (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q
           < ??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
              ?p) =
          (mix_pmf
            (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p)
            (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
              ?\<R>)
            (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
              ?\<R>) \<succeq>[?\<R>] mix_pmf
 (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q)
 (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
 (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>) &
           (mix_pmf
             (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
               ?q)
             (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
               ?\<R>)
             (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
               ?\<R>),
            mix_pmf
             (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
               ?p)
             (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
               ?\<R>)
             (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
               ?\<R>))
           ~: ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 16, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 16, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 16, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 4, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_var 2))),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 3),
                               template_var 2),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 5, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app (template_hole 1, template_var 3),
                             template_var 2),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2)))),
               template_var 2)),
           template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 3),
                               template_var 2),
                             template_var 0)),
                         template_app
                          (template_app (template_hole 5, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app (template_hole 1, template_var 3),
                             template_var 2),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2)))),
               template_var 2)))))),
    ("Neumann_Morgenstern_Utility_Theorem.second_iff_calib_mix_pref_strict_pref",
     "[| rational_preference (\<P> ?outcomes) ?\<R>;
         independent_vnm (\<P> ?outcomes) ?\<R>; finite ?outcomes;
         ?outcomes ~= {}; continuous_vnm (\<P> ?outcomes) ?\<R>;
         ?p : \<P> ?outcomes; ?q : \<P> ?outcomes;
         ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
          ?\<R> \<succeq>[?\<R>] ??.Neumann_Morgenstern_Utility_Theorem.some_worst
                                  ?outcomes ?\<R> &
         (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>,
          ??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
         ~: ?\<R> |]
      ==> (mix_pmf
            (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?p)
            (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
              ?\<R>)
            (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
              ?\<R>) \<succeq>[?\<R>] mix_pmf
 (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R> ?q)
 (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes ?\<R>)
 (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes ?\<R>) &
           (mix_pmf
             (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
               ?q)
             (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
               ?\<R>)
             (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
               ?\<R>),
            mix_pmf
             (??.Neumann_Morgenstern_Utility_Theorem.my_U ?outcomes ?\<R>
               ?p)
             (??.Neumann_Morgenstern_Utility_Theorem.some_best ?outcomes
               ?\<R>)
             (??.Neumann_Morgenstern_Utility_Theorem.some_worst ?outcomes
               ?\<R>))
           ~: ?\<R>) =
          (?p \<succeq>[?\<R>] ?q & (?q, ?p) ~: ?\<R>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 2)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 3, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2))),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 3),
                               template_var 2),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 4, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_app (template_hole 0, template_var 3),
                             template_var 2),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)))),
               template_var 2)),
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 3),
                               template_var 2),
                             template_var 0)),
                         template_app
                          (template_app (template_hole 4, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_app (template_hole 0, template_var 3),
                             template_var 2),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2)))),
               template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_var 2)),
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_var 2))))))]
