Loading theory "Draft.OpSet" (required by "Draft.RGAMoreTemplates" via "Draft.RGA" via "Draft.Insert_Spec")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale opset
  fixes opset :: "('oid * 'oper) set"
    and deps :: "'oper => 'oid set"
  assumes "opset opset deps"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.590s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "crdt_ops"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.836s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.OpSet"
### 0.315s elapsed time, 1.259s cpu time, 0.130s GC time
Loading theory "Draft.Insert_Spec" (required by "Draft.RGAMoreTemplates" via "Draft.RGA")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.352s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale insert_opset
  fixes opset :: "('oid * 'oid option) set"
  assumes "insert_opset opset"
Found termination order: "length <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Insert_Spec"
### 0.514s elapsed time, 2.020s cpu time, 0.245s GC time
Loading theory "Draft.RGA" (required by "Draft.RGAMoreTemplates")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.011s elapsed time, 3.831s cpu time, 0.951s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.RGA"
### 0.556s elapsed time, 1.901s cpu time, 0.727s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 3.997s cpu time, 0.973s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.926s elapsed time, 5.462s cpu time, 1.124s GC time
Loading theory "Draft.Templates" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.114s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RGAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.440s elapsed time, 0.445s cpu time, 0.000s GC time
Loading theory "Draft.RGAMoreTemplates"
val templateLemmas =
   [("RGA.interp_rga_distinct", "rga_ops ?xs ==> distinct (interp_rga ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("RGA.insert_body_set_ins",
     "set (insert_body ?xs ?e) = insert ?e (set ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 2, template_var 1)))),
    ("RGA.rga_ops_rem_last", "rga_ops (?xs @ [?x]) ==> rga_ops ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("RGA.insert_body_commutes",
     "insert_body (insert_body ?xs ?e1.0) ?e2.0 =
      insert_body (insert_body ?xs ?e2.0) ?e1.0",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("RGA.interp_rga_tail_unfold",
     "interp_rga (?xs @ [?x]) = insert_rga (interp_rga ?xs) ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_var 0))),
    ("RGA.interp_rga_ids",
     "rga_ops ?xs ==> set (interp_rga ?xs) = set (map fst ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("RGA.insert_ops_exist",
     "rga_ops ?xs ==> EX ys. set ?xs = set ys & insert_ops ys",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RGA.insert_rga_nonexistent",
     "?i ~: set ?xs ==> insert_rga ?xs (?e, Some ?i) = ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_var 1))),
    ("RGA.rga_ops_ref_exists",
     "rga_ops (?pre @ (?oid, Some ?ref) # ?suf) ==> ?ref : fst ` set ?pre",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_app (template_hole 4, template_var 1))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("RGA.insert_rga_set_ins",
     "?i : set ?xs ==>
      set (insert_rga ?xs (?oid, Some ?i)) = insert ?oid (set ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 2)))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 5, template_var 1))))),
    ("RGA.insert_body_split",
     "EX p s. ?xs = p @ s & insert_body ?xs ?e = p @ ?e # s",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("RGA.rga_meets_spec",
     "rga_ops ?xs ==>
      EX ys.
         set ys = set ?xs & insert_ops ys & interp_ins ys = interp_rga ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("RGA.rga_spec_equal",
     "[| set ?xs = set ?ys; insert_ops ?xs; rga_ops ?ys |]
      ==> interp_ins ?xs = interp_rga ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("RGA.insert_rga_insert_body_commute",
     "?i2.0 ~= Some ?e1.0 ==>
      insert_rga (insert_body ?xs ?e1.0) (?e2.0, ?i2.0) =
      insert_body (insert_rga ?xs (?e2.0, ?i2.0)) ?e1.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))),
           template_var 2)))),
    ("RGA.insert_rga_None_commutes",
     "?i2.0 ~= Some ?e1.0 ==>
      insert_rga (insert_rga ?xs (?e1.0, None)) (?e2.0, ?i2.0) =
      insert_rga (insert_rga ?xs (?e2.0, ?i2.0)) (?e1.0, None)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("RGA.insert_rga_commutes",
     "[| ?i2.0 ~= Some ?e1.0; ?i1.0 ~= Some ?e2.0 |]
      ==> insert_rga (insert_rga ?xs (?e1.0, ?i1.0)) (?e2.0, ?i2.0) =
          insert_rga (insert_rga ?xs (?e2.0, ?i2.0)) (?e1.0, ?i1.0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 3, template_var 3))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2))))),
    ("RGA.rga_ops_rem_penultimate",
     "[| rga_ops (?xs @ [(?i1.0, ?r1.0), (?i2.0, ?r2.0)]);
         !!r. ?r2.0 = Some r ==> r ~= ?i1.0 |]
      ==> rga_ops (?xs @ [(?i2.0, ?r2.0)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 1),
                        template_var 0)),
                    template_hole 5))))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)),
                 template_hole 5)))
           ))),
    ("RGA.insert_between_elements",
     "[| ?xs = ?pre @ ?ref # ?suf; distinct ?xs;
         !!i. i : set ?xs ==> i < ?e |]
      ==> insert_rga ?xs (?e, Some ?ref) = ?pre @ ?ref # ?e # ?suf",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 9, template_var 3),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1)))))),
    ("RGA.insert_rga_preserves_order",
     "[| ?i = None | (EX i'. ?i = Some i' & i' : set ?xs); distinct ?xs |]
      ==> EX pre suf.
             ?xs = pre @ suf & insert_rga ?xs (?e, ?i) = pre @ ?e # suf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_hole 12)),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("RGA.insert_rga_after_ref",
     "[| ALL x:set ?as. ?a ~= x;
         insert_body (?cs @ ?ds) ?e = ?cs @ ?e # ?ds |]
      ==> insert_rga (?as @ ?a # ?cs @ ?ds) (?e, Some ?a) =
          ?as @ ?a # ?cs @ ?e # ?ds",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 4)),
              t_empty)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1)),
            template_var 0),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3))),
         template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))))))),
    ("RGA.insert_rga_Some_commutes",
     "[| ?i1.0 : set ?xs; ?i2.0 : set ?xs; ?e1.0 ~= ?i2.0; ?e2.0 ~= ?i1.0 |]
      ==> insert_rga (insert_rga ?xs (?e1.0, Some ?i1.0))
           (?e2.0, Some ?i2.0) =
          insert_rga (insert_rga ?xs (?e2.0, Some ?i2.0))
           (?e1.0, Some ?i1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_var 2)),
        template_negation
         (template_equation (template_var 0, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 4)))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2)))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 4)))))),
    ("RGA.final_insert",
     "[| set (?xs @ [?x]) = set (?ys @ [?x]); rga_ops (?xs @ [?x]);
         insert_ops (?ys @ [?x]); interp_rga ?xs = interp_ins ?ys |]
      ==> interp_rga (?xs @ [?x]) = interp_ins (?ys @ [?x])",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5))),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5)))),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 7, template_var 0),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)))
            ),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 5))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 5)))))),
    ("RGA.interp_rga_reorder",
     "[| rga_ops (?pre @ ?suf @ [(?oid, ?ref)]);
         !!i r. (i, Some r) : set ?suf ==> r ~= ?oid;
         !!r. ?ref = Some r ==> r ~: fst ` set ?suf |]
      ==> interp_rga (?pre @ (?oid, ?ref) # ?suf) =
          interp_rga (?pre @ ?suf @ [(?oid, ?ref)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_var 1),
                        template_var 0)),
                    template_hole 12))))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 15, template_var 3),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_var 0)),
               template_var 2))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 15, template_var 3),
             template_app
              (template_app (template_hole 15, template_var 2),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 1),
                     template_var 0)),
                 template_hole 12)))))))]:
   (string * thm * template) list
### theory "Draft.RGAMoreTemplates"
### 0.288s elapsed time, 0.435s cpu time, 0.056s GC time
val it = (): unit
