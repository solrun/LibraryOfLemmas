   [("List_Spec.interp_ops_list_equiv",
     "fst (interp_ops ?ops) = interp_ins (insertions ?ops)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("List_Spec.list_ops_insertions",
     "list_ops ?ops ==> insert_ops (insertions ?ops)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("List_Spec.interp_ops_distinct",
     "list_ops ?ops ==> distinct (fst (interp_ops ?ops))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("List_Spec.list_order_irrefl",
     "list_ops ?ops ==> ~ List_Spec.list_order ?ops ?x ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 0)
               )
           ))),
    ("List_Spec.list_order_equiv",
     "List_Spec.list_order ?ops ?x ?y =
      Insert_Spec.list_order (insertions ?ops) ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("List_Spec.insertions_fst_subset",
     "set (map fst (insertions ?ops)) <= set (map fst ?ops)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("List_Spec.interp_ops_unfold_last",
     "interp_ops (?xs @ [?x]) = interp_op (interp_ops ?xs) ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_var 0))),
    ("List_Spec.inserted_ids_last_del",
     "inserted_ids (?xs @ [(?oid, Delete ?ref)]) = inserted_ids ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0))),
       template_app (template_hole 5, template_var 2))),
    ("List_Spec.insertions_last_del",
     "insertions (?xs @ [(?oid, Delete ?ref)]) = insertions ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0))),
       template_app (template_hole 5, template_var 2))),
    ("List_Spec.map_filter_append",
     "List.map_filter ?P (?xs @ ?ys) =
      List.map_filter ?P ?xs @ List.map_filter ?P ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("List_Spec.deleted_ids_last_ins",
     "deleted_ids (?xs @ [(?oid, Insert ?ref ?val)]) = deleted_ids ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 0))),
       template_app (template_hole 5, template_var 3))),
    ("List_Spec.map_filter_None",
     "?P ?x = None ==> List.map_filter ?P [?x] = []",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("List_Spec.deleted_ids_exist",
     "(?ref : set (deleted_ids ?ops)) =
      (EX i. (i, Delete ?ref) : set ?ops)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("List_Spec.deleted_ids_last_del",
     "deleted_ids (?xs @ [(?oid, Delete ?ref)]) = deleted_ids ?xs @ [?ref]",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 8, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("List_Spec.interp_ops_vals_domain",
     "list_ops ?ops ==>
      dom (snd (interp_ops ?ops)) =
      set (inserted_ids ?ops) - set (deleted_ids ?ops)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("List_Spec.map_filter_Some",
     "?P ?x = Some ?y ==> List.map_filter ?P [?x] = [?y]",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("List_Spec.inserted_ids_last_ins",
     "inserted_ids (?xs @ [(?oid, Insert ?ref ?val)]) =
      inserted_ids ?xs @ [?oid]",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 8, template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("List_Spec.inserted_ids_exist",
     "(?oid : set (inserted_ids ?ops)) =
      (EX ref val. (?oid, Insert ref val) : set ?ops)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app (template_hole 5, t_empty))),
    ("List_Spec.insertions_last_ins",
     "insertions (?xs @ [(?oid, Insert ?ref ?val)]) =
      insertions ?xs @ [(?oid, ?ref)]",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 3),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 9, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("List_Spec.deleted_ids_refs_older",
     "[| list_ops (?ops @ [(?oid, ?oper)]); ?ref : set (deleted_ids ?ops) |]
      ==> ?ref < ?oid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_inequation (less_than, template_var 0, template_var 2))),
    ("List_Spec.list_order_trans",
     "[| list_ops ?ops; List_Spec.list_order ?ops ?x ?y;
         List_Spec.list_order ?ops ?y ?z |]
      ==> List_Spec.list_order ?ops ?x ?z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("List_Spec.insertions_subset",
     "[| list_ops ?A; list_ops ?B; set ?A <= set ?B |]
      ==> set (insertions ?A) <= set (insertions ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("List_Spec.insert_spec_nth_oid",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> insert_spec ?xs (?oid, Some (?xs ! ?n)) ! Suc ?n = ?oid",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1))))),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("List_Spec.insert_spec_inc_length",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> length (insert_spec ?xs (?oid, Some (?xs ! ?n))) =
          Suc (length ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))))),
         template_app
          (template_hole 0,
           template_app (template_hole 6, template_var 2))))),
    ("List_Spec.list_order_consistent",
     "[| list_ops ?some_ops; list_ops ?all_ops;
         set ?some_ops <= set ?all_ops;
         List_Spec.list_order ?some_ops ?x ?y |]
      ==> List_Spec.list_order ?all_ops ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("List_Spec.list_order_total",
     "[| list_ops ?ops; ?x : set (fst (interp_ops ?ops));
         ?y : set (fst (interp_ops ?ops)); ?x ~= ?y |]
      ==> List_Spec.list_order ?ops ?x ?y |
          List_Spec.list_order ?ops ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("List_Spec.inserted_but_not_deleted",
     "[| list_ops ?ops; interp_ops ?ops = (?list, ?vals) |]
      ==> (?a : dom ?vals) =
          ((EX ref val. (?a, Insert ref val) : set ?ops) &
           (\<nexists>i. (i, Delete ?a) : set ?ops))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_equation
         (template_app (template_hole 14, template_var 3),
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 0),
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))))),
    ("List_Spec.correct_position_insert",
     "[| list_ops (?ops @ [(?oid, ?ins)]);
         ?ins = make_insert (fst (interp_ops ?ops)) ?val ?k;
         ?list = fst (interp_ops (?ops @ [(?oid, ?ins)])) |]
      ==> ?list ! min ?k (length ?list - 1) = ?oid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 5),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_var 3)),
                  template_hole 11)))
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 5))),
              template_var 2),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 14, template_var 5),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_var 3)),
                  template_hole 11)))))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))),
         template_var 4))),
    ("List_Spec.list_split_two_elems",
     "[| distinct ?xs; ?x : set ?xs; ?y : set ?xs; ?x ~= ?y |]
      ==> EX pre mid suf.
             ?xs = pre @ ?x # mid @ ?y # suf |
             ?xs = pre @ ?y # mid @ ?x # suf",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty))))]
