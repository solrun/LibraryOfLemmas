Loading theory "Draft.SetUtils" (required by "Draft.SetUtilsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.SetUtils"
### 0.101s elapsed time, 0.436s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.659s cpu time, 0.050s GC time
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.806s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.368s elapsed time, 1.292s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.718s elapsed time, 2.205s cpu time, 0.292s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.739s elapsed time, 2.073s cpu time, 0.192s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.779s elapsed time, 4.035s cpu time, 0.799s GC time
Loading theory "Draft.Templates" (required by "Draft.SetUtilsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.114s cpu time, 0.038s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetUtilsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.442s cpu time, 0.000s GC time
Loading theory "Draft.SetUtilsMoreTemplates"
val templateLemmas =
   [("SetUtils.lm03", "trivial {?x}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("SetUtils.trivial_implies_finite", "trivial ?X ==> finite ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SetUtils.lm14", "(Pow ?X = {?X}) = (?X = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("SetUtils.lm10", "trivial ?X = (Pow ?X <= {{}, ?X})",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("SetUtils.Union_member", "(EX S:?F. ?x : S) = (?x : \<Union> ?F)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SetUtils.lm02", "finite ?X ==> trivial ?X = (card ?X <= 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("SetUtils.trivial_subset", "[| trivial ?Y; ?X <= ?Y |] ==> trivial ?X",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("SetUtils.trivial_same",
     "trivial ?X = (ALL x1:?X. ALL x2:?X. x1 = x2)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("SetUtils.lm09", "trivial ?X ==> Pow ?X <= {{}, ?X}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("SetUtils.lm08", "Pow ?X <= {{}, ?X} ==> trivial ?X",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SetUtils.trivial_empty_or_singleton",
     "trivial ?X = (?X = {} | ?X = {the_elem ?X})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_hole 2)))
           ))),
    ("SetUtils.lm12", "((?x, ?y) : ?P) = (?y : ?P `` {?x})",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("SetUtils.trivial_cartesian",
     "[| trivial ?X; trivial ?Y |] ==> trivial (?X \<times> ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("SetUtils.trivial_subset_non_empty",
     "[| trivial ?t; ?t Int ?X ~= {} |] ==> ?t <= ?X",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("SetUtils.lm05", "[| ~ trivial ?X; trivial ?T |] ==> ?X - ?T ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SetUtils.singleton_sub_trivial_uniq",
     "[| {?x} <= ?X; trivial ?X |] ==> ?x = the_elem ?X",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_var 0),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("SetUtils.image_Collect_mem", "{?f x |x. x : ?S} = ?f ` ?S",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetUtils.lm04", "[| trivial ?X; {?x} <= ?X |] ==> {?x} = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_var 1))),
    ("SetUtils.trivial_imp_no_distinct",
     "[| trivial ?X; ?x : ?X; ?y : ?X |] ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation (template_var 1, template_var 0))),
    ("SetUtils.lm11",
     "{?x} \<times> UNIV Int ?P = {?x} \<times> ?P `` {?x}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         t_empty))),
    ("SetUtils.lm07",
     "trivial (?A \<times> ?B) =
      (finite (?A \<times> ?B) & card ?A * card ?B <= 1)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 7, template_var 1), t_empty))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("SetUtils.lm01",
     "trivial (?A \<times> ?B) ==>
      finite (?A \<times> ?B) & card ?A * card ?B <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   t_empty))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app (template_hole 1, template_var 0))),
               template_hole 0))
           ))),
    ("SetUtils.lm06",
     "finite (?A \<times> ?B) & card ?A * card ?B <= 1 ==>
      trivial (?A \<times> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    t_empty))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 2, template_var 0))),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 1), t_empty))
           ))),
    ("SetUtils.injection_union",
     "[| inj_on ?f ?A; inj_on ?f ?B; ?f ` ?A Int ?f ` ?B = {} |]
      ==> inj_on ?f (?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SetUtils.equalitySubsetI",
     "[| !!x. x : ?A ==> x : ?B; !!x. x : ?B ==> x : ?A |] ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("SetUtils.lm13",
     "[| inj_on ?f ?A; inj_on ?f ?B |]
      ==> inj_on ?f (?A Un ?B) = (?f ` (?A - ?B) Int ?f ` (?B - ?A) = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0))
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.SetUtilsMoreTemplates"
### 0.283s elapsed time, 0.426s cpu time, 0.062s GC time
val it = (): unit
