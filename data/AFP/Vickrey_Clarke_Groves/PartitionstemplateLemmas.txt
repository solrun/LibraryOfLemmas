   [("Partitions.non_overlapping_without_is_non_overlapping",
     "is_non_overlapping ?P ==>
      is_non_overlapping (partition_without ?elem ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Partitions.no_empty_in_non_overlapping",
     "is_non_overlapping ?p ==> {} ~: ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)
               )
           ))),
    ("Partitions.emptyset_part_emptyset2", "?P partitions {} ==> ?P = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Partitions.partition_without_covers",
     "\<Union> (partition_without ?elem ?P) = \<Union> ?P - {?elem}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Partitions.set_partitions_itself", "?A ~= {} ==> {?A} partitions ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Partitions.subset_is_non_overlapping",
     "[| ?P <= ?Q; is_non_overlapping ?Q |] ==> is_non_overlapping ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Partitions.all_partitions_paper_equiv_alg",
     "distinct ?xs ==>
      set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Partitions.coarser_partitions_covers",
     "?Q : coarser_partitions_with ?elem ?P ==>
      \<Union> ?Q = insert ?elem (\<Union> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Partitions.coarser_partitions_with_list_equivalence",
     "distinct ?P ==>
      set (map set (coarser_partitions_with_list ?new_el ?P)) =
      coarser_partitions_with ?new_el (set ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Partitions.insert_into_member_list_equivalence",
     "distinct ?Sets ==>
      set (insert_into_member_list ?new_el ?Sets ?S) =
      insert_into_member ?new_el (set ?Sets) ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Partitions.non_empty_imp_non_empty_partition",
     "[| ?A ~= {}; ?P partitions ?A |] ==> ?P ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Partitions.coarser_partitions_inv_without",
     "[| is_non_overlapping ?P; ?elem : \<Union> ?P |]
      ==> ?P : coarser_partitions_with ?elem (partition_without ?elem ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Partitions.insert_into_member_partition1",
     "\<Union> (insert_into_member ?elem ?P ?set) =
      \<Union> (insert (?set Un {?elem}) (?P - {?set}))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0)))))),
    ("Partitions.disj_eq_classes",
     "[| is_non_overlapping ?P; ?X : ?P |]
      ==> ?X Int \<Union> (?P - {?X}) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("Partitions.elem_in_uniq_set",
     "[| ?x : ?A; ?P partitions ?A |] ==> EX! X. X : ?P & ?x : X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Partitions.non_overlapping_extension3",
     "[| is_non_overlapping ?P; ?elem ~: \<Union> ?P;
         ?Q : coarser_partitions_with ?elem ?P |]
      ==> is_non_overlapping ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2))
            )],
       template_predicate
        (template_app (template_hole 5, template_var 0)))),
    ("Partitions.all_partitions_equivalence'",
     "distinct ?xs ==>
      set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs) &
      (ALL ps:set (all_partitions_list ?xs). distinct ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 0))),
               t_empty))
           ))),
    ("Partitions.all_coarser_partitions_with_list_equivalence",
     "ALL P:set ?Ps. distinct P ==>
      set (map set (all_coarser_partitions_with_list ?elem ?Ps)) =
      all_coarser_partitions_with ?elem (set (map set ?Ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)))))),
    ("Partitions.non_overlapping_extension2",
     "[| is_non_overlapping ?P; ?X : ?P; ?new_el ~: \<Union> ?P |]
      ==> is_non_overlapping (insert_into_member ?new_el ?P ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Partitions.diff_elem_in_partition",
     "[| ?x : ?A - ?B; ?P partitions ?A |] ==> EX S:?P - {?B}. ?x : S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             t_empty)
           ))),
    ("Partitions.remove_from_eq_class_preserves_disjoint",
     "[| is_non_overlapping ?P; ?X : ?P; ?elem : ?X |]
      ==> ?X - {?elem} ~: ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_var 2)
               )
           ))),
    ("Partitions.non_overlapping_extension1",
     "[| is_non_overlapping ?P; ?X Int \<Union> ?P = {}; ?X ~= {} |]
      ==> is_non_overlapping (insert ?X ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 1)),
          template_hole 2),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Partitions.elem_in_partition",
     "[| ?x : ?A; ?P partitions ?A; !!X. [| ?x : X; X : ?P |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Partitions.super_class",
     "[| ?X : partition_without ?elem ?P;
         !!Z. [| Z : ?P; ?X = Z - {?elem} |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Partitions.coarser_partitions_with_list_distinct",
     "[| ?ps : set (coarser_partitions_with_list ?x ?Q); distinct ?Q;
         is_non_overlapping (set ?Q); {?x} ~: set ?Q |]
      ==> distinct ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_hole 0)),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 6, template_var 2))))]
