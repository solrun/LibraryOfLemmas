Loading theory "Draft.Argmax" (required by "Draft.ArgmaxMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.559s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Argmax"
### 0.158s elapsed time, 0.651s cpu time, 0.043s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.841s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.200s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.735s elapsed time, 2.263s cpu time, 0.327s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.759s elapsed time, 2.189s cpu time, 0.227s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.810s elapsed time, 4.051s cpu time, 0.847s GC time
Loading theory "Draft.Templates" (required by "Draft.ArgmaxMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.123s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArgmaxMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.450s elapsed time, 0.457s cpu time, 0.000s GC time
Loading theory "Draft.ArgmaxMoreTemplates"
val templateLemmas =
   [("Argmax.lm01", "argmax ?f ?A = ?A Int ?f -` {Max (?f ` ?A)}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 0))))),
    ("Argmax.argmaxadequacy",
     "argmaxList ?f ?l = filter (%x. Max (?f ` set ?l) <= ?f x) ?l",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty), template_var 0))),
    ("Argmax.argmax_non_empty_iff",
     "[| finite ?X; ?X ~= {} |] ==> argmax ?f ?X ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("Argmax.maxLemma",
     "[| ?x : ?X; finite ?X |] ==> ?f ?x <= Max (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Argmax.argmaxLemma", "argmax ?f ?A = {x: ?A. ?f x = Max (?f ` ?A)}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Argmax.lm02", "?y : ?f ` ?A ==> ?A Int ?f -` {?y} ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("Argmax.argmaxEquivalence",
     "ALL x:?X. ?f x = ?g x ==> argmax ?f ?X = argmax ?g ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Argmax.structInduct",
     "[| ?P []; ALL x xs. ?P xs --> ?P (x # xs) |] ==> ?P ?l",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Argmax.map_commutes_a",
     "concat (map (%n. if ?Q (?f n) then [?f n] else []) []) =
      filter ?Q (map ?f [])",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty), template_hole 2)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 2)))),
    ("Argmax.map_commutes",
     "concat (map (%n. if ?Q (?f n) then [?f n] else []) ?xs) =
      filter ?Q (map ?f ?xs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Argmax.lm03",
     "maxpositions ?l =
      concat
       (map (%n. if Max (set ?l) <= ?l ! n then [n] else [])
         [0..<length ?l])",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Argmax.lm07",
     "maxpositions (map ?f ?l) =
      concat
       (map (%n. if Max (?f ` set ?l) <= ?f (?l ! n) then [n] else [])
         [0..<length ?l])",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, template_var 1),
           template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Argmax.lm08",
     "argmaxList ?f ?l =
      concat
       (map (%n. if Max (?f ` set ?l) <= ?f (?l ! n) then [?l ! n] else [])
         [0..<length ?l])",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1), template_var 0),
       template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Argmax.lm04",
     "concat (map (%n. if ?P n then [n] else []) ?l) =
      concat
       (map (%n. if n : set ?l then if ?P n then [n] else [] else []) ?l)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)))),
    ("Argmax.lm06",
     "map ?f (concat (map (%n. if ?P n then [n] else []) [0..<?m])) =
      concat (map (%n. if ?P n then [?f n] else []) [0..<?m])",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 2),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0))))),
    ("Argmax.lm05",
     "concat (map (%n. if ?P n then [n] else []) [0..<?m]) =
      concat
       (map (%n. if n : set [0..<?m] then if ?P n then [n] else [] else [])
         [0..<?m])",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Argmax.map_commutes_b",
     "ALL x xs.
         concat (map (%n. if ?Q (?f n) then [?f n] else []) xs) =
         filter ?Q (map ?f xs) -->
         concat (map (%n. if ?Q (?f n) then [?f n] else []) (x # xs)) =
         filter ?Q (map ?f (x # xs))",
     template_predicate (template_app (template_hole 11, t_empty)))]:
   (string * thm * template) list
### theory "Draft.ArgmaxMoreTemplates"
### 0.285s elapsed time, 0.421s cpu time, 0.072s GC time
val it = (): unit
