Loading theory "Draft.Argmax" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools")
Loading theory "Draft.SetUtils" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.Partitions")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction")
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.062s elapsed time, 0.281s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools")
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
Found termination order: "{}"
### theory "Draft.SetUtils"
### 0.109s elapsed time, 0.458s cpu time, 0.031s GC time
Loading theory "Draft.Partitions" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Code_Target_Int"
### 0.155s elapsed time, 0.635s cpu time, 0.031s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools" via "HOL-Library.Indicator_Function" via "HOL-Library.Disjoint_Sets")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "Draft.Argmax"
### 0.198s elapsed time, 0.810s cpu time, 0.031s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Code_Target_Nat"
### 0.139s elapsed time, 0.539s cpu time, 0.031s GC time
Loading theory "Draft.RelationOperators" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools" via "Draft.RelationProperties")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.515s cpu time, 0.076s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Partitions"
### 0.367s elapsed time, 1.442s cpu time, 0.176s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.RelationOperators"
### 0.334s elapsed time, 1.301s cpu time, 0.176s GC time
Loading theory "Draft.RelationProperties" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.424s elapsed time, 1.670s cpu time, 0.176s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools" via "HOL-Library.Indicator_Function")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.314s cpu time, 0.202s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.863s cpu time, 0.102s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.RelationProperties"
### 0.216s elapsed time, 0.851s cpu time, 0.102s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Disjoint_Sets"
### 0.306s elapsed time, 1.190s cpu time, 0.205s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.359s elapsed time, 1.253s cpu time, 0.614s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction" via "Draft.MiscTools")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.Indicator_Function"
### 0.429s elapsed time, 1.697s cpu time, 0.139s GC time
Loading theory "Draft.MiscTools" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking" via "Draft.StrictCombinatorialAuction")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.136s elapsed time, 4.310s cpu time, 0.939s GC time
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.911s cpu time, 0.836s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.118s cpu time, 1.140s GC time
Loading theory "Draft.Templates" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.140s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates")
Found termination order: "length <*mlex*> {}"
### theory "Draft.MiscTools"
### 1.442s elapsed time, 3.338s cpu time, 0.359s GC time
Loading theory "Draft.StrictCombinatorialAuction" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.527s elapsed time, 1.141s cpu time, 0.075s GC time
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.StrictCombinatorialAuction"
### 0.435s elapsed time, 0.644s cpu time, 0.056s GC time
Loading theory "Draft.Universes" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction" via "Draft.UniformTieBreaking")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Universes"
### 0.533s elapsed time, 0.611s cpu time, 0.104s GC time
Loading theory "Draft.UniformTieBreaking" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction" via "Draft.CombinatorialAuction")
"0"
  :: "nat"
### theory "Draft.UniformTieBreaking"
### 0.477s elapsed time, 0.665s cpu time, 0.084s GC time
Loading theory "Draft.CombinatorialAuction" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates" via "Draft.CombinatorialAuctionCodeExtraction")
### theory "Draft.CombinatorialAuction"
### 0.535s elapsed time, 0.597s cpu time, 0.086s GC time
Loading theory "Draft.CombinatorialAuctionCodeExtraction" (required by "Draft.CombinatorialAuctionCodeExtractionMoreTemplates")
### Legacy feature! export_code with file argument (line 57 of "$AFP/Vickrey_Clarke_Groves/CombinatorialAuctionCodeExtraction.thy")
### theory "Draft.CombinatorialAuctionCodeExtraction"
### 0.553s elapsed time, 0.590s cpu time, 0.052s GC time
Loading theory "Draft.CombinatorialAuctionCodeExtractionMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CombinatorialAuctionCodeExtractionMoreTemplates"
### 0.311s elapsed time, 0.404s cpu time, 0.041s GC time
val it = (): unit
