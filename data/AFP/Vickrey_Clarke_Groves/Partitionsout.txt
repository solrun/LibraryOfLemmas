Loading theory "Draft.SetUtils" (required by "Draft.PartitionsMoreTemplates" via "Draft.Partitions")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.SetUtils"
### 0.125s elapsed time, 0.519s cpu time, 0.039s GC time
Loading theory "Draft.Partitions" (required by "Draft.PartitionsMoreTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.634s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.864s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.334s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Partitions"
### 0.355s elapsed time, 1.397s cpu time, 0.181s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.762s elapsed time, 2.558s cpu time, 0.330s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.999s elapsed time, 3.016s cpu time, 0.787s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.869s elapsed time, 4.492s cpu time, 0.966s GC time
Loading theory "Draft.Templates" (required by "Draft.PartitionsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PartitionsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.473s elapsed time, 0.519s cpu time, 0.057s GC time
Loading theory "Draft.PartitionsMoreTemplates"
val templateLemmas =
   [("Partitions.non_overlapping_without_is_non_overlapping",
     "is_non_overlapping ?P ==>
      is_non_overlapping (partition_without ?elem ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Partitions.no_empty_in_non_overlapping",
     "is_non_overlapping ?p ==> {} ~: ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)
               )
           ))),
    ("Partitions.emptyset_part_emptyset2", "?P partitions {} ==> ?P = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Partitions.partition_without_covers",
     "\<Union> (partition_without ?elem ?P) = \<Union> ?P - {?elem}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Partitions.set_partitions_itself", "?A ~= {} ==> {?A} partitions ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Partitions.subset_is_non_overlapping",
     "[| ?P <= ?Q; is_non_overlapping ?Q |] ==> is_non_overlapping ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Partitions.all_partitions_paper_equiv_alg",
     "distinct ?xs ==>
      set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Partitions.coarser_partitions_covers",
     "?Q : coarser_partitions_with ?elem ?P ==>
      \<Union> ?Q = insert ?elem (\<Union> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Partitions.coarser_partitions_with_list_equivalence",
     "distinct ?P ==>
      set (map set (coarser_partitions_with_list ?new_el ?P)) =
      coarser_partitions_with ?new_el (set ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Partitions.insert_into_member_list_equivalence",
     "distinct ?Sets ==>
      set (insert_into_member_list ?new_el ?Sets ?S) =
      insert_into_member ?new_el (set ?Sets) ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Partitions.non_empty_imp_non_empty_partition",
     "[| ?A ~= {}; ?P partitions ?A |] ==> ?P ~= {}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Partitions.coarser_partitions_inv_without",
     "[| is_non_overlapping ?P; ?elem : \<Union> ?P |]
      ==> ?P : coarser_partitions_with ?elem (partition_without ?elem ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Partitions.insert_into_member_partition1",
     "\<Union> (insert_into_member ?elem ?P ?set) =
      \<Union> (insert (?set Un {?elem}) (?P - {?set}))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0)))))),
    ("Partitions.disj_eq_classes",
     "[| is_non_overlapping ?P; ?X : ?P |]
      ==> ?X Int \<Union> (?P - {?X}) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("Partitions.elem_in_uniq_set",
     "[| ?x : ?A; ?P partitions ?A |] ==> EX! X. X : ?P & ?x : X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Partitions.non_overlapping_extension3",
     "[| is_non_overlapping ?P; ?elem ~: \<Union> ?P;
         ?Q : coarser_partitions_with ?elem ?P |]
      ==> is_non_overlapping ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2))
            )],
       template_predicate
        (template_app (template_hole 5, template_var 0)))),
    ("Partitions.all_partitions_equivalence'",
     "distinct ?xs ==>
      set (map set (all_partitions_list ?xs)) = all_partitions (set ?xs) &
      (ALL ps:set (all_partitions_list ?xs). distinct ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 0))),
               t_empty))
           ))),
    ("Partitions.all_coarser_partitions_with_list_equivalence",
     "ALL P:set ?Ps. distinct P ==>
      set (map set (all_coarser_partitions_with_list ?elem ?Ps)) =
      all_coarser_partitions_with ?elem (set (map set ?Ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)))))),
    ("Partitions.non_overlapping_extension2",
     "[| is_non_overlapping ?P; ?X : ?P; ?new_el ~: \<Union> ?P |]
      ==> is_non_overlapping (insert_into_member ?new_el ?P ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Partitions.diff_elem_in_partition",
     "[| ?x : ?A - ?B; ?P partitions ?A |] ==> EX S:?P - {?B}. ?x : S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             t_empty)
           ))),
    ("Partitions.remove_from_eq_class_preserves_disjoint",
     "[| is_non_overlapping ?P; ?X : ?P; ?elem : ?X |]
      ==> ?X - {?elem} ~: ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_var 2)
               )
           ))),
    ("Partitions.non_overlapping_extension1",
     "[| is_non_overlapping ?P; ?X Int \<Union> ?P = {}; ?X ~= {} |]
      ==> is_non_overlapping (insert ?X ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 1)),
          template_hole 2),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Partitions.elem_in_partition",
     "[| ?x : ?A; ?P partitions ?A; !!X. [| ?x : X; X : ?P |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Partitions.super_class",
     "[| ?X : partition_without ?elem ?P;
         !!Z. [| Z : ?P; ?X = Z - {?elem} |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Partitions.coarser_partitions_with_list_distinct",
     "[| ?ps : set (coarser_partitions_with_list ?x ?Q); distinct ?Q;
         is_non_overlapping (set ?Q); {?x} ~: set ?Q |]
      ==> distinct ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_hole 0)),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 6, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.PartitionsMoreTemplates"
### 0.322s elapsed time, 0.463s cpu time, 0.065s GC time
val it = (): unit
