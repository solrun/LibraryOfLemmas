Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6" via "Group-Ring-Module.Algebra5" via "Group-Ring-Module.Algebra4" via "Group-Ring-Module.Algebra3" via "Group-Ring-Module.Algebra2" via "Group-Ring-Module.Algebra1")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.566s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.346s elapsed time, 1.301s cpu time, 0.338s GC time
Found termination order: "size_list size <*mlex*> {}"
Loading theory "HOL-Library.BigO" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.472s elapsed time, 1.786s cpu time, 0.383s GC time
Loading theory "Group-Ring-Module.Algebra1" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6" via "Group-Ring-Module.Algebra5" via "Group-Ring-Module.Algebra4" via "Group-Ring-Module.Algebra3" via "Group-Ring-Module.Algebra2")
### theory "HOL-Library.Nat_Bijection"
### 0.491s elapsed time, 1.874s cpu time, 0.383s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  nasc_seq :: "nat set => nat => nat => nat"
### theory "HOL-Library.BigO"
### 0.910s elapsed time, 3.463s cpu time, 0.861s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  ndec_seq :: "nat set => nat => nat => nat"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.954s elapsed time, 3.465s cpu time, 0.848s GC time
consts
  dec_seq :: "int set => int => nat => int"
Found termination order: "size <*mlex*> {}"
instantiation
  ant :: {minus,one,plus,times,uminus,zero,ord}
  less_eq_ant == less_eq :: ant => ant => bool
  less_ant == less :: ant => ant => bool
  zero_ant == zero_class.zero :: ant
  uminus_ant == uminus :: ant => ant
  times_ant == times :: ant => ant => ant
  plus_ant == plus :: ant => ant => ant
  one_ant == one_class.one :: ant
  minus_ant == minus :: ant => ant => ant
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  Amin :: "nat => (nat => ant) => ant"
consts
  Amax :: "nat => (nat => ant) => ant"
Found termination order: "size <*mlex*> {}"
consts
  aasc_seq :: "ant set => ant => nat => ant"
consts
  ASum :: "(nat => ant) => nat => ant"
### theory "HOL-Library.Tree"
### 1.882s elapsed time, 6.008s cpu time, 1.343s GC time
Loading theory "Draft.Templates" (required by "Draft.Valuation2MoreTemplates" via "Draft.ExtrEqs")
consts
  Zmax :: "nat => (nat => int) => int"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.160s cpu time, 0.053s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Valuation2MoreTemplates")
locale Order
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Order D"
locale Torder
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Torder D"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.724s elapsed time, 1.782s cpu time, 0.796s GC time
locale Worder
  fixes D :: "('a, 'b) Order_scheme"  (structure)
  assumes "Worder D"
### theory "Group-Ring-Module.Algebra1"
### 2.919s elapsed time, 7.132s cpu time, 1.997s GC time
Loading theory "Group-Ring-Module.Algebra2" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6" via "Group-Ring-Module.Algebra5" via "Group-Ring-Module.Algebra4" via "Group-Ring-Module.Algebra3")
locale Group
  fixes G :: "('a, 'b) Group_scheme"  (structure)
  assumes "Group G"
### theory "Group-Ring-Module.Algebra2"
### 1.716s elapsed time, 1.952s cpu time, 0.321s GC time
Loading theory "Group-Ring-Module.Algebra3" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6" via "Group-Ring-Module.Algebra5" via "Group-Ring-Module.Algebra4")
[| ?i <= ?n; ?j <= ?n; ?i ~= ?j |] ==> inj_on (transpos ?i ?j) {i. i <= ?n}
### theory "Group-Ring-Module.Algebra3"
### 2.252s elapsed time, 3.312s cpu time, 1.463s GC time
Loading theory "Group-Ring-Module.Algebra4" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6" via "Group-Ring-Module.Algebra5")
locale aGroup
  fixes A :: "('a, 'b) aGroup_scheme"  (structure)
  assumes "aGroup A"
locale Ring
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Ring R"
consts
  nscal :: "('a, 'more) Ring_scheme => 'a => nat => 'a"
consts
  npow :: "('a, 'more) Ring_scheme => 'a => nat => 'a"
consts
  nprod :: "('a, 'more) Ring_scheme => (nat => 'a) => nat => 'a"
consts
  nsum :: "('a, 'more) aGroup_scheme => (nat => 'a) => nat => 'a"
consts
  sum_pr_ideals :: "('a, 'm) Ring_scheme => (nat => 'a) => nat => 'a set"
consts
  ideal_n_prod :: "('a, 'm) Ring_scheme => nat => (nat => 'a set) => 'a set"
consts
  ideal_pow :: "'a set => ('a, 'more) Ring_scheme => nat => 'a set"
locale Idomain
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Idomain R"
locale Corps
  fixes K :: "('a, 'b) Ring_scheme"  (structure)
  assumes "Corps K"
### theory "Group-Ring-Module.Algebra4"
### 2.591s elapsed time, 3.179s cpu time, 0.790s GC time
Loading theory "Group-Ring-Module.Algebra5" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7" via "Group-Ring-Module.Algebra6")
consts
  ac_fProd_Rg ::
    "nat => (nat => ('a, 'more) Ring_scheme) => (nat => 'a) set"
locale TwoRings
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
    and R' :: "('c, 'd) Ring_scheme"  (structure)
  assumes "TwoRings R R'"
locale PolynRg
  fixes R :: "('a, 'b) Ring_scheme"  (structure)
    and S :: "('a, 'c) Ring_scheme"  (structure)
    and X :: "'a"  (structure)
  assumes "PolynRg R S X"
### theory "Group-Ring-Module.Algebra5"
### 1.845s elapsed time, 2.206s cpu time, 0.485s GC time
Loading theory "Group-Ring-Module.Algebra6" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8" via "Group-Ring-Module.Algebra7")
### Ignoring duplicate rewrite rule:
### ?b1 <= ?y ==> max ?y ?b1 == ?y
### Ignoring duplicate rewrite rule:
### ?a1 <= ?y ==> max ?a1 ?y == ?y
### Ambiguous input (line 4679 of "$AFP/Group-Ring-Module/Algebra6.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Hensel_next" ("_position" R) ("_position" S) ("_position" X)
###       ("_position" t) ("_position" R') ("_position" Y) ("_position" f)
###       ("_position" m) ("_position" gh))
###     ("_Eps" ("_position" gh1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" gh1)
###           ("\<^const>Product_Type.Times"
###             ("_applC" ("_position" carrier) ("_position" R))
###             ("_applC" ("_position" carrier) ("_position" R))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" deg)
###               ("_cargs" ("_position" R)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" X)
###                     ("_applC" ("_position" fst) ("_position" gh1))))))
###             ("_applC" ("_position" deg)
###               ("_cargs" ("_position" R')
###                 ("_cargs"
###                   ("\<^const>Algebra4.QRING" ("_position" S)
###                     ("\<^const>Algebra4.Rxa" ("_position" S)
###                       ("_position" t)))
###                   ("_cargs" ("_position" Y)
###                     ("_applC" ("_position" erH)
###                       ("_cargs" ("_position" R)
###                         ("_cargs" ("_position" S)
###                           ("_cargs" ("_position" X)
###                             ("_cargs" ("_position" R')
###                               ("_cargs"
###                                 ("\<^const>Algebra4.QRING" ("_position" S)
###                                   ("\<^const>Algebra4.Rxa" ("_position" S)
###                                     ("_position" t)))
###                                 ("_cargs" ("_position" Y)
###                                   ("_cargs"
###                                     ("_applC" ("_position" pj)
### ("_cargs" ("_position" S)
###   ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###                                     ("_applC" ("_position" fst)
### ("_position" gh1)))))))))))))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" P_mod)
###               ("_cargs" ("_position" R)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" X)
###                     ("_cargs"
###                       ("\<^const>Algebra4.Rxa" ("_position" S)
###                         ("\<^const>Algebra4.NPOW" ("_position" t)
###                           ("_position" S) ("_position" m)))
###                       ("\<^const>Algebra4.aGroup.pop_indexed"
###                         ("_applC" ("_position" fst) ("_position" gh))
###                         ("_index" ("_position" R))
###                         ("\<^const>Algebra4.aGroup.mop_indexed"
###                           ("_index" ("_position" R))
###                           ("_applC" ("_position" fst)
###                             ("_position" gh1)))))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less_eq"
###                 ("\<^const>Groups.plus_class.plus"
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_applC" ("_position" snd) ("_position" gh1))))))
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R')
###                       ("_cargs"
###                         ("\<^const>Algebra4.QRING" ("_position" S)
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("_position" t)))
###                         ("_cargs" ("_position" Y)
###                           ("_applC" ("_position" erH)
###                             ("_cargs" ("_position" R)
###                               ("_cargs" ("_position" S)
###                                 ("_cargs" ("_position" X)
###                                   ("_cargs" ("_position" R')
###                                     ("_cargs"
### ("\<^const>Algebra4.QRING" ("_position" S)
###   ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t)))
### ("_cargs" ("_position" Y)
###   ("_cargs"
###     ("_applC" ("_position" pj)
###       ("_cargs" ("_position" S)
###         ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###     ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###                 ("_applC" ("_position" deg)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X) ("_position" f))))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P_mod)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X)
###                         ("_cargs"
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("\<^const>Algebra4.NPOW" ("_position" t)
###                               ("_position" S) ("_position" m)))
###                           ("\<^const>Algebra4.aGroup.pop_indexed"
###                             ("_applC" ("_position" snd) ("_position" gh))
###                             ("_index" ("_position" R))
###                             ("\<^const>Algebra4.aGroup.mop_indexed"
###                               ("_index" ("_position" R))
###                               ("_applC" ("_position" snd)
###                                 ("_position" gh1)))))))))
###                 ("_applC" ("_position" P_mod)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" X)
###                         ("_cargs"
###                           ("\<^const>Algebra4.Rxa" ("_position" S)
###                             ("\<^const>Algebra4.NPOW" ("_position" t)
###                               ("_position" S)
###                               ("_applC" ("_position" Suc) ("_position" m))))
###                           ("\<^const>Algebra4.aGroup.pop_indexed"
###                             ("_position" f) ("_index" ("_position" R))
###                             ("\<^const>Algebra4.aGroup.mop_indexed"
###                               ("_index" ("_position" R))
###                               ("\<^const>Algebra4.Ring.tp_indexed"
###                                 ("_applC" ("_position" fst)
###                                   ("_position" gh1))
###                                 ("_index" ("_position" R))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" gh1))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Hensel_next" ("_position" R) ("_position" S) ("_position" X)
###     ("_position" t) ("_position" R') ("_position" Y) ("_position" f)
###     ("_position" m)
###     ("\<^const>HOL.eq" ("_position" gh)
###       ("_Eps" ("_position" gh1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" gh1)
###             ("\<^const>Product_Type.Times"
###               ("_applC" ("_position" carrier) ("_position" R))
###               ("_applC" ("_position" carrier) ("_position" R))))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" deg)
###                 ("_cargs" ("_position" R)
###                   ("_cargs" ("_position" S)
###                     ("_cargs" ("_position" X)
###                       ("_applC" ("_position" fst) ("_position" gh1))))))
###               ("_applC" ("_position" deg)
###                 ("_cargs" ("_position" R')
###                   ("_cargs"
###                     ("\<^const>Algebra4.QRING" ("_position" S)
###                       ("\<^const>Algebra4.Rxa" ("_position" S)
###                         ("_position" t)))
###                     ("_cargs" ("_position" Y)
###                       ("_applC" ("_position" erH)
###                         ("_cargs" ("_position" R)
###                           ("_cargs" ("_position" S)
###                             ("_cargs" ("_position" X)
###                               ("_cargs" ("_position" R')
###                                 ("_cargs"
###                                   ("\<^const>Algebra4.QRING" ("_position" S)
###                                     ("\<^const>Algebra4.Rxa" ("_position" S)
### ("_position" t)))
###                                   ("_cargs" ("_position" Y)
###                                     ("_cargs"
### ("_applC" ("_position" pj)
###   ("_cargs" ("_position" S)
###     ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
### ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P_mod)
###                 ("_cargs" ("_position" R)
###                   ("_cargs" ("_position" S)
###                     ("_cargs" ("_position" X)
###                       ("_cargs"
###                         ("\<^const>Algebra4.Rxa" ("_position" S)
###                           ("\<^const>Algebra4.NPOW" ("_position" t)
###                             ("_position" S) ("_position" m)))
###                         ("\<^const>Algebra4.aGroup.pop_indexed"
###                           ("_applC" ("_position" fst) ("_position" gh))
###                           ("_index" ("_position" R))
###                           ("\<^const>Algebra4.aGroup.mop_indexed"
###                             ("_index" ("_position" R))
###                             ("_applC" ("_position" fst)
###                               ("_position" gh1)))))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" deg)
###                       ("_cargs" ("_position" R)
###                         ("_cargs" ("_position" S)
###                           ("_cargs" ("_position" X)
###                             ("_applC" ("_position" snd)
###                               ("_position" gh1))))))
###                     ("_applC" ("_position" deg)
###                       ("_cargs" ("_position" R')
###                         ("_cargs"
###                           ("\<^const>Algebra4.QRING" ("_position" S)
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("_position" t)))
###                           ("_cargs" ("_position" Y)
###                             ("_applC" ("_position" erH)
###                               ("_cargs" ("_position" R)
###                                 ("_cargs" ("_position" S)
###                                   ("_cargs" ("_position" X)
###                                     ("_cargs" ("_position" R')
### ("_cargs"
###   ("\<^const>Algebra4.QRING" ("_position" S)
###     ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t)))
###   ("_cargs" ("_position" Y)
###     ("_cargs"
###       ("_applC" ("_position" pj)
###         ("_cargs" ("_position" S)
###           ("\<^const>Algebra4.Rxa" ("_position" S) ("_position" t))))
###       ("_applC" ("_position" fst) ("_position" gh1)))))))))))))))
###                   ("_applC" ("_position" deg)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X) ("_position" f))))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" P_mod)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_cargs"
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("\<^const>Algebra4.NPOW" ("_position" t)
###                                 ("_position" S) ("_position" m)))
###                             ("\<^const>Algebra4.aGroup.pop_indexed"
###                               ("_applC" ("_position" snd) ("_position" gh))
###                               ("_index" ("_position" R))
###                               ("\<^const>Algebra4.aGroup.mop_indexed"
###                                 ("_index" ("_position" R))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" gh1)))))))))
###                   ("_applC" ("_position" P_mod)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" S)
###                         ("_cargs" ("_position" X)
###                           ("_cargs"
###                             ("\<^const>Algebra4.Rxa" ("_position" S)
###                               ("\<^const>Algebra4.NPOW" ("_position" t)
###                                 ("_position" S)
###                                 ("_applC" ("_position" Suc)
###                                   ("_position" m))))
###                             ("\<^const>Algebra4.aGroup.pop_indexed"
###                               ("_position" f) ("_index" ("_position" R))
###                               ("\<^const>Algebra4.aGroup.mop_indexed"
###                                 ("_index" ("_position" R))
###                                 ("\<^const>Algebra4.Ring.tp_indexed"
###                                   ("_applC" ("_position" fst)
###                                     ("_position" gh1))
###                                   ("_index" ("_position" R))
###                                   ("_applC" ("_position" snd)
###                                     ("_position" gh1)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  Hensel_pair ::
    "('a, 'b) Ring_scheme
     => ('a, 'c) Ring_scheme
        => 'a => 'a => ('a set, 'm) Ring_scheme
                       => 'a set => 'a => 'a => 'a => nat => 'a * 'a"
### theory "Group-Ring-Module.Algebra6"
### 1.893s elapsed time, 2.200s cpu time, 0.411s GC time
Loading theory "Group-Ring-Module.Algebra7" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9" via "Group-Ring-Module.Algebra8")
locale Module
  fixes M :: "('a, 'b, 'c) Module_scheme"  (structure)
    and R :: "('b, 'd) Ring_scheme"  (structure)
  assumes "Module M R"
[| R module N; R module M; invmfun R M N f : mHom R N M; ?m : carrier N |]
==> invmfun R M N f ?m : carrier M
[| ?R module ?M; ?R module ?N; ?f : mHom ?R ?M ?N |]
==> ?f\<^sup>\<flat>\<^bsub>?R ?M, ?N\<^esub>
    : mHom ?R (?M /\<^sub>m (ker\<^bsub>?M,?N\<^esub> ?f)) ?N
consts
  natm :: "('a, 'm) aGroup_scheme => nat => 'a => 'a"
[| ?R module ?M; submodule ?R ?M ?H |]
==> mpj ?M ?H : mHom ?R ?M (?M /\<^sub>m ?H)
### theory "Group-Ring-Module.Algebra7"
### 2.093s elapsed time, 2.487s cpu time, 0.527s GC time
Loading theory "Group-Ring-Module.Algebra8" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1" via "Group-Ring-Module.Algebra9")
### theory "Group-Ring-Module.Algebra8"
### 0.860s elapsed time, 1.029s cpu time, 0.231s GC time
Loading theory "Group-Ring-Module.Algebra9" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2" via "Draft.Valuation1")
[| R module Zm R e; R module M3; R module ?N; z1 : mHom R M3 (Zm R e);
   ?g : mHom R (Zm R e) ?N |]
==> compos M3 ?g z1 : mHom R M3 ?N
[| R module M1; R module M2; R module ?L; f : mHom R M1 M2;
   ?f : mHom R M2 ?L |]
==> sup_sharp R M1 M2 ?L f ?f : mHom R M1 ?L
consts
  add_set :: "('a => 'a => 'a) => 'a set => nat => 'a set"
consts
  aSum :: "('a, 'm) aGroup_scheme => nat => 'a => 'a"
### Ambiguous input (line 4200 of "$AFP/Group-Ring-Module/Algebra9.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>fm_gen_by_prod" ("_position" R) ("_position" P)
###       ("_position" M) ("_position" N))
###     ("\<^const>HOL.conj"
###       ("\<^const>Algebra7.MODULE" ("_position" R) ("_position" P))
###       ("_applC" ("_position" free_generator)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" P)
###             ("\<^const>Algebra9.prod_carr" ("_position" M)
###               ("_position" N))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>fm_gen_by_prod" ("_position" R) ("_position" P) ("_position" M)
###     ("\<^const>HOL.iff" ("_position" N)
###       ("\<^const>HOL.conj"
###         ("\<^const>Algebra7.MODULE" ("_position" R) ("_position" P))
###         ("_applC" ("_position" free_generator)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" P)
###               ("\<^const>Algebra9.prod_carr" ("_position" M)
###                 ("_position" N)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>fm_gen_by_prod" ("_position" R) ("_position" P)
###       ("_position" M)
###       ("\<^const>HOL.iff" ("_position" N)
###         ("\<^const>Algebra7.MODULE" ("_position" R) ("_position" P))))
###     ("_applC" ("_position" free_generator)
###       ("_cargs" ("_position" R)
###         ("_cargs" ("_position" P)
###           ("\<^const>Algebra9.prod_carr" ("_position" M)
###             ("_position" N)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Algebra7.MODULE"
###       ("\<^fixed>fm_gen_by_prod" ("_position" R) ("_position" P)
###         ("_position" M)
###         ("\<^const>HOL.iff" ("_position" N) ("_position" R)))
###       ("_position" P))
###     ("_applC" ("_position" free_generator)
###       ("_cargs" ("_position" R)
###         ("_cargs" ("_position" P)
###           ("\<^const>Algebra9.prod_carr" ("_position" M)
###             ("_position" N)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4420 of "$AFP/Group-Ring-Module/Algebra9.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>tensor_relations" ("_position" R) ("_position" M)
###       ("_position" N) ("_position" MN))
###     ("\<^const>Algebra9.Least_submodule" ("_position" R) ("_position" MN)
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Algebra9.tensor_relations1" ("_position" R)
###               ("_position" M) ("_position" N) ("_position" MN))
###             ("\<^const>Algebra9.tensor_relations2" ("_position" R)
###               ("_position" M) ("_position" N) ("_position" MN)))
###           ("\<^const>Algebra9.tensor_relations3" ("_position" R)
###             ("_position" M) ("_position" N) ("_position" MN)))
###         ("\<^const>Algebra9.tensor_relations4" ("_position" R)
###           ("_position" M) ("_position" N) ("_position" MN))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>tensor_relations" ("_position" R) ("_position" M)
###     ("_position" N)
###     ("\<^const>HOL.eq" ("_position" MN)
###       ("\<^const>Algebra9.Least_submodule" ("_position" R) ("_position" MN)
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("\<^const>Algebra9.tensor_relations1" ("_position" R)
###                 ("_position" M) ("_position" N) ("_position" MN))
###               ("\<^const>Algebra9.tensor_relations2" ("_position" R)
###                 ("_position" M) ("_position" N) ("_position" MN)))
###             ("\<^const>Algebra9.tensor_relations3" ("_position" R)
###               ("_position" M) ("_position" N) ("_position" MN)))
###           ("\<^const>Algebra9.tensor_relations4" ("_position" R)
###             ("_position" M) ("_position" N) ("_position" MN)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Group-Ring-Module.Algebra9"
### 2.483s elapsed time, 3.003s cpu time, 0.705s GC time
Loading theory "Draft.Valuation1" (required by "Draft.Valuation2MoreTemplates" via "Draft.Valuation2")
consts
  m_max :: "nat => (nat => nat) => nat"
consts
  m_zmax :: "nat => (nat => int) => int"
[| Ring (Vr K v); ideal (Vr K v) (vp K v); I <= vp K v; ?B <= vp K v |]
==> I \<minusplus>\<^bsub>Vr K v\<^esub> ?B <= vp K v
[| Ring K; b\<^bsup>\<hyphen> K\<^esup> : carrier K; ?y : carrier K;
   ?z : carrier K |]
==> (?y \<plusminus>\<^bsub>K\<^esub> ?z) \<cdot>\<^sub>r\<^bsub>K\<^esub>
    b\<^bsup>\<hyphen> K\<^esup> =
    ?y \<cdot>\<^sub>r\<^bsub>K\<^esub>
    b\<^bsup>\<hyphen> K\<^esup> \<plusminus>\<^bsub>K\<^esub>
    ?z \<cdot>\<^sub>r\<^bsub>K\<^esub> b\<^bsup>\<hyphen> K\<^esup>
### theory "Draft.Valuation1"
### 1.840s elapsed time, 3.599s cpu time, 2.415s GC time
Loading theory "Draft.Valuation2" (required by "Draft.Valuation2MoreTemplates")
[| Ring ?R; ideal ?R ?I; ALL j<=?n. ?f j : ?I |]
==> \<Sigma>\<^sub>e ?R ?f ?n : ?I
### theory "Draft.Valuation2"
### 0.972s elapsed time, 1.089s cpu time, 0.165s GC time
Loading theory "Draft.Valuation2MoreTemplates"
val templateLemmas =
   [("Valuation2.transpos_eq", "(\<tau>\<^bsub>0 0\<^esub>) ?k = ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Valuation2.K_gamma_hom",
     "?k <= ?n ==> ALL j<=?n. \<gamma>\<^bsub>?k j\<^esub> : Zset",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Valuation2.Nset_have_two",
     "?j : {h. h <= Suc ?n} ==> EX m:{h. h <= Suc ?n}. ?j ~= m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 5, t_empty)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Valuation2MoreTemplates"
### 0.471s elapsed time, 0.700s cpu time, 0.088s GC time
val it = (): unit
