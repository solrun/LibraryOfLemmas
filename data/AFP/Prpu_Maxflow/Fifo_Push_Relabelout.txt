Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.578s cpu time, 0.067s GC time
Loading theory "Draft.Generic_Push_Relabel" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.Fifo_Push_Relabel")
### theory "HOL-Library.Set_Algebras"
### 0.262s elapsed time, 1.043s cpu time, 0.067s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Labeling c s t f l"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 73 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_Update" ("_position" f)
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_Update" ("_position" f)
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_applC" ("_position" f)
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_Update" ("_position" f)
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_Update" ("_position" f)
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_applC" ("_position" f)
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_applC" ("_position" f)
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_applC" ("_position" f)
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 96 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("\<^const>Set.union" ("_position" E)
###         ("\<^const>Relation.converse" ("_position" E)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_Update" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_updbinds"
###           ("_updbind"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" v)
###                     ("_tuple_arg" ("_position" u)))))
###               ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("\<^const>Set.union" ("_position" E)
###         ("\<^const>Relation.converse" ("_position" E)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_applC" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_tuple"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_tuple_arg"
###             ("\<^const>Ref.update"
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cf_of)
###                   ("_cargs" ("_position" f)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u)))))
###                 ("_position" \<Delta>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("_applC" ("_position" cfE_of) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_Update" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_updbinds"
###           ("_updbind"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" v)
###                     ("_tuple_arg" ("_position" u)))))
###               ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("_applC" ("_position" cfE_of) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_applC" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_tuple"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_tuple_arg"
###             ("\<^const>Ref.update"
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cf_of)
###                   ("_cargs" ("_position" f)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u)))))
###                 ("_position" \<Delta>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" augment_edge_cf) ("_position" cf))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("_Update" ("_position" cf)
###       ("_updbinds"
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>)))
###         ("_updbind"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" augment_edge_cf) ("_position" cf))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("_applC" ("_position" cf)
###       ("_tuple"
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>)))
###         ("_tuple_arg"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 309 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel_effect)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_Update" ("_position" l)
###     ("_updbind" ("_position" u)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" Min)
###           ("_Setcompr" ("_applC" ("_position" l) ("_position" v))
###             ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_applC" ("_position" cfE_of) ("_position" f)))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel_effect)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_applC" ("_position" l)
###     ("\<^const>Ref.update" ("_position" u)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" Min)
###           ("_Setcompr" ("_applC" ("_position" l) ("_position" v))
###             ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_applC" ("_position" cfE_of) ("_position" f)))))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 324 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" pp_init_l)
###   ("_Update" ("_lambda" ("_position" x) ("\<^const>Groups.zero_class.zero"))
###     ("_updbind" ("_position" s)
###       ("_applC" ("_position" card) ("_position" V)))))
### ("\<^const>Pure.eq" ("_position" pp_init_l)
###   ("_applC" ("_lambda" ("_position" x) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>Ref.update" ("_position" s)
###       ("_applC" ("_position" card) ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.284s cpu time, 0.899s GC time
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Labeling c s t f l"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.666s cpu time, 0.877s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale push_effect_locale
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
    and u :: "nat"
    and v :: "nat"
  assumes "push_effect_locale c s t f l u v"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
Found termination order: "size <*mlex*> {}"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
### theory "HOL-Library.Tree"
### 2.023s elapsed time, 6.261s cpu time, 1.125s GC time
Loading theory "Draft.Templates" (required by "Draft.Fifo_Push_RelabelTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fifo_Push_RelabelTemplates")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.791s elapsed time, 1.924s cpu time, 0.878s GC time
Proofs for inductive predicate(s) "pr_algo_ltsp"
  Proving monotonicity ...
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale push_effect_locale
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
    and u :: "nat"
    and v :: "nat"
  assumes "push_effect_locale c s t f l u v"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "pr_algo_lts'p"
  Proving monotonicity ...
Found termination order: "{}"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "{}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "pr_algo_relp"
  Proving monotonicity ...
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "gap_algo_relp"
  Proving monotonicity ...
### theory "Draft.Generic_Push_Relabel"
### 6.881s elapsed time, 12.711s cpu time, 3.191s GC time
Loading theory "Draft.Fifo_Push_Relabel" (required by "Draft.Fifo_Push_RelabelTemplates")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 30 of "$AFP/Prpu_Maxflow/Fifo_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_push)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" Q))))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" push_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" Labeling)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t)
###                       ("_cargs" ("_position" f) ("_position" l))))))))
###           ("_do_cons"
###             ("_do_let" ("_position" Q)
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.not_equal" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" v)
###                       ("_position" t))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" excess)
###                         ("_cargs" ("_position" f) ("_position" v)))
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("\<^const>List.append" ("_position" Q)
###                   ("_list" ("_position" v)))
###                 ("_position" Q)))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_tuple"
###                   ("_applC" ("_position" push_effect)
###                     ("_cargs" ("_position" f)
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" v)))))
###                   ("_tuple_arg" ("_position" Q)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_push)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" Q))))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" push_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" Labeling)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t)
###                       ("_cargs" ("_position" f) ("_position" l))))))))
###           ("_do_cons"
###             ("_do_let" ("_position" Q)
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.not_equal" ("_position" v) ("_position" s))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" v)
###                       ("_position" t))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" excess)
###                         ("_cargs" ("_position" f) ("_position" v)))
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("\<^const>List.append" ("_position" Q)
###                   ("_list" ("_position" v)))
###                 ("_position" Q)))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_tuple"
###                   ("_applC" ("_position" push_effect)
###                     ("_cargs" ("_position" f)
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" v)))))
###                   ("_tuple_arg" ("_position" Q)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Prpu_Maxflow/Fifo_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_gap_relabel)
###     ("_cargs" ("_position" f)
###       ("_cargs" ("_position" l)
###         ("_cargs" ("_position" Q) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" Height_Bounded_Labeling)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" t)
###                     ("_cargs" ("_position" f) ("_position" l))))))))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("\<^const>List.append" ("_position" Q)
###               ("_list" ("_position" u))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("_applC" ("_position" relabel_precond)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l) ("_position" u))))))
###             ("_do_cons"
###               ("_do_then"
###                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less"
###                       ("_applC" ("_position" l) ("_position" u))
###                       ("\<^const>Groups.times_class.times"
###                         ("_Numeral" ("_constify" ("_position" 2)))
###                         ("_applC" ("_position" card) ("_position" V))))
###                     ("\<^const>Orderings.ord_class.less"
###                       ("_applC" ("_position" relabel_effect)
###                         ("_cargs" ("_position" f)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" u) ("_position" u)))))
###                       ("\<^const>Groups.times_class.times"
###                         ("_Numeral" ("_constify" ("_position" 2)))
###                         ("_applC" ("_position" card) ("_position" V)))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" l)
###                   ("_applC" ("_position" gap_relabel_effect)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l) ("_position" u)))))
###                 ("_do_final"
###                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                     ("_tuple" ("_position" l)
###                       ("_tuple_arg" ("_position" Q)))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_gap_relabel)
###     ("_cargs" ("_position" f)
###       ("_cargs" ("_position" l)
###         ("_cargs" ("_position" Q) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" Height_Bounded_Labeling)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" t)
###                     ("_cargs" ("_position" f) ("_position" l))))))))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("\<^const>List.append" ("_position" Q)
###               ("_list" ("_position" u))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("_applC" ("_position" relabel_precond)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l) ("_position" u))))))
###             ("_do_cons"
###               ("_do_then"
###                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less"
###                       ("_applC" ("_position" l) ("_position" u))
###                       ("\<^const>Groups.times_class.times"
###                         ("_Numeral" ("_constify" ("_position" 2)))
###                         ("_applC" ("_position" card) ("_position" V))))
###                     ("\<^const>Orderings.ord_class.less"
###                       ("_applC" ("_position" relabel_effect)
###                         ("_cargs" ("_position" f)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" u) ("_position" u)))))
###                       ("\<^const>Groups.times_class.times"
###                         ("_Numeral" ("_constify" ("_position" 2)))
###                         ("_applC" ("_position" card) ("_position" V)))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" l)
###                   ("_applC" ("_position" gap_relabel_effect)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l) ("_position" u)))))
###                 ("_do_final"
###                   ("_applC" ("\<^const>Heap_Monad.return")
###                     ("_tuple" ("_position" l)
###                       ("_tuple_arg" ("_position" Q)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Prpu_Maxflow/Fifo_Push_Relabel.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Heap_Monad.return")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Refine_Basic.RETURN")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" fifo_discharge)
###     ("_cargs" ("_position" f\<^sub>0)
###       ("_cargs" ("_position" l) ("_position" Q))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.not_equal" ("_position" Q)
###             ("\<^const>List.list.Nil"))))
###       ("_do_cons"
###         ("_do_let" ("_position" u)
###           ("_applC" ("_position" hd) ("_position" Q)))
###         ("_do_cons"
###           ("_do_let" ("_position" Q)
###             ("_applC" ("_position" tl) ("_position" Q)))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.member" ("_position" u) ("_position" V))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" s))
###                     ("\<^const>HOL.not_equal" ("_position" u)
###                       ("_position" t))))))
###             ("_do_cons"
###               ("_do_bind"
###                 ("_pattern" ("_position" f)
###                   ("_patterns" ("_position" l) ("_position" Q)))
###                 ("_applC" ("_position" FOREACHc)
###                   ("_cargs"
###                     ("_Coll" ("_position" v)
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" v)))
###                         ("_applC" ("_position" cfE_of)
###                           ("_position" f\<^sub>0))))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" f)
###                           ("_patterns" ("_position" l) ("_position" Q)))
###                         ("\<^const>HOL.not_equal"
###                           ("_applC" ("_position" excess)
###                             ("_cargs" ("_position" f) ("_position" u)))
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns" ("_position" v)
###                             ("_pattern" ("_position" f)
###                               ("_patterns" ("_position" l)
###                                 ("_position" Q))))
###                           ("_do_block"
###                             ("_do_final"
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" l) ("_position" u))
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" l)
### ("_position" v))
###                                     ("\<^const>Groups.one_class.one")))
###                                 ("_do_block"
###                                   ("_do_cons"
###                                     ("_do_bind"
### ("_pattern" ("_position" f') ("_position" Q))
### ("_applC" ("_position" fifo_push)
###   ("_cargs" ("_position" f)
###     ("_cargs" ("_position" l)
###       ("_cargs" ("_position" Q)
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))))))
###                                     ("_do_cons"
### ("_do_then"
###   ("_applC" ("\<^const>Refine_Basic.ASSERT")
###     ("\<^const>HOL.All_binder" ("_position" v')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.not_equal" ("_position" v') ("_position" v))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f')
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v')))))
###           ("_applC" ("_position" cf_of)
###             ("_cargs" ("_position" f)
###               ("_tuple" ("_position" u)
###                 ("_tuple_arg" ("_position" v'))))))))))
### ("_do_final"
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_tuple" ("_position" f')
###       ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" Q)))))))))
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_arg" ("_position" Q)))))))))
###                         ("_tuple" ("_position" f\<^sub>0)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q)))))))))
###               ("_do_final"
###                 ("\<^const>HOL.If"
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" excess)
###                       ("_cargs" ("_position" f) ("_position" u)))
###                     ("\<^const>Groups.zero_class.zero"))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_bind"
###                         ("_pattern" ("_position" l) ("_position" Q))
###                         ("_applC" ("_position" fifo_gap_relabel)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" Q) ("_position" u))))))
###                       ("_do_final"
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_tuple" ("_position" f)
###                             ("_tuple_args" ("_position" l)
###                               ("_tuple_arg" ("_position" Q))))))))
###                   ("_do_block"
###                     ("_do_final"
###                       ("_applC" ("\<^const>Refine_Basic.RETURN")
###                         ("_tuple" ("_position" f)
###                           ("_tuple_args" ("_position" l)
###                             ("_tuple_arg" ("_position" Q))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 296 of "$AFP/Prpu_Maxflow/Fifo_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" fifo_push_relabel)
###   ("_do_block"
###     ("_do_cons" ("_do_let" ("_position" f) ("_position" pp_init_f))
###       ("_do_cons" ("_do_let" ("_position" l) ("_position" pp_init_l))
###         ("_do_cons"
###           ("_do_bind" ("_position" Q)
###             ("\<^const>Refine_Basic.SPEC_binder" ("_position" l)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" distinct) ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" set) ("_position" l))
###                   ("_Collect" ("_position" v)
###                     ("\<^const>Groups.minus_class.minus" ("_position" V)
###                       ("_Finset" ("_args" ("_position" s) ("_position" t))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" excess)
###                         ("_cargs" ("_position" f) ("_position" v)))
###                       ("\<^const>Groups.zero_class.zero")))))))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" l) ("_idtdummy")))
###               ("_applC" ("\<^const>Refine_While.WHILET")
###                 ("_cargs"
###                   ("_lambda"
###                     ("_pattern" ("_position" f)
###                       ("_patterns" ("_position" l) ("_position" Q)))
###                     ("\<^const>HOL.not_equal" ("_position" Q)
###                       ("\<^const>List.list.Nil")))
###                   ("_cargs"
###                     ("_lambda"
###                       ("_pattern" ("_position" f)
###                         ("_patterns" ("_position" l) ("_position" Q)))
###                       ("_do_block"
###                         ("_do_final"
###                           ("_applC" ("_position" fifo_discharge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" l)
###                                 ("_position" Q)))))))
###                     ("_tuple" ("_position" f)
###                       ("_tuple_args" ("_position" l)
###                         ("_tuple_arg" ("_position" Q))))))))
###             ("_do_cons"
###               ("_do_then"
###                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                   ("_applC" ("_position" Height_Bounded_Labeling)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" s)
###                         ("_cargs" ("_position" t)
###                           ("_cargs" ("_position" f) ("_position" l))))))))
###               ("_do_final"
###                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("_position" fifo_push_relabel)
###   ("_do_block"
###     ("_do_cons" ("_do_let" ("_position" f) ("_position" pp_init_f))
###       ("_do_cons" ("_do_let" ("_position" l) ("_position" pp_init_l))
###         ("_do_cons"
###           ("_do_bind" ("_position" Q)
###             ("\<^const>Refine_Basic.SPEC_binder" ("_position" l)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" distinct) ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" set) ("_position" l))
###                   ("_Collect" ("_position" v)
###                     ("\<^const>Groups.minus_class.minus" ("_position" V)
###                       ("_Finset" ("_args" ("_position" s) ("_position" t))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" excess)
###                         ("_cargs" ("_position" f) ("_position" v)))
###                       ("\<^const>Groups.zero_class.zero")))))))
###           ("_do_cons"
###             ("_do_bind"
###               ("_pattern" ("_position" f)
###                 ("_patterns" ("_position" l) ("_idtdummy")))
###               ("_applC" ("\<^const>Refine_While.WHILET")
###                 ("_cargs"
###                   ("_lambda"
###                     ("_pattern" ("_position" f)
###                       ("_patterns" ("_position" l) ("_position" Q)))
###                     ("\<^const>HOL.not_equal" ("_position" Q)
###                       ("\<^const>List.list.Nil")))
###                   ("_cargs"
###                     ("_lambda"
###                       ("_pattern" ("_position" f)
###                         ("_patterns" ("_position" l) ("_position" Q)))
###                       ("_do_block"
###                         ("_do_final"
###                           ("_applC" ("_position" fifo_discharge)
###                             ("_cargs" ("_position" f)
###                               ("_cargs" ("_position" l)
###                                 ("_position" Q)))))))
###                     ("_tuple" ("_position" f)
###                       ("_tuple_args" ("_position" l)
###                         ("_tuple_arg" ("_position" Q))))))))
###             ("_do_cons"
###               ("_do_then"
###                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                   ("_applC" ("_position" Height_Bounded_Labeling)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" s)
###                         ("_cargs" ("_position" t)
###                           ("_cargs" ("_position" f) ("_position" l))))))))
###               ("_do_final"
###                 ("_applC" ("\<^const>Heap_Monad.return")
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Fifo_Push_Relabel"
### 1.317s elapsed time, 1.518s cpu time, 0.123s GC time
Loading theory "Draft.Fifo_Push_RelabelTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Fifo_Push_RelabelTemplates"
### 2.446s elapsed time, 2.868s cpu time, 0.283s GC time
val it = (): unit
