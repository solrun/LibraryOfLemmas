Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.561s cpu time, 0.065s GC time
Loading theory "Draft.Generic_Push_Relabel" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.Prpu_Common_Impl" via "Draft.Prpu_Common_Inst")
### theory "HOL-Library.Set_Algebras"
### 0.246s elapsed time, 0.997s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Labeling c s t f l"
Found termination order: "size <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 73 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_Update" ("_position" f)
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_Update" ("_position" f)
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_applC" ("_position" f)
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_Update" ("_position" f)
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_Update" ("_position" f)
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_applC" ("_position" f)
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" augment_edge) ("_position" f))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###         ("_position" E))
###       ("_applC" ("_position" f)
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" f)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>))))
###       ("\<^const>HOL.If"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("_position" E))
###         ("_applC" ("_position" f)
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" f)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))
###         ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 96 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("\<^const>Set.union" ("_position" E)
###         ("\<^const>Relation.converse" ("_position" E)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_Update" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_updbinds"
###           ("_updbind"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" v)
###                     ("_tuple_arg" ("_position" u)))))
###               ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("\<^const>Set.union" ("_position" E)
###         ("\<^const>Relation.converse" ("_position" E)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_applC" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_tuple"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_tuple_arg"
###             ("\<^const>Ref.update"
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cf_of)
###                   ("_cargs" ("_position" f)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u)))))
###                 ("_position" \<Delta>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 120 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("_applC" ("_position" cfE_of) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_Update" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_updbinds"
###           ("_updbind"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_updbind"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" v)
###                     ("_tuple_arg" ("_position" u)))))
###               ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###       ("_applC" ("_position" cfE_of) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cf_of)
###         ("_applC" ("_position" augment_edge)
###           ("_cargs" ("_position" f)
###             ("_cargs"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_position" \<Delta>)))))
###       ("_applC" ("_applC" ("_position" cf_of) ("_position" f))
###         ("_tuple"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###             ("\<^const>Groups.minus_class.minus"
###               ("_applC" ("_position" cf_of)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v)))))
###               ("_position" \<Delta>)))
###           ("_tuple_arg"
###             ("\<^const>Ref.update"
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cf_of)
###                   ("_cargs" ("_position" f)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u)))))
###                 ("_position" \<Delta>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" augment_edge_cf) ("_position" cf))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("_Update" ("_position" cf)
###       ("_updbinds"
###         ("_updbind"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>)))
###         ("_updbind"
###           ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" augment_edge_cf) ("_position" cf))
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" u) ("_position" v))
###       ("_position" \<Delta>))
###     ("_applC" ("_position" cf)
###       ("_tuple"
###         ("\<^const>Ref.update"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" cf)
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v))))
###             ("_position" \<Delta>)))
###         ("_tuple_arg"
###           ("\<^const>Ref.update"
###             ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u)))
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" cf)
###                 ("_tuple" ("_position" v) ("_tuple_arg" ("_position" u))))
###               ("_position" \<Delta>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale NPreflow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NPreflow c s t f"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.939s elapsed time, 3.621s cpu time, 0.416s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 309 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel_effect)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_Update" ("_position" l)
###     ("_updbind" ("_position" u)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" Min)
###           ("_Setcompr" ("_applC" ("_position" l) ("_position" v))
###             ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_applC" ("_position" cfE_of) ("_position" f)))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel_effect)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_applC" ("_position" l)
###     ("\<^const>Ref.update" ("_position" u)
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" Min)
###           ("_Setcompr" ("_applC" ("_position" l) ("_position" v))
###             ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("_applC" ("_position" cfE_of) ("_position" f)))))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/Prpu_Maxflow/Generic_Push_Relabel.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" pp_init_l)
###   ("_Update" ("_lambda" ("_position" x) ("\<^const>Groups.zero_class.zero"))
###     ("_updbind" ("_position" s)
###       ("_applC" ("_position" card) ("_position" V)))))
### ("\<^const>Pure.eq" ("_position" pp_init_l)
###   ("_applC" ("_lambda" ("_position" x) ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>Ref.update" ("_position" s)
###       ("_applC" ("_position" card) ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### theory "HOL-Library.BigO"
### 1.058s elapsed time, 3.772s cpu time, 1.022s GC time
Found termination order: "size <*mlex*> {}"
locale Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Labeling c s t f l"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale push_effect_locale
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
    and u :: "nat"
    and v :: "nat"
  assumes "push_effect_locale c s t f l u v"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
Found termination order: "size <*mlex*> {}"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
### theory "HOL-Library.Tree"
### 2.142s elapsed time, 6.512s cpu time, 1.274s GC time
Loading theory "Draft.Templates" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Prpu_Common_ImplTemplates")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.803s elapsed time, 1.941s cpu time, 0.880s GC time
Proofs for inductive predicate(s) "pr_algo_ltsp"
  Proving monotonicity ...
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale push_effect_locale
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
    and u :: "nat"
    and v :: "nat"
  assumes "push_effect_locale c s t f l u v"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "pr_algo_lts'p"
  Proving monotonicity ...
Found termination order: "{}"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
locale Height_Bounded_Labeling
  fixes c :: "nat * nat => 'a"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'a"
    and l :: "nat => nat"
  assumes "Height_Bounded_Labeling c s t f l"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Found termination order: "{}"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "pr_algo_relp"
  Proving monotonicity ...
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
Proofs for inductive predicate(s) "gap_algo_relp"
  Proving monotonicity ...
### theory "Draft.Generic_Push_Relabel"
### 6.985s elapsed time, 12.964s cpu time, 3.325s GC time
Loading theory "Draft.Prpu_Common_Inst" (required by "Draft.Prpu_Common_ImplTemplates" via "Draft.Prpu_Common_Impl")
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### Ambiguous input (line 9 of "$AFP/Prpu_Maxflow/Prpu_Common_Inst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("_applC" ("_position" Height_Bounded_Labeling)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" t)
###                   ("_cargs" ("_position" f) ("_position" l))))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" relabel_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l) ("_position" u))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>Set.member" ("_position" u)
###                 ("\<^const>Groups.minus_class.minus" ("_position" V)
###                   ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" relabel_effect)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l) ("_position" u)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("_applC" ("_position" Height_Bounded_Labeling)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" t)
###                   ("_cargs" ("_position" f) ("_position" l))))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" relabel_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l) ("_position" u))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>Set.member" ("_position" u)
###                 ("\<^const>Groups.minus_class.minus" ("_position" V)
###                   ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return")
###               ("_applC" ("_position" relabel_effect)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l) ("_position" u)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Prpu_Maxflow/Prpu_Common_Inst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_relabel)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" Height_Bounded_Labeling)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" t)
###                     ("_cargs" ("_position" f) ("_position" l))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" relabel_precond)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l) ("_position" u))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" l) ("_position" u))
###                     ("\<^const>Groups.times_class.times"
###                       ("_Numeral" ("_constify" ("_position" 2)))
###                       ("_applC" ("_position" card) ("_position" V))))
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" relabel_effect)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" u) ("_position" u)))))
###                     ("\<^const>Groups.times_class.times"
###                       ("_Numeral" ("_constify" ("_position" 2)))
###                       ("_applC" ("_position" card) ("_position" V)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" gap_relabel_effect)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l) ("_position" u))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_relabel)
###     ("_cargs" ("_position" f) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" Height_Bounded_Labeling)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" t)
###                     ("_cargs" ("_position" f) ("_position" l))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" relabel_precond)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l) ("_position" u))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" l) ("_position" u))
###                     ("\<^const>Groups.times_class.times"
###                       ("_Numeral" ("_constify" ("_position" 2)))
###                       ("_applC" ("_position" card) ("_position" V))))
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" relabel_effect)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" u) ("_position" u)))))
###                     ("\<^const>Groups.times_class.times"
###                       ("_Numeral" ("_constify" ("_position" 2)))
###                       ("_applC" ("_position" card) ("_position" V)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_applC" ("_position" gap_relabel_effect)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l) ("_position" u))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 24 of "$AFP/Prpu_Maxflow/Prpu_Common_Inst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push) ("_cargs" ("_position" f) ("_position" l)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" push_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" Labeling)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t)
###                       ("_cargs" ("_position" f) ("_position" l))))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" push_effect)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push) ("_cargs" ("_position" f) ("_position" l)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("_applC" ("_position" push_precond)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" l)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("_applC" ("_position" Labeling)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" t)
###                       ("_cargs" ("_position" f) ("_position" l))))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return")
###               ("_applC" ("_position" push_effect)
###                 ("_cargs" ("_position" f)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Prpu_Common_Inst"
### 0.541s elapsed time, 0.597s cpu time, 0.058s GC time
Loading theory "Draft.Prpu_Common_Impl" (required by "Draft.Prpu_Common_ImplTemplates")
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 18 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" x_init)
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.eq" ("_position" x_init)
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_get) ("_cargs" ("_position" x) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" x) ("_position" u)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_get) ("_cargs" ("_position" x) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" x) ("_position" u)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_Update" ("_position" x)
###             ("_updbind" ("_position" u)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" x) ("_position" u))
###                 ("_position" \<Delta>)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_Update" ("_position" x)
###             ("_updbind" ("_position" u)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" x) ("_position" u))
###                 ("_position" \<Delta>)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" x)
###             ("\<^const>Ref.update" ("_position" u)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" x) ("_position" u))
###                 ("_position" \<Delta>)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" x)
###             ("\<^const>Ref.update" ("_position" u)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" x) ("_position" u))
###                 ("_position" \<Delta>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" l_init) ("_position" C))
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_applC" ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Ref.update" ("_position" s) ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" l_init) ("_position" C))
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_applC" ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Ref.update" ("_position" s) ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" l_init) ("_position" C))
###   ("_applC" ("\<^const>Heap_Monad.return")
###     ("_Update" ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###       ("_updbind" ("_position" s) ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" l_init) ("_position" C))
###   ("_applC" ("\<^const>Refine_Basic.RETURN")
###     ("_Update" ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###       ("_updbind" ("_position" s) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" l) ("_position" u)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" l) ("_position" u)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_set)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" u) ("_position" a))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_applC" ("_position" card) ("_position" V))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" u) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_set)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" u) ("_position" a))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_applC" ("_position" card) ("_position" V))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" u) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_set)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" u) ("_position" a))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_applC" ("_position" card) ("_position" V))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_applC" ("_position" l)
###               ("\<^const>Ref.update" ("_position" u) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_set)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" u) ("_position" a))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_applC" ("_position" card) ("_position" V))))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("_applC" ("_position" l)
###               ("\<^const>Ref.update" ("_position" u) ("_position" a)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" cnt_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" C)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_Update"
###             ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###             ("_updbinds"
###               ("_updbind" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one")))
###               ("_updbind" ("_position" C)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" cnt_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" C)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_Update"
###             ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###             ("_updbinds"
###               ("_updbind" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one")))
###               ("_updbind" ("_position" C)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" cnt_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" C)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC"
###             ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###             ("_tuple"
###               ("\<^const>Ref.update" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one")))
###               ("_tuple_arg"
###                 ("\<^const>Ref.update" ("_position" C)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" cnt_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" C)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC"
###             ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero"))
###             ("_tuple"
###               ("\<^const>Ref.update" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one")))
###               ("_tuple_arg"
###                 ("\<^const>Ref.update" ("_position" C)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_get)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" cnt) ("_position" lv)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_get)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" cnt) ("_position" lv)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_Update" ("_position" cnt)
###             ("_updbind" ("_position" lv)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_Update" ("_position" cnt)
###             ("_updbind" ("_position" lv)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" cnt)
###             ("\<^const>Ref.update" ("_position" lv)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" lv)
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" cnt)
###             ("\<^const>Ref.update" ("_position" lv)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less" ("_position" lv)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))
###             ("\<^const>Orderings.ord_class.greater"
###               ("_applC" ("_position" cnt) ("_position" lv))
###               ("\<^const>Groups.zero_class.zero")))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_Update" ("_position" cnt)
###             ("_updbind" ("_position" lv)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less" ("_position" lv)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))
###             ("\<^const>Orderings.ord_class.greater"
###               ("_applC" ("_position" cnt) ("_position" lv))
###               ("\<^const>Groups.zero_class.zero")))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_Update" ("_position" cnt)
###             ("_updbind" ("_position" lv)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less" ("_position" lv)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))
###             ("\<^const>Orderings.ord_class.greater"
###               ("_applC" ("_position" cnt) ("_position" lv))
###               ("\<^const>Groups.zero_class.zero")))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" cnt)
###             ("\<^const>Ref.update" ("_position" lv)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr)
###     ("_cargs" ("_position" cnt) ("_position" lv)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less" ("_position" lv)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2))) ("_position" N)))
###             ("\<^const>Orderings.ord_class.greater"
###               ("_applC" ("_position" cnt) ("_position" lv))
###               ("\<^const>Groups.zero_class.zero")))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" cnt)
###             ("\<^const>Ref.update" ("_position" lv)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" cnt) ("_position" lv))
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Network_Impl
  fixes c :: "nat * nat => int"
    and s :: "nat"
    and t :: "nat"
    and N :: "nat"
  assumes "Network_Impl c s t N"
### Ambiguous input (line 142 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_Update" ("_position" x)
###                                   ("_updbinds"
###                                     ("_updbind" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_updbind" ("_position" v)
### ("_position" a)))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_Update" ("_position" cf)
###                                     ("_updbinds"
### ("_updbind" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_updbind" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###   ("_position" a)))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_applC" ("_position" x)
###                                   ("_tuple"
###                                     ("\<^const>Ref.update" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_tuple_arg"
### ("\<^const>Ref.update" ("_position" v) ("_position" a))))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_Update" ("_position" cf)
###                                     ("_updbinds"
### ("_updbind" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_updbind" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###   ("_position" a)))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_Update" ("_position" x)
###                                   ("_updbinds"
###                                     ("_updbind" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_updbind" ("_position" v)
### ("_position" a)))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_applC" ("_position" cf)
###                                     ("_tuple"
### ("\<^const>Ref.update"
###   ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_tuple_arg"
###   ("\<^const>Ref.update"
###     ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###     ("_position" a))))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_applC" ("_position" x)
###                                   ("_tuple"
###                                     ("\<^const>Ref.update" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_tuple_arg"
### ("\<^const>Ref.update" ("_position" v) ("_position" a))))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_applC" ("_position" cf)
###                                     ("_tuple"
### ("\<^const>Ref.update"
###   ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_tuple_arg"
###   ("\<^const>Ref.update"
###     ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###     ("_position" a))))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_Update" ("_position" x)
###                                   ("_updbinds"
###                                     ("_updbind" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_updbind" ("_position" v)
### ("_position" a)))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_Update" ("_position" cf)
###                                     ("_updbinds"
### ("_updbind" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_updbind" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###   ("_position" a)))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_applC" ("_position" x)
###                                   ("_tuple"
###                                     ("\<^const>Ref.update" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_tuple_arg"
### ("\<^const>Ref.update" ("_position" v) ("_position" a))))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_Update" ("_position" cf)
###                                     ("_updbinds"
### ("_updbind" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_updbind" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###   ("_position" a)))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_Update" ("_position" x)
###                                   ("_updbinds"
###                                     ("_updbind" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_updbind" ("_position" v)
### ("_position" a)))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_applC" ("_position" cf)
###                                     ("_tuple"
### ("\<^const>Ref.update"
###   ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_tuple_arg"
###   ("\<^const>Ref.update"
###     ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###     ("_position" a))))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### ("\<^const>Pure.eq" ("_position" pp_init_xcf2_aux)
###   ("_do_block"
###     ("_do_cons"
###       ("_do_let" ("_position" x)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_do_cons" ("_do_let" ("_position" cf) ("_position" c))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" s))
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_position" v)
###                     ("_pattern" ("_position" x) ("_position" cf)))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" s)
###                               ("_tuple_arg" ("_position" v)))
###                             ("_position" E))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>HOL.not_equal" ("_position" s)
###                               ("_position" v))))
###                         ("_do_cons"
###                           ("_do_let" ("_position" a)
###                             ("_applC" ("_position" cf)
###                               ("_tuple" ("_position" s)
###                                 ("_tuple_arg" ("_position" v)))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" x) ("_position" v))
###                                   ("\<^const>Groups.zero_class.zero"))))
###                             ("_do_cons"
###                               ("_do_let" ("_position" x)
###                                 ("_applC" ("_position" x)
###                                   ("_tuple"
###                                     ("\<^const>Ref.update" ("_position" s)
### ("\<^const>Groups.minus_class.minus"
###   ("_applC" ("_position" x) ("_position" s)) ("_position" a)))
###                                     ("_tuple_arg"
### ("\<^const>Ref.update" ("_position" v) ("_position" a))))))
###                               ("_do_cons"
###                                 ("_do_let" ("_position" cf)
###                                   ("_applC" ("_position" cf)
###                                     ("_tuple"
### ("\<^const>Ref.update"
###   ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###   ("\<^const>Groups.zero_class.zero"))
### ("_tuple_arg"
###   ("\<^const>Ref.update"
###     ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###     ("_position" a))))))
###                                 ("_do_final"
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" cf)))))))))))))
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" cf)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" pp_init_xcf2) ("_position" am))
###   ("_do_block"
###     ("_do_cons" ("_do_bind" ("_position" x) ("_position" x_init))
###       ("_do_cons" ("_do_bind" ("_position" cf) ("_position" cf_init))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>Set.member" ("_position" s) ("_position" V))))
###           ("_do_cons"
###             ("_do_bind" ("_position" adj)
###               ("_applC" ("_position" am_get)
###                 ("_cargs" ("_position" am) ("_position" s))))
###             ("_do_final"
###               ("_applC" ("_position" nfoldli)
###                 ("_cargs" ("_position" adj)
###                   ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns" ("_position" v)
###                           ("_pattern" ("_position" x) ("_position" cf)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" s)
###                                     ("_tuple_arg" ("_position" v)))
###                                   ("_position" E))))
###                             ("_do_cons"
###                               ("_do_then"
###                                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                   ("\<^const>HOL.not_equal" ("_position" s)
###                                     ("_position" v))))
###                               ("_do_cons"
###                                 ("_do_bind" ("_position" a)
###                                   ("_applC" ("_position" cf_get)
###                                     ("_cargs" ("_position" cf)
### ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v))))))
###                                 ("_do_cons"
###                                   ("_do_bind" ("_position" x)
###                                     ("_applC" ("_position" x_add)
### ("_cargs" ("_position" x)
###   ("_cargs" ("_position" s)
###     ("\<^const>Groups.uminus_class.uminus" ("_position" a))))))
###                                   ("_do_cons"
###                                     ("_do_bind" ("_position" x)
### ("_applC" ("_position" x_add)
###   ("_cargs" ("_position" x) ("_cargs" ("_position" v) ("_position" a)))))
###                                     ("_do_cons"
### ("_do_bind" ("_position" cf)
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf)
###       ("_cargs" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###         ("\<^const>Groups.zero_class.zero")))))
### ("_do_cons"
###   ("_do_bind" ("_position" cf)
###     ("_applC" ("_position" cf_set)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###           ("_position" a)))))
###   ("_do_final"
###     ("_applC" ("\<^const>Heap_Monad.return")
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" cf))))))))))))))
###                       ("_tuple" ("_position" x)
###                         ("_tuple_arg" ("_position" cf))))))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" pp_init_xcf2) ("_position" am))
###   ("_do_block"
###     ("_do_cons" ("_do_bind" ("_position" x) ("_position" x_init))
###       ("_do_cons" ("_do_bind" ("_position" cf) ("_position" cf_init))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>Set.member" ("_position" s) ("_position" V))))
###           ("_do_cons"
###             ("_do_bind" ("_position" adj)
###               ("_applC" ("_position" am_get)
###                 ("_cargs" ("_position" am) ("_position" s))))
###             ("_do_final"
###               ("_applC" ("_position" nfoldli)
###                 ("_cargs" ("_position" adj)
###                   ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns" ("_position" v)
###                           ("_pattern" ("_position" x) ("_position" cf)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" s)
###                                     ("_tuple_arg" ("_position" v)))
###                                   ("_position" E))))
###                             ("_do_cons"
###                               ("_do_then"
###                                 ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                   ("\<^const>HOL.not_equal" ("_position" s)
###                                     ("_position" v))))
###                               ("_do_cons"
###                                 ("_do_bind" ("_position" a)
###                                   ("_applC" ("_position" cf_get)
###                                     ("_cargs" ("_position" cf)
### ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v))))))
###                                 ("_do_cons"
###                                   ("_do_bind" ("_position" x)
###                                     ("_applC" ("_position" x_add)
### ("_cargs" ("_position" x)
###   ("_cargs" ("_position" s)
###     ("\<^const>Groups.uminus_class.uminus" ("_position" a))))))
###                                   ("_do_cons"
###                                     ("_do_bind" ("_position" x)
### ("_applC" ("_position" x_add)
###   ("_cargs" ("_position" x) ("_cargs" ("_position" v) ("_position" a)))))
###                                     ("_do_cons"
### ("_do_bind" ("_position" cf)
###   ("_applC" ("_position" cf_set)
###     ("_cargs" ("_position" cf)
###       ("_cargs" ("_tuple" ("_position" s) ("_tuple_arg" ("_position" v)))
###         ("\<^const>Groups.zero_class.zero")))))
### ("_do_cons"
###   ("_do_bind" ("_position" cf)
###     ("_applC" ("_position" cf_set)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_tuple" ("_position" v) ("_tuple_arg" ("_position" s)))
###           ("_position" a)))))
###   ("_do_final"
###     ("_applC" ("\<^const>Refine_Basic.RETURN")
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" cf))))))))))))))
###                       ("_tuple" ("_position" x)
###                         ("_tuple_arg" ("_position" cf))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Refine_Basic.RETURN")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label_aux)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" l) ("_position" u))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("\<^const>Refine_Foreach.FOREACH")
###             ("_cargs"
###               ("_applC" ("_position" adjacent_nodes) ("_position" u))
###               ("_cargs"
###                 ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                   ("_do_block"
###                     ("_do_cons"
###                       ("_do_then"
###                         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" u)
###                               ("_tuple_arg" ("_position" v)))
###                             ("\<^const>Set.union" ("_position" E)
###                               ("\<^const>Relation.converse"
###                                 ("_position" E))))))
###                       ("_do_cons"
###                         ("_do_then"
###                           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                             ("\<^const>Set.member" ("_position" v)
###                               ("_position" V))))
###                         ("_do_final"
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" cf)
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v))))
###                               ("\<^const>Groups.zero_class.zero"))
###                             ("_case_syntax" ("_position" x)
###                               ("_case2"
###                                 ("_case1" ("_position" None)
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" l) ("_position" v)))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Some)
###                                     ("_position" xx))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_applC" ("_position" Some)
### ("_applC" ("_position" min)
###   ("_cargs" ("_applC" ("_position" l) ("_position" v))
###     ("_position" xx))))))))
###                             ("_applC" ("\<^const>Heap_Monad.return")
###                               ("_position" x))))))))
###                 ("_position" None)))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" None))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return")
###               ("_applC" ("_position" the) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" min_adj_label)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u) ("_position" V))))
###       ("_do_cons"
###         ("_do_bind" ("_position" adj)
###           ("_applC" ("_position" am_get)
###             ("_cargs" ("_position" am) ("_position" u))))
###         ("_do_cons"
###           ("_do_bind" ("_position" x)
###             ("_applC" ("_position" nfoldli)
###               ("_cargs" ("_position" adj)
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" v) ("_position" x))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_then"
###                             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                               ("\<^const>Set.member"
###                                 ("_tuple" ("_position" u)
###                                   ("_tuple_arg" ("_position" v)))
###                                 ("\<^const>Set.union" ("_position" E)
###                                   ("\<^const>Relation.converse"
###                                     ("_position" E))))))
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Set.member" ("_position" v)
###                                   ("_position" V))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" cfuv)
###                                 ("_applC" ("_position" cf_get)
###                                   ("_cargs" ("_position" cf)
###                                     ("_tuple" ("_position" u)
### ("_tuple_arg" ("_position" v))))))
###                               ("_do_final"
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.not_equal"
###                                     ("_position" cfuv)
###                                     ("\<^const>Groups.zero_class.zero"))
###                                   ("_do_block"
###                                     ("_do_cons"
### ("_do_bind" ("_position" lv)
###   ("_applC" ("_position" l_get) ("_cargs" ("_position" l) ("_position" v))))
### ("_do_final"
###   ("_case_syntax" ("_position" x)
###     ("_case2"
###       ("_case1" ("_position" None)
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" Some) ("_position" lv))))
###       ("_case1" ("_applC" ("_position" Some) ("_position" xx))
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" min)
###               ("_cargs" ("_position" lv) ("_position" xx)))))))))))
###                                   ("_applC" ("\<^const>Heap_Monad.return")
###                                     ("_position" x)))))))))
###                     ("_position" None))))))
###           ("_do_cons"
###             ("_do_then"
###               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                 ("\<^const>HOL.not_equal" ("_position" x)
###                   ("_position" None))))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_applC" ("_position" the) ("_position" x))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel2)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_bind" ("_position" nl)
###           ("_applC" ("_position" min_adj_label)
###             ("_cargs" ("_position" am)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" l) ("_position" u))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" l)
###             ("_applC" ("_position" l_set)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" u)
###                   ("\<^const>Groups.plus_class.plus" ("_position" nl)
###                     ("\<^const>Groups.one_class.one"))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" l))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" relabel2)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_bind" ("_position" nl)
###           ("_applC" ("_position" min_adj_label)
###             ("_cargs" ("_position" am)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" l) ("_position" u))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" l)
###             ("_applC" ("_position" l_set)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" u)
###                   ("\<^const>Groups.plus_class.plus" ("_position" nl)
###                     ("\<^const>Groups.one_class.one"))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 386 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2_aux)
###     ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" u) ("_position" v))))
###           ("_do_cons"
###             ("_do_let" ("_position" \<Delta>)
###               ("_applC" ("_position" min)
###                 ("_cargs" ("_applC" ("_position" x) ("_position" u))
###                   ("_applC" ("_position" cf)
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" v)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_tuple"
###                   ("_applC" ("_position" x)
###                     ("_tuple"
###                       ("\<^const>Ref.update" ("_position" u)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" x) ("_position" u))
###                           ("_position" \<Delta>)))
###                       ("_tuple_arg"
###                         ("\<^const>Ref.update" ("_position" v)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" x) ("_position" v))
###                             ("_position" \<Delta>))))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" augment_edge_cf)
###                       ("_cargs" ("_position" cf)
###                         ("_cargs"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" \<Delta>))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2_aux)
###     ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" u) ("_position" v))))
###           ("_do_cons"
###             ("_do_let" ("_position" \<Delta>)
###               ("_applC" ("_position" min)
###                 ("_cargs" ("_applC" ("_position" x) ("_position" u))
###                   ("_applC" ("_position" cf)
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" v)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_tuple"
###                   ("_applC" ("_position" x)
###                     ("_tuple"
###                       ("\<^const>Ref.update" ("_position" u)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" x) ("_position" u))
###                           ("_position" \<Delta>)))
###                       ("_tuple_arg"
###                         ("\<^const>Ref.update" ("_position" v)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" x) ("_position" v))
###                             ("_position" \<Delta>))))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" augment_edge_cf)
###                       ("_cargs" ("_position" cf)
###                         ("_cargs"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" \<Delta>))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2_aux)
###     ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" u) ("_position" v))))
###           ("_do_cons"
###             ("_do_let" ("_position" \<Delta>)
###               ("_applC" ("_position" min)
###                 ("_cargs" ("_applC" ("_position" x) ("_position" u))
###                   ("_applC" ("_position" cf)
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" v)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                 ("_tuple"
###                   ("_Update" ("_position" x)
###                     ("_updbinds"
###                       ("_updbind" ("_position" u)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" x) ("_position" u))
###                           ("_position" \<Delta>)))
###                       ("_updbind" ("_position" v)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" x) ("_position" v))
###                           ("_position" \<Delta>)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" augment_edge_cf)
###                       ("_cargs" ("_position" cf)
###                         ("_cargs"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" \<Delta>))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2_aux)
###     ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_then"
###             ("_applC" ("\<^const>Refine_Basic.ASSERT")
###               ("\<^const>HOL.not_equal" ("_position" u) ("_position" v))))
###           ("_do_cons"
###             ("_do_let" ("_position" \<Delta>)
###               ("_applC" ("_position" min)
###                 ("_cargs" ("_applC" ("_position" x) ("_position" u))
###                   ("_applC" ("_position" cf)
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" v)))))))
###             ("_do_final"
###               ("_applC" ("\<^const>Heap_Monad.return")
###                 ("_tuple"
###                   ("_Update" ("_position" x)
###                     ("_updbinds"
###                       ("_updbind" ("_position" u)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" x) ("_position" u))
###                           ("_position" \<Delta>)))
###                       ("_updbind" ("_position" v)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" x) ("_position" v))
###                           ("_position" \<Delta>)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" augment_edge_cf)
###                       ("_cargs" ("_position" cf)
###                         ("_cargs"
###                           ("_tuple" ("_position" u)
###                             ("_tuple_arg" ("_position" v)))
###                           ("_position" \<Delta>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2) ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" xu)
###             ("_applC" ("_position" x_get)
###               ("_cargs" ("_position" x) ("_position" u))))
###           ("_do_cons"
###             ("_do_bind" ("_position" cfuv)
###               ("_applC" ("_position" cf_get)
###                 ("_cargs" ("_position" cf)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))
###             ("_do_cons"
###               ("_do_bind" ("_position" cfvu)
###                 ("_applC" ("_position" cf_get)
###                   ("_cargs" ("_position" cf)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" \<Delta>)
###                   ("_applC" ("_position" min)
###                     ("_cargs" ("_position" xu) ("_position" cfuv))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" x)
###                     ("_applC" ("_position" x_add)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" u)
###                           ("\<^const>Groups.uminus_class.uminus"
###                             ("_position" \<Delta>))))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" x)
###                       ("_applC" ("_position" x_add)
###                         ("_cargs" ("_position" x)
###                           ("_cargs" ("_position" v)
###                             ("_position" \<Delta>)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" cf)
###                         ("_applC" ("_position" cf_set)
###                           ("_cargs" ("_position" cf)
###                             ("_cargs"
###                               ("_tuple" ("_position" u)
###                                 ("_tuple_arg" ("_position" v)))
###                               ("\<^const>Groups.minus_class.minus"
###                                 ("_position" cfuv)
###                                 ("_position" \<Delta>))))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" cf)
###                           ("_applC" ("_position" cf_set)
###                             ("_cargs" ("_position" cf)
###                               ("_cargs"
###                                 ("_tuple" ("_position" v)
###                                   ("_tuple_arg" ("_position" u)))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" cfvu)
###                                   ("_position" \<Delta>))))))
###                         ("_do_final"
###                           ("_applC" ("\<^const>Refine_Basic.RETURN")
###                             ("_tuple" ("_position" x)
###                               ("_tuple_arg" ("_position" cf)))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" push2) ("_cargs" ("_position" x) ("_position" cf)))
###   ("_lambda" ("_pattern" ("_position" u) ("_position" v))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" u) ("_tuple_arg" ("_position" v)))
###               ("\<^const>Set.union" ("_position" E)
###                 ("\<^const>Relation.converse" ("_position" E))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" xu)
###             ("_applC" ("_position" x_get)
###               ("_cargs" ("_position" x) ("_position" u))))
###           ("_do_cons"
###             ("_do_bind" ("_position" cfuv)
###               ("_applC" ("_position" cf_get)
###                 ("_cargs" ("_position" cf)
###                   ("_tuple" ("_position" u)
###                     ("_tuple_arg" ("_position" v))))))
###             ("_do_cons"
###               ("_do_bind" ("_position" cfvu)
###                 ("_applC" ("_position" cf_get)
###                   ("_cargs" ("_position" cf)
###                     ("_tuple" ("_position" v)
###                       ("_tuple_arg" ("_position" u))))))
###               ("_do_cons"
###                 ("_do_let" ("_position" \<Delta>)
###                   ("_applC" ("_position" min)
###                     ("_cargs" ("_position" xu) ("_position" cfuv))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" x)
###                     ("_applC" ("_position" x_add)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" u)
###                           ("\<^const>Groups.uminus_class.uminus"
###                             ("_position" \<Delta>))))))
###                   ("_do_cons"
###                     ("_do_bind" ("_position" x)
###                       ("_applC" ("_position" x_add)
###                         ("_cargs" ("_position" x)
###                           ("_cargs" ("_position" v)
###                             ("_position" \<Delta>)))))
###                     ("_do_cons"
###                       ("_do_bind" ("_position" cf)
###                         ("_applC" ("_position" cf_set)
###                           ("_cargs" ("_position" cf)
###                             ("_cargs"
###                               ("_tuple" ("_position" u)
###                                 ("_tuple_arg" ("_position" v)))
###                               ("\<^const>Groups.minus_class.minus"
###                                 ("_position" cfuv)
###                                 ("_position" \<Delta>))))))
###                       ("_do_cons"
###                         ("_do_bind" ("_position" cf)
###                           ("_applC" ("_position" cf_set)
###                             ("_cargs" ("_position" cf)
###                               ("_cargs"
###                                 ("_tuple" ("_position" v)
###                                   ("_tuple_arg" ("_position" u)))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" cfvu)
###                                   ("_position" \<Delta>))))))
###                         ("_do_final"
###                           ("_applC" ("\<^const>Heap_Monad.return")
###                             ("_tuple" ("_position" x)
###                               ("_tuple_arg" ("_position" cf)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 457 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" clc_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" l)
###         ("_applC" ("_position" l_init) ("_position" C)))
###       ("_do_cons"
###         ("_do_bind" ("_position" cnt)
###           ("_applC" ("_position" cnt_init) ("_position" C)))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("_tuple" ("_position" cnt)
###               ("_tuple_arg" ("_position" l)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" clc_init) ("_position" C))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" l)
###         ("_applC" ("_position" l_init) ("_position" C)))
###       ("_do_cons"
###         ("_do_bind" ("_position" cnt)
###           ("_applC" ("_position" cnt_init) ("_position" C)))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("_tuple" ("_position" cnt)
###               ("_tuple_arg" ("_position" l)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 464 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" clc_set)
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" cnt) ("_position" l))
###       ("_pttrns" ("_position" u) ("_position" a)))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_position" N)))))
###         ("_do_cons"
###           ("_do_bind" ("_position" lu)
###             ("_applC" ("_position" l_get)
###               ("_cargs" ("_position" l) ("_position" u))))
###           ("_do_cons"
###             ("_do_bind" ("_position" cnt)
###               ("_applC" ("_position" cnt_decr)
###                 ("_cargs" ("_position" cnt) ("_position" lu))))
###             ("_do_cons"
###               ("_do_bind" ("_position" l)
###                 ("_applC" ("_position" l_set)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" u) ("_position" a)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" lu)
###                   ("_applC" ("_position" l_get)
###                     ("_cargs" ("_position" l) ("_position" u))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cnt)
###                     ("_applC" ("_position" cnt_incr)
###                       ("_cargs" ("_position" cnt) ("_position" lu))))
###                   ("_do_final"
###                     ("_applC" ("\<^const>Refine_Basic.RETURN")
###                       ("_tuple" ("_position" cnt)
###                         ("_tuple_arg" ("_position" l))))))))))))))
### ("\<^const>Pure.eq" ("_position" clc_set)
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" cnt) ("_position" l))
###       ("_pttrns" ("_position" u) ("_position" a)))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("\<^const>Refine_Basic.ASSERT")
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("\<^const>Groups.times_class.times"
###                 ("_Numeral" ("_constify" ("_position" 2)))
###                 ("_position" N)))))
###         ("_do_cons"
###           ("_do_bind" ("_position" lu)
###             ("_applC" ("_position" l_get)
###               ("_cargs" ("_position" l) ("_position" u))))
###           ("_do_cons"
###             ("_do_bind" ("_position" cnt)
###               ("_applC" ("_position" cnt_decr)
###                 ("_cargs" ("_position" cnt) ("_position" lu))))
###             ("_do_cons"
###               ("_do_bind" ("_position" l)
###                 ("_applC" ("_position" l_set)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" u) ("_position" a)))))
###               ("_do_cons"
###                 ("_do_bind" ("_position" lu)
###                   ("_applC" ("_position" l_get)
###                     ("_cargs" ("_position" l) ("_position" u))))
###                 ("_do_cons"
###                   ("_do_bind" ("_position" cnt)
###                     ("_applC" ("_position" cnt_incr)
###                       ("_cargs" ("_position" cnt) ("_position" lu))))
###                   ("_do_final"
###                     ("_applC" ("\<^const>Heap_Monad.return")
###                       ("_tuple" ("_position" cnt)
###                         ("_tuple_arg" ("_position" l))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 474 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" clc_has_gap)
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" cnt) ("_position" l))
###       ("_position" lu))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" nlu)
###           ("_applC" ("_position" cnt_get)
###             ("_cargs" ("_position" cnt) ("_position" lu))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN")
###             ("\<^const>HOL.eq" ("_position" nlu)
###               ("\<^const>Groups.zero_class.zero"))))))))
### ("\<^const>Pure.eq" ("_position" clc_has_gap)
###   ("_lambda"
###     ("_pttrns" ("_pattern" ("_position" cnt) ("_position" l))
###       ("_position" lu))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_bind" ("_position" nlu)
###           ("_applC" ("_position" cnt_get)
###             ("_cargs" ("_position" cnt) ("_position" lu))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return")
###             ("\<^const>HOL.eq" ("_position" nlu)
###               ("\<^const>Groups.zero_class.zero"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_get_rlx)
###     ("_cargs" ("_position" l) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" u)
###             ("_position" N))))
###       ("_do_final"
###         ("_applC" ("\<^const>Refine_Basic.RETURN")
###           ("_applC" ("_position" l) ("_position" u)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_get_rlx)
###     ("_cargs" ("_position" l) ("_position" u)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Orderings.ord_class.less" ("_position" u)
###             ("_position" N))))
###       ("_do_final"
###         ("_applC" ("\<^const>Heap_Monad.return")
###           ("_applC" ("_position" l) ("_position" u)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 559 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_aux)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" l) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" l))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" l_get_rlx)
###                         ("_cargs" ("_position" l) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" C)
###                                     ("\<^const>Groups.one_class.one"))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_Numeral"
### ("_constify" ("_position" 2)))
###                                     ("_position" N)))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" l)
###                                 ("_applC" ("_position" l_set)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" v)
### ("\<^const>Groups.plus_class.plus" ("_position" C)
###   ("\<^const>Groups.one_class.one"))))))
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_position" l))))))
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_position" l)))))))
###               ("_position" l))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_aux)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" l) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" l))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" l_get_rlx)
###                         ("_cargs" ("_position" l) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" C)
###                                     ("\<^const>Groups.one_class.one"))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_Numeral"
### ("_constify" ("_position" 2)))
###                                     ("_position" N)))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" l)
###                                 ("_applC" ("_position" l_set)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" v)
### ("\<^const>Groups.plus_class.plus" ("_position" C)
###   ("\<^const>Groups.one_class.one"))))))
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_position" l))))))
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_position" l)))))))
###               ("_position" l))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_aux)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" l) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" l))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" l_get_rlx)
###                         ("_cargs" ("_position" l) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" C)
###                                     ("\<^const>Groups.one_class.one"))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_Numeral"
### ("_constify" ("_position" 2)))
###                                     ("_position" N)))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" l)
###                                 ("_applC" ("_position" l_set)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" v)
### ("\<^const>Groups.plus_class.plus" ("_position" C)
###   ("\<^const>Groups.one_class.one"))))))
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                   ("_position" l))))))
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_position" l)))))))
###               ("_position" l))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_aux)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" l) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" l))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" l_get_rlx)
###                         ("_cargs" ("_position" l) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_then"
###                               ("_applC" ("\<^const>Refine_Basic.ASSERT")
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_position" C)
###                                     ("\<^const>Groups.one_class.one"))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_Numeral"
### ("_constify" ("_position" 2)))
###                                     ("_position" N)))))
###                             ("_do_cons"
###                               ("_do_bind" ("_position" l)
###                                 ("_applC" ("_position" l_set)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" v)
### ("\<^const>Groups.plus_class.plus" ("_position" C)
###   ("\<^const>Groups.one_class.one"))))))
###                               ("_do_final"
###                                 ("_applC" ("\<^const>Heap_Monad.return")
###                                   ("_position" l))))))
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_position" l)))))))
###               ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 595 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap2)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" clc) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" clc))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" clc_get_rlx)
###                         ("_cargs" ("_position" clc) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_bind" ("_position" clc)
###                               ("_applC" ("_position" clc_set)
###                                 ("_cargs" ("_position" clc)
###                                   ("_cargs" ("_position" v)
###                                     ("\<^const>Groups.plus_class.plus"
### ("_position" C) ("\<^const>Groups.one_class.one"))))))
###                             ("_do_final"
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_position" clc)))))
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_position" clc)))))))
###               ("_position" clc))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap2)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" clc) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" clc))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" clc_get_rlx)
###                         ("_cargs" ("_position" clc) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_bind" ("_position" clc)
###                               ("_applC" ("_position" clc_set)
###                                 ("_cargs" ("_position" clc)
###                                   ("_cargs" ("_position" v)
###                                     ("\<^const>Groups.plus_class.plus"
### ("_position" C) ("\<^const>Groups.one_class.one"))))))
###                             ("_do_final"
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_position" clc)))))
###                         ("_applC" ("\<^const>Heap_Monad.return")
###                           ("_position" clc)))))))
###               ("_position" clc))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap2)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" clc) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" clc))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" clc_get_rlx)
###                         ("_cargs" ("_position" clc) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_bind" ("_position" clc)
###                               ("_applC" ("_position" clc_set)
###                                 ("_cargs" ("_position" clc)
###                                   ("_cargs" ("_position" v)
###                                     ("\<^const>Groups.plus_class.plus"
### ("_position" C) ("\<^const>Groups.one_class.one"))))))
###                             ("_do_final"
###                               ("_applC" ("\<^const>Refine_Basic.RETURN")
###                                 ("_position" clc)))))
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_position" clc)))))))
###               ("_position" clc))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap2)
###     ("_cargs" ("_position" C) ("_cargs" ("_position" clc) ("_position" k))))
###   ("_do_block"
###     ("_do_final"
###       ("_applC" ("_position" nfoldli)
###         ("_cargs"
###           ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###             ("_position" N))
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###             ("_cargs"
###               ("_lambda" ("_pttrns" ("_position" v) ("_position" clc))
###                 ("_do_block"
###                   ("_do_cons"
###                     ("_do_bind" ("_position" lv)
###                       ("_applC" ("_position" clc_get_rlx)
###                         ("_cargs" ("_position" clc) ("_position" v))))
###                     ("_do_final"
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" k) ("_position" lv))
###                           ("\<^const>Orderings.ord_class.less"
###                             ("_position" lv) ("_position" C)))
###                         ("_do_block"
###                           ("_do_cons"
###                             ("_do_bind" ("_position" clc)
###                               ("_applC" ("_position" clc_set)
###                                 ("_cargs" ("_position" clc)
###                                   ("_cargs" ("_position" v)
###                                     ("\<^const>Groups.plus_class.plus"
### ("_position" C) ("\<^const>Groups.one_class.one"))))))
###                             ("_do_final"
###                               ("_applC" ("\<^const>Heap_Monad.return")
###                                 ("_position" clc)))))
###                         ("_applC" ("\<^const>Refine_Basic.RETURN")
###                           ("_position" clc)))))))
###               ("_position" clc))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 615 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_relabel_aux)
###     ("_cargs" ("_position" C)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" lu)
###         ("_applC" ("_position" l_get)
###           ("_cargs" ("_position" l) ("_position" u))))
###       ("_do_cons"
###         ("_do_bind" ("_position" l)
###           ("_applC" ("_position" relabel)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" l) ("_position" u)))))
###         ("_do_final"
###           ("\<^const>HOL.If"
###             ("_applC" ("_position" gap_precond)
###               ("_cargs" ("_position" l) ("_position" lu)))
###             ("_applC" ("_position" gap_aux)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" l) ("_position" lu))))
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" l))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" gap_relabel_aux)
###     ("_cargs" ("_position" C)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" l) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" lu)
###         ("_applC" ("_position" l_get)
###           ("_cargs" ("_position" l) ("_position" u))))
###       ("_do_cons"
###         ("_do_bind" ("_position" l)
###           ("_applC" ("_position" relabel)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" l) ("_position" u)))))
###         ("_do_final"
###           ("\<^const>HOL.If"
###             ("_applC" ("_position" gap_precond)
###               ("_cargs" ("_position" l) ("_position" lu)))
###             ("_applC" ("_position" gap_aux)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" l) ("_position" lu))))
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 636 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" clc_relabel2)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" clc) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_bind" ("_position" nl)
###           ("_applC" ("_position" min_adj_label_clc)
###             ("_cargs" ("_position" am)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" clc) ("_position" u))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" clc)
###             ("_applC" ("_position" clc_set)
###               ("_cargs" ("_position" clc)
###                 ("_cargs" ("_position" u)
###                   ("\<^const>Groups.plus_class.plus" ("_position" nl)
###                     ("\<^const>Groups.one_class.one"))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" clc))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" clc_relabel2)
###     ("_cargs" ("_position" am)
###       ("_cargs" ("_position" cf)
###         ("_cargs" ("_position" clc) ("_position" u)))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_then"
###         ("_applC" ("\<^const>Refine_Basic.ASSERT")
###           ("\<^const>Set.member" ("_position" u)
###             ("\<^const>Groups.minus_class.minus" ("_position" V)
###               ("_Finset" ("_args" ("_position" s) ("_position" t)))))))
###       ("_do_cons"
###         ("_do_bind" ("_position" nl)
###           ("_applC" ("_position" min_adj_label_clc)
###             ("_cargs" ("_position" am)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" clc) ("_position" u))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" clc)
###             ("_applC" ("_position" clc_set)
###               ("_cargs" ("_position" clc)
###                 ("_cargs" ("_position" u)
###                   ("\<^const>Groups.plus_class.plus" ("_position" nl)
###                     ("\<^const>Groups.one_class.one"))))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return")
###               ("_position" clc))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
PR_CONST x_get ::\<^sub>i TYPE((nat => int) => nat => int nres)
PR_CONST x_add ::\<^sub>i
TYPE((nat => int) => nat => int => (nat => int) nres)
PR_CONST l_init ::\<^sub>i TYPE(nat => (nat => nat) nres)
PR_CONST l_get ::\<^sub>i TYPE((nat => nat) => nat => nat nres)
PR_CONST l_get_rlx ::\<^sub>i TYPE((nat => nat) => nat => nat nres)
PR_CONST l_set ::\<^sub>i
TYPE((nat => nat) => nat => nat => (nat => nat) nres)
PR_CONST clc_init ::\<^sub>i TYPE(nat => ((nat => nat) * (nat => nat)) nres)
PR_CONST clc_get ::\<^sub>i TYPE(?'a10 * (nat => nat) => nat => nat nres)
PR_CONST clc_set ::\<^sub>i
TYPE((nat => nat) * (nat => nat)
     => nat => nat => ((nat => nat) * (nat => nat)) nres)
PR_CONST clc_has_gap ::\<^sub>i
TYPE((nat => nat) * ?'a10 => nat => bool nres)
PR_CONST clc_get_rlx ::\<^sub>i
TYPE(?'a10 * (nat => nat) => nat => nat nres)
PR_CONST cnt_init ::\<^sub>i TYPE(nat => (nat => nat) nres)
PR_CONST cnt_get ::\<^sub>i TYPE((nat => nat) => nat => nat nres)
PR_CONST cnt_incr ::\<^sub>i TYPE((nat => nat) => nat => (nat => nat) nres)
PR_CONST cnt_decr ::\<^sub>i TYPE((nat => nat) => nat => (nat => nat) nres)
PR_CONST gap2 ::\<^sub>i
TYPE(nat
     => (nat => nat) * (nat => nat)
        => nat => ((nat => nat) * (nat => nat)) nres)
PR_CONST min_adj_label ::\<^sub>i
TYPE((nat => nat list) => int i_mtx => (nat => nat) => nat => nat nres)
PR_CONST min_adj_label_clc ::\<^sub>i
TYPE((nat => nat list)
     => int i_mtx => ?'a10 * (nat => nat) => nat => nat nres)
PR_CONST push2 ::\<^sub>i
TYPE((nat => int)
     => int i_mtx => nat * nat => ((nat => int) * int i_mtx) nres)
PR_CONST relabel2 ::\<^sub>i
TYPE((nat => nat list)
     => int i_mtx => (nat => nat) => nat => (nat => nat) nres)
PR_CONST clc_relabel2 ::\<^sub>i
TYPE((nat => nat list)
     => int i_mtx
        => (nat => nat) * (nat => nat)
           => nat => ((nat => nat) * (nat => nat)) nres)
PR_CONST gap_relabel2 ::\<^sub>i
TYPE(nat
     => (nat => nat list)
        => int i_mtx
           => (nat => nat) * (nat => nat)
              => nat => ((nat => nat) * (nat => nat)) nres)
PR_CONST pp_init_xcf2 ::\<^sub>i
TYPE((nat => nat list) => ((nat => int) * int i_mtx) nres)
### Ambiguous input (line 743 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add_impl)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" xu)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" x) ("_position" u))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" u)
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" xu)
###                   ("_position" \<Delta>))
###                 ("_position" x)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" x)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" x_add_impl)
###     ("_cargs" ("_position" x)
###       ("_cargs" ("_position" u) ("_position" \<Delta>))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" xu)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" x) ("_position" u))))
###       ("_do_cons"
###         ("_do_bind" ("_position" x)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" u)
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" xu)
###                   ("_position" \<Delta>))
###                 ("_position" x)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 757 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_init_impl)
###     ("_cargs" ("_position" N)
###       ("_cargs" ("_position" s) ("_position" cardV))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" l)
###         ("_applC" ("_position" Array.new)
###           ("_cargs" ("_position" N)
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat)))))
###       ("_do_cons"
###         ("_do_bind" ("_position" l)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" cardV) ("_position" l)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" l)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" l_init_impl)
###     ("_cargs" ("_position" N)
###       ("_cargs" ("_position" s) ("_position" cardV))))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" l)
###         ("_applC" ("_position" Array.new)
###           ("_cargs" ("_position" N)
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat)))))
###       ("_do_cons"
###         ("_do_bind" ("_position" l)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" cardV) ("_position" l)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 794 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_init_impl)
###     ("_cargs" ("_position" N) ("_position" C)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" a)
###         ("_applC" ("_position" Array.new)
###           ("_cargs"
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N))
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat)))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("\<^const>Groups.zero_class.zero")
###               ("_cargs"
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_cons"
###           ("_do_bind" ("_position" a)
###             ("_applC" ("_position" Array.upd)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Groups.one_class.one")
###                   ("_position" a)))))
###           ("_do_final"
###             ("_applC" ("\<^const>Refine_Basic.RETURN")
###               ("_position" a))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_init_impl)
###     ("_cargs" ("_position" N) ("_position" C)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" a)
###         ("_applC" ("_position" Array.new)
###           ("_cargs"
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2))) ("_position" N))
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat)))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("\<^const>Groups.zero_class.zero")
###               ("_cargs"
###                 ("\<^const>Groups.minus_class.minus" ("_position" C)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_cons"
###           ("_do_bind" ("_position" a)
###             ("_applC" ("_position" Array.upd)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Groups.one_class.one")
###                   ("_position" a)))))
###           ("_do_final"
###             ("_applC" ("\<^const>Heap_Monad.return") ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 801 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr_impl)
###     ("_cargs" ("_position" a) ("_position" k)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" freq)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" a) ("_position" k))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" k)
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" freq)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" a)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_incr_impl)
###     ("_cargs" ("_position" a) ("_position" k)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" freq)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" a) ("_position" k))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" k)
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" freq)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 807 of "$AFP/Prpu_Maxflow/Prpu_Common_Impl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr_impl)
###     ("_cargs" ("_position" a) ("_position" k)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" freq)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" a) ("_position" k))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" k)
###               ("_cargs"
###                 ("\<^const>Groups.minus_class.minus" ("_position" freq)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Refine_Basic.RETURN") ("_position" a)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" cnt_decr_impl)
###     ("_cargs" ("_position" a) ("_position" k)))
###   ("_do_block"
###     ("_do_cons"
###       ("_do_bind" ("_position" freq)
###         ("_applC" ("_position" Array.nth)
###           ("_cargs" ("_position" a) ("_position" k))))
###       ("_do_cons"
###         ("_do_bind" ("_position" a)
###           ("_applC" ("_position" Array.upd)
###             ("_cargs" ("_position" k)
###               ("_cargs"
###                 ("\<^const>Groups.minus_class.minus" ("_position" freq)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_position" a)))))
###         ("_do_final"
###           ("_applC" ("\<^const>Heap_Monad.return") ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
(%xi. l_init_impl N s xi >>=
      (%x'. cnt_init_impl N xi >>= (%x'a. return (x'a, x'))),
 PR_CONST clc_init)
: nat_assn\<^sup>k \<rightarrow>\<^sub>a clc_assn
### Cannot skip proof of schematic goal statement
(uncurry (%ai bi. case ai of (a1, a2) => Array.nth a2 bi),
 uncurry (PR_CONST clc_get))
: clc_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
(uncurry (%ai bi. case ai of (a1, a2) => Array.nth a2 bi),
 uncurry (PR_CONST clc_get_rlx))
: clc_assn\<^sup>k *\<^sub>a nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (%ai bia bi.
      case ai of
      (a1, a2) =>
        Array.nth a2 bia >>=
        (%x'. cnt_decr_impl a1 x' >>=
              (%x'a. Array.upd bia bi a2 >>=
                     (%x'b. Array.nth x'b bia >>=
                            (%x'c. cnt_incr_impl x'a x'c >>=
                                   (%x'd. return (x'd, x'b))))))),
 uncurry2 (PR_CONST clc_set))
: clc_assn\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a clc_assn
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      case ai of (a1, a2) => Array.nth a1 bi >>= (%x'. return (x' = 0))),
 uncurry (PR_CONST clc_has_gap))
: clc_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (%ai bia bi.
      case bi of
      (a1, a2) =>
        Array.nth ai a1 >>=
        (%x'. cf_get_impl N bia (a1, a2) >>=
              (%x'a. cf_get_impl N bia (a2, a1) >>=
                     (%x'b. let x'c = min x' x'a
                            in x_add_impl ai a1 (- x'c) >>=
                               (%x'e. x_add_impl x'e a2 x'c >>=
(%x'f. cf_set_impl N bia (a1, a2) (x'a - x'c) >>=
       (%x'g. cf_set_impl N x'g (a2, a1) (x'b + x'c) >>=
              (%x'h. return (x'f, x'h))))))))),
 uncurry2 (PR_CONST push2))
: x_assn\<^sup>d *\<^sub>a local.cf_assn\<^sup>d *\<^sub>a
  edge_assn\<^sup>k \<rightarrow>\<^sub>a x_assn \<times>\<^sub>a
    local.cf_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry
    (%ai bib bia bi.
        Array.nth ai bi >>=
        (%x'. imp_nfoldli x' (%\<sigma>. return True)
               (%xb \<sigma>.
                   cf_get_impl N bib (bi, xb) >>=
                   (%x'c. if x'c ~= 0
                          then Array.nth bia xb >>=
                               (%x'e. return
 (case \<sigma> of None => Some x'e | Some x'f => Some (min x'e x'f)))
                          else return \<sigma>))
               None >>=
              (%x'a. return (the x'a))))),
 uncurry2 (uncurry (PR_CONST min_adj_label)))
: local.am_assn\<^sup>k *\<^sub>a local.cf_assn\<^sup>k *\<^sub>a
  l_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry
    (%ai bib bia bi.
        min_adj_label_impl N ai bib bia bi >>=
        (%x'. Array.upd bi (x' + 1) bia))),
 uncurry2 (uncurry (PR_CONST relabel2)))
: local.am_assn\<^sup>k *\<^sub>a local.cf_assn\<^sup>k *\<^sub>a
  l_assn\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a l_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (%ai bia bi.
      imp_for' 0 N
       (%xa \<sigma>.
           clc_get_rlx_impl \<sigma> xa >>=
           (%x'b. if bi < x'b & x'b < ai
                  then clc_set_impl \<sigma> xa (ai + 1)
                  else return \<sigma>))
       bia),
 uncurry2 (PR_CONST gap2))
: nat_assn\<^sup>k *\<^sub>a clc_assn\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a clc_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry
    (%ai bib bia bi.
        case bia of (a1, a2) => min_adj_label_impl N ai bib a2 bi)),
 uncurry2 (uncurry (PR_CONST min_adj_label_clc)))
: local.am_assn\<^sup>k *\<^sub>a local.cf_assn\<^sup>k *\<^sub>a
  clc_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry
    (%ai bib bia bi.
        min_adj_label_clc_impl N ai bib bia bi >>=
        (%x'. clc_set_impl bia bi (x' + 1)))),
 uncurry2 (uncurry (PR_CONST clc_relabel2)))
: local.am_assn\<^sup>k *\<^sub>a local.cf_assn\<^sup>k *\<^sub>a
  clc_assn\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a clc_assn
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry2
    (%ai bic bib bia bi.
        clc_get_impl bia bi >>=
        (%x'. clc_relabel_impl N bic bib bia bi >>=
              (%x'a. clc_has_gap_impl x'a x' >>=
                     (%x'b. if x'b then gap_impl N ai x'a x'
                            else return x'a))))),
 uncurry2 (uncurry2 (PR_CONST gap_relabel2)))
: nat_assn\<^sup>k *\<^sub>a local.am_assn\<^sup>k *\<^sub>a
  local.cf_assn\<^sup>k *\<^sub>a
  clc_assn\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a clc_assn
### Cannot skip proof of schematic goal statement
(%xi. Array.new N 0 >>=
      (%x'. cf_init_impl c N >>=
            (%x'a. Array.nth xi s >>=
                   (%x'b. imp_nfoldli x'b (%\<sigma>. return True)
                           (%xe (a1, a2).
                               cf_get_impl N a2 (s, xe) >>=
                               (%x'e. x_add_impl a1 s (- x'e) >>=
(%x'f. x_add_impl x'f xe x'e >>=
       (%x'g. cf_set_impl N a2 (s, xe) 0 >>=
              (%x'h. cf_set_impl N x'h (xe, s) x'e >>=
                     (%x'i. return (x'g, x'i)))))))
                           (x', x'a)))),
 PR_CONST pp_init_xcf2)
: local.am_assn\<^sup>k \<rightarrow>\<^sub>a x_assn \<times>\<^sub>a
        local.cf_assn
### theory "Draft.Prpu_Common_Impl"
### 9.732s elapsed time, 10.512s cpu time, 1.027s GC time
Loading theory "Draft.Prpu_Common_ImplTemplates"
val templateLemmas =
   [("Prpu_Common_Impl.set_filter_xform_aux",
     "{?f x |x. (x = ?a | x : ?S & x ~: ?it) & ?P x} =
      (if ?P ?a then {?f ?a} else {}) Un {?f x |x. x : ?S - ?it & ?P x}",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 0, template_var 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_var 4, template_var 3)),
                 template_hole 1)),
             template_hole 1)),
         template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Prpu_Common_ImplTemplates"
### 2.890s elapsed time, 3.409s cpu time, 0.369s GC time
val it = (): unit
