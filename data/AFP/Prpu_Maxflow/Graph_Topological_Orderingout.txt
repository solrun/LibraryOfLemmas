Loading theory "HOL-Library.Stream" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.569s cpu time, 0.068s GC time
Loading theory "Draft.Graph_Topological_Ordering" (required by "Draft.Graph_Topological_OrderingTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.936s cpu time, 0.068s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs")
### theory "Draft.Graph_Topological_Ordering"
### 0.103s elapsed time, 0.407s cpu time, 0.000s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.874s elapsed time, 2.846s cpu time, 0.339s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.773s elapsed time, 2.223s cpu time, 0.392s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.942s elapsed time, 4.521s cpu time, 1.036s GC time
Loading theory "Draft.Templates" (required by "Draft.Graph_Topological_OrderingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.135s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Graph_Topological_OrderingTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.438s elapsed time, 0.444s cpu time, 0.000s GC time
Loading theory "Draft.Graph_Topological_OrderingTemplates"
val templateLemmas =
   [("Graph_Topological_Ordering.is_top_sorted_empty_list",
     "is_top_sorted ?R []",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Graph_Topological_Ordering.is_top_sorted_empty_rel",
     "is_top_sorted {} ?l = distinct ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Graph_Topological_Ordering.list_before_irrefl_eq_distinct",
     "irrefl (list_before_rel ?l) = distinct ?l",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Graph_Topological_Ordering.list_before_asym",
     "distinct ?l ==> asym (list_before_rel ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Graph_Topological_Ordering.list_before_trans",
     "distinct ?l ==> trans (list_before_rel ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Graph_Topological_Ordering.is_top_sorted_distinct",
     "is_top_sorted ?R ?l ==> distinct ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Graph_Topological_Ordering.list_before_rel_on_elems",
     "list_before_rel ?l <= set ?l \<times> set ?l",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Graph_Topological_Ordering.is_top_sorted_antimono",
     "[| ?R <= ?R'; is_top_sorted ?R' ?l |] ==> is_top_sorted ?R ?l",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Graph_Topological_Ordering.is_top_sorted_remove_elem",
     "is_top_sorted ?R (?l1.0 @ ?x # ?l2.0) ==>
      is_top_sorted ?R (?l1.0 @ ?l2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Graph_Topological_Ordering.list_before_rel_cons",
     "list_before_rel (?x # ?l) =
      {?x} \<times> set ?l Un list_before_rel ?l",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             t_empty)),
         template_app (template_hole 6, template_var 0)))),
    ("Graph_Topological_Ordering.is_top_sorted_alt",
     "is_top_sorted ?R ?l =
      (ALL x y. (x, y) : list_before_rel ?l --> (y, x) ~: ?R^*)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Graph_Topological_Ordering.is_top_sorted_cons",
     "is_top_sorted ?R (?x # ?l) =
      ({?x} \<times> set ?l Int (?R^*)^-1 = {} & is_top_sorted ?R ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 1),
                             template_hole 4)),
                         t_empty)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)))),
                 template_hole 0)),
             template_app
              (template_app (template_hole 11, template_var 2),
               template_var 0))
           ))),
    ("Graph_Topological_Ordering.is_top_sorted_append",
     "is_top_sorted ?R (?l1.0 @ ?l2.0) =
      (set ?l1.0 \<times> set ?l2.0 Int (?R^*)^-1 = {} &
       is_top_sorted ?R ?l1.0 & is_top_sorted ?R ?l2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_var 1)),
                         t_empty)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)))),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 0)))
           ))),
    ("Graph_Topological_Ordering.list_before_rel_alt",
     "list_before_rel ?l = {(?l ! i, ?l ! j) |i j. i < j & j < length ?l}",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Graph_Topological_Ordering.is_top_sorted_isolated_constraint",
     "[| ?R' <= ?R Un {?x} \<times> ?X; ?R' Int UNIV \<times> {?x} = {};
         ?x ~: set ?l; is_top_sorted ?R ?l |]
      ==> is_top_sorted ?R' ?l",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              t_empty))),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 10, template_hole 5), t_empty)),
          template_hole 4),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Graph_Topological_OrderingTemplates"
### 0.520s elapsed time, 0.672s cpu time, 0.075s GC time
val it = (): unit
