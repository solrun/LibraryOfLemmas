   [("Challenge1A.tkd", "decr (take_decr ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.tki", "incr (take_incr ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.maximal_cuts", "maxi (cuts ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.concat_cuts", "concat (cuts ?xs) = ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Challenge1A.all_correct", "[] ~: set (cuts ?xs)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("Challenge1A.icod",
     "incr (Challenge1A.take ?xs) | decr (Challenge1A.take ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1A.take_conc", "EX ys. ?xs = Challenge1A.take ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.tdconc", "EX ys. ?xs = take_decr ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.ticonc", "EX ys. ?xs = take_incr ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.maxi_imp_non_empty", "maxi ?xs ==> [] ~: set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Challenge1A.cuts_incr_decr", "ALL c:set (cuts ?xs). incr c | decr c",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           t_empty)
         )),
    ("Challenge1A.take_non_empty",
     "?xs ~= [] ==> Challenge1A.take ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.take_decr_non_empty", "?xs ~= [] ==> take_decr ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.take_incr_non_empty", "?xs ~= [] ==> take_incr ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.decr_by_idx",
     "decr ?xs = (ALL i<length ?xs - 1. ?xs ! Suc i <= ?xs ! i)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Challenge1A.incr_by_idx",
     "incr ?xs = (ALL i<length ?xs - 1. ?xs ! i < ?xs ! Suc i)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Challenge1A.inv_cuts",
     "cuts ?xs = ?c # ?cs ==>
      EX ys. ?c = Challenge1A.take ?xs & ?xs = ?c @ ys & ?cs = cuts ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Challenge1A.tdconc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = take_decr ?xs @ ys &
         (ys ~= [] --> ~ hd ys <= last (take_decr ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Challenge1A.ticonc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = take_incr ?xs @ ys &
         (ys ~= [] --> ~ last (take_incr ?xs) < hd ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Challenge1A.take_conc''",
     "?xs ~= [] ==>
      EX ys.
         ?xs = Challenge1A.take ?xs @ ys &
         (ys ~= [] -->
          incr (Challenge1A.take ?xs) &
          ~ last (Challenge1A.take ?xs) < hd ys |
          decr (Challenge1A.take ?xs) &
          ~ hd ys <= last (Challenge1A.take ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Challenge1A.take_conc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = Challenge1A.take ?xs @ ys &
         (ys ~= [] -->
          Challenge1A.take ?xs = take_incr ?xs &
          ~ last (take_incr ?xs) < hd ys |
          Challenge1A.take ?xs = take_decr ?xs &
          ~ hd ys <= last (take_decr ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Challenge1A.maxi_by_idx",
     "maxi ?xs =
      ((ALL i<length ?xs. ?xs ! i ~= []) &
       (ALL i<length ?xs - 1.
           incr (?xs ! i) & ~ last (?xs ! i) < hd (?xs ! Suc i) |
           decr (?xs ! i) & ~ hd (?xs ! Suc i) <= last (?xs ! i)))",
     template_equation
      (template_app (template_hole 19, template_var 0),
       template_app
        (template_app
          (template_hole 18, template_app (template_hole 17, t_empty)),
         template_app (template_hole 17, t_empty))))]
