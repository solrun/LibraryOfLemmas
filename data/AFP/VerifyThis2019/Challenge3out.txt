Loading theory "Draft.Parallel_Multiset_Fold" (required by "Draft.Challenge3Templates" via "Draft.Challenge3")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.552s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Parallel_Multiset_Fold"
### 0.240s elapsed time, 0.968s cpu time, 0.055s GC time
Loading theory "Draft.Challenge3" (required by "Draft.Challenge3Templates")
### theory "HOL-Library.Set_Algebras"
### 0.351s elapsed time, 1.378s cpu time, 0.162s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.884s elapsed time, 3.453s cpu time, 0.370s GC time
[| comp_fun_commute ?f; 0 < ?n;
   comp_fun_commute.reachable ?f ?n ?ts ?start (?ts', ?ms, ?r);
   comp_fun_commute.final ?n (?ts', ?ms, ?r) |]
==> ?r = fold ?f ?ts ?start
[| comp_fun_commute ?f; 0 < ?n;
   comp_fun_commute.reachable ?f ?n ?ts ?start ?s |]
==> EX s'.
       comp_fun_commute.final ?n s' & (comp_fun_commute.step ?f ?n)^** ?s s'
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 24 of "$AFP/VerifyThis2019/Challenge3.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alg)
###       ("_cargs"
###         ("_constrain" ("_position" ts)
###           ("_tapp" ("_type_name" triplet) ("_type_name" list)))
###         ("_position" x)))
###     ("_applC" ("_position" fold_mset)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_Update" ("_position" y)
###             ("_updbind" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs"
###           ("_lambda" ("_idtdummy")
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" int)))
###           ("_applC" ("_position" mset) ("_position" ts)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alg)
###       ("_cargs"
###         ("_constrain" ("_position" ts)
###           ("_tapp" ("_type_name" triplet) ("_type_name" list)))
###         ("_position" x)))
###     ("_applC" ("_position" fold_mset)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_applC" ("_position" y)
###             ("\<^const>Ref.update" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs"
###           ("_lambda" ("_idtdummy")
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" int)))
###           ("_applC" ("_position" mset) ("_position" ts)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/VerifyThis2019/Challenge3.thy") produces 2 parse trees:
### ("_lambda"
###   ("_pttrns"
###     ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###       ("_position" v))
###     ("_position" y))
###   ("_applC" ("_position" y)
###     ("\<^const>Ref.update" ("_position" c)
###       ("\<^const>Groups.plus_class.plus"
###         ("_constrain" ("_applC" ("_position" y) ("_position" c))
###           ("_type_name" val))
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("_position" x) ("_position" r)) ("_position" v))))))
### ("_lambda"
###   ("_pttrns"
###     ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###       ("_position" v))
###     ("_position" y))
###   ("_Update" ("_position" y)
###     ("_updbind" ("_position" c)
###       ("\<^const>Groups.plus_class.plus"
###         ("_constrain" ("_applC" ("_position" y) ("_position" c))
###           ("_type_name" val))
###         ("\<^const>Groups.times_class.times"
###           ("_applC" ("_position" x) ("_position" r)) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.BigO"
### 0.955s elapsed time, 3.428s cpu time, 0.858s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 71 of "$AFP/VerifyThis2019/Challenge3.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" ts)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball"
###           ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###             ("_idtdummy"))
###           ("_applC" ("_position" set) ("_position" ts))
###           ("\<^const>Orderings.ord_class.less" ("_position" r)
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" i)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda"
###               ("_pttrns"
###                 ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###                   ("_position" v))
###                 ("_position" y))
###               ("_Update" ("_position" y)
###                 ("_updbind" ("_position" c)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" y) ("_position" c))
###                     ("\<^const>Groups.times_class.times"
###                       ("_applC" ("_position" x) ("_position" r))
###                       ("_position" v))))))
###             ("_cargs" ("_position" ts)
###               ("_cargs" ("_position" m) ("_position" i)))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" m) ("_position" i))
###           ("_applC" ("_position" pr)
###             ("_cargs" ("_applC" ("_position" \<alpha>) ("_position" ts))
###               ("_cargs" ("_position" x) ("_position" i)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" ts)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball"
###           ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###             ("_idtdummy"))
###           ("_applC" ("_position" set) ("_position" ts))
###           ("\<^const>Orderings.ord_class.less" ("_position" r)
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" i)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda"
###               ("_pttrns"
###                 ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###                   ("_position" v))
###                 ("_position" y))
###               ("_applC" ("_position" y)
###                 ("\<^const>Ref.update" ("_position" c)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" y) ("_position" c))
###                     ("\<^const>Groups.times_class.times"
###                       ("_applC" ("_position" x) ("_position" r))
###                       ("_position" v))))))
###             ("_cargs" ("_position" ts)
###               ("_cargs" ("_position" m) ("_position" i)))))
###         ("\<^const>Groups.plus_class.plus"
###           ("_applC" ("_position" m) ("_position" i))
###           ("_applC" ("_position" pr)
###             ("_cargs" ("_applC" ("_position" \<alpha>) ("_position" ts))
###               ("_cargs" ("_position" x) ("_position" i)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 95 of "$AFP/VerifyThis2019/Challenge3.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fold)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_Update" ("_position" y)
###             ("_updbind" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs" ("_position" ts)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))))
###     ("_applC" ("_position" pr)
###       ("_cargs" ("_applC" ("_position" \<alpha>) ("_position" ts))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fold)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_applC" ("_position" y)
###             ("\<^const>Ref.update" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs" ("_position" ts)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))))
###     ("_applC" ("_position" pr)
###       ("_cargs" ("_applC" ("_position" \<alpha>) ("_position" ts))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/VerifyThis2019/Challenge3.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alg) ("_cargs" ("_position" ts) ("_position" x)))
###     ("_applC" ("_position" fold)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_Update" ("_position" y)
###             ("_updbind" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs" ("_position" ts)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" alg) ("_cargs" ("_position" ts) ("_position" x)))
###     ("_applC" ("_position" fold)
###       ("_cargs"
###         ("_lambda"
###           ("_pttrns"
###             ("_pattern" ("_pattern" ("_position" r) ("_position" c))
###               ("_position" v))
###             ("_position" y))
###           ("_applC" ("_position" y)
###             ("\<^const>Ref.update" ("_position" c)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" y) ("_position" c))
###                 ("\<^const>Groups.times_class.times"
###                   ("_applC" ("_position" x) ("_position" r))
###                   ("_position" v))))))
###         ("_cargs" ("_position" ts)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Challenge3"
### 1.166s elapsed time, 4.066s cpu time, 0.965s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.935s elapsed time, 5.213s cpu time, 1.072s GC time
Loading theory "Draft.Templates" (required by "Draft.Challenge3Templates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.069s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Challenge3Templates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.566s cpu time, 0.086s GC time
Loading theory "Draft.Challenge3Templates"
val templateLemmas =
   [("Challenge3.aux3",
     "the_default (0::?'a) (if ?b then Some ?x else None) =
      (if ?b then ?x else (0::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 4))),
    ("Challenge3.alg_by_fold",
     "alg ?ts ?x =
      fold (%((r, c), v) y. y(c := y c + ?x r * v)) ?ts (%_. 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty))),
           template_var 1),
         t_empty))),
    ("Challenge3.correct",
     "[| distinct (map fst ?ts); ALL ((r, c), uu_):set ?ts. r < ?n |]
      ==> alg ?ts ?x = pr ?n (\<alpha> ?ts) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app
               (template_hole 6, template_app (template_hole 5, t_empty)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Challenge3.1",
     "distinct (map fst (?ts1.0 @ ?ts2.0)) ==>
      pr ?n (\<alpha> (?ts1.0 @ ?ts2.0)) ?x ?i =
      pr ?n (\<alpha> ?ts1.0) ?x ?i + pr ?n (\<alpha> ?ts2.0) ?x ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 1, template_var 4)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 3)),
               template_var 1),
             template_var 0))))),
    ("Challenge3.aux",
     "distinct (map fst (?ts1.0 @ ?ts2.0)) ==>
      the_default 0
       (case map_of ?ts1.0 (?k, ?i) of None => map_of ?ts2.0 (?k, ?i)
        | Some x => Some x) =
      the_default 0 (map_of ?ts1.0 (?k, ?i)) +
      the_default 0 (map_of ?ts2.0 (?k, ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               t_empty),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))))))),
    ("Challenge3.correct_fold",
     "[| distinct (map fst ?ts); ALL ((r, c), uu_):set ?ts. r < ?n |]
      ==> fold (%((r, c), v) y. y(c := y c + ?x r * v)) ?ts (%_. 0) =
          pr ?n (\<alpha> ?ts) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 2)),
              template_app
               (template_hole 12, template_app (template_hole 11, t_empty)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_var 2),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Challenge3.2",
     "(?r, ?c) ~: fst ` set ?ts & distinct (map fst ?ts) ==>
      pr ?n (\<alpha> (((?r, ?c), ?v) # ?ts)) ?x ?i =
      pr ?n (\<alpha> [((?r, ?c), ?v)]) ?x ?i + pr ?n (\<alpha> ?ts) ?x ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 6),
                        template_var 5)),
                    template_app
                     (template_app (template_hole 11, t_empty),
                      template_app (template_hole 9, template_var 4))))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 10),
                  template_var 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 12, template_var 6),
                           template_var 5)),
                       template_var 2)),
                   template_var 4))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 12, template_var 6),
                               template_var 5)),
                           template_var 2)),
                       template_hole 0))),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app (template_hole 4, template_var 4)),
               template_var 1),
             template_var 0))))),
    ("Challenge3.correct_aux",
     "[| distinct (map fst ?ts); ALL ((r, c), uu_):set ?ts. r < ?n |]
      ==> ALL i.
             fold (%((r, c), v) y. y(c := y c + ?x r * v)) ?ts ?m i =
             ?m i + pr ?n (\<alpha> ?ts) ?x i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 3)),
              template_app
               (template_hole 12, template_app (template_hole 11, t_empty)))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Challenge3.parallel_termination",
     "[| 0 < ?n;
         comp_fun_commute.reachable (%((r, c), v) y. y(c := y c + ?x r * v))
          ?n ?ts (%_. 0) ?s |]
      ==> EX s'.
             comp_fun_commute.final ?n s' &
             (comp_fun_commute.step (%((r, c), v) y. y(c := y c + ?x r * v))
               ?n)^**
              ?s s'",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_hole 10,
                        template_app (template_hole 9, t_empty))),
                    template_var 3),
                  template_var 1),
                t_empty),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Challenge3.parallel_correct",
     "[| distinct (map fst ?ts); ALL ((r, c), uu_):set ?ts. r < ?n; 0 < ?n;
         comp_fun_commute.reachable (%((r, c), v) y. y(c := y c + ?x r * v))
          ?n ?ts (%_. 0) (?ts', ?ms, ?r);
         comp_fun_commute.final ?n (?ts', ?ms, ?r) |]
      ==> ?r = pr ?n (\<alpha> ?ts) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 20, template_hole 19),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 5)),
              template_app
               (template_hole 16, template_app (template_hole 15, t_empty)))
            ),
        template_inequation (less_than, template_hole 13, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, t_empty))),
                    template_var 4),
                  template_var 5),
                t_empty),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app (template_hole 0, template_var 5)),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.Challenge3Templates"
### 0.984s elapsed time, 1.266s cpu time, 0.166s GC time
val it = (): unit
