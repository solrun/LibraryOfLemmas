Loading theory "Draft.Challenge1A" (required by "Draft.Challenge1ATemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "size_list (nat o abs) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.164s elapsed time, 0.659s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.865s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs")
Found termination order: "size_list (nat o abs) <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "length <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "length <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size_list length <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "length <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale cnvSpec
  fixes fP :: "'a list => bool"
    and P :: "'a => 'a => bool"
  assumes "cnvSpec fP P"
locale cnvSpec'
  fixes fP :: "'a list => bool"
    and P :: "'a => 'a => bool"
    and P' :: "'a => bool"
  assumes "cnvSpec' fP P P'"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Challenge1A"
### 0.727s elapsed time, 2.842s cpu time, 0.305s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.861s elapsed time, 3.248s cpu time, 0.382s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.931s elapsed time, 3.153s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.811s elapsed time, 4.298s cpu time, 0.946s GC time
Loading theory "Draft.Templates" (required by "Draft.Challenge1ATemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.121s cpu time, 0.056s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Challenge1ATemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.443s cpu time, 0.000s GC time
Loading theory "Draft.Challenge1ATemplates"
val templateLemmas =
   [("Challenge1A.tkd", "decr (take_decr ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.tki", "incr (take_incr ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.maximal_cuts", "maxi (cuts ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Challenge1A.concat_cuts", "concat (cuts ?xs) = ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Challenge1A.all_correct", "[] ~: set (cuts ?xs)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("Challenge1A.icod",
     "incr (Challenge1A.take ?xs) | decr (Challenge1A.take ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1A.take_conc", "EX ys. ?xs = Challenge1A.take ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.tdconc", "EX ys. ?xs = take_decr ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.ticonc", "EX ys. ?xs = take_incr ?xs @ ys",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Challenge1A.maxi_imp_non_empty", "maxi ?xs ==> [] ~: set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Challenge1A.cuts_incr_decr", "ALL c:set (cuts ?xs). incr c | decr c",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           t_empty)
         )),
    ("Challenge1A.take_non_empty",
     "?xs ~= [] ==> Challenge1A.take ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.take_decr_non_empty", "?xs ~= [] ==> take_decr ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.take_incr_non_empty", "?xs ~= [] ==> take_incr ?xs ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Challenge1A.decr_by_idx",
     "decr ?xs = (ALL i<length ?xs - 1. ?xs ! Suc i <= ?xs ! i)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Challenge1A.incr_by_idx",
     "incr ?xs = (ALL i<length ?xs - 1. ?xs ! i < ?xs ! Suc i)",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Challenge1A.inv_cuts",
     "cuts ?xs = ?c # ?cs ==>
      EX ys. ?c = Challenge1A.take ?xs & ?xs = ?c @ ys & ?cs = cuts ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Challenge1A.tdconc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = take_decr ?xs @ ys &
         (ys ~= [] --> ~ hd ys <= last (take_decr ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Challenge1A.ticonc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = take_incr ?xs @ ys &
         (ys ~= [] --> ~ last (take_incr ?xs) < hd ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Challenge1A.take_conc''",
     "?xs ~= [] ==>
      EX ys.
         ?xs = Challenge1A.take ?xs @ ys &
         (ys ~= [] -->
          incr (Challenge1A.take ?xs) &
          ~ last (Challenge1A.take ?xs) < hd ys |
          decr (Challenge1A.take ?xs) &
          ~ hd ys <= last (Challenge1A.take ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Challenge1A.take_conc'",
     "?xs ~= [] ==>
      EX ys.
         ?xs = Challenge1A.take ?xs @ ys &
         (ys ~= [] -->
          Challenge1A.take ?xs = take_incr ?xs &
          ~ last (take_incr ?xs) < hd ys |
          Challenge1A.take ?xs = take_decr ?xs &
          ~ hd ys <= last (take_decr ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Challenge1A.maxi_by_idx",
     "maxi ?xs =
      ((ALL i<length ?xs. ?xs ! i ~= []) &
       (ALL i<length ?xs - 1.
           incr (?xs ! i) & ~ last (?xs ! i) < hd (?xs ! Suc i) |
           decr (?xs ! i) & ~ hd (?xs ! Suc i) <= last (?xs ! i)))",
     template_equation
      (template_app (template_hole 19, template_var 0),
       template_app
        (template_app
          (template_hole 18, template_app (template_hole 17, t_empty)),
         template_app (template_hole 17, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Challenge1ATemplates"
### 0.293s elapsed time, 0.440s cpu time, 0.067s GC time
val it = (): unit
