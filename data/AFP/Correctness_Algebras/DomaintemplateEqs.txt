   [("Transfer.Domainp_refl", "Domainp ?T = Domainp ?T",
     template_equation
      (template_app (template_hole 0, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Relation.Domain_Id_on", "Domain (Id_on ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Transitive_Closure.Domain_rtrancl", "Domain (?R^*) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Relation.Domain_fst", "Domain ?r = fst ` ?r",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Relation.Domain_converse", "Domain (?r^-1) = Range ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Relation.fst_eq_Domain", "fst ` ?R = Domain ?R",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Relation.Domain_empty_iff", "(Domain ?r = {}) = (?r = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Lifting_Set.Domainp_set",
     "Domainp (rel_set ?T) = (%A. Ball A (Domainp ?T))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       t_empty)),
    ("Transfer.Domainp_iff", "Domainp ?T ?x = (EX y. ?T ?x y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Relation.Domain_Union",
     "Domain (\<Union> ?S) = \<Union> (Domain ` ?S)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Relation.Domain_Un_eq", "Domain (?A Un ?B) = Domain ?A Un Domain ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Relation.Domain_insert",
     "Domain (insert (?a, ?b) ?r) = insert ?a (Domain ?r)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 0)))),
    ("Relation.Domain_unfold", "Domain ?r = {x. EX y. (x, y) : ?r}",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Relation.Domain_iff", "(?a : Domain ?r) = (EX y. (?a, y) : ?r)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Relation.Domainp_Domain_eq",
     "Domainp (%x xa. (x, xa) : ?r) = (%x. x : Domain ?r)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Relation.Domain_Collect_case_prod",
     "Domain {(x, y). ?P x y} = {x. EX y. ?P x y}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app (template_hole 1, t_empty)))]
