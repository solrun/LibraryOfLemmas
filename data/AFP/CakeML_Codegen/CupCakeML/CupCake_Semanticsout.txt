Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.115s elapsed time, 0.459s cpu time, 0.052s GC time
Loading theory "Draft.CakeML_Utils" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.CupCake_Semantics" via "Draft.CupCake_Env")
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.525s cpu time, 0.052s GC time
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.749s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.864s elapsed time, 2.717s cpu time, 0.325s GC time
### theory "HOL-Library.BigO"
### 0.728s elapsed time, 2.131s cpu time, 0.273s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CupCake_SemanticsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.116s cpu time, 0.069s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.CakeML_Utils"
### 2.872s elapsed time, 5.504s cpu time, 0.919s GC time
Loading theory "Draft.CupCake_Env" (required by "Draft.CupCake_SemanticsTemplates" via "Draft.CupCake_Semantics")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
locale cakeml_static_env
  fixes static_cenv :: "(char list, char list, nat * tid_or_exn) namespace"
  assumes "cakeml_static_env static_cenv"
### Ambiguous input (line 37 of "$AFP/CakeML_Codegen/CupCakeML/CupCake_Env.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty_sem_env)
###     ("_record"
###       ("_fields" ("_field" ("_constify" sem_env.v) ("_position" nsEmpty))
###         ("_field" ("_constify" sem_env.c) ("_position" static_cenv))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty_sem_env)
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" sem_env.v) ("_position" nsEmpty))
###         ("_datatype_field" ("_constify" sem_env.c)
###           ("_position" static_cenv))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/CakeML_Codegen/CupCakeML/CupCake_Env.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" is_cupcake_all_env)
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" sem_env.v)
###             ("_applC" ("_position" Bind)
###               ("_cargs" ("_position" v0) ("\<^const>List.list.Nil"))))
###           ("_field" ("_constify" sem_env.c) ("_position" c0)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c0) ("_position" static_cenv))
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("\<^const>Fun.comp" ("_position" is_cupcake_value)
###             ("_position" snd))
###           ("_position" v0))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" is_cupcake_all_env)
###       ("_datatype_record"
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" sem_env.v)
###             ("_applC" ("_position" Bind)
###               ("_cargs" ("_position" v0) ("\<^const>List.list.Nil"))))
###           ("_datatype_field" ("_constify" sem_env.c) ("_position" c0)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c0) ("_position" static_cenv))
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("\<^const>Fun.comp" ("_position" is_cupcake_value)
###             ("_position" snd))
###           ("_position" v0))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "case_sum size (size_sem_env size) <*mlex*> {}"
### Ambiguous input (line 56 of "$AFP/CakeML_Codegen/CupCakeML/CupCake_Env.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env)
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" sem_env.v)
###           ("_applC" ("_position" Bind)
###             ("_cargs" ("_position" v) ("\<^const>List.list.Nil"))))
###         ("_field" ("_constify" sem_env.c) ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env)
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" sem_env.v)
###           ("_applC" ("_position" Bind)
###             ("_cargs" ("_position" v) ("\<^const>List.list.Nil"))))
###         ("_datatype_field" ("_constify" sem_env.c) ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.CupCake_Env"
### 1.023s elapsed time, 1.218s cpu time, 0.075s GC time
Loading theory "Draft.CupCake_Semantics" (required by "Draft.CupCake_SemanticsTemplates")
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd p)))) <*mlex*> {}"
locale cakeml_static_env
  fixes static_cenv :: "(char list, char list, nat * tid_or_exn) namespace"
  assumes "cakeml_static_env static_cenv"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 434 of "$AFP/CakeML_Codegen/CupCakeML/CupCake_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cupcake_evaluate_single)
###       ("_cargs" ("_position" env)
###         ("_cargs" ("_position" e)
###           ("_applC" ("_position" Rval) ("_position" v0))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cupcake_match_result)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_position" v0)
###               ("_cargs" ("_position" pes) ("_position" Bindv)))))
###         ("_applC" ("_position" Rval)
###           ("_tuple" ("_position" e')
###             ("_tuple_args" ("\<^const>Pure.dummy_pattern")
###               ("_tuple_arg" ("_position" env')))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" cupcake_evaluate_single)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" env)
###               ("_datatype_field_update" ("_constify" sem_env.v)
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs"
###                     ("_applC" ("_position" alist_to_ns) ("_position" env'))
###                     ("_applC" ("_position" sem_env.v) ("_position" env))))))
###             ("_cargs" ("_position" e') ("_position" bv)))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" cupcake_evaluate_single)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_applC" ("_position" Mat)
###                 ("_cargs" ("_position" e) ("_position" pes)))
###               ("_position" bv))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cupcake_evaluate_single)
###       ("_cargs" ("_position" env)
###         ("_cargs" ("_position" e)
###           ("_applC" ("_position" Rval) ("_position" v0))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cupcake_match_result)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_position" v0)
###               ("_cargs" ("_position" pes) ("_position" Bindv)))))
###         ("_applC" ("_position" Rval)
###           ("_tuple" ("_position" e')
###             ("_tuple_args" ("\<^const>Pure.dummy_pattern")
###               ("_tuple_arg" ("_position" env')))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" cupcake_evaluate_single)
###           ("_cargs"
###             ("_record_update" ("_position" env)
###               ("_field_update" ("_constify" sem_env.v)
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs"
###                     ("_applC" ("_position" alist_to_ns) ("_position" env'))
###                     ("_applC" ("_position" sem_env.v) ("_position" env))))))
###             ("_cargs" ("_position" e') ("_position" bv)))))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" cupcake_evaluate_single)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_applC" ("_position" Mat)
###                 ("_cargs" ("_position" e) ("_position" pes)))
###               ("_position" bv))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "cupcake_evaluate_single"
  Proving monotonicity ...
locale cakeml_static_env
  fixes static_cenv :: "(char list, char list, nat * tid_or_exn) namespace"
  assumes "cakeml_static_env static_cenv"
### theory "Draft.CupCake_Semantics"
### 2.143s elapsed time, 2.331s cpu time, 0.148s GC time
Loading theory "Draft.CupCake_SemanticsTemplates"
val templateLemmas =
   [("CupCake_Semantics.cupcake_nsLookup_eq",
     "nsLookup ?ns (Short ?n) = cupcake_nsLookup ?ns ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("CupCake_Semantics.list_all2_shortcircuit_mono",
     "?R <= ?Q ==> list_all2_shortcircuit ?R <= list_all2_shortcircuit ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CupCake_Semantics.list_all2_shortcircuit_rval",
     "list_all2_shortcircuit ?P ?xs (map Rval ?ys) =
      list_all2 (%x y. ?P x (Rval y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("CupCake_Semantics.cupcake_pmatch_eq",
     "is_cupcake_pat ?pat ==>
      pmatch_single ?envC ?s ?pat ?v0.0 ?env =
      cupcake_pmatch ?envC ?pat ?v0.0 ?env",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("CupCake_Semantics.list_all2_shortcircuit_weaken",
     "[| list_all2_shortcircuit ?P ?xs ?ys;
         !!xs ys. ?P xs ys ==> ?Q xs ys |]
      ==> list_all2_shortcircuit ?Q ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("CupCake_Semantics.cupcake_match_result_eq",
     "cupcake_clauses ?pes ==>
      match_result ?env ?s ?v ?pes ?err_v =
      map_result (%(e, uu_, env'). (e, env')) id
       (cupcake_match_result (sem_env.c ?env) ?v ?pes ?err_v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13, template_app (template_hole 12, t_empty)),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_hole 2),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 1),
               template_var 4),
             template_var 0))))),
    ("CupCake_Semantics.cupcake_match_resultE",
     "[| cupcake_match_result ?cenv ?v0.0 ?pes ?err_v =
         Rval (?e, ?p, ?env');
         !!init rest.
            [| ?pes = init @ (?p, ?e) # rest; distinct (pat_bindings ?p []);
               list_all
                (%(p, e).
                    cupcake_pmatch ?cenv p ?v0.0 [] = No_match &
                    distinct (pat_bindings p []))
                init;
               cupcake_pmatch ?cenv ?p ?v0.0 [] = Match ?env' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 19, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, template_var 3),
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1)))),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("CupCake_Semantics.list_all2_shortcircuit_induct",
     "[| list_all2_shortcircuit ?P ?xs ?ys; ?R [] [];
         !!x xs y ys.
            [| ?P x (Rval y); list_all2_shortcircuit ?P xs ys; ?R xs ys |]
            ==> ?R (x # xs) (Rval y # ys);
         !!x xs y ys. ?P x (Rerr y) ==> ?R (x # xs) (Rerr y # ys) |]
      ==> ?R ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 10),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.CupCake_SemanticsTemplates"
### 2.403s elapsed time, 3.156s cpu time, 0.794s GC time
val it = (): unit
