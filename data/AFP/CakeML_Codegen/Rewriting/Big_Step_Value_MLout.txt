Loading theory "HOL-Library.Stream" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.358s cpu time, 0.000s GC time
Loading theory "Draft.Compiler_Utils" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.Big_Step_Value_ML" via "Draft.Big_Step_Value" via "Draft.Big_Step_Sterm" via "Draft.Rewriting_Sterm" via "Draft.Rewriting_Pterm" via "Draft.Rewriting_Pterm_Elim" via "Draft.Rewriting_Nterm" via "Draft.Rewriting_Term" via "Draft.General_Rewriting" via "Draft.Terms_Extras")
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.571s cpu time, 0.046s GC time
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.801s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.ExtrEqs")
locale rekey
  fixes f :: "'a => 'b"
  assumes "rekey f"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.844s elapsed time, 2.662s cpu time, 0.269s GC time
### theory "HOL-Library.BigO"
### 0.739s elapsed time, 2.121s cpu time, 0.298s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Big_Step_Value_MLTemplates")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Compiler_Utils"
### 1.259s elapsed time, 3.526s cpu time, 0.826s GC time
Loading theory "Draft.Terms_Extras" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.Big_Step_Value_ML" via "Draft.Big_Step_Value" via "Draft.Big_Step_Sterm" via "Draft.Rewriting_Sterm" via "Draft.Rewriting_Pterm" via "Draft.Rewriting_Pterm_Elim" via "Draft.Rewriting_Nterm" via "Draft.Rewriting_Term" via "Draft.General_Rewriting")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.708s elapsed time, 1.639s cpu time, 0.525s GC time
signature HOL_TERM =
  sig
    val list_comb: term * term list -> term
    val mk_eq: term -> term
    val mk_term: bool -> term -> term
    val strip_comb: term -> term * term list
  end
structure HOL_Term: HOL_TERM
val mk_string = fn: string -> term
val mk_name = fn: string -> term
val fsetT = fn: typ -> typ
val fmapT = fn: typ -> typ -> typ
val mk_fset = fn: typ -> term list -> term
val mk_fmap = fn: typ * typ -> (term * term) list -> term
consts
  basic_rule :: "Term_Class.term * 'a => bool"
consts
  split_rule :: "Term_Class.term * 'a => name * Term_Class.term list * 'a"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  patvars :: "pat => name fset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### pattern_compatible (Const ?v1) ?u1 ==
### Const ?v1 = ?u1 | non_overlapping (Const ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (Free ?v1) ?u1 ==
### Free ?v1 = ?u1 | non_overlapping (Free ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (\<Lambda> ?v1) ?u1 ==
### \<Lambda> ?v1 = ?u1 | non_overlapping (\<Lambda> ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (Bound ?v1) ?u1 ==
### Bound ?v1 = ?u1 | non_overlapping (Bound ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Const ?v1) ==
### ?t1 = Const ?v1 | non_overlapping ?t1 (Const ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Free ?v1) ==
### ?t1 = Free ?v1 | non_overlapping ?t1 (Free ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (\<Lambda> ?v1) ==
### ?t1 = \<Lambda> ?v1 | non_overlapping ?t1 (\<Lambda> ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Bound ?v1) ==
### ?t1 = Bound ?v1 | non_overlapping ?t1 (Bound ?v1)
Proofs for inductive predicate(s) "rev_accum_rel"
  Proving monotonicity ...
locale experiment9774454
class term = pre_term +
  fixes abs_pred :: "('a => bool) => 'a => bool"
  assumes
    "raw_induct":
      "!!P t.
          [| !!name. P (const name); !!name. P (free name);
             !!t\<^sub>1 t\<^sub>2.
                [| P t\<^sub>1; P t\<^sub>2 |]
                ==> P (app t\<^sub>1 t\<^sub>2);
             !!t. abs_pred P t |]
          ==> P t"
  assumes
    "raw_subst_id":
      "!!t. abs_pred (%t. ALL env. id_env env --> subst t env = t) t"
    and
    "raw_subst_drop":
      "!!x t.
          abs_pred
           (%t. x |\<notin>| frees t -->
                (ALL env. subst t (fmdrop x env) = subst t env))
           t"
    and
    "raw_subst_indep":
      "!!t. abs_pred
             (%t. ALL env\<^sub>1 env\<^sub>2.
                     closed_env env\<^sub>2 -->
                     fdisjnt (fmdom env\<^sub>1) (fmdom env\<^sub>2) -->
                     subst t (env\<^sub>1 ++\<^sub>f env\<^sub>2) =
                     subst (subst t env\<^sub>2) env\<^sub>1)
             t"
    and
    "raw_subst_frees":
      "!!t. abs_pred
             (%t. ALL env.
                     closed_env env -->
                     frees (subst t env) = frees t |-| fmdom env)
             t"
    and
    "raw_subst_consts'":
      "!!t. abs_pred
             (%a. ALL x.
                     consts (subst a x) =
                     consts a |\<union>|
                     ffUnion (consts |`| fmimage x (frees a)))
             t"
    and "abs_pred_trivI": "!!P t. P t ==> abs_pred P t"
### theory "Draft.Terms_Extras"
### 1.223s elapsed time, 1.660s cpu time, 0.140s GC time
Loading theory "Draft.General_Rewriting" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.Big_Step_Value_ML" via "Draft.Big_Step_Value" via "Draft.Big_Step_Sterm" via "Draft.Rewriting_Sterm" via "Draft.Rewriting_Pterm" via "Draft.Rewriting_Pterm_Elim" via "Draft.Rewriting_Nterm" via "Draft.Rewriting_Term")
Loading theory "Draft.HOL_Datatype" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.Big_Step_Value_ML" via "Draft.Big_Step_Value" via "Draft.Big_Step_Sterm" via "Draft.Rewriting_Sterm" via "Draft.Rewriting_Pterm" via "Draft.Rewriting_Pterm_Elim" via "Draft.Rewriting_Nterm" via "Draft.Rewriting_Term" via "Draft.Strong_Term" via "Draft.Consts" via "Draft.Constructors")
locale rewriting
  fixes R :: "'a => 'a => bool"
  assumes "rewriting R"
### theory "Draft.General_Rewriting"
### 0.039s elapsed time, 0.079s cpu time, 0.000s GC time
signature HOL_DATATYPE =
  sig
    val mk_dt_def: Proof.context -> string -> term
    val mk_typ: bool -> typ -> term
  end
structure HOL_Datatype: HOL_DATATYPE
### theory "Draft.HOL_Datatype"
### 1.011s elapsed time, 1.122s cpu time, 0.103s GC time
Loading theory "Draft.Constructors" (required by "Draft.Big_Step_Value_MLTemplates" via "Draft.Big_Step_Value_ML" via "Draft.Big_Step_Value" via "Draft.Big_Step_Sterm" via "Draft.Rewriting_Sterm" via "Draft.Rewriting_Pterm" via "Draft.Rewriting_Pterm_Elim" via "Draft.Rewriting_Nterm" via "Draft.Rewriting_Term" via "Draft.Strong_Term" via "Draft.Consts")
locale constructors
  fixes C_info :: "(name, dt_def) fmap"
### theory "Draft.Constructors"
### 0.350s elapsed time, 0.352s cpu time, 0.000s GC time
*** Failed to load theory "Draft.Consts" (unresolved "Draft.Constructors")
*** Failed to load theory "Draft.Strong_Term" (unresolved "Draft.Consts")
*** Failed to load theory "Draft.Rewriting_Term" (unresolved "Draft.Strong_Term")
*** Failed to load theory "Draft.Sterm" (unresolved "Draft.Strong_Term")
*** Failed to load theory "Draft.Pterm" (unresolved "Draft.Consts", "Draft.Sterm")
*** Failed to load theory "Draft.Term_as_Value" (unresolved "Draft.Sterm")
*** Failed to load theory "Draft.Value" (unresolved "Draft.Term_as_Value")
*** Failed to load theory "Draft.Rewriting_Nterm" (unresolved "Draft.Rewriting_Term", "Draft.Strong_Term")
*** Failed to load theory "Draft.Rewriting_Pterm_Elim" (unresolved "Draft.Pterm", "Draft.Rewriting_Nterm")
*** Failed to load theory "Draft.Rewriting_Pterm" (unresolved "Draft.Rewriting_Pterm_Elim")
*** Failed to load theory "Draft.Rewriting_Sterm" (unresolved "Draft.Rewriting_Pterm")
*** Failed to load theory "Draft.Big_Step_Sterm" (unresolved "Draft.Rewriting_Sterm", "Draft.Term_as_Value")
*** Failed to load theory "Draft.Big_Step_Value" (unresolved "Draft.Big_Step_Sterm", "Draft.Value")
*** Failed to load theory "Draft.Big_Step_Value_ML" (unresolved "Draft.Big_Step_Value")
*** Failed to load theory "Draft.Big_Step_Value_MLTemplates" (unresolved "Draft.Big_Step_Value_ML")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "110")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 44 of "$AFP/CakeML_Codegen/Terms/Constructors.thy")
Exception- TOPLEVEL_ERROR raised
