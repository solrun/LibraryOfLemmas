Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Terms_ExtrasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Terms_ExtrasTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Terms_ExtrasTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Terms_ExtrasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.118s elapsed time, 0.463s cpu time, 0.051s GC time
Loading theory "Draft.Compiler_Utils" (required by "Draft.Terms_ExtrasTemplates" via "Draft.Terms_Extras")
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.538s cpu time, 0.051s GC time
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.722s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Terms_ExtrasTemplates" via "Draft.ExtrEqs")
locale rekey
  fixes f :: "'a => 'b"
  assumes "rekey f"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.812s elapsed time, 2.565s cpu time, 0.298s GC time
### theory "HOL-Library.BigO"
### 0.699s elapsed time, 2.048s cpu time, 0.327s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Terms_ExtrasTemplates")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Compiler_Utils"
### 1.168s elapsed time, 3.274s cpu time, 0.808s GC time
Loading theory "Draft.Terms_Extras" (required by "Draft.Terms_ExtrasTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.639s elapsed time, 1.503s cpu time, 0.527s GC time
signature HOL_TERM =
  sig
    val list_comb: term * term list -> term
    val mk_eq: term -> term
    val mk_term: bool -> term -> term
    val strip_comb: term -> term * term list
  end
structure HOL_Term: HOL_TERM
val mk_string = fn: string -> term
val mk_name = fn: string -> term
val fsetT = fn: typ -> typ
val fmapT = fn: typ -> typ -> typ
val mk_fset = fn: typ -> term list -> term
val mk_fmap = fn: typ * typ -> (term * term) list -> term
consts
  basic_rule :: "Term_Class.term * 'a => bool"
consts
  split_rule :: "Term_Class.term * 'a => name * Term_Class.term list * 'a"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  patvars :: "pat => name fset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### pattern_compatible (Const ?v1) ?u1 ==
### Const ?v1 = ?u1 | non_overlapping (Const ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (Free ?v1) ?u1 ==
### Free ?v1 = ?u1 | non_overlapping (Free ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (\<Lambda> ?v1) ?u1 ==
### \<Lambda> ?v1 = ?u1 | non_overlapping (\<Lambda> ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible (Bound ?v1) ?u1 ==
### Bound ?v1 = ?u1 | non_overlapping (Bound ?v1) ?u1
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Const ?v1) ==
### ?t1 = Const ?v1 | non_overlapping ?t1 (Const ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Free ?v1) ==
### ?t1 = Free ?v1 | non_overlapping ?t1 (Free ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (\<Lambda> ?v1) ==
### ?t1 = \<Lambda> ?v1 | non_overlapping ?t1 (\<Lambda> ?v1)
### Ignoring duplicate rewrite rule:
### pattern_compatible ?t1 (Bound ?v1) ==
### ?t1 = Bound ?v1 | non_overlapping ?t1 (Bound ?v1)
Proofs for inductive predicate(s) "rev_accum_rel"
  Proving monotonicity ...
locale experiment9774454
class term = pre_term +
  fixes abs_pred :: "('a => bool) => 'a => bool"
  assumes
    "raw_induct":
      "!!P t.
          [| !!name. P (const name); !!name. P (free name);
             !!t\<^sub>1 t\<^sub>2.
                [| P t\<^sub>1; P t\<^sub>2 |]
                ==> P (app t\<^sub>1 t\<^sub>2);
             !!t. abs_pred P t |]
          ==> P t"
  assumes
    "raw_subst_id":
      "!!t. abs_pred (%t. ALL env. id_env env --> subst t env = t) t"
    and
    "raw_subst_drop":
      "!!x t.
          abs_pred
           (%t. x |\<notin>| frees t -->
                (ALL env. subst t (fmdrop x env) = subst t env))
           t"
    and
    "raw_subst_indep":
      "!!t. abs_pred
             (%t. ALL env\<^sub>1 env\<^sub>2.
                     closed_env env\<^sub>2 -->
                     fdisjnt (fmdom env\<^sub>1) (fmdom env\<^sub>2) -->
                     subst t (env\<^sub>1 ++\<^sub>f env\<^sub>2) =
                     subst (subst t env\<^sub>2) env\<^sub>1)
             t"
    and
    "raw_subst_frees":
      "!!t. abs_pred
             (%t. ALL env.
                     closed_env env -->
                     frees (subst t env) = frees t |-| fmdom env)
             t"
    and
    "raw_subst_consts'":
      "!!t. abs_pred
             (%a. ALL x.
                     consts (subst a x) =
                     consts a |\<union>|
                     ffUnion (consts |`| fmimage x (frees a)))
             t"
    and "abs_pred_trivI": "!!P t. P t ==> abs_pred P t"
### theory "Draft.Terms_Extras"
### 1.138s elapsed time, 1.513s cpu time, 0.167s GC time
Loading theory "Draft.Terms_ExtrasTemplates"
val templateLemmas =
   [("Terms_Extras.pattern_compatible_refl", "pattern_compatible ?t ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Terms_Extras.split_unsplit", "split_rule (unsplit_rule ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms_Extras.mk_pat_simps", "mk_pat (Free ?name) = Patvar ?name",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms_Extras.rev_accum_rel_refl",
     "reflp ?R ==> rev_accum_rel ?R ?xs ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Terms_Extras.unsplit_split",
     "basic_rule ?r ==> unsplit_rule (split_rule ?r) = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Terms_Extras.mk_pat_frees",
     "Pats.linear ?p ==> patvars (mk_pat ?p) = frees ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Terms_Extras.mk_pat_simps",
     "mk_pat (?name $$ ?args) = Patconstr ?name (map mk_pat ?args)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("Terms_Extras.rev_accum_rel_length",
     "rev_accum_rel ?R ?xs ?ys ==> length ?xs = length ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms_Extras.rev_accum_rel_butlast",
     "rev_accum_rel ?P ?xs ?ys ==>
      rev_accum_rel ?P (butlast ?xs) (butlast ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (\<Lambda> ?v) =
      (?t = \<Lambda> ?v | non_overlapping ?t (\<Lambda> ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Bound ?v) =
      (?t = Bound ?v | non_overlapping ?t (Bound ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Const ?v) =
      (?t = Const ?v | non_overlapping ?t (Const ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Free ?v) =
      (?t = Free ?v | non_overlapping ?t (Free ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (\<Lambda> ?v) ?u =
      (\<Lambda> ?v = ?u | non_overlapping (\<Lambda> ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Bound ?v) ?u =
      (Bound ?v = ?u | non_overlapping (Bound ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Const ?v) ?u =
      (Const ?v = ?u | non_overlapping (Const ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Free ?v) ?u =
      (Free ?v = ?u | non_overlapping (Free ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.rev_accum_rel_snoc_eqE",
     "rev_accum_rel ?P (?xs @ [?a]) (?xs @ [?b]) ==> ?P ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Terms_Extras.pattern_compatible_combI",
     "[| patterns_compatible ?xs ?ys; pattern_compatible ?f ?g |]
      ==> pattern_compatible (list_comb ?f ?xs) (list_comb ?g ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (app ?t\<^sub>1 ?t\<^sub>2)
       (app ?u\<^sub>1 ?u\<^sub>2) =
      (pattern_compatible ?t\<^sub>1 ?u\<^sub>1 &
       (?t\<^sub>1 = ?u\<^sub>1 -->
        pattern_compatible ?t\<^sub>2 ?u\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_combD",
     "[| length ?xs = length ?ys;
         pattern_compatible (list_comb ?f ?xs) (list_comb ?f ?ys) |]
      ==> patterns_compatible ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 2),
             template_var 1)
           ))),
    ("Terms_Extras.arityI",
     "[| fBall ?rs (%(pats, uu_). length pats = ?n); ?rs ~= {||} |]
      ==> arity ?rs = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, t_empty))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Terms_Extras.pattern_compatible_cases",
     "[| pattern_compatible ?t ?u; ?t = ?u ==> ?thesis;
         non_overlapping ?t ?u ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Terms_Extras.basic_ruleI",
     "[| Pats.linear ?lhs; is_const (fst (strip_comb ?lhs));
         ~ is_const ?lhs; frees ?rhs |\<subseteq>| frees ?lhs |]
      ==> basic_rule (?lhs, ?rhs)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Terms_Extras.match_compatible_env_eq",
     "[| pattern_compatible ?t\<^sub>1 ?t\<^sub>2; Pats.linear ?t\<^sub>1;
         Pats.linear ?t\<^sub>2; match ?t\<^sub>1 ?u = Some ?env\<^sub>1;
         match ?t\<^sub>2 ?u = Some ?env\<^sub>2 |]
      ==> ?env\<^sub>1 = ?env\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Terms_Extras.match_compatible_pat_eq",
     "[| pattern_compatible ?t\<^sub>1 ?t\<^sub>2; Pats.linear ?t\<^sub>1;
         Pats.linear ?t\<^sub>2; match ?t\<^sub>1 ?u = Some ?env\<^sub>1;
         match ?t\<^sub>2 ?u = Some ?env\<^sub>2 |]
      ==> ?t\<^sub>1 = ?t\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 4, template_var 3))),
    ("Terms_Extras.matchs_compatible_eq",
     "[| patterns_compatible ?ts\<^sub>1 ?ts\<^sub>2; linears ?ts\<^sub>1;
         linears ?ts\<^sub>2; matchs ?ts\<^sub>1 ?us = Some ?env\<^sub>1;
         matchs ?ts\<^sub>2 ?us = Some ?env\<^sub>2 |]
      ==> ?ts\<^sub>1 = ?ts\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 4, template_var 3))),
    ("Terms_Extras.matchs_compatible_eq",
     "[| patterns_compatible ?ts\<^sub>1 ?ts\<^sub>2; linears ?ts\<^sub>1;
         linears ?ts\<^sub>2; matchs ?ts\<^sub>1 ?us = Some ?env\<^sub>1;
         matchs ?ts\<^sub>2 ?us = Some ?env\<^sub>2 |]
      ==> ?env\<^sub>1 = ?env\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Terms_Extras.compatible_find_match",
     "[| pattern_compatibles (fset_of_list ?cs);
         list_all (Pats.linear o fst) ?cs; is_fmap (fset_of_list ?cs);
         match ?pat ?t = Some ?env; (?pat, ?rhs) : set ?cs |]
      ==> find_match ?cs ?t = Some (?env, ?pat, ?rhs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19, template_app (template_hole 18, t_empty)),
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_hole 11)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 15, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 0)),
              template_app (template_hole 4, template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 0)))))),
    ("Terms_Extras.rev_accum_relE",
     "[| rev_accum_rel ?P ?xs ?ys; [| ?xs = []; ?ys = [] |] ==> ?Pa;
         !!xs ys x y.
            [| ?xs = xs @ [x]; ?ys = ys @ [y]; rev_accum_rel ?P xs ys;
               xs = ys ==> ?P x y |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 1, template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Terms_Extras.pattern_compatible_induct",
     "[| !!t\<^sub>1 t\<^sub>2 u\<^sub>1 u\<^sub>2.
            [| ?P t\<^sub>1 u\<^sub>1;
               t\<^sub>1 = u\<^sub>1 ==> ?P t\<^sub>2 u\<^sub>2 |]
            ==> ?P (t\<^sub>1 $ t\<^sub>2) (u\<^sub>1 $ u\<^sub>2);
         !!v u. ?P (Const v) u; !!v u. ?P (Free v) u;
         !!v u. ?P (\<Lambda> v) u; !!v u. ?P (Bound v) u;
         !!t v. ?P t (Const v); !!t v. ?P t (Free v);
         !!t v. ?P t (\<Lambda> v); !!t v. ?P t (Bound v) |]
      ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Terms_ExtrasTemplates"
### 0.430s elapsed time, 0.592s cpu time, 0.084s GC time
val it = (): unit
