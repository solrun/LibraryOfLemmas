   [("Terms_Extras.pattern_compatible_refl", "pattern_compatible ?t ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Terms_Extras.split_unsplit", "split_rule (unsplit_rule ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Terms_Extras.mk_pat_simps", "mk_pat (Free ?name) = Patvar ?name",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Terms_Extras.rev_accum_rel_refl",
     "reflp ?R ==> rev_accum_rel ?R ?xs ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Terms_Extras.unsplit_split",
     "basic_rule ?r ==> unsplit_rule (split_rule ?r) = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Terms_Extras.mk_pat_frees",
     "Pats.linear ?p ==> patvars (mk_pat ?p) = frees ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Terms_Extras.mk_pat_simps",
     "mk_pat (?name $$ ?args) = Patconstr ?name (map mk_pat ?args)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("Terms_Extras.rev_accum_rel_length",
     "rev_accum_rel ?R ?xs ?ys ==> length ?xs = length ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Terms_Extras.rev_accum_rel_butlast",
     "rev_accum_rel ?P ?xs ?ys ==>
      rev_accum_rel ?P (butlast ?xs) (butlast ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (\<Lambda> ?v) =
      (?t = \<Lambda> ?v | non_overlapping ?t (\<Lambda> ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Bound ?v) =
      (?t = Bound ?v | non_overlapping ?t (Bound ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Const ?v) =
      (?t = Const ?v | non_overlapping ?t (Const ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible ?t (Free ?v) =
      (?t = Free ?v | non_overlapping ?t (Free ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (\<Lambda> ?v) ?u =
      (\<Lambda> ?v = ?u | non_overlapping (\<Lambda> ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Bound ?v) ?u =
      (Bound ?v = ?u | non_overlapping (Bound ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Const ?v) ?u =
      (Const ?v = ?u | non_overlapping (Const ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (Free ?v) ?u =
      (Free ?v = ?u | non_overlapping (Free ?v) ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 1)),
                 template_var 0)))
           ))),
    ("Terms_Extras.rev_accum_rel_snoc_eqE",
     "rev_accum_rel ?P (?xs @ [?a]) (?xs @ [?b]) ==> ?P ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Terms_Extras.pattern_compatible_combI",
     "[| patterns_compatible ?xs ?ys; pattern_compatible ?f ?g |]
      ==> pattern_compatible (list_comb ?f ?xs) (list_comb ?g ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Terms_Extras.pattern_compatible_simps",
     "pattern_compatible (app ?t\<^sub>1 ?t\<^sub>2)
       (app ?u\<^sub>1 ?u\<^sub>2) =
      (pattern_compatible ?t\<^sub>1 ?u\<^sub>1 &
       (?t\<^sub>1 = ?u\<^sub>1 -->
        pattern_compatible ?t\<^sub>2 ?u\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)))
           ))),
    ("Terms_Extras.pattern_compatible_combD",
     "[| length ?xs = length ?ys;
         pattern_compatible (list_comb ?f ?xs) (list_comb ?f ?ys) |]
      ==> patterns_compatible ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 2),
             template_var 1)
           ))),
    ("Terms_Extras.arityI",
     "[| fBall ?rs (%(pats, uu_). length pats = ?n); ?rs ~= {||} |]
      ==> arity ?rs = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, t_empty))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Terms_Extras.pattern_compatible_cases",
     "[| pattern_compatible ?t ?u; ?t = ?u ==> ?thesis;
         non_overlapping ?t ?u ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Terms_Extras.basic_ruleI",
     "[| Pats.linear ?lhs; is_const (fst (strip_comb ?lhs));
         ~ is_const ?lhs; frees ?rhs |\<subseteq>| frees ?lhs |]
      ==> basic_rule (?lhs, ?rhs)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Terms_Extras.match_compatible_env_eq",
     "[| pattern_compatible ?t\<^sub>1 ?t\<^sub>2; Pats.linear ?t\<^sub>1;
         Pats.linear ?t\<^sub>2; match ?t\<^sub>1 ?u = Some ?env\<^sub>1;
         match ?t\<^sub>2 ?u = Some ?env\<^sub>2 |]
      ==> ?env\<^sub>1 = ?env\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Terms_Extras.match_compatible_pat_eq",
     "[| pattern_compatible ?t\<^sub>1 ?t\<^sub>2; Pats.linear ?t\<^sub>1;
         Pats.linear ?t\<^sub>2; match ?t\<^sub>1 ?u = Some ?env\<^sub>1;
         match ?t\<^sub>2 ?u = Some ?env\<^sub>2 |]
      ==> ?t\<^sub>1 = ?t\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 4, template_var 3))),
    ("Terms_Extras.matchs_compatible_eq",
     "[| patterns_compatible ?ts\<^sub>1 ?ts\<^sub>2; linears ?ts\<^sub>1;
         linears ?ts\<^sub>2; matchs ?ts\<^sub>1 ?us = Some ?env\<^sub>1;
         matchs ?ts\<^sub>2 ?us = Some ?env\<^sub>2 |]
      ==> ?ts\<^sub>1 = ?ts\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 4, template_var 3))),
    ("Terms_Extras.matchs_compatible_eq",
     "[| patterns_compatible ?ts\<^sub>1 ?ts\<^sub>2; linears ?ts\<^sub>1;
         linears ?ts\<^sub>2; matchs ?ts\<^sub>1 ?us = Some ?env\<^sub>1;
         matchs ?ts\<^sub>2 ?us = Some ?env\<^sub>2 |]
      ==> ?env\<^sub>1 = ?env\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Terms_Extras.compatible_find_match",
     "[| pattern_compatibles (fset_of_list ?cs);
         list_all (Pats.linear o fst) ?cs; is_fmap (fset_of_list ?cs);
         match ?pat ?t = Some ?env; (?pat, ?rhs) : set ?cs |]
      ==> find_match ?cs ?t = Some (?env, ?pat, ?rhs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19, template_app (template_hole 18, t_empty)),
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_hole 11)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 15, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 0)),
              template_app (template_hole 4, template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 0)))))),
    ("Terms_Extras.rev_accum_relE",
     "[| rev_accum_rel ?P ?xs ?ys; [| ?xs = []; ?ys = [] |] ==> ?Pa;
         !!xs ys x y.
            [| ?xs = xs @ [x]; ?ys = ys @ [y]; rev_accum_rel ?P xs ys;
               xs = ys ==> ?P x y |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 1, template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Terms_Extras.pattern_compatible_induct",
     "[| !!t\<^sub>1 t\<^sub>2 u\<^sub>1 u\<^sub>2.
            [| ?P t\<^sub>1 u\<^sub>1;
               t\<^sub>1 = u\<^sub>1 ==> ?P t\<^sub>2 u\<^sub>2 |]
            ==> ?P (t\<^sub>1 $ t\<^sub>2) (u\<^sub>1 $ u\<^sub>2);
         !!v u. ?P (Const v) u; !!v u. ?P (Free v) u;
         !!v u. ?P (\<Lambda> v) u; !!v u. ?P (Bound v) u;
         !!t v. ?P t (Const v); !!t v. ?P t (Free v);
         !!t v. ?P t (\<Lambda> v); !!t v. ?P t (Bound v) |]
      ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]
