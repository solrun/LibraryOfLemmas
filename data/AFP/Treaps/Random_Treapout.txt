Loading theory "Draft.Treap" (required by "Draft.Random_TreapTemplates" via "Draft.Random_Treap" via "Draft.Treap_Sort_and_BSTs")
Loading theory "Draft.Probability_Misc" (required by "Draft.Random_TreapTemplates" via "Draft.Random_Treap")
Loading theory "HOL-Library.BigO" (required by "Draft.Random_TreapTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Random_TreapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.299s cpu time, 0.000s GC time
### theory "Draft.Probability_Misc"
### 0.201s elapsed time, 0.692s cpu time, 0.036s GC time
Loading theory "Draft.Random_List_Permutation" (required by "Draft.Random_TreapTemplates" via "Draft.Random_Treap" via "Draft.Treap_Sort_and_BSTs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Treap"
### 0.431s elapsed time, 1.379s cpu time, 0.109s GC time
### theory "Draft.Random_List_Permutation"
### 0.444s elapsed time, 1.167s cpu time, 0.165s GC time
Loading theory "Draft.Treap_Sort_and_BSTs" (required by "Draft.Random_TreapTemplates" via "Draft.Random_Treap")
### theory "HOL-Library.BigO"
### 0.662s elapsed time, 1.876s cpu time, 0.201s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Random_TreapTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.520s elapsed time, 1.086s cpu time, 0.111s GC time
### theory "Draft.Treap_Sort_and_BSTs"
### 1.465s elapsed time, 2.166s cpu time, 0.262s GC time
Loading theory "Draft.Random_Treap" (required by "Draft.Random_TreapTemplates")
Found termination order: "{}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Random_Treap"
### 0.332s elapsed time, 0.336s cpu time, 0.000s GC time
Loading theory "Draft.Random_TreapTemplates"
val templateLemmas =
   [("Random_Treap.ipl_map_tree", "ipl (map_tree ?f ?t) = ipl ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Random_Treap.set_pmf_random_bst",
     "finite ?A ==> set_pmf (random_bst ?A) <= trees ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Random_Treap.trees_mono", "?A <= ?B ==> trees ?A <= trees ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Random_Treap.sets_tree_sigma_count_space",
     "countable ?B ==> sets (tree_sigma (count_space ?B)) = Pow (trees ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Random_Treap.tree_sigma_cong",
     "sets ?M = sets ?M' ==> tree_sigma ?M = tree_sigma ?M'",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Random_Treap.map_tree_primrec",
     "map_tree ?f ?t =
      rec_tree \<langle>\<rangle> (%l a r l'. Node l' (?f a)) ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_var 0))),
    ("Random_Treap.ins_trees",
     "[| ?t : trees ?A; (?x, ?y) : ?A |] ==> ins ?x ?y ?t : trees ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app (template_hole 3, template_var 2))
           ))),
    ("Random_Treap.bst_of_list_measurable",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> bst_of_list
          : count_space (lists ?A) \<rightarrow>\<^sub>M
            tree_sigma (count_space ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Random_Treap.bst_of_list_sort_meaurable",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> (%x. bst_of_list (sort_key x ?xs))
          : Pi\<^sub>M (set ?xs) (%i. borel) \<rightarrow>\<^sub>M
            tree_sigma (count_space ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 9, template_var 0)),
                   t_empty)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Random_Treap.insort_wrt_measurable",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> (%x. insort_wrt x ?xs)
          : count_space (Pow (?A \<times> ?A)) \<rightarrow>\<^sub>M
            count_space (lists ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       t_empty)))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Random_Treap.measurable_less_count_space",
     "[| countable ?A; ?a : ?B \<rightarrow>\<^sub>M count_space ?A;
         ?b : ?B \<rightarrow>\<^sub>M count_space ?A |]
      ==> Measurable.pred ?B (%x. ?a x < ?b x)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Random_Treap.sets_rinss'",
     "[| countable ?B; set ?ys <= ?B; ?t : trees (?B \<times> UNIV) |]
      ==> sets (rinss ?ys ?t ?B) =
          sets (tree_sigma (count_space ?B \<Otimes>\<^sub>M lborel))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2), t_empty)))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_hole 0)))))),
    ("Random_Treap.rinss_random_bst",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> distr (rinss ?xs \<langle>\<rangle> ?A)
           (tree_sigma (count_space ?A)) (map_tree fst) =
          restrict_space (measure_pmf (random_bst (set ?xs))) (trees ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 13, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 0),
                   template_hole 8),
                 template_var 1)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1))),
           template_app (template_hole 5, template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 13, template_var 0)))),
           template_app (template_hole 0, template_var 1))))),
    ("Random_Treap.distr_bst_of_list_random_bst",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> distr
           (uniform_measure (count_space (permutations_of_set (set ?xs)))
             (permutations_of_set (set ?xs)))
           (count_space (trees ?A)) bst_of_list =
          restrict_space (measure_pmf (random_bst (set ?xs))) (trees ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 12, template_var 0)))),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 12, template_var 0)))),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 12, template_var 0)))),
           template_app (template_hole 4, template_var 1))))),
    ("Random_Treap.sets_rinss",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs;
         ?t : trees (?A \<times> UNIV) |]
      ==> sets (rinss ?xs ?t ?A) =
          sets (tree_sigma (count_space ?A \<Otimes>\<^sub>M borel))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_var 2),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2), t_empty)))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_hole 0)))))),
    ("Random_Treap.rinss_bst_of_list",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> distr (rinss ?xs \<langle>\<rangle> ?A)
           (tree_sigma (count_space ?A)) (map_tree fst) =
          distr (Pi\<^sub>M (set ?xs) (%x. \<U> 0 1))
           (tree_sigma (count_space ?A))
           (%p. bst_of_list (sort_key p ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_app (template_hole 12, template_var 0),
                   template_hole 11),
                 template_var 1)),
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 1))),
           template_app (template_hole 8, template_hole 7)),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 16, template_var 0)),
                 t_empty)),
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 1))),
           t_empty)))),
    ("Random_Treap.distr_bst_of_list_tree_sigma_count_space",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> distr
           (uniform_measure (count_space (permutations_of_set (set ?xs)))
             (permutations_of_set (set ?xs)))
           (tree_sigma (count_space ?A)) bst_of_list =
          distr
           (uniform_measure (count_space (permutations_of_set (set ?xs)))
             (permutations_of_set (set ?xs)))
           (count_space (trees ?A)) bst_of_list",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 11, template_var 0)))),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 11, template_var 0)))),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 11, template_var 0)))),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 11, template_var 0)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_hole 2)))),
    ("Random_Treap.random_treap_fold_Leaf",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> rinss ?xs \<langle>\<rangle> ?A =
          distr (Pi\<^sub>M (set ?xs) (%x. \<U> 0 1))
           (tree_sigma (count_space ?A \<Otimes>\<^sub>M lborel))
           (%p. foldl (%t x. ins x (p x) t) \<langle>\<rangle> ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 0),
             template_hole 11),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 15, template_var 0)),
                 t_empty)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_hole 2))),
           t_empty)))),
    ("Random_Treap.lborel_permutations_of_set_bst_of_list",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs |]
      ==> distr (Pi\<^sub>M (set ?xs) (%x. \<U> 0 1))
           (tree_sigma (count_space ?A))
           (%p. bst_of_list (sort_key p ?xs)) =
          distr
           (uniform_measure (count_space (permutations_of_set (set ?xs)))
             (permutations_of_set (set ?xs)))
           (tree_sigma (count_space ?A)) bst_of_list",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_var 1),
        template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 15, template_var 0)),
                 t_empty)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1))),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 15, template_var 0)))),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 15, template_var 0)))),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1))),
           template_hole 5)))),
    ("Random_Treap.measurable_ins",
     "[| countable ?A; ?k : ?B \<rightarrow>\<^sub>M count_space ?A;
         ?x : ?B \<rightarrow>\<^sub>M lborel;
         ?t : ?B \<rightarrow>\<^sub>M
              tree_sigma (count_space ?A \<Otimes>\<^sub>M lborel) |]
      ==> (%y. ins (?k y) (?x y) (?t y))
          : ?B \<rightarrow>\<^sub>M
            tree_sigma (count_space ?A \<Otimes>\<^sub>M lborel)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app (template_hole 8, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 8, template_var 4)),
                    template_hole 5))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 8, template_var 4)),
                   template_hole 5))))
           ))),
    ("Random_Treap.measurable_foldl",
     "[| ?f : ?A \<rightarrow>\<^sub>M ?B; set ?xs <= space ?C;
         !!c. c : set ?xs ==>
              (%(a, b). ?g a b c)
              : ?A \<Otimes>\<^sub>M ?B \<rightarrow>\<^sub>M ?B |]
      ==> (%x. foldl (?g x) (?f x) ?xs) : ?A \<rightarrow>\<^sub>M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3))
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3))
           ))),
    ("Random_Treap.random_treap_fold",
     "[| countable ?A; set ?xs <= ?A; distinct ?xs;
         ?t : space
               (tree_sigma (count_space ?A \<Otimes>\<^sub>M lborel)) |]
      ==> rinss ?xs ?t ?A =
          distr (Pi\<^sub>M (set ?xs) (%x. \<U> 0 1))
           (tree_sigma (count_space ?A \<Otimes>\<^sub>M lborel))
           (%p. foldl (%t x. ins x (p x) t) ?t ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 1),
          template_var 2),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 2)),
                    template_hole 9))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 16, template_var 1)),
                 t_empty)),
             template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 2)),
                 template_hole 9))),
           t_empty)))),
    ("Random_Treap.distr_restrict",
     "[| sets ?N = sets ?L; sets ?K <= sets ?M;
         !!X. X : sets ?K ==> emeasure ?M X = emeasure ?K X;
         !!X. [| X : sets ?M; X <= space ?M - space ?K |]
              ==> emeasure ?M X = 0;
         ?f : ?M \<rightarrow>\<^sub>M ?N;
         ?f : ?K \<rightarrow>\<^sub>M ?L |]
      ==> distr ?M ?N ?f = distr ?K ?L ?f",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 4),
          template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 2),
          template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0)))),
    ("Random_Treap.ins_primrec",
     "ins ?k ?p ?t =
      rec_tree
       \<langle>\<langle>\<rangle>, (?k, ?p), \<langle>\<rangle>\<rangle>
       (%l z r l' r'.
           case z of
           (k1, p1) =>
             if ?k < k1
             then case l' of \<langle>\<rangle> => \<langle>\<rangle>
                  | \<langle>l2, (k2, p2), r2\<rangle> =>
                      if 0 <= p2 - p1
                      then \<langle>\<langle>l2, (k2, p2), r2\<rangle>,
                            (k1, p1), r\<rangle>
                      else \<langle>l2, (k2, p2),
                            \<langle>r2, (k1, p1), r\<rangle>\<rangle>
             else if k1 < ?k
                  then case r' of \<langle>\<rangle> => \<langle>\<rangle>
                       | \<langle>l2, (k2, p2), r2\<rangle> =>
                           if 0 <= p2 - p1
                           then \<langle>l, (k1, p1),
                                 \<langle>l2, (k2, p2), r2\<rangle>\<rangle>
                           else \<langle>\<langle>l, (k1, p1), l2\<rangle>,
                                 (k2, p2), r2\<rangle>
                  else \<langle>l, (k1, p1), r\<rangle>)
       ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_hole 8)),
           t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Random_TreapTemplates"
### 1.497s elapsed time, 2.132s cpu time, 0.675s GC time
val it = (): unit
