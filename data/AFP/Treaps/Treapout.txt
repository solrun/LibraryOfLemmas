Loading theory "Draft.Treap" (required by "Draft.TreapTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.TreapTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.TreapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.248s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Treap"
### 0.376s elapsed time, 0.856s cpu time, 0.035s GC time
### theory "HOL-Library.BigO"
### 0.629s elapsed time, 1.172s cpu time, 0.125s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TreapTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.455s elapsed time, 0.509s cpu time, 0.075s GC time
Loading theory "Draft.TreapTemplates"
val templateLemmas =
   [("Treap.treap_treap_of", "treap (treap_of ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Treap.treap_of_subset", "set_tree (treap_of ?A) <= ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Treap.ins_neq_Leaf", "ins ?k ?p ?t ~= \<langle>\<rangle>",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Treap.treap_ins", "treap ?t ==> treap (ins ?k ?p ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Treap.keys_ins", "keys (ins ?k ?p ?t) = insert ?k (keys ?t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Treap.set_tree_ins",
     "set_tree (ins ?k ?p ?t) <= {(?k, ?p)} Un set_tree ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0)),
         template_app (template_hole 5, template_var 0)))),
    ("Treap.treap_of_unique",
     "[| treap ?t; inj_on snd (set_tree ?t) |]
      ==> treap_of (set_tree ?t) = ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 0))),
    ("Treap.prios_ins", "prios (ins ?k ?p ?t) <= {?p} Un prios ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0))))),
    ("Treap.foldl_ins_treap",
     "treap ?t ==> treap (foldl (%t' (x, p). ins x p t') ?t ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, t_empty), template_var 1),
               template_var 0))
           ))),
    ("Treap.treap_of_set_tree_unique",
     "[| finite ?A; inj_on fst ?A; inj_on snd ?A |]
      ==> set_tree (treap_of ?A) = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Treap.set_tree_ins_eq",
     "?k ~: keys ?t ==>
      set_tree (ins ?k ?p ?t) = {(?k, ?p)} Un set_tree ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_app (template_hole 5, template_var 1))))),
    ("Treap.set_tree_ins'",
     "?k ~: keys ?t ==>
      {(?k, ?p)} Un set_tree ?t <= set_tree (ins ?k ?p ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)))
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)),
               template_hole 2)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1))))),
    ("Treap.treap_unique",
     "[| treap ?t1.0; treap ?t2.0; set_tree ?t1.0 = set_tree ?t2.0;
         inj_on snd (set_tree ?t1.0) |]
      ==> ?t1.0 = ?t2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Treap.prios_ins'",
     "?k ~: keys ?t ==> prios (ins ?k ?p ?t) = {?p} Un prios ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)))))),
    ("Treap.foldl_ins_treap_of",
     "[| distinct ?ys; inj_on fst (set ?ys); inj_on snd (set ?ys) |]
      ==> foldl (%t' (x, p). ins x p t') \<langle>\<rangle> ?ys =
          treap_of (set ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, t_empty), template_hole 1),
           template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 8, template_var 0))))),
    ("Treap.prios_ins_special",
     "[| ins ?k ?p ?t = \<langle>?l, (?k', ?p'), ?r\<rangle>; ?p' = ?p;
         ?p : prios ?r Un prios ?l |]
      ==> ?p : prios ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0)),
        template_equation (template_var 1, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_hole 0),
                      template_var 0))),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_hole 0),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 5),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 4)))
           ))),
    ("Treap.foldl_ins_set_tree",
     "[| inj_on fst (set ?ys); inj_on snd (set ?ys); distinct ?ys;
         fst ` set ?ys Int keys ?t = {} |]
      ==> set_tree (foldl (%t' (x, p). ins x p t') ?t ?ys) =
          set ?ys Un set_tree ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 16),
                template_app (template_hole 15, template_var 1))),
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 16),
                template_var 0))),
          template_hole 6)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 15, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Treap.treap_NodeI",
     "[| treap ?l; treap ?r; ALL k':keys ?l. k' < ?k;
         ALL k':keys ?r. ?k < k'; ALL p':prios ?l. ?p <= p';
         ALL p':prios ?r. ?p <= p' |]
      ==> treap \<langle>?l, (?k, ?p), ?r\<rangle>",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 3))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 2))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 3))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Treap.treap_rotate2",
     "[| treap ?l; treap ?l2.0; treap ?r2.0; ~ ?p1.0 <= ?p2.0; ?k1.0 < ?k;
         ins ?k ?p ?r = \<langle>?l2.0, (?k2.0, ?p2.0), ?r2.0\<rangle>;
         treap (ins ?k ?p ?r);
         treap \<langle>?l, (?k1.0, ?p1.0), ?r\<rangle> |]
      ==> treap
           \<langle>\<langle>?l, (?k1.0, ?p1.0), ?l2.0\<rangle>,
            (?k2.0, ?p2.0), ?r2.0\<rangle>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 9)),
        template_predicate (template_app (template_hole 7, template_var 8)),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 6, template_var 5)
            ),
        template_inequation (less_than, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 8),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 5)),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 9),
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 6)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 9),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 6)),
                     template_var 8)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_var 7))
           ))),
    ("Treap.treap_rotate1",
     "[| treap ?l2.0; treap ?r2.0; treap ?r; ~ ?p1.0 <= ?p2.0; ?k < ?k1.0;
         ins ?k ?p ?l = \<langle>?l2.0, (?k2.0, ?p2.0), ?r2.0\<rangle>;
         treap (ins ?k ?p ?l);
         treap \<langle>?l, (?k1.0, ?p1.0), ?r\<rangle> |]
      ==> treap
           \<langle>?l2.0, (?k2.0, ?p2.0),
            \<langle>?r2.0, (?k1.0, ?p1.0), ?r\<rangle>\<rangle>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 9)),
        template_predicate (template_app (template_hole 7, template_var 8)),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 6, template_var 5)
            ),
        template_inequation (less_than, template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 9),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 5)),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 6)),
                template_var 7))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 9),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 6)),
                 template_var 7)))
           )))]:
   (string * thm * template) list
### theory "Draft.TreapTemplates"
### 0.268s elapsed time, 0.387s cpu time, 0.000s GC time
val it = (): unit
