Loading theory "Draft.Treap" (required by "Draft.Treap_Sort_and_BSTsTemplates" via "Draft.Treap_Sort_and_BSTs")
Loading theory "Draft.Probability_Misc" (required by "Draft.Treap_Sort_and_BSTsTemplates" via "Draft.Treap_Sort_and_BSTs" via "Draft.Random_List_Permutation")
Loading theory "HOL-Library.BigO" (required by "Draft.Treap_Sort_and_BSTsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Treap_Sort_and_BSTsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.093s elapsed time, 0.407s cpu time, 0.000s GC time
### theory "Draft.Probability_Misc"
### 0.237s elapsed time, 0.820s cpu time, 0.033s GC time
Loading theory "Draft.Random_List_Permutation" (required by "Draft.Treap_Sort_and_BSTsTemplates" via "Draft.Treap_Sort_and_BSTs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Treap"
### 0.445s elapsed time, 1.443s cpu time, 0.105s GC time
### theory "Draft.Random_List_Permutation"
### 0.471s elapsed time, 1.200s cpu time, 0.174s GC time
Loading theory "Draft.Treap_Sort_and_BSTs" (required by "Draft.Treap_Sort_and_BSTsTemplates")
### theory "HOL-Library.BigO"
### 0.733s elapsed time, 2.071s cpu time, 0.207s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Treap_Sort_and_BSTsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.143s cpu time, 0.114s GC time
### theory "Draft.Treap_Sort_and_BSTs"
### 1.531s elapsed time, 2.266s cpu time, 0.258s GC time
Loading theory "Draft.Treap_Sort_and_BSTsTemplates"
val templateLemmas =
   [("Treap_Sort_and_BSTs.bst_of_list_trees",
     "set ?ys <= ?A ==> bst_of_list ?ys : trees ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Treap_Sort_and_BSTs.insort_wrt_sort_key",
     "set ?xs <= ?A ==>
      insort_wrt (linorder_from_keys ?A ?f) ?xs = sort_key ?f ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Treap_Sort_and_BSTs.treap_of_bst_of_list",
     "inj_on ?p (set ?zs) ==>
      map_tree fst (treap_of (set (map (%x. (x, ?p x)) ?zs))) =
      bst_of_list (sort_key ?p ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_var 0)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Treap_Sort_and_BSTs.treap_of_bst_of_list''",
     "inj_on ?p (set ?zs) ==>
      map_tree fst (treap_of ((%x. (x, ?p x)) ` set ?zs)) =
      bst_of_list (sort_key ?p ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty),
               template_app (template_hole 8, template_var 0)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Treap_Sort_and_BSTs.insort_wrt_insort_key",
     "[| ?a : ?A; set ?xs <= ?A |]
      ==> insert_wrt (linorder_from_keys ?A ?f) ?a ?xs =
          insort_key ?f ?a ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Treap_Sort_and_BSTs.insort_key_conv_rec_list",
     "insort_key ?f ?x ?xs =
      rec_list [?x]
       (%y ys zs. if ?f ?x <= ?f y then ?x # y # ys else y # zs) ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           t_empty),
         template_var 0))),
    ("Treap_Sort_and_BSTs.sort_key_arg_min_on",
     "[| ?zs ~= []; inj_on ?p (set ?zs) |]
      ==> sort_key ?p ?zs =
          (let z = arg_min_on ?p (set ?zs)
           in z # sort_key ?p (remove1 z ?zs))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 5, template_var 1))),
           t_empty)))),
    ("Treap_Sort_and_BSTs.fst_snd_arg_min_on",
     "[| finite ?B; inj_on ?p ?B; ?B ~= {} |]
      ==> fst (arg_min_on snd ((%x. (x, ?p x)) ` ?B)) = arg_min_on ?p ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Treap_Sort_and_BSTs.arg_min_on_image_finite",
     "[| inj_on ?f (?g ` ?B); finite ?B; ?B ~= {} |]
      ==> arg_min_on ?f (?g ` ?B) = ?g (arg_min_on (?f o ?g) ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Treap_Sort_and_BSTs.treap_of_bst_of_list'",
     "[| ?ys = map (%x. (x, ?p x)) ?xs; inj_on ?p (set ?xs);
         ?xs' = sort_key ?p ?xs |]
      ==> map_tree fst (treap_of (set ?ys)) = bst_of_list ?xs'",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 11, t_empty), template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3))),
         template_app (template_hole 0, template_var 0)))),
    ("Treap_Sort_and_BSTs.fold_ins_bst_of_list",
     "[| distinct ?zs; inj_on ?p (set ?zs) |]
      ==> map_tree fst
           (foldl (%t (x, p). ins x p t) \<langle>\<rangle>
             (map (%x. (x, ?p x)) ?zs)) =
          bst_of_list (sort_key ?p ?zs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app (template_hole 11, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app
              (template_app (template_hole 7, t_empty), template_hole 4),
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.Treap_Sort_and_BSTsTemplates"
### 1.515s elapsed time, 2.192s cpu time, 0.675s GC time
val it = (): unit
