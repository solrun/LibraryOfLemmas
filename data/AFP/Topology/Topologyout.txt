Loading theory "HOL-Library.FuncSet" (required by "Draft.TopologyMoreTemplates" via "Draft.Topology")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.502s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.817s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.273s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.390s elapsed time, 1.554s cpu time, 0.115s GC time
Loading theory "Draft.Topology" (required by "Draft.TopologyMoreTemplates")
locale carrier
  fixes T :: "'a set set"  (structure)
locale topology
  fixes T :: "'a set set"  (structure)
  assumes "topology T"
Proofs for inductive predicate(s) "topop"
  Proving monotonicity ...
locale topobase
  fixes B :: "'a set set"
    and T :: "'a set set"  (structure)
  defines "T == topo B"
locale subtopology
  fixes S :: "'a set set"  (structure)
    and T :: "'a set set"  (structure)
  assumes "subtopology S T"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale trivial
  fixes T :: "'a set set"  (structure)
  defines "T == {{}}"
locale discrete
  fixes X :: "'a set"
    and T :: "'a set set"  (structure)
  defines "T == discrete_top X"
locale indiscrete
  fixes X :: "'a set"
    and T :: "'a set set"  (structure)
  defines "T == indiscrete_top X"
locale orderbase
  fixes X :: "'a set"
    and B :: "'a set set"
  defines "B == order_base X"
locale ordertop1
  fixes X :: "'a set"
    and B :: "'a set set"
    and T :: "'a set set"  (structure)
  defines "B == order_base X"
    and "T == topo B"
locale ordertop
  fixes X :: "'a set"
    and T :: "'a set set"  (structure)
  defines "T == order_top X"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.909s cpu time, 0.987s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale func
  fixes f :: "'a => 'b"
    and S :: "'a set set"  (structure)
    and T :: "'b set set"  (structure)
    and fimage :: "'a set set => 'b set set"
  assumes "func f S T"
  defines "fimage == fimg T f"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.146s elapsed time, 4.164s cpu time, 1.017s GC time
locale continuous
  fixes f :: "'a => 'b"
    and S :: "'a set set"  (structure)
    and T :: "'b set set"  (structure)
    and fimage :: "'a set set => 'b set set"
  assumes "continuous f S T"
  defines "fimage == fimg T f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale filter
  fixes F :: "'a set set"
    and T :: "'a set set"  (structure)
  assumes "Topology.filter F T"
Found termination order: "size <*mlex*> {}"
locale ultra_filter
  fixes F :: "'a set set"
    and T :: "'a set set"  (structure)
  assumes "ultra_filter F T"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale T0
  fixes T :: "'a set set"  (structure)
  assumes "T0 T"
locale T1
  fixes T :: "'a set set"  (structure)
  assumes "T1 T"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale T2
  fixes T :: "'a set set"  (structure)
  assumes "T2 T"
locale T3
  fixes T :: "'a set set"  (structure)
  assumes "T3 T"
locale regular
  fixes T :: "'a set set"  (structure)
  assumes "regular T"
locale T4
  fixes T :: "'a set set"  (structure)
  assumes "T4 T"
Found termination order: "size <*mlex*> {}"
locale normal
  fixes T :: "'a set set"  (structure)
  assumes "normal T"
### theory "Draft.Topology"
### 1.630s elapsed time, 5.019s cpu time, 1.142s GC time
### theory "HOL-Library.Tree"
### 2.091s elapsed time, 6.464s cpu time, 1.377s GC time
Loading theory "Draft.Templates" (required by "Draft.TopologyMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TopologyMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.479s elapsed time, 0.542s cpu time, 0.080s GC time
Loading theory "Draft.TopologyMoreTemplates"
val templateLemmas =
   [("Topology.discrete_topology", "topology (discrete_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.indiscrete_topology", "topology (indiscrete_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.topo_topology", "topology (topo ?B)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.ordertop_topology", "topology (order_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.empty_filter", "{} : Filters\<^bsub>?T\<^esub>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Topology.id_continuous", "Topology.continuous id ?T ?T",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 0)
         )),
    ("Topology.normal_implies_regular", "normal ?T ==> regular ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.regular_implies_T2", "regular ?T ==> T2 ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.topo_mono", "?A <= ?B ==> topo ?A <= topo ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Topology.filtersD1", "?F : Filters\<^bsub>?T\<^esub> ==> {} ~: ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)
               )
           ))),
    ("Topology.topop_topo_eq", "topop (%x. x : ?B) = (%x. x : topo ?B)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Topology.filtersD2",
     "?F : Filters\<^bsub>?T\<^esub> ==>
      \<Union> ?F <= carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Topology.subset_mono", "?A <= ?B ==> ?M <= ?A --> ?M <= ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Topology.diffsimps", "?A - ?B Int ?C = ?A - ?B Un (?A - ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?A - (?B Un ?C) = (?A - ?B) Int (?A - ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.diff_diff", "?C - (?A - ?B) = ?C - ?A Un ?C Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?C Int (?A - ?B) = ?C Int ?A - ?C Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?f -` (?A - ?B) = ?f -` ?A - ?f -` ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.domain_subset_vimage",
     "?f : ?A \<rightarrow> ?B ==> ?A <= ?f -` ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1), t_empty))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topology.carrier_singleton_filter",
     "carrier\<^bsub>?T\<^esub> ~= {} ==>
      {carrier\<^bsub>?T\<^esub>} : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.cnt_fun",
     "?f : cnt ?S ?T ==>
      ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
           carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               t_empty))
           ))),
    ("Topology.domain_inter_vimage",
     "?f : ?A \<rightarrow> ?B ==> ?A Int ?f -` ?B = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Topology.empty_carrier_implies_trivial",
     "[| topology ?S; carrier\<^bsub>?S\<^esub> = {} |] ==> ?S = {{}}",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 3),
           template_hole 0)))),
    ("Topology.topo_open_imp",
     "[| ?A <= ?B; ?x open\<^bsub>topo ?A\<^esub> |]
      ==> ?x open\<^bsub>topo ?B\<^esub>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Topology.Int_filters",
     "[| Topology.filter ?F ?T; Topology.filter ?E ?T |]
      ==> ?F Int ?E : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.diffsimps",
     "[| ?A <= ?B; ?B <= ?C |] ==> ?B - (?C - ?A) = ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 2))),
    ("Topology.nonempty_filter_implies_nonempty_carrier",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?F ~= {} |]
      ==> carrier\<^bsub>?T\<^esub> ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Topology.continuous_compose",
     "[| Topology.continuous ?f ?S ?T; Topology.continuous ?g ?T ?U |]
      ==> Topology.continuous (?g o ?f) ?S ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3),
             template_var 0)
           ))),
    ("Topology.fimage_filter",
     "[| func ?f ?S ?T; Topology.filter ?F ?S |]
      ==> fimg ?T ?f ?F : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.cntD1",
     "[| ?f : cnt ?S ?T; ?x : carrier\<^bsub>?S\<^esub> |]
      ==> ?f ?x : carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.subtop_lemma",
     "?A = (UN t:?B. {t Int \<Union> ?A}) ==>
      subtopology (topo ?A) (topo ?B)",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.diff_diff_inter",
     "[| ?B <= ?A; ?B <= ?X |] ==> (?X - (?A - ?B)) Int ?A = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_var 1),
         template_var 2))),
    ("Topology.cntD2",
     "[| ?f : cnt ?S ?T; ?m open\<^bsub>?T\<^esub> |]
      ==> carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Topology.funcset_vimage_diff",
     "?f : ?A \<rightarrow> ?B ==> ?A - ?f -` (?B - ?C) = ?A Int ?f -` ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0))))),
    ("Topology.cnt_compose",
     "[| ?f : cnt ?S ?T; ?g : cnt ?T ?U |] ==> ?g o ?f : cnt ?S ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Topology.filtersD3",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?A : ?F; ?B : ?F |]
      ==> ?A Int ?B : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Topology.ultraD",
     "[| ultra\<^bsub>?T\<^esub> ?F; ?A <= carrier\<^bsub>?T\<^esub>;
         ?A ~: ?F |]
      ==> carrier\<^bsub>?T\<^esub> - ?A : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 2)),
                 template_var 0)),
             template_var 1)
           ))),
    ("Topology.image_lim_subset_lim_fimage",
     "[| Topology.continuous ?f ?S ?T; ?F : Filters\<^bsub>?S\<^esub> |]
      ==> ?f ` lims\<^bsub>?S\<^esub> ?F
          <= lims\<^bsub>?T\<^esub> (fimg ?T ?f ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0))))),
    ("Topology.funcset_comp",
     "[| ?f : ?A \<rightarrow> ?B; ?g : ?B \<rightarrow> ?C |]
      ==> ?g o ?f : ?A \<rightarrow> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 3), t_empty))
           ))),
    ("Topology.ultraCI",
     "(!!A. [| A <= carrier\<^bsub>?T\<^esub>;
               carrier\<^bsub>?T\<^esub> - A ~: ?F |]
            ==> A : ?F) ==>
      ultra\<^bsub>?T\<^esub> ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Topology.filtersD4",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?A <= ?B;
         ?B <= carrier\<^bsub>?T\<^esub>; ?A : ?F |]
      ==> ?B : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Topology.vimage_comp",
     "?f : ?A \<rightarrow> ?B ==>
      ?A Int (?f -` ?B Int ?f -` ?g -` ?m) = ?A Int (?g o ?f) -` ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4)),
             template_var 0))))),
    ("Topology.seteqI",
     "[| !!x. x : ?A ==> x : ?B; !!x. x : ?B ==> x : ?A |] ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Topology.convergent_filter_closure",
     "[| Topology.filter ?F ?T;
         ?F \<longlongrightarrow>\<^bsub>?T\<^esub> ?x;
         ?x : carrier\<^bsub>?T\<^esub>; ?A : ?F |]
      ==> ?x : closure\<^bsub>?T\<^esub> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Topology.filter_chain_lemma",
     "[| Topology.filter ?F ?T;
         ?C : chains {V: Filters\<^bsub>?T\<^esub>. ?F <= V} |]
      ==> \<Union> (?C Un {?F}) : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9, template_app (template_hole 8, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)))),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Topology.continuousI",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!m. m open\<^bsub>?T\<^esub> ==>
              carrier\<^bsub>?S\<^esub> Int
              ?f -` m open\<^bsub>?S\<^esub> |]
      ==> Topology.continuous ?f ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Topology.ultraE",
     "[| ultra\<^bsub>?T\<^esub> ?F; ?A <= carrier\<^bsub>?T\<^esub>;
         ?A : ?F ==> ?R; carrier\<^bsub>?T\<^esub> - ?A : ?F ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 3)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 2, template_var 3)),
                     template_var 1)),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topology.T2_axiom_implies_T0_axiom",
     "ALL x:carrier\<^bsub>?T\<^esub>.
         ALL y:carrier\<^bsub>?T\<^esub>.
            x ~= y -->
            (EX u:nhds\<^bsub>?T\<^esub> x.
                EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T0_axioms ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.T2_axiom_implies_T1_axiom",
     "ALL x:carrier\<^bsub>?T\<^esub>.
         ALL y:carrier\<^bsub>?T\<^esub>.
            x ~= y -->
            (EX u:nhds\<^bsub>?T\<^esub> x.
                EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T1_axioms ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.cntI",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!m. m open\<^bsub>?T\<^esub> ==>
              carrier\<^bsub>?S\<^esub> Int
              ?f -` m open\<^bsub>?S\<^esub> |]
      ==> ?f : cnt ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topology.continuousI2",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!c. [| c <= carrier\<^bsub>?T\<^esub>;
                 c closed\<^bsub>?T\<^esub> |]
              ==> ?f -` c closed\<^bsub>?S\<^esub> |]
      ==> Topology.continuous ?f ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Topology.expand_filter_ultra",
     "[| carrier\<^bsub>?T\<^esub> ~= {}; ?F : Filters\<^bsub>?T\<^esub>;
         !!U. [| U : Filters\<^bsub>?T\<^esub>; ?F <= U;
                 ultra\<^bsub>?T\<^esub> U |]
              ==> ?R |]
      ==> ?R",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.continuousE",
     "[| Topology.continuous ?f ?S ?T;
         [| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub>;
            ALL m.
               m open\<^bsub>?T\<^esub> -->
               carrier\<^bsub>?S\<^esub> Int
               ?f -` m open\<^bsub>?S\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 2)),
                   t_empty))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 5, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.cntE",
     "[| ?f : cnt ?S ?T;
         [| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub>;
            ALL m.
               m open\<^bsub>?T\<^esub> -->
               carrier\<^bsub>?S\<^esub> Int
               ?f -` m open\<^bsub>?S\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 2)),
                   t_empty))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 5, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.topologyI",
     "[| !!x y.
            [| x open\<^bsub>?T\<^esub>; y open\<^bsub>?T\<^esub> |]
            ==> x Int y open\<^bsub>?T\<^esub>;
         !!M. ALL m:M. m open\<^bsub>?T\<^esub> ==>
              \<Union> M open\<^bsub>?T\<^esub> |]
      ==> topology ?T",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.subtopologyI",
     "[| !!s. s open\<^bsub>?S\<^esub> ==>
              EX t. t open\<^bsub>?T\<^esub> &
                    s = t Int carrier\<^bsub>?S\<^esub>;
         !!t. t open\<^bsub>?T\<^esub> ==>
              t Int carrier\<^bsub>?S\<^esub> open\<^bsub>?S\<^esub> |]
      ==> subtopology ?S ?T",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Topology.T2_axiomsI",
     "(!!x y.
          [| x : carrier\<^bsub>?T\<^esub>; y : carrier\<^bsub>?T\<^esub>;
             x ~= y |]
          ==> EX u:nhds\<^bsub>?T\<^esub> x.
                 EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T2_axioms ?T",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.T2I",
     "[| topology ?T;
         !!x y.
            [| x : carrier\<^bsub>?T\<^esub>; y : carrier\<^bsub>?T\<^esub>;
               x ~= y |]
            ==> EX u:nhds\<^bsub>?T\<^esub> x.
                   EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {} |]
      ==> T2 ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.continuousCE",
     "[| Topology.continuous ?f ?S ?T;
         [| ~ ?m open\<^bsub>?T\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P;
         [| carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 3)),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.cntCE",
     "[| ?f : cnt ?S ?T;
         [| ~ ?m open\<^bsub>?T\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P;
         [| carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 3)),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.T2E",
     "[| T2 ?T; ?x ~= ?y; ?x : carrier\<^bsub>?T\<^esub>;
         ?y : carrier\<^bsub>?T\<^esub>;
         !!u v.
            [| u : nhds\<^bsub>?T\<^esub> ?x; v : nhds\<^bsub>?T\<^esub> ?y;
               u Int v = {} |]
            ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.T2E2",
     "[| T2 ?T; ?x ~= ?y; ?x : carrier\<^bsub>?T\<^esub>;
         ?y : carrier\<^bsub>?T\<^esub>;
         !!u v.
            [| u : nhds\<^bsub>?T\<^esub> ?x; v : nhds\<^bsub>?T\<^esub> ?y;
               ?z ~: u | ?z ~: v |]
            ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 4))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.filtersI",
     "[| {} ~: ?F; \<Union> ?F <= carrier\<^bsub>?T\<^esub>;
         !!A B. [| A : ?F; B : ?F |] ==> A Int B : ?F;
         !!A B.
            [| A : ?F; A <= B; B <= carrier\<^bsub>?T\<^esub> |]
            ==> B : ?F |]
      ==> ?F : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 1)
                )
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.filtersE",
     "[| ?F : Filters\<^bsub>?T\<^esub>;
         [| {} ~: ?F; \<Union> ?F <= carrier\<^bsub>?T\<^esub>;
            ALL A B. A : ?F & B : ?F --> A Int B : ?F;
            ALL A B.
               A : ?F & A <= B & B <= carrier\<^bsub>?T\<^esub> -->
               B : ?F |]
         ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 2)
                   )
               )],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 5, template_var 2),
               template_app (template_hole 4, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 3, t_empty))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 3, t_empty))],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TopologyMoreTemplates"
### 0.325s elapsed time, 0.431s cpu time, 0.000s GC time
val it = (): unit
