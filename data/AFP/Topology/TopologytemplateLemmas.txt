   [("Topology.discrete_topology", "topology (discrete_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.indiscrete_topology", "topology (indiscrete_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.topo_topology", "topology (topo ?B)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.ordertop_topology", "topology (order_top ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Topology.empty_filter", "{} : Filters\<^bsub>?T\<^esub>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Topology.id_continuous", "Topology.continuous id ?T ?T",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 0)
         )),
    ("Topology.normal_implies_regular", "normal ?T ==> regular ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.regular_implies_T2", "regular ?T ==> T2 ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.topo_mono", "?A <= ?B ==> topo ?A <= topo ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Topology.filtersD1", "?F : Filters\<^bsub>?T\<^esub> ==> {} ~: ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)
               )
           ))),
    ("Topology.topop_topo_eq", "topop (%x. x : ?B) = (%x. x : topo ?B)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Topology.filtersD2",
     "?F : Filters\<^bsub>?T\<^esub> ==>
      \<Union> ?F <= carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Topology.subset_mono", "?A <= ?B ==> ?M <= ?A --> ?M <= ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Topology.diffsimps", "?A - ?B Int ?C = ?A - ?B Un (?A - ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?A - (?B Un ?C) = (?A - ?B) Int (?A - ?C)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.diff_diff", "?C - (?A - ?B) = ?C - ?A Un ?C Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?C Int (?A - ?B) = ?C Int ?A - ?C Int ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Topology.diffsimps", "?f -` (?A - ?B) = ?f -` ?A - ?f -` ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Topology.domain_subset_vimage",
     "?f : ?A \<rightarrow> ?B ==> ?A <= ?f -` ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1), t_empty))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Topology.carrier_singleton_filter",
     "carrier\<^bsub>?T\<^esub> ~= {} ==>
      {carrier\<^bsub>?T\<^esub>} : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.cnt_fun",
     "?f : cnt ?S ?T ==>
      ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
           carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               t_empty))
           ))),
    ("Topology.domain_inter_vimage",
     "?f : ?A \<rightarrow> ?B ==> ?A Int ?f -` ?B = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Topology.empty_carrier_implies_trivial",
     "[| topology ?S; carrier\<^bsub>?S\<^esub> = {} |] ==> ?S = {{}}",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 3),
           template_hole 0)))),
    ("Topology.topo_open_imp",
     "[| ?A <= ?B; ?x open\<^bsub>topo ?A\<^esub> |]
      ==> ?x open\<^bsub>topo ?B\<^esub>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Topology.Int_filters",
     "[| Topology.filter ?F ?T; Topology.filter ?E ?T |]
      ==> ?F Int ?E : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.diffsimps",
     "[| ?A <= ?B; ?B <= ?C |] ==> ?B - (?C - ?A) = ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 2))),
    ("Topology.nonempty_filter_implies_nonempty_carrier",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?F ~= {} |]
      ==> carrier\<^bsub>?T\<^esub> ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Topology.continuous_compose",
     "[| Topology.continuous ?f ?S ?T; Topology.continuous ?g ?T ?U |]
      ==> Topology.continuous (?g o ?f) ?S ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3),
             template_var 0)
           ))),
    ("Topology.fimage_filter",
     "[| func ?f ?S ?T; Topology.filter ?F ?S |]
      ==> fimg ?T ?f ?F : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.cntD1",
     "[| ?f : cnt ?S ?T; ?x : carrier\<^bsub>?S\<^esub> |]
      ==> ?f ?x : carrier\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Topology.subtop_lemma",
     "?A = (UN t:?B. {t Int \<Union> ?A}) ==>
      subtopology (topo ?A) (topo ?B)",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.diff_diff_inter",
     "[| ?B <= ?A; ?B <= ?X |] ==> (?X - (?A - ?B)) Int ?A = ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_var 1),
         template_var 2))),
    ("Topology.cntD2",
     "[| ?f : cnt ?S ?T; ?m open\<^bsub>?T\<^esub> |]
      ==> carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Topology.funcset_vimage_diff",
     "?f : ?A \<rightarrow> ?B ==> ?A - ?f -` (?B - ?C) = ?A Int ?f -` ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0))))),
    ("Topology.cnt_compose",
     "[| ?f : cnt ?S ?T; ?g : cnt ?T ?U |] ==> ?g o ?f : cnt ?S ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Topology.filtersD3",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?A : ?F; ?B : ?F |]
      ==> ?A Int ?B : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Topology.ultraD",
     "[| ultra\<^bsub>?T\<^esub> ?F; ?A <= carrier\<^bsub>?T\<^esub>;
         ?A ~: ?F |]
      ==> carrier\<^bsub>?T\<^esub> - ?A : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 2)),
                 template_var 0)),
             template_var 1)
           ))),
    ("Topology.image_lim_subset_lim_fimage",
     "[| Topology.continuous ?f ?S ?T; ?F : Filters\<^bsub>?S\<^esub> |]
      ==> ?f ` lims\<^bsub>?S\<^esub> ?F
          <= lims\<^bsub>?T\<^esub> (fimg ?T ?f ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0))))),
    ("Topology.funcset_comp",
     "[| ?f : ?A \<rightarrow> ?B; ?g : ?B \<rightarrow> ?C |]
      ==> ?g o ?f : ?A \<rightarrow> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 3), t_empty))
           ))),
    ("Topology.ultraCI",
     "(!!A. [| A <= carrier\<^bsub>?T\<^esub>;
               carrier\<^bsub>?T\<^esub> - A ~: ?F |]
            ==> A : ?F) ==>
      ultra\<^bsub>?T\<^esub> ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Topology.filtersD4",
     "[| ?F : Filters\<^bsub>?T\<^esub>; ?A <= ?B;
         ?B <= carrier\<^bsub>?T\<^esub>; ?A : ?F |]
      ==> ?B : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Topology.vimage_comp",
     "?f : ?A \<rightarrow> ?B ==>
      ?A Int (?f -` ?B Int ?f -` ?g -` ?m) = ?A Int (?g o ?f) -` ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3), t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4)),
             template_var 0))))),
    ("Topology.seteqI",
     "[| !!x. x : ?A ==> x : ?B; !!x. x : ?B ==> x : ?A |] ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Topology.convergent_filter_closure",
     "[| Topology.filter ?F ?T;
         ?F \<longlongrightarrow>\<^bsub>?T\<^esub> ?x;
         ?x : carrier\<^bsub>?T\<^esub>; ?A : ?F |]
      ==> ?x : closure\<^bsub>?T\<^esub> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Topology.filter_chain_lemma",
     "[| Topology.filter ?F ?T;
         ?C : chains {V: Filters\<^bsub>?T\<^esub>. ?F <= V} |]
      ==> \<Union> (?C Un {?F}) : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9, template_app (template_hole 8, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)))),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Topology.continuousI",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!m. m open\<^bsub>?T\<^esub> ==>
              carrier\<^bsub>?S\<^esub> Int
              ?f -` m open\<^bsub>?S\<^esub> |]
      ==> Topology.continuous ?f ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Topology.ultraE",
     "[| ultra\<^bsub>?T\<^esub> ?F; ?A <= carrier\<^bsub>?T\<^esub>;
         ?A : ?F ==> ?R; carrier\<^bsub>?T\<^esub> - ?A : ?F ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 3)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 2, template_var 3)),
                     template_var 1)),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Topology.T2_axiom_implies_T0_axiom",
     "ALL x:carrier\<^bsub>?T\<^esub>.
         ALL y:carrier\<^bsub>?T\<^esub>.
            x ~= y -->
            (EX u:nhds\<^bsub>?T\<^esub> x.
                EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T0_axioms ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.T2_axiom_implies_T1_axiom",
     "ALL x:carrier\<^bsub>?T\<^esub>.
         ALL y:carrier\<^bsub>?T\<^esub>.
            x ~= y -->
            (EX u:nhds\<^bsub>?T\<^esub> x.
                EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T1_axioms ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              t_empty)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.cntI",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!m. m open\<^bsub>?T\<^esub> ==>
              carrier\<^bsub>?S\<^esub> Int
              ?f -` m open\<^bsub>?S\<^esub> |]
      ==> ?f : cnt ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Topology.continuousI2",
     "[| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
              carrier\<^bsub>?T\<^esub>;
         !!c. [| c <= carrier\<^bsub>?T\<^esub>;
                 c closed\<^bsub>?T\<^esub> |]
              ==> ?f -` c closed\<^bsub>?S\<^esub> |]
      ==> Topology.continuous ?f ?S ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Topology.expand_filter_ultra",
     "[| carrier\<^bsub>?T\<^esub> ~= {}; ?F : Filters\<^bsub>?T\<^esub>;
         !!U. [| U : Filters\<^bsub>?T\<^esub>; ?F <= U;
                 ultra\<^bsub>?T\<^esub> U |]
              ==> ?R |]
      ==> ?R",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.continuousE",
     "[| Topology.continuous ?f ?S ?T;
         [| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub>;
            ALL m.
               m open\<^bsub>?T\<^esub> -->
               carrier\<^bsub>?S\<^esub> Int
               ?f -` m open\<^bsub>?S\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 2)),
                   t_empty))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 5, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.cntE",
     "[| ?f : cnt ?S ?T;
         [| ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub>;
            ALL m.
               m open\<^bsub>?T\<^esub> -->
               carrier\<^bsub>?S\<^esub> Int
               ?f -` m open\<^bsub>?S\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 2)),
                   t_empty))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 5, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.topologyI",
     "[| !!x y.
            [| x open\<^bsub>?T\<^esub>; y open\<^bsub>?T\<^esub> |]
            ==> x Int y open\<^bsub>?T\<^esub>;
         !!M. ALL m:M. m open\<^bsub>?T\<^esub> ==>
              \<Union> M open\<^bsub>?T\<^esub> |]
      ==> topology ?T",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.subtopologyI",
     "[| !!s. s open\<^bsub>?S\<^esub> ==>
              EX t. t open\<^bsub>?T\<^esub> &
                    s = t Int carrier\<^bsub>?S\<^esub>;
         !!t. t open\<^bsub>?T\<^esub> ==>
              t Int carrier\<^bsub>?S\<^esub> open\<^bsub>?S\<^esub> |]
      ==> subtopology ?S ?T",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Topology.T2_axiomsI",
     "(!!x y.
          [| x : carrier\<^bsub>?T\<^esub>; y : carrier\<^bsub>?T\<^esub>;
             x ~= y |]
          ==> EX u:nhds\<^bsub>?T\<^esub> x.
                 EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {}) ==>
      T2_axioms ?T",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.T2I",
     "[| topology ?T;
         !!x y.
            [| x : carrier\<^bsub>?T\<^esub>; y : carrier\<^bsub>?T\<^esub>;
               x ~= y |]
            ==> EX u:nhds\<^bsub>?T\<^esub> x.
                   EX v:nhds\<^bsub>?T\<^esub> y. u Int v = {} |]
      ==> T2 ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Topology.continuousCE",
     "[| Topology.continuous ?f ?S ?T;
         [| ~ ?m open\<^bsub>?T\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P;
         [| carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 1)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 3)),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.cntCE",
     "[| ?f : cnt ?S ?T;
         [| ~ ?m open\<^bsub>?T\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P;
         [| carrier\<^bsub>?S\<^esub> Int ?f -` ?m open\<^bsub>?S\<^esub>;
            ?f : carrier\<^bsub>?S\<^esub> \<rightarrow>
                 carrier\<^bsub>?T\<^esub> |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1)
                   )
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 3)),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     t_empty))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Topology.T2E",
     "[| T2 ?T; ?x ~= ?y; ?x : carrier\<^bsub>?T\<^esub>;
         ?y : carrier\<^bsub>?T\<^esub>;
         !!u v.
            [| u : nhds\<^bsub>?T\<^esub> ?x; v : nhds\<^bsub>?T\<^esub> ?y;
               u Int v = {} |]
            ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.T2E2",
     "[| T2 ?T; ?x ~= ?y; ?x : carrier\<^bsub>?T\<^esub>;
         ?y : carrier\<^bsub>?T\<^esub>;
         !!u v.
            [| u : nhds\<^bsub>?T\<^esub> ?x; v : nhds\<^bsub>?T\<^esub> ?y;
               ?z ~: u | ?z ~: v |]
            ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 4))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Topology.filtersI",
     "[| {} ~: ?F; \<Union> ?F <= carrier\<^bsub>?T\<^esub>;
         !!A B. [| A : ?F; B : ?F |] ==> A Int B : ?F;
         !!A B.
            [| A : ?F; A <= B; B <= carrier\<^bsub>?T\<^esub> |]
            ==> B : ?F |]
      ==> ?F : Filters\<^bsub>?T\<^esub>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 1)
                )
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Topology.filtersE",
     "[| ?F : Filters\<^bsub>?T\<^esub>;
         [| {} ~: ?F; \<Union> ?F <= carrier\<^bsub>?T\<^esub>;
            ALL A B. A : ?F & B : ?F --> A Int B : ?F;
            ALL A B.
               A : ?F & A <= B & B <= carrier\<^bsub>?T\<^esub> -->
               B : ?F |]
         ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 2)
                   )
               )],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 5, template_var 2),
               template_app (template_hole 4, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 3, t_empty))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 3, t_empty))],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0)))]
