Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.544s cpu time, 0.042s GC time
Loading theory "List_Interleaving.ListInterleaving" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ConcurrentComposition" via "Noninterference_Sequential_Composition.Propaedeutics" via "Noninterference_Ipurge_Unwinding.DeterministicProcesses" via "Noninterference_Ipurge_Unwinding.IpurgeUnwinding")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 1.014s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.265s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.716s cpu time, 0.775s GC time
Loading theory "Noninterference_CSP.CSPNoninterference" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ConcurrentComposition" via "Noninterference_Sequential_Composition.Propaedeutics" via "Noninterference_Ipurge_Unwinding.DeterministicProcesses" via "Noninterference_Ipurge_Unwinding.IpurgeUnwinding")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.099s elapsed time, 4.191s cpu time, 0.874s GC time
Found termination order: "size <*mlex*> {}"
### theory "List_Interleaving.ListInterleaving"
### 1.335s elapsed time, 5.068s cpu time, 0.957s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Noninterference_CSP.CSPNoninterference"
### 0.521s elapsed time, 1.465s cpu time, 0.216s GC time
Loading theory "Noninterference_Ipurge_Unwinding.IpurgeUnwinding" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ConcurrentComposition" via "Noninterference_Sequential_Composition.Propaedeutics" via "Noninterference_Ipurge_Unwinding.DeterministicProcesses")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.095s elapsed time, 7.001s cpu time, 1.234s GC time
Loading theory "Draft.Templates" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConcurrentCompositionMoreTemplates")
consts
  sources :: "('d * 'd) set => ('a => 'd) => 'd => 'a list => 'd set"
consts
  ipurge_tr_rev :: "('d * 'd) set => ('a => 'd) => 'd => 'a list => 'a list"
consts
  sources_aux ::
    "('d * 'd) set => ('a => 'd) => 'd set => 'a list => 'd set"
consts
  ipurge_tr_rev_aux ::
    "('d * 'd) set => ('a => 'd) => 'd set => 'a list => 'a list"
consts
  offset :: "nat => 'a => 'a list => nat option"
### theory "Noninterference_Ipurge_Unwinding.IpurgeUnwinding"
### 1.058s elapsed time, 2.560s cpu time, 0.988s GC time
Loading theory "Noninterference_Ipurge_Unwinding.DeterministicProcesses" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ConcurrentComposition" via "Noninterference_Sequential_Composition.Propaedeutics")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.804s elapsed time, 2.016s cpu time, 0.942s GC time
### theory "Noninterference_Ipurge_Unwinding.DeterministicProcesses"
### 0.142s elapsed time, 0.217s cpu time, 0.000s GC time
Loading theory "Noninterference_Sequential_Composition.Propaedeutics" (required by "Draft.ConcurrentCompositionMoreTemplates" via "Draft.ConcurrentComposition")
Proofs for inductive predicate(s) "ipurge_fail_aux_t_setp"
  Proving monotonicity ...
### theory "Noninterference_Sequential_Composition.Propaedeutics"
### 1.161s elapsed time, 1.363s cpu time, 0.275s GC time
Loading theory "Draft.ConcurrentComposition" (required by "Draft.ConcurrentCompositionMoreTemplates")
consts
  ipurge_tr_aux_foldr ::
    "('d * 'd) set
     => ('a => 'd) => ('a => bool) => 'd set => 'a list => 'a list"
consts
  ipurge_ref_aux_foldr ::
    "('d * 'd) set
     => ('a => 'd) => ('a => bool) => 'd set => 'a list => 'a set => 'a set"
### theory "Draft.ConcurrentComposition"
### 1.172s elapsed time, 1.954s cpu time, 1.081s GC time
Loading theory "Draft.ConcurrentCompositionMoreTemplates"
val templateLemmas =
   [("ConcurrentComposition.con_comp_prop_1",
     "([], {}) : con_comp_failures ?P ?Q ?p ?q",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("ConcurrentComposition.con_comp_divergences",
     "divergences (?P \<parallel> ?Q <?p, ?q>) =
      con_comp_divergences ?P ?Q ?p ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.con_comp_failures",
     "failures (?P \<parallel> ?Q <?p, ?q>) =
      con_comp_failures ?P ?Q ?p ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.process_rule_5_general",
     "?xs : divergences ?P ==> ?xs @ ?ys : divergences ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("ConcurrentComposition.con_comp_traces",
     "traces (?P \<parallel> ?Q <?p, ?q>) =
      Domain (con_comp_failures ?P ?Q ?p ?q)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("ConcurrentComposition.process_rule_1_futures",
     "?xs : traces ?P ==> ([], {}) : futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ConcurrentComposition.ipurge_ref_aux_foldr_eq",
     "ipurge_ref_aux ?I ?D ?U ?xs ?X =
      ipurge_ref_aux_foldr ?I ?D ?P ?U ?xs ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 0),
             template_var 3),
           template_var 2),
         template_var 1))),
    ("ConcurrentComposition.after_failures",
     "?xs : traces ?P ==> failures (?P \<setminus> ?xs) = futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ConcurrentComposition.process_rule_6_futures",
     "?ys : future_divergences ?P ?xs ==> (?ys, ?Y) : futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.con_comp_ref_union_closed",
     "[| ref_union_closed ?P; ref_union_closed ?Q |]
      ==> ref_union_closed (?P \<parallel> ?Q <?p, ?q>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("ConcurrentComposition.ipurge_tr_aux_foldr_eq",
     "filter ?P (ipurge_tr_aux ?I ?D ?U ?xs) =
      ipurge_tr_aux_foldr ?I ?D ?P ?U ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 4),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.process_rule_5_futures",
     "?ys : future_divergences ?P ?xs ==>
      ?ys @ [?x] : future_divergences ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.ipurge_tr_aux_foldr_sinks_aux",
     "?U <= ?V ==>
      sinks_aux ?I ?D ?U (ipurge_tr_aux_foldr ?I ?D ?P ?V ?xs) = ?U",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)),
         template_var 5))),
    ("ConcurrentComposition.after_futures",
     "?xs : traces ?P ==>
      futures (?P \<setminus> ?xs) ?ys = futures ?P (?xs @ ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("ConcurrentComposition.con_comp_rep",
     "Rep_process (?P \<parallel> ?Q <?p, ?q>) =
      (con_comp_failures ?P ?Q ?p ?q, con_comp_divergences ?P ?Q ?p ?q)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("ConcurrentComposition.after_rep",
     "?xs : traces ?P ==>
      Rep_process (?P \<setminus> ?xs) =
      (futures ?P ?xs, future_divergences ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("ConcurrentComposition.con_comp_consistent_maps",
     "consistent_maps ?D ?E ?p ?q ==>
      con_comp_map ?D ?E ?p ?q = con_comp_map ?E ?D ?q ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0),
           template_var 1)))),
    ("ConcurrentComposition.con_comp_prop_6",
     "?xs : con_comp_divergences ?P ?Q ?p ?q ==>
      (?xs, ?X) : con_comp_failures ?P ?Q ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.after_secure",
     "[| ?xs : traces ?P; secure ?P ?I ?D |]
      ==> secure (?P \<setminus> ?xs) ?I ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("ConcurrentComposition.con_comp_prop_5",
     "?xs : con_comp_divergences ?P ?Q ?p ?q ==>
      ?xs @ [?x] : con_comp_divergences ?P ?Q ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.ipurge_ref_aux_cons",
     "ipurge_ref_aux ?I ?D ?U (?x # ?xs) ?X =
      ipurge_ref_aux ?I ?D (sinks_aux ?I ?D ?U [?x]) ?xs ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 0))),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.sinks_aux_elem",
     "?u : sinks_aux ?I ?D ?U ?xs ==> ?u : ?U | (EX x:set ?xs. ?u = ?D x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           ))),
    ("ConcurrentComposition.process_rule_3_futures",
     "[| (?ys, ?Y) : futures ?P ?xs; ?Y' <= ?Y |]
      ==> (?ys, ?Y') : futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.con_comp_next_events",
     "next_events (?P \<parallel> ?Q <?p, ?q>) ?xs =
      {x. ?xs @ [x] : Domain (con_comp_failures ?P ?Q ?p ?q)}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("ConcurrentComposition.ipurge_tr_aux_foldr_subset",
     "?U <= ?V ==>
      ipurge_tr_aux ?I ?D ?U (ipurge_tr_aux_foldr ?I ?D ?P ?V ?xs) =
      ipurge_tr_aux_foldr ?I ?D ?P ?V ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 4),
           template_var 0)))),
    ("ConcurrentComposition.con_comp_futures",
     "futures (?P \<parallel> ?Q <?p, ?q>) ?xs =
      {(ys, Y). (?xs @ ys, Y) : con_comp_failures ?P ?Q ?p ?q}",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("ConcurrentComposition.ipurge_tr_aux_foldr_ref_aux",
     "?U <= ?V ==>
      ipurge_ref_aux ?I ?D ?U (ipurge_tr_aux_foldr ?I ?D ?P ?V ?xs) ?X =
      ipurge_ref_aux ?I ?D ?U [] ?X",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 6),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 5),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 6),
             template_hole 0),
           template_var 0)))),
    ("ConcurrentComposition.con_comp_prop_2",
     "(?xs @ [?x], ?X) : con_comp_failures ?P ?Q ?p ?q ==>
      (?xs, {}) : con_comp_failures ?P ?Q ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_hole 2))),
                  template_var 4)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 6),
                 template_hole 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("ConcurrentComposition.con_comp_prop_3",
     "[| (?xs, ?Y) : con_comp_failures ?P ?Q ?p ?q; ?X <= ?Y |]
      ==> (?xs, ?X) : con_comp_failures ?P ?Q ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("ConcurrentComposition.ipurge_ref_aux_foldr_subset",
     "sinks_aux ?I ?D ?U ?ys <= ?V ==>
      ipurge_ref_aux ?I ?D ?U ?ys
       (ipurge_ref_aux_foldr ?I ?D ?P ?V ?xs ?X) =
      ipurge_ref_aux_foldr ?I ?D ?P ?V ?xs ?X",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 6),
                   template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 6),
                 template_var 2),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("ConcurrentComposition.process_rule_4_futures",
     "(?ys, ?Y) : futures ?P ?xs ==>
      (?ys @ [?x], {}) : futures ?P ?xs |
      (?ys, insert ?x ?Y) : futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2))),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3))),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)))
           ))),
    ("ConcurrentComposition.ipurge_tr_ref_aux_futures",
     "[| secure ?P ?I ?D; (?ys, ?Y) : futures ?P ?xs |]
      ==> (ipurge_tr_aux ?I ?D ?U ?ys, ipurge_ref_aux ?I ?D ?U ?ys ?Y)
          : futures ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 4),
                       template_var 0),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 4),
                       template_var 0),
                     template_var 3),
                   template_var 2))),
             template_app
              (template_app (template_hole 2, template_var 6),
               template_var 1))
           ))),
    ("ConcurrentComposition.con_comp_ipurge_tr_filter",
     "ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u
       (filter (%x. x : range ?p Un range ?q) ?xs) =
      ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 6)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 6, t_empty), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 6)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.con_comp_secure",
     "[| consistent_maps ?D ?E ?p ?q; secure ?P ?I ?D; secure ?Q ?I ?E |]
      ==> secure (?P \<parallel> ?Q <?p, ?q>) (con_comp_pol ?I)
           (con_comp_map ?D ?E ?p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0),
                     template_var 4),
                   template_var 3)),
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3))
           ))),
    ("ConcurrentComposition.ipurge_tr_ref_aux_failures_general",
     "[| secure ?P ?I ?D; (?xs @ ?ys, ?Y) : failures ?P |]
      ==> (?xs @ ipurge_tr_aux ?I ?D ?U ?ys, ipurge_ref_aux ?I ?D ?U ?ys ?Y)
          : failures ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app (template_hole 2, template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 4),
                         template_var 0),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 4),
                       template_var 0),
                     template_var 2),
                   template_var 1))),
             template_app (template_hole 2, template_var 6))
           ))),
    ("ConcurrentComposition.con_comp_sinks_aux_range",
     "[| ?U <= range Some; set ?xs <= range ?p Un range ?q |]
      ==> sinks_aux (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?U ?xs
          <= range Some",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_hole 10)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 5),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_hole 5)),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4),
                 template_var 3)),
             template_var 6),
           template_var 5),
         template_app
          (template_app (template_hole 12, template_hole 11),
           template_hole 10)))),
    ("ConcurrentComposition.con_comp_sinks_range",
     "[| ?u : range Some; set ?xs <= range ?p Un range ?q |]
      ==> sinks (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs
          <= range Some",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_hole 11))
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 5),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 6)),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_hole 4)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4),
                 template_var 3)),
             template_var 6),
           template_var 5),
         template_app
          (template_app (template_hole 13, template_hole 12),
           template_hole 11)))),
    ("ConcurrentComposition.con_comp_ipurge_ref_filter",
     "ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u
       (filter (%x. x : range ?p Un range ?q) ?xs) ?X =
      ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 7)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3)),
             template_var 2),
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 7)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("ConcurrentComposition.con_comp_sinks_filter",
     "sinks (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u
       (filter (%x. x : range ?p Un range ?q) ?xs) =
      sinks (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs Int
      range Some",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app (template_hole 12, template_var 6)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 11, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 10, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_var 6)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 11, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("ConcurrentComposition.con_comp_prop_4",
     "(?xs, ?X) : con_comp_failures ?P ?Q ?p ?q ==>
      (?xs @ [?x], {}) : con_comp_failures ?P ?Q ?p ?q |
      (?xs, insert ?x ?X) : con_comp_failures ?P ?Q ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 4, template_var 6),
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2))),
                     template_hole 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 6),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5))),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)))
           ))),
    ("ConcurrentComposition.con_comp_sinks_aux",
     "[| ?U <= range Some; set ?xs <= range ?p |]
      ==> sinks_aux ?I ?D (the ` ?U) (map (inv ?p) ?xs) =
          the `
          sinks_aux (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?U ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app (template_hole 15, template_hole 14),
            template_hole 13)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 6)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 9),
                 template_var 4)),
             template_var 5)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 4),
                   template_var 0)),
               template_var 6),
             template_var 5))))),
    ("ConcurrentComposition.con_comp_ipurge_tr_aux",
     "[| ?U <= range Some; set ?xs <= range ?p |]
      ==> ipurge_tr_aux ?I ?D (the ` ?U) (map (inv ?p) ?xs) =
          map (inv ?p)
           (ipurge_tr_aux (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?U
             ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app (template_hole 15, template_hole 14),
            template_hole 13)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 6)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 9),
                 template_var 4)),
             template_var 5)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 9),
               template_var 4)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 4),
                   template_var 0)),
               template_var 6),
             template_var 5))))),
    ("ConcurrentComposition.con_comp_ipurge_tr_no_fake",
     "[| range ?p Un range ?q = UNIV; ?u : range Some |]
      ==> ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs =
          ipurge_tr ?I (the o con_comp_map ?D ?E ?p ?q) (the ?u) ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 6),
                template_hole 14)),
            template_app
             (template_app (template_hole 13, template_var 5),
              template_hole 12)),
          template_hole 11),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_var 6),
                 template_var 5)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 6),
                   template_var 5))),
             template_app (template_hole 0, template_var 4)),
           template_var 0)))),
    ("ConcurrentComposition.con_comp_failures_traces",
     "(?xs, ?X) : con_comp_failures ?P ?Q ?p ?q ==>
      map (inv ?p) (filter (%x. x : range ?p) ?xs) : traces ?P &
      map (inv ?q) (filter (%x. x : range ?q) ?xs) : traces ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 15, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 9, t_empty),
                       template_var 5))),
                 template_app (template_hole 6, template_var 3))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 9, t_empty),
                     template_var 5))),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ConcurrentComposition.con_comp_ipurge_ref_no_fake",
     "[| range ?p Un range ?q = UNIV; ?u : range Some |]
      ==> ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs
           ?X =
          ipurge_ref ?I (the o con_comp_map ?D ?E ?p ?q) (the ?u) ?xs ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 7),
                template_hole 13)),
            template_app
             (template_app (template_hole 12, template_var 6),
              template_hole 11)),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 4)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 7),
                   template_var 6)),
               template_var 5),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 7),
                     template_var 6))),
               template_app (template_hole 0, template_var 5)),
             template_var 1),
           template_var 0)))),
    ("ConcurrentComposition.con_comp_sinks_no_fake",
     "[| range ?p Un range ?q = UNIV; ?u : range Some |]
      ==> sinks ?I (the o con_comp_map ?D ?E ?p ?q) (the ?u) ?xs =
          the ` sinks (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?u ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 6),
                template_hole 15)),
            template_app
             (template_app (template_hole 14, template_var 5),
              template_hole 13)),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 6),
                   template_var 5))),
             template_app (template_hole 4, template_var 4)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 6),
                   template_var 5)),
               template_var 4),
             template_var 0))))),
    ("ConcurrentComposition.con_comp_secure_no_fake",
     "[| range ?p Un range ?q = UNIV; consistent_maps ?D ?E ?p ?q;
         secure ?P ?I ?D; secure ?Q ?I ?E |]
      ==> secure (?P \<parallel> ?Q <?p, ?q>) ?I
           (the o con_comp_map ?D ?E ?p ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 6),
                template_hole 11)),
            template_app
             (template_app (template_hole 10, template_var 5),
              template_hole 9)),
          template_hole 8),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0),
                     template_var 6),
                   template_var 5)),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 6),
                 template_var 5)))
           ))),
    ("ConcurrentComposition.con_comp_ipurge_ref_aux",
     "[| ?U <= range Some; set ?xs <= range ?p; ?X <= range ?p |]
      ==> ipurge_ref_aux ?I ?D (the ` ?U) (map (inv ?p) ?xs) (inv ?p ` ?X) =
          inv ?p `
          ipurge_ref_aux (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q) ?U ?xs
           ?X",
     template_implication
      ([template_inequation
         (less_equals, template_var 7,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_hole 14)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 6),
          template_app
           (template_app (template_hole 11, template_var 5),
            template_hole 10)),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 11, template_var 5),
            template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 10),
                   template_var 5)),
               template_var 6)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_hole 10),
                 template_var 5)),
             template_var 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_hole 10),
               template_var 5)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1),
                       template_var 5),
                     template_var 0)),
                 template_var 7),
               template_var 6),
             template_var 4))))),
    ("ConcurrentComposition.con_comp_failures_divergences",
     "[| (?xs @ ?y # ?ys, ?Y) : con_comp_failures ?P ?Q ?p ?q;
         ?y ~: range ?p; ?y ~: range ?q |]
      ==> EX xs'.
             (EX ys'. ?xs @ ?zs = xs' @ ys') &
             set xs' <= range ?p Un range ?q &
             map (inv ?p) (filter (%x. x : range ?p) xs') : divergences ?P &
             map (inv ?q) (filter (%x. x : range ?q) xs') : divergences ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app (template_hole 23, template_var 8),
                      template_app
                       (template_app (template_hole 22, template_var 7),
                        template_var 6))),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 21, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 19, template_var 7),
                  template_app
                   (template_app (template_hole 18, template_var 2),
                    template_hole 17))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 19, template_var 7),
                  template_app
                   (template_app (template_hole 16, template_var 1),
                    template_hole 15))
                )
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("ConcurrentComposition.con_comp_secure_aux",
     "[| secure ?P ?I ?D; ?Y <= range ?p; set ?ys <= range ?p Un range ?q;
         ?U <= range Some;
         (map (inv ?p) (filter (%x. x : range ?p) (?xs @ ?ys)), inv ?p ` ?Y)
         : failures ?P |]
      ==> (map (inv ?p) (filter (%x. x : range ?p) ?xs) @
           map (inv ?p)
            (ipurge_tr_aux_foldr (con_comp_pol ?I)
              (con_comp_map ?D ?E ?p ?q) (%x. x : range ?p) ?U ?ys),
           inv ?p `
           ipurge_ref_aux_foldr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
            (%x. x : range ?p) ?U ?ys ?Y)
          : failures ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 25, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app (template_hole 23, template_var 5),
            template_hole 22)),
        template_inequation
         (less_equals, template_app (template_hole 21, template_var 4),
          template_app
           (template_app
             (template_hole 20,
              template_app
               (template_app (template_hole 23, template_var 5),
                template_hole 22)),
            template_app
             (template_app (template_hole 19, template_var 3),
              template_hole 18))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_hole 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 22),
                          template_var 5)),
                      template_app
                       (template_app (template_hole 9, t_empty),
                        template_app
                         (template_app (template_hole 7, template_var 1),
                          template_var 4)))),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 10, template_hole 22),
                        template_var 5)),
                    template_var 6))),
              template_app (template_hole 5, template_var 9))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_hole 22),
                             template_var 5)),
                         template_app
                          (template_app (template_hole 9, t_empty),
                           template_var 1))),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 10, template_hole 22),
                           template_var 5)),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_var 8)),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 1, template_var 7),
                                     template_var 0),
                                   template_var 5),
                                 template_var 3)),
                             t_empty),
                           template_var 2),
                         template_var 4)))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 10, template_hole 22),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 0,
                               template_app
                                (template_hole 2, template_var 8)),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 1, template_var 7),
                                   template_var 0),
                                 template_var 5),
                               template_var 3)),
                           t_empty),
                         template_var 2),
                       template_var 4),
                     template_var 6)))),
             template_app (template_hole 5, template_var 9))
           ))),
    ("ConcurrentComposition.con_comp_secure_del_aux_1",
     "[| secure ?P ?I ?D; ?y : range ?p | ?y : range ?q;
         set ?ys <= range ?p Un range ?q; ?Y <= range ?p;
         (map (inv ?p) (filter (%x. x : range ?p) (?xs @ ?y # ?ys)),
          inv ?p ` ?Y)
         : failures ?P |]
      ==> (map (inv ?p)
            (filter (%x. x : range ?p)
              (?xs @
               ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
           inv ?p `
           ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
            (con_comp_map ?D ?E ?p ?q ?y) ?ys ?Y)
          : failures ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 6),
                  template_app
                   (template_app (template_hole 19, template_var 5),
                    template_hole 18))),
              template_app
               (template_app (template_hole 20, template_var 6),
                template_app
                 (template_app (template_hole 17, template_var 4),
                  template_hole 16)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 3),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 19, template_var 5),
                template_hole 18)),
            template_app
             (template_app (template_hole 17, template_var 4),
              template_hole 16))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 19, template_var 5),
            template_hole 18)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_hole 18),
                          template_var 5)),
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_app
                         (template_app (template_hole 7, template_var 1),
                          template_app
                           (template_app (template_hole 6, template_var 6),
                            template_var 3))))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 9, template_hole 18),
                        template_var 5)),
                    template_var 2))),
              template_app (template_hole 4, template_var 9))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 18),
                         template_var 5)),
                     template_app
                      (template_app (template_hole 8, t_empty),
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_var 8)),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 1, template_var 7),
                                     template_var 0),
                                   template_var 5),
                                 template_var 4)),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 1, template_var 7),
                                     template_var 0),
                                   template_var 5),
                                 template_var 4),
                               template_var 6)),
                           template_var 3))))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 18),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_hole 2, template_var 8)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 7),
                                 template_var 0),
                               template_var 5),
                             template_var 4)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 7),
                                 template_var 0),
                               template_var 5),
                             template_var 4),
                           template_var 6)),
                       template_var 3),
                     template_var 2)))),
             template_app (template_hole 4, template_var 9))
           ))),
    ("ConcurrentComposition.con_comp_secure_del_aux_2",
     "[| consistent_maps ?D ?E ?p ?q; secure ?Q ?I ?E;
         ?y : range ?p | ?y : range ?q; set ?ys <= range ?p Un range ?q;
         ?Y <= range ?q;
         (map (inv ?q) (filter (%x. x : range ?q) (?xs @ ?y # ?ys)),
          inv ?q ` ?Y)
         : failures ?Q |]
      ==> (map (inv ?q)
            (filter (%x. x : range ?q)
              (?xs @
               ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
           inv ?q `
           ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
            (con_comp_map ?D ?E ?p ?q ?y) ?ys ?Y)
          : failures ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 23, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 5),
                template_var 4),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 3),
                  template_app
                   (template_app (template_hole 19, template_var 7),
                    template_hole 18))),
              template_app
               (template_app (template_hole 20, template_var 3),
                template_app
                 (template_app (template_hole 17, template_var 6),
                  template_hole 16)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 2),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 19, template_var 7),
                template_hole 18)),
            template_app
             (template_app (template_hole 17, template_var 6),
              template_hole 16))),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 17, template_var 6),
            template_hole 16)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_hole 16),
                          template_var 6)),
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_var 2))))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 9, template_hole 16),
                        template_var 6)),
                    template_var 1))),
              template_app (template_hole 4, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 16),
                         template_var 6)),
                     template_app
                      (template_app (template_hole 8, t_empty),
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_var 4)),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 1, template_var 9),
                                     template_var 8),
                                   template_var 7),
                                 template_var 6)),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 1, template_var 9),
                                     template_var 8),
                                   template_var 7),
                                 template_var 6),
                               template_var 3)),
                           template_var 2))))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 16),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_hole 2, template_var 4)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 3)),
                       template_var 2),
                     template_var 1)))),
             template_app (template_hole 4, template_var 5))
           ))),
    ("ConcurrentComposition.con_comp_secure_add_aux_1",
     "[| secure ?P ?I ?D; ?y : range ?p | ?y : range ?q;
         set ?zs <= range ?p Un range ?q; ?Z <= range ?p;
         (map (inv ?p) (filter (%x. x : range ?p) (?xs @ ?zs)), inv ?p ` ?Z)
         : failures ?P;
         map (inv ?p) (filter (%x. x : range ?p) (?xs @ [?y]))
         : traces ?P |]
      ==> (map (inv ?p)
            (filter (%x. x : range ?p)
              (?xs @
               ?y #
               ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
           inv ?p `
           ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
            (con_comp_map ?D ?E ?p ?q ?y) ?zs ?Z)
          : failures ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 25, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_var 6),
                  template_app
                   (template_app (template_hole 22, template_var 5),
                    template_hole 21))),
              template_app
               (template_app (template_hole 23, template_var 6),
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_hole 19)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 3),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 22, template_var 5),
                template_hole 21)),
            template_app
             (template_app (template_hole 20, template_var 4),
              template_hole 19))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 22, template_var 5),
            template_hole 21)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_hole 21),
                          template_var 5)),
                      template_app
                       (template_app (template_hole 11, t_empty),
                        template_app
                         (template_app (template_hole 10, template_var 1),
                          template_var 3)))),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 12, template_hole 21),
                        template_var 5)),
                    template_var 2))),
              template_app (template_hole 8, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 21),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 11, t_empty),
                    template_app
                     (template_app (template_hole 10, template_var 1),
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_hole 5))))),
              template_app (template_hole 4, template_var 9))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_hole 21),
                         template_var 5)),
                     template_app
                      (template_app (template_hole 11, t_empty),
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_app
                          (template_app (template_hole 6, template_var 6),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2, template_var 8)),
                                 template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 1, template_var 7), template_var 0),
                                     template_var 5),
                                   template_var 4)),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 1, template_var 7), template_var 0),
                                     template_var 5),
                                   template_var 4),
                                 template_var 6)),
                             template_var 3)))))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 12, template_hole 21),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_hole 2, template_var 8)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 7),
                                 template_var 0),
                               template_var 5),
                             template_var 4)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 7),
                                 template_var 0),
                               template_var 5),
                             template_var 4),
                           template_var 6)),
                       template_var 3),
                     template_var 2)))),
             template_app (template_hole 8, template_var 9))
           ))),
    ("ConcurrentComposition.con_comp_secure_add_aux_2",
     "[| consistent_maps ?D ?E ?p ?q; secure ?Q ?I ?E;
         ?y : range ?p | ?y : range ?q; set ?zs <= range ?p Un range ?q;
         ?Z <= range ?q;
         (map (inv ?q) (filter (%x. x : range ?q) (?xs @ ?zs)), inv ?q ` ?Z)
         : failures ?Q;
         map (inv ?q) (filter (%x. x : range ?q) (?xs @ [?y]))
         : traces ?Q |]
      ==> (map (inv ?q)
            (filter (%x. x : range ?q)
              (?xs @
               ?y #
               ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
           inv ?q `
           ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
            (con_comp_map ?D ?E ?p ?q ?y) ?zs ?Z)
          : failures ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 26, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 25, template_var 5),
                template_var 4),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_var 3),
                  template_app
                   (template_app (template_hole 22, template_var 7),
                    template_hole 21))),
              template_app
               (template_app (template_hole 23, template_var 3),
                template_app
                 (template_app (template_hole 20, template_var 6),
                  template_hole 19)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 2),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 22, template_var 7),
                template_hole 21)),
            template_app
             (template_app (template_hole 20, template_var 6),
              template_hole 19))),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 20, template_var 6),
            template_hole 19)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_hole 19),
                          template_var 6)),
                      template_app
                       (template_app (template_hole 11, t_empty),
                        template_app
                         (template_app (template_hole 10, template_var 0),
                          template_var 2)))),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 12, template_hole 19),
                        template_var 6)),
                    template_var 1))),
              template_app (template_hole 8, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 19),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 11, t_empty),
                    template_app
                     (template_app (template_hole 10, template_var 0),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_hole 5))))),
              template_app (template_hole 4, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_hole 19),
                         template_var 6)),
                     template_app
                      (template_app (template_hole 11, t_empty),
                       template_app
                        (template_app (template_hole 10, template_var 0),
                         template_app
                          (template_app (template_hole 6, template_var 3),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2, template_var 4)),
                                 template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 1, template_var 9), template_var 8),
                                     template_var 7),
                                   template_var 6)),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 1, template_var 9), template_var 8),
                                     template_var 7),
                                   template_var 6),
                                 template_var 3)),
                             template_var 2)))))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 12, template_hole 19),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_hole 2, template_var 4)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 3)),
                       template_var 2),
                     template_var 1)))),
             template_app (template_hole 8, template_var 5))
           ))),
    ("ConcurrentComposition.con_comp_secure_del_case_2",
     "[| consistent_maps ?D ?E ?p ?q; secure ?P ?I ?D; secure ?Q ?I ?E;
         EX xs'.
            (EX ys'. ?xs @ ?y # ?ys = xs' @ ys') &
            set xs' <= range ?p Un range ?q &
            map (inv ?p) (filter (%x. x : range ?p) xs') : divergences ?P &
            map (inv ?q) (filter (%x. x : range ?q) xs') : divergences ?Q |]
      ==> (EX R S T.
              ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
               (con_comp_map ?D ?E ?p ?q ?y) ?ys ?Y =
              R Un S Un T &
              set ?xs <= range ?p Un range ?q &
              set (ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?ys)
              <= range ?p Un range ?q &
              R <= range ?p &
              S <= range ?q &
              T <= - range ?p &
              T <= - range ?q &
              (map (inv ?p)
                (filter (%x. x : range ?p)
                  (?xs @
                   ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
               inv ?p ` R)
              : failures ?P &
              (map (inv ?q)
                (filter (%x. x : range ?q)
                  (?xs @
                   ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
               inv ?q ` S)
              : failures ?Q) |
          (EX xs'.
              (EX ys'.
                  ?xs @
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?ys =
                  xs' @ ys') &
              set xs' <= range ?p Un range ?q &
              map (inv ?p) (filter (%x. x : range ?p) xs')
              : divergences ?P &
              map (inv ?q) (filter (%x. x : range ?q) xs')
              : divergences ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 40, template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 39, template_var 6),
                template_var 5),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 38, template_var 4),
                template_var 5),
              template_var 9)
            ),
        template_predicate (template_app (template_hole 37, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15, template_app (template_hole 14, t_empty)),
             template_app (template_hole 37, t_empty))
           ))),
    ("ConcurrentComposition.con_comp_secure_del_case_1",
     "[| consistent_maps ?D ?E ?p ?q; secure ?P ?I ?D; secure ?Q ?I ?E;
         EX R S T.
            ?Y = R Un S Un T &
            (?y : range ?p | ?y : range ?q) &
            set ?xs <= range ?p Un range ?q &
            set ?ys <= range ?p Un range ?q &
            R <= range ?p &
            S <= range ?q &
            T <= - range ?p &
            T <= - range ?q &
            (map (inv ?p) (filter (%x. x : range ?p) (?xs @ ?y # ?ys)),
             inv ?p ` R)
            : failures ?P &
            (map (inv ?q) (filter (%x. x : range ?q) (?xs @ ?y # ?ys)),
             inv ?q ` S)
            : failures ?Q |]
      ==> EX R S T.
             ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
              (con_comp_map ?D ?E ?p ?q ?y) ?ys ?Y =
             R Un S Un T &
             set ?xs <= range ?p Un range ?q &
             set (ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?ys)
             <= range ?p Un range ?q &
             R <= range ?p &
             S <= range ?q &
             T <= - range ?p &
             T <= - range ?q &
             (map (inv ?p)
               (filter (%x. x : range ?p)
                 (?xs @
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
              inv ?p ` R)
             : failures ?P &
             (map (inv ?q)
               (filter (%x. x : range ?q)
                 (?xs @
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?ys)),
              inv ?q ` S)
             : failures ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 34, template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 33, template_var 6),
                template_var 5),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 32, template_var 4),
                template_var 5),
              template_var 9)
            ),
        template_predicate (template_app (template_hole 31, t_empty))],
       template_predicate (template_app (template_hole 31, t_empty)))),
    ("ConcurrentComposition.con_comp_secure_add_case_1",
     "[| consistent_maps ?D ?E ?p ?q; secure ?P ?I ?D; secure ?Q ?I ?E;
         (?xs @ ?y # ?ys, ?Y) : con_comp_failures ?P ?Q ?p ?q;
         ?y : range ?p | ?y : range ?q;
         EX R S T.
            ?Z = R Un S Un T &
            set ?xs <= range ?p Un range ?q &
            set ?zs <= range ?p Un range ?q &
            R <= range ?p &
            S <= range ?q &
            T <= - range ?p &
            T <= - range ?q &
            (map (inv ?p) (filter (%x. x : range ?p) (?xs @ ?zs)),
             inv ?p ` R)
            : failures ?P &
            (map (inv ?q) (filter (%x. x : range ?q) (?xs @ ?zs)),
             inv ?q ` S)
            : failures ?Q |]
      ==> EX R S T.
             ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
              (con_comp_map ?D ?E ?p ?q ?y) ?zs ?Z =
             R Un S Un T &
             set ?xs <= range ?p Un range ?q &
             set (ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?zs)
             <= range ?p Un range ?q &
             R <= range ?p &
             S <= range ?q &
             T <= - range ?p &
             T <= - range ?q &
             (map (inv ?p)
               (filter (%x. x : range ?p)
                 (?xs @
                  ?y #
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
              inv ?p ` R)
             : failures ?P &
             (map (inv ?q)
               (filter (%x. x : range ?q)
                 (?xs @
                  ?y #
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
              inv ?q ` S)
             : failures ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 37, template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 36, template_var 8),
                template_var 7),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 35, template_var 6),
                template_var 7),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app
                 (template_app
                   (template_hole 33,
                    template_app
                     (template_app (template_hole 32, template_var 5),
                      template_app
                       (template_app (template_hole 31, template_var 4),
                        template_var 3))),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 30, template_var 8),
                    template_var 6),
                  template_var 10),
                template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app (template_hole 28, template_var 4),
                  template_app
                   (template_app (template_hole 27, template_var 10),
                    template_hole 26))),
              template_app
               (template_app (template_hole 28, template_var 4),
                template_app
                 (template_app (template_hole 25, template_var 9),
                  template_hole 24)))
            ),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate (template_app (template_hole 23, t_empty)))),
    ("ConcurrentComposition.con_comp_secure_add_case_2",
     "[| consistent_maps ?D ?E ?p ?q; secure ?P ?I ?D; secure ?Q ?I ?E;
         (?xs @ ?y # ?ys, ?Y) : con_comp_failures ?P ?Q ?p ?q;
         ?y : range ?p | ?y : range ?q;
         EX xs'.
            (EX ys'. ?xs @ ?zs = xs' @ ys') &
            set xs' <= range ?p Un range ?q &
            map (inv ?p) (filter (%x. x : range ?p) xs') : divergences ?P &
            map (inv ?q) (filter (%x. x : range ?q) xs') : divergences ?Q |]
      ==> (EX R S T.
              ipurge_ref (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
               (con_comp_map ?D ?E ?p ?q ?y) ?zs ?Z =
              R Un S Un T &
              set ?xs <= range ?p Un range ?q &
              set (ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?zs)
              <= range ?p Un range ?q &
              R <= range ?p &
              S <= range ?q &
              T <= - range ?p &
              T <= - range ?q &
              (map (inv ?p)
                (filter (%x. x : range ?p)
                  (?xs @
                   ?y #
                   ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
               inv ?p ` R)
              : failures ?P &
              (map (inv ?q)
                (filter (%x. x : range ?q)
                  (?xs @
                   ?y #
                   ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                    (con_comp_map ?D ?E ?p ?q ?y) ?zs)),
               inv ?q ` S)
              : failures ?Q) |
          (EX xs'.
              (EX ys'.
                  ?xs @
                  ?y #
                  ipurge_tr (con_comp_pol ?I) (con_comp_map ?D ?E ?p ?q)
                   (con_comp_map ?D ?E ?p ?q ?y) ?zs =
                  xs' @ ys') &
              set xs' <= range ?p Un range ?q &
              map (inv ?p) (filter (%x. x : range ?p) xs')
              : divergences ?P &
              map (inv ?q) (filter (%x. x : range ?q) xs')
              : divergences ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 43, template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 42, template_var 8),
                template_var 7),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 41, template_var 6),
                template_var 7),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 40,
                template_app
                 (template_app
                   (template_hole 39,
                    template_app
                     (template_app (template_hole 38, template_var 5),
                      template_app
                       (template_app (template_hole 37, template_var 4),
                        template_var 3))),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 36, template_var 8),
                    template_var 6),
                  template_var 10),
                template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app
                 (template_app (template_hole 34, template_var 4),
                  template_app
                   (template_app (template_hole 33, template_var 10),
                    template_hole 32))),
              template_app
               (template_app (template_hole 34, template_var 4),
                template_app
                 (template_app (template_hole 31, template_var 9),
                  template_hole 30)))
            ),
        template_predicate (template_app (template_hole 29, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 35, template_app (template_hole 14, t_empty)),
             template_app (template_hole 29, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.ConcurrentCompositionMoreTemplates"
### 0.384s elapsed time, 0.518s cpu time, 0.079s GC time
val it = (): unit
