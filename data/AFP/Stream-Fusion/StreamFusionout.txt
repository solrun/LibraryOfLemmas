Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.514s cpu time, 0.050s GC time
Loading theory "Draft.LazyList" (required by "Draft.StreamFusionTemplates" via "Draft.StreamFusion" via "Draft.Stream")
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.905s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs")
Proving isomorphism properties of domain LList ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proving induction properties of domain LList ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.850s elapsed time, 3.372s cpu time, 0.306s GC time
### theory "Draft.LazyList"
### 0.748s elapsed time, 2.940s cpu time, 0.256s GC time
Loading theory "Draft.Stream" (required by "Draft.StreamFusionTemplates" via "Draft.StreamFusion")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.938s elapsed time, 3.433s cpu time, 0.758s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proving isomorphism properties of domain Step ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proving induction properties of domain Step ...
Proving finiteness rule for domain Step ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proving isomorphism properties of domain Stream ...
Proving induction properties of domain Stream ...
Proving finiteness rule for domain Stream ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.981s elapsed time, 6.066s cpu time, 0.961s GC time
Loading theory "Draft.Templates" (required by "Draft.StreamFusionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StreamFusionTemplates")
### theory "Draft.Stream"
### 1.185s elapsed time, 2.800s cpu time, 0.655s GC time
Loading theory "Draft.StreamFusion" (required by "Draft.StreamFusionTemplates")
Proving isomorphism properties of domain Switch ...
Proving induction properties of domain Switch ...
Proving finiteness rule for domain Switch ...
Proving isomorphism properties of domain Maybe ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.108s cpu time, 0.068s GC time
Proving induction properties of domain Maybe ...
Proving finiteness rule for domain Maybe ...
Proving isomorphism properties of domain Either ...
Proving induction properties of domain Either ...
Proving finiteness rule for domain Either ...
Proving isomorphism properties of domain Both ...
Proving induction properties of domain Both ...
Proving finiteness rule for domain Both ...
Proving isomorphism properties of domain L ...
Proving induction properties of domain L ...
Proving finiteness rule for domain L ...
### theory "Draft.StreamFusion"
### 2.548s elapsed time, 3.255s cpu time, 0.267s GC time
Loading theory "Draft.StreamFusionTemplates"
### theory "Draft.StreamFusionTemplates"
### 0.003s elapsed time, 0.007s cpu time, 0.000s GC time
*** exception THEORY raised (line 246 of "context.ML"):
*** Duplicate theory name
*** {..., HOLCF.Powerdomains, HOLCF, HOLCF-Library.Int_Discrete, Draft.LazyList, Draft.Stream}
*** {..., HOL.Conditionally_Complete_Lattices, HOL.Binomial, Main, HOL-Library.Nat_Bijection, HOL-Library.Stream}
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/Stream-Fusion/StreamFusionTemplates.thy")
Exception- TOPLEVEL_ERROR raised
