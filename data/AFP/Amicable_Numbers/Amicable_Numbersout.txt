Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Polynomial_Factorization.Prime_Factorization" via "Polynomial_Factorization.Missing_List" via "HOL-Library.Monad_Syntax")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.115s elapsed time, 0.485s cpu time, 0.022s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Polynomial_Factorization.Prime_Factorization" via "Polynomial_Factorization.Missing_List")
### theory "HOL-Library.Monad_Syntax"
### 0.041s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
### theory "HOL-Library.Code_Abstract_Nat"
### 0.047s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Code_Target_Nat"
### 0.130s elapsed time, 0.519s cpu time, 0.031s GC time
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code" via "HOL-Library.Code_Target_Numeral")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.474s elapsed time, 1.901s cpu time, 0.102s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.157s elapsed time, 0.623s cpu time, 0.049s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.521s elapsed time, 2.089s cpu time, 0.102s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
### theory "HOL-Library.Code_Target_Numeral"
### 0.140s elapsed time, 0.548s cpu time, 0.063s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
### theory "HOL-Library.Function_Algebras"
### 0.253s elapsed time, 0.860s cpu time, 0.388s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.008s elapsed time, 3.850s cpu time, 0.604s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.FuncSet"
### 0.604s elapsed time, 2.234s cpu time, 0.514s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.More_List"
### 0.204s elapsed time, 0.800s cpu time, 0.076s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Infinite_Set"
### 0.335s elapsed time, 1.312s cpu time, 0.125s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.206s elapsed time, 0.805s cpu time, 0.084s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.392s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.259s elapsed time, 1.018s cpu time, 0.173s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Algebra.Congruence"
### 1.025s elapsed time, 3.863s cpu time, 1.068s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  mset :: "'a list => 'a multiset"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  right :: "'a tree => 'a tree"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.267s elapsed time, 4.816s cpu time, 1.345s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
Found termination order: "size <*mlex*> {}"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.995s elapsed time, 3.909s cpu time, 0.615s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
Found termination order: "size <*mlex*> {}"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.909s elapsed time, 3.560s cpu time, 0.513s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
Found termination order: "size <*mlex*> {}"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Number_Theory.Fib"
### 0.290s elapsed time, 1.145s cpu time, 0.133s GC time
Loading theory "Matrix.Utility" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Polynomial_Factorization.Prime_Factorization" via "Polynomial_Factorization.Missing_List")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.939s elapsed time, 3.680s cpu time, 0.594s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
### theory "HOL-Library.Tree"
### 2.433s elapsed time, 9.395s cpu time, 2.020s GC time
Loading theory "Draft.Templates" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.ExtrEqs")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.464s elapsed time, 1.635s cpu time, 1.335s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Amicable_NumbersMoreTemplates")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.704s elapsed time, 2.579s cpu time, 1.507s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Polynomial_Factorization.Prime_Factorization")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "size_list length <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Multiset"
### 4.711s elapsed time, 18.010s cpu time, 4.552s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
Found termination order: "length <*mlex*> {}"
### theory "HOL-Algebra.Complete_Lattice"
### 1.153s elapsed time, 4.350s cpu time, 1.699s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.788s elapsed time, 3.100s cpu time, 0.524s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
Found termination order: "length <*mlex*> {}"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "Polynomial_Factorization.Missing_List"
### 2.408s elapsed time, 8.169s cpu time, 2.579s GC time
Loading theory "Polynomial_Factorization.Missing_Multiset" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Polynomial_Factorization.Prime_Factorization")
### theory "HOL-Algebra.Group"
### 2.011s elapsed time, 6.475s cpu time, 2.215s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
### theory "Polynomial_Factorization.Missing_Multiset"
### 0.267s elapsed time, 0.916s cpu time, 0.222s GC time
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.516s elapsed time, 1.658s cpu time, 0.270s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.215s elapsed time, 3.787s cpu time, 0.540s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.645s elapsed time, 1.970s cpu time, 0.230s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Elementary_Groups"
### 0.476s elapsed time, 1.440s cpu time, 0.082s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.481s elapsed time, 6.971s cpu time, 0.730s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.293s elapsed time, 3.933s cpu time, 0.291s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.741s elapsed time, 20.149s cpu time, 3.710s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Algebra.AbelCoset"
### 2.350s elapsed time, 6.916s cpu time, 0.516s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
consts
  Poly :: "'a list => 'a poly"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
### theory "HOL-Algebra.Ideal"
### 1.864s elapsed time, 5.694s cpu time, 0.605s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
### theory "HOL-Algebra.RingHom"
### 0.793s elapsed time, 2.426s cpu time, 0.255s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Polynomial"
### 5.464s elapsed time, 16.722s cpu time, 1.699s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.253s elapsed time, 0.780s cpu time, 0.091s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.169s elapsed time, 22.799s cpu time, 2.413s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Primes"
### 0.289s elapsed time, 1.153s cpu time, 0.133s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.245s elapsed time, 0.954s cpu time, 0.241s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.543s elapsed time, 2.160s cpu time, 0.374s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Squarefree"
### 0.195s elapsed time, 0.769s cpu time, 0.174s GC time
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.287s elapsed time, 1.127s cpu time, 0.260s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### theory "HOL-Number_Theory.Cong"
### 1.044s elapsed time, 4.100s cpu time, 0.684s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
### Cannot skip proof of schematic goal statement
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Number_Theory.Mod_Exp"
### 0.556s elapsed time, 2.175s cpu time, 0.382s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.242s elapsed time, 4.868s cpu time, 0.704s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.609s elapsed time, 2.378s cpu time, 0.380s GC time
Loading theory "Polynomial_Factorization.Prime_Factorization" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers")
### theory "HOL-Number_Theory.Prime_Powers"
### 0.866s elapsed time, 3.382s cpu time, 0.490s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
(%n. mset (prime_factorization_nat n)) = prime_factorization
### theory "Polynomial_Factorization.Prime_Factorization"
### 0.717s elapsed time, 2.385s cpu time, 0.526s GC time
### theory "HOL-Algebra.UnivPoly"
### 9.720s elapsed time, 30.855s cpu time, 8.283s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 5.168s elapsed time, 19.105s cpu time, 7.042s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.496s elapsed time, 1.187s cpu time, 0.079s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.370s elapsed time, 5.517s cpu time, 0.935s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.776s elapsed time, 3.929s cpu time, 0.687s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 1.075s elapsed time, 2.234s cpu time, 0.193s GC time
### theory "HOL-Number_Theory.Residues"
### 1.365s elapsed time, 2.878s cpu time, 0.299s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "Lehmer.Lehmer" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code" via "Pratt_Certificate.Pratt_Certificate")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
### theory "Lehmer.Lehmer"
### 0.068s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "Pratt_Certificate.Pratt_Certificate" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "Pratt_Certificate.Pratt_Certificate_Code")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.108s elapsed time, 0.325s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.301s elapsed time, 0.944s cpu time, 0.211s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.202s elapsed time, 0.623s cpu time, 0.099s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.287s elapsed time, 0.878s cpu time, 0.151s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.373s elapsed time, 1.060s cpu time, 0.220s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
locale efficient_power
  fixes f :: "'a => 'a => 'a"
  assumes "efficient_power f"
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature PRATT =
  sig
    exception INVALID_CERT of cert
    datatype cert = Pratt_Node of int * int * cert list
    val certT: typ
    val cert_cartouche: cert parser
    val check_cert: cert -> bool
    val get_cert_number: cert -> int
    val mk_cert: int -> cert option
    val pretty_cert: cert -> Pretty.T
    type prime_thm_cache = (int * thm) list
    val prove_prime:
       prime_thm_cache ->
         int -> Proof.context -> thm option * prime_thm_cache
    val read_cert: Input.source -> cert
    val replay_cert:
       prime_thm_cache -> cert -> Proof.context -> thm * prime_thm_cache
    val replay_cert_code: cert -> Proof.context -> thm
    val setup_valid_cert_code_conv:
       (Proof.context -> conv) -> Context.generic -> Context.generic
    val tac: tac_config -> cert option -> Proof.context -> int -> tactic
    type tac_config = {cache: prime_thm_cache, code: bool, verbose: bool}
    val tac_config_parser: tac_config parser
    val termify_cert: cert -> term
    val untermify_cert: term -> cert
  end
structure Pratt: PRATT
### theory "Pratt_Certificate.Pratt_Certificate"
### 1.821s elapsed time, 4.405s cpu time, 0.739s GC time
Loading theory "Pratt_Certificate.Pratt_Certificate_Code" (required by "Draft.Amicable_NumbersMoreTemplates" via "Draft.Amicable_Numbers")
### theory "HOL-Number_Theory.Number_Theory"
### 1.244s elapsed time, 2.638s cpu time, 0.342s GC time
### theory "Pratt_Certificate.Pratt_Certificate_Code"
### 0.835s elapsed time, 0.992s cpu time, 0.124s GC time
Loading theory "Draft.Amicable_Numbers" (required by "Draft.Amicable_NumbersMoreTemplates")
### theory "Draft.Amicable_Numbers"
### 2.627s elapsed time, 6.269s cpu time, 4.988s GC time
Loading theory "Draft.Amicable_NumbersMoreTemplates"
val templateLemmas =
   [("Amicable_Numbers.finite_divisor_set", "finite (divisor_set ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Amicable_Numbers.finite_properdiv_set", "finite (properdiv_set ?m)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Amicable_Numbers.def_equiv_divisor_set",
     "divisor_set ?n = set (divisors_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.divisor_set", "divisor_set ?m = {n. divisor n ?m}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Amicable_Numbers.properdiv_set",
     "properdiv_set ?m = {n. n properdiv ?m}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Amicable_Numbers.Amicable_pair_sym", "?m Amic ?n ==> ?n Amic ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.QuasiAmicable_pair_sym",
     "?m QAmic ?n ==> ?n QAmic ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.irregularAmicPair_sym",
     "irregularAmicPair ?n ?m ==> irregularAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.regularAmicPair_sym",
     "regularAmicPair ?n ?m ==> regularAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.twinAmicPair_sym",
     "twinAmicPair ?n ?m ==> twinAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.divisor_set_not_empty",
     "1 <= ?m ==> ?m : divisor_set ?m",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Amicable_Numbers.Esigmanotzero", "1 <= ?n ==> 1 <= Esigma ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.prime_sum_div", "prime ?n ==> Esigma ?n = ?n + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Amicable_Numbers.div_set_prime",
     "prime ?n ==> properdiv_set ?n = {1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Amicable_Numbers.prime_div_set",
     "prime ?n ==> divisor_set ?n = {?n, 1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Amicable_Numbers.Esigma_properdiv_set",
     "1 <= ?m ==> Esigma ?m = aliquot_sum ?m + ?m",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Amicable_Numbers.Amicable_pair_abundant",
     "[| ?n < ?m; ?m Amic ?n |] ==> abundant_number ?n",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Amicable_Numbers.union_properdiv_set",
     "1 <= ?n ==> divisor_set ?n = properdiv_set ?n Un {?n}",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Amicable_Numbers.sum_div_is_prime",
     "[| Esigma ?n = ?n + 1; 1 <= ?n |] ==> prime ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.auxiliary_ineq", "2 <= ?x ==> ?x + 1 < 2 * ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)))),
    ("Amicable_Numbers.sum_image_eq",
     "inj_on ?f ?A ==> \<Sum> (?f ` ?A) = sum ?f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Amicable_Numbers.gcd_Esigma_mult",
     "gcd ?m ?n = 1 ==> Esigma (?m * ?n) = Esigma ?m * Esigma ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Amicable_Numbers.mult_minus_eq_nat",
     "?x + ?y = ?z ==> - int ?x - int ?y = - int ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Amicable_Numbers.perfect_Esigma",
     "[| Esigma ?m = 2 * ?m; 1 <= ?m |] ==> perfect_number ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.deficient_Esigma",
     "[| Esigma ?m < 2 * ?m; 1 <= ?m |] ==> deficient_number ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.abundant_Esigma",
     "[| 2 * ?m < Esigma ?m; 1 <= ?m |] ==> abundant_number ?m",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0),
          template_app (template_hole 3, template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.prime_gcd",
     "[| prime ?m; prime ?n; ?m ~= ?n |] ==> gcd ?m ?n = 1",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Amicable_Numbers.prime_Esigma_mult",
     "[| prime ?m; prime ?n; ?m ~= ?n |]
      ==> Esigma (?m * ?n) = Esigma ?n * Esigma ?m",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 1))))),
    ("Amicable_Numbers.sum_strict_mono",
     "[| finite ?B; ?A < ?B; 0 ~: ?B |] ==> \<Sum> ?A < \<Sum> ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Amicable_Numbers.divisor_set_mult",
     "divisor_set (?m * ?n) =
      {i * j |i j. i : divisor_set ?m & j : divisor_set ?n}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Amicable_Numbers.minus_eq_nat_subst",
     "[| ?A = ?B - ?C - ?D; - int ?E = - int ?C - int ?D |]
      ==> ?A = ?B - ?E",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2)),
            template_var 1)),
        template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2))),
            template_app (template_hole 1, template_var 1)))],
       template_equation
        (template_var 4,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_var 0)))),
    ("Amicable_Numbers.Esigma_prime_sum",
     "[| prime ?m; 1 <= ?k |]
      ==> real (Esigma (?m ^ ?k)) =
          real (?m ^ (?k + 1) - 1) / (real ?m - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation (less_equals, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 9))),
                 template_hole 9))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 1)),
             template_hole 0))))),
    ("Amicable_Numbers.minus_eq_nat_subst_order",
     "[| 0 < ?B - ?C - ?D; ?A = ?B - ?C - ?D + ?B |]
      ==> ?A = 2 * ?B - ?C - ?D",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_var 1)),
            template_var 3))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 3)),
               template_var 2)),
           template_var 1)))),
    ("Amicable_Numbers.even_even_amicable",
     "[| ?m Amic ?n; 1 <= ?m; 1 <= ?n; even ?m; even ?n |]
      ==> 2 * ?m ~= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 1),
             template_var 0)
           ))),
    ("Amicable_Numbers.coprime_dvd_aux",
     "[| gcd ?m ?n = Suc 0; ?na dvd ?n; ?ma dvd ?m; ?mb dvd ?m; ?nb dvd ?n;
         ?ma * ?na = ?mb * ?nb |]
      ==> ?ma = ?mb",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app (template_hole 3, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 3),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 2, template_var 1))),
    ("Amicable_Numbers.breederAmic",
     "[| 0 < ?x; Esigma ?n = ?n + ?m * ?x; Esigma ?n = Esigma ?m * (?x + 1);
         prime ?x; ~ ?x dvd ?m |]
      ==> ?n Amic (?m * ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 2))),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 0)),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 4))),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2))
           ))),
    ("Amicable_Numbers.Euler_Rule_Amicable_1",
     "[| 1 <= ?m; 1 <= ?n; 1 <= ?a; Esigma ?m = Esigma ?n;
         Esigma ?a * Esigma ?m = ?a * (?m + ?n); gcd ?a ?m = 1;
         gcd ?a ?n = 1 |]
      ==> (?a * ?m) Amic (?a * ?n)",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation (less_equals, template_hole 6, template_var 1),
        template_inequation (less_equals, template_hole 6, template_var 0),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 0)),
            template_app (template_hole 4, template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1))),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 2),
          template_hole 6),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("Amicable_Numbers.Thabit_ibn_Qurra_Rule_Amicable",
     "[| 1 < ?k; prime ?p; prime ?q; prime ?r; ?p = 2 ^ (?k - 1) * 3 - 1;
         ?q = 2 ^ ?k * 3 - 1; ?r = 2 ^ (2 * ?k - 1) * 9 - 1 |]
      ==> (2 ^ ?k * ?p * ?q) Amic (2 ^ ?k * ?r)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_hole 10))),
                template_app
                 (template_hole 4,
                  template_app (template_hole 1, template_hole 2)))),
            template_hole 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_var 3)),
                template_app
                 (template_hole 4,
                  template_app (template_hole 1, template_hole 2)))),
            template_hole 10)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_hole 6,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3, template_hole 2))),
                          template_var 3)),
                      template_hole 10))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 1,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 3, template_hole 2)))))),
            template_hole 10))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_var 3)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 3)),
               template_var 0))
           ))),
    ("Amicable_Numbers.isotopic_amicable_pair",
     "[| ?m Amic ?n; 1 <= ?m; 1 <= ?n; ?m = ?g * ?M; ?n = ?g * ?N;
         real (Esigma ?h) = real ?h / real ?g * real (Esigma ?g); ?h ~= ?g;
         1 < ?h; 1 < ?g; gcd ?g ?M = 1; gcd ?g ?N = 1; gcd ?h ?M = 1;
         gcd ?h ?N = 1 |]
      ==> (?h * ?M) Amic (?h * ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_hole 10, template_var 5),
        template_inequation (less_equals, template_hole 10, template_var 4),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 2)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 6, template_var 3))),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)))),
        template_negation
         (template_equation (template_var 0, template_var 3)),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_inequation (less_than, template_hole 10, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 1),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 2),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 1),
          template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1))
           ))),
    ("Amicable_Numbers.teRiele_Rule_Amicable",
     "[| 1 <= ?a; 1 <= ?u; prime ?p; prime ?r; prime ?c; prime ?q; ?r ~= ?c;
         ~ ?p dvd ?a; (?a * ?u) Amic (?a * ?p); gcd ?a (?r * ?c) = 1;
         ?q = ?r + ?c + ?u; gcd (?a * ?u) ?q = 1;
         ?r * ?c = ?p * (?r + ?c + ?u) + ?p + ?u |]
      ==> (?a * ?u * ?q) Amic (?a * ?r * ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 5),
        template_inequation (less_equals, template_hole 8, template_var 4),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 5)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_hole 8),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4)),
            template_var 0),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app
                       (template_hole 0,
                        template_app
                         (template_app (template_hole 0, template_var 2),
                          template_var 1)),
                      template_var 4))),
                template_var 3)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 4)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_var 1))
           ))),
    ("Amicable_Numbers.Euler_Rule_Amicable",
     "[| ?l < ?k; 1 <= ?l; ?f = 2 ^ ?l + 1; prime ?p; prime ?q; prime ?r;
         ?p = 2 ^ (?k - ?l) * ?f - 1; ?q = 2 ^ ?k * ?f - 1;
         ?r = 2 ^ (2 * ?k - ?l) * ?f\<^sup>2 - 1; ?m = 2 ^ ?k * ?p * ?q;
         ?n = 2 ^ ?k * ?r |]
      ==> ?m Amic ?n",
     template_implication
      ([template_inequation (less_than, template_var 7, template_var 6),
        template_inequation (less_equals, template_hole 10, template_var 7),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 7)),
            template_hole 10)),
        template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 7))),
                template_var 5)),
            template_hole 10)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 6)),
                template_var 5)),
            template_hole 10)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app
                     (template_app
                       (template_hole 2,
                        template_app
                         (template_app
                           (template_hole 1,
                            template_app
                             (template_hole 6,
                              template_app
                               (template_hole 5, template_hole 4))),
                          template_var 6)),
                      template_var 7))),
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))))),
            template_hole 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 6)),
                template_var 4)),
            template_var 3)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 6)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Amicable_Numbers.Borho_Rule_breeders_Amicable",
     "[| 1 <= ?x; 1 <= ?a; 1 <= ?u; prime ?r; prime ?c; prime ?q; ?r ~= ?c;
         Esigma (?a * ?u) = ?a * ?u + ?a * ?x;
         Esigma (?a * ?u) = Esigma ?a * (?x + 1); gcd ?a (?r * ?c) = 1;
         gcd (?a * ?u) ?q = 1;
         ?r * ?c = ?x + ?u + ?x * ?u + ?r * ?x + ?x * ?c;
         ?q = ?r + ?c + ?u |]
      ==> (?a * ?u * ?q) Amic (?a * ?r * ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 5),
        template_inequation (less_equals, template_hole 8, template_var 4),
        template_inequation (less_equals, template_hole 8, template_var 3),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3)),
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 5))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 4)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_hole 8))),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 8),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3)),
            template_var 0),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 3))),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 5))),
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 1))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 2)),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Amicable_NumbersMoreTemplates"
### 0.872s elapsed time, 1.206s cpu time, 0.116s GC time
val it = (): unit
