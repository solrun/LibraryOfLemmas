   [("Amicable_Numbers.finite_divisor_set", "finite (divisor_set ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Amicable_Numbers.finite_properdiv_set", "finite (properdiv_set ?m)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Amicable_Numbers.def_equiv_divisor_set",
     "divisor_set ?n = set (divisors_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.divisor_set", "divisor_set ?m = {n. divisor n ?m}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Amicable_Numbers.properdiv_set",
     "properdiv_set ?m = {n. n properdiv ?m}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Amicable_Numbers.Amicable_pair_sym", "?m Amic ?n ==> ?n Amic ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.QuasiAmicable_pair_sym",
     "?m QAmic ?n ==> ?n QAmic ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.irregularAmicPair_sym",
     "irregularAmicPair ?n ?m ==> irregularAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.regularAmicPair_sym",
     "regularAmicPair ?n ?m ==> regularAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.twinAmicPair_sym",
     "twinAmicPair ?n ?m ==> twinAmicPair ?m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Amicable_Numbers.divisor_set_not_empty",
     "1 <= ?m ==> ?m : divisor_set ?m",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Amicable_Numbers.Esigmanotzero", "1 <= ?n ==> 1 <= Esigma ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.prime_sum_div", "prime ?n ==> Esigma ?n = ?n + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Amicable_Numbers.div_set_prime",
     "prime ?n ==> properdiv_set ?n = {1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Amicable_Numbers.prime_div_set",
     "prime ?n ==> divisor_set ?n = {?n, 1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Amicable_Numbers.Esigma_properdiv_set",
     "1 <= ?m ==> Esigma ?m = aliquot_sum ?m + ?m",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Amicable_Numbers.Amicable_pair_abundant",
     "[| ?n < ?m; ?m Amic ?n |] ==> abundant_number ?n",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Amicable_Numbers.union_properdiv_set",
     "1 <= ?n ==> divisor_set ?n = properdiv_set ?n Un {?n}",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Amicable_Numbers.sum_div_is_prime",
     "[| Esigma ?n = ?n + 1; 1 <= ?n |] ==> prime ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.auxiliary_ineq", "2 <= ?x ==> ?x + 1 < 2 * ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_var 0)))),
    ("Amicable_Numbers.sum_image_eq",
     "inj_on ?f ?A ==> \<Sum> (?f ` ?A) = sum ?f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Amicable_Numbers.gcd_Esigma_mult",
     "gcd ?m ?n = 1 ==> Esigma (?m * ?n) = Esigma ?m * Esigma ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Amicable_Numbers.mult_minus_eq_nat",
     "?x + ?y = ?z ==> - int ?x - int ?y = - int ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Amicable_Numbers.perfect_Esigma",
     "[| Esigma ?m = 2 * ?m; 1 <= ?m |] ==> perfect_number ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.deficient_Esigma",
     "[| Esigma ?m < 2 * ?m; 1 <= ?m |] ==> deficient_number ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.abundant_Esigma",
     "[| 2 * ?m < Esigma ?m; 1 <= ?m |] ==> abundant_number ?m",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0),
          template_app (template_hole 3, template_var 0)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Amicable_Numbers.prime_gcd",
     "[| prime ?m; prime ?n; ?m ~= ?n |] ==> gcd ?m ?n = 1",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Amicable_Numbers.prime_Esigma_mult",
     "[| prime ?m; prime ?n; ?m ~= ?n |]
      ==> Esigma (?m * ?n) = Esigma ?n * Esigma ?m",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 1))))),
    ("Amicable_Numbers.sum_strict_mono",
     "[| finite ?B; ?A < ?B; 0 ~: ?B |] ==> \<Sum> ?A < \<Sum> ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Amicable_Numbers.divisor_set_mult",
     "divisor_set (?m * ?n) =
      {i * j |i j. i : divisor_set ?m & j : divisor_set ?n}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Amicable_Numbers.minus_eq_nat_subst",
     "[| ?A = ?B - ?C - ?D; - int ?E = - int ?C - int ?D |]
      ==> ?A = ?B - ?E",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2)),
            template_var 1)),
        template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2))),
            template_app (template_hole 1, template_var 1)))],
       template_equation
        (template_var 4,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_var 0)))),
    ("Amicable_Numbers.Esigma_prime_sum",
     "[| prime ?m; 1 <= ?k |]
      ==> real (Esigma (?m ^ ?k)) =
          real (?m ^ (?k + 1) - 1) / (real ?m - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation (less_equals, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 9))),
                 template_hole 9))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 1)),
             template_hole 0))))),
    ("Amicable_Numbers.minus_eq_nat_subst_order",
     "[| 0 < ?B - ?C - ?D; ?A = ?B - ?C - ?D + ?B |]
      ==> ?A = 2 * ?B - ?C - ?D",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2)),
                template_var 1)),
            template_var 3))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 3)),
               template_var 2)),
           template_var 1)))),
    ("Amicable_Numbers.even_even_amicable",
     "[| ?m Amic ?n; 1 <= ?m; 1 <= ?n; even ?m; even ?n |]
      ==> 2 * ?m ~= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 1),
             template_var 0)
           ))),
    ("Amicable_Numbers.coprime_dvd_aux",
     "[| gcd ?m ?n = Suc 0; ?na dvd ?n; ?ma dvd ?m; ?mb dvd ?m; ?nb dvd ?n;
         ?ma * ?na = ?mb * ?nb |]
      ==> ?ma = ?mb",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app (template_hole 3, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 3),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 2, template_var 1))),
    ("Amicable_Numbers.breederAmic",
     "[| 0 < ?x; Esigma ?n = ?n + ?m * ?x; Esigma ?n = Esigma ?m * (?x + 1);
         prime ?x; ~ ?x dvd ?m |]
      ==> ?n Amic (?m * ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 2))),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 0)),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 4))),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2))
           ))),
    ("Amicable_Numbers.Euler_Rule_Amicable_1",
     "[| 1 <= ?m; 1 <= ?n; 1 <= ?a; Esigma ?m = Esigma ?n;
         Esigma ?a * Esigma ?m = ?a * (?m + ?n); gcd ?a ?m = 1;
         gcd ?a ?n = 1 |]
      ==> (?a * ?m) Amic (?a * ?n)",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation (less_equals, template_hole 6, template_var 1),
        template_inequation (less_equals, template_hole 6, template_var 0),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 0)),
            template_app (template_hole 4, template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1))),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 2),
          template_hole 6),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("Amicable_Numbers.Thabit_ibn_Qurra_Rule_Amicable",
     "[| 1 < ?k; prime ?p; prime ?q; prime ?r; ?p = 2 ^ (?k - 1) * 3 - 1;
         ?q = 2 ^ ?k * 3 - 1; ?r = 2 ^ (2 * ?k - 1) * 9 - 1 |]
      ==> (2 ^ ?k * ?p * ?q) Amic (2 ^ ?k * ?r)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_hole 10))),
                template_app
                 (template_hole 4,
                  template_app (template_hole 1, template_hole 2)))),
            template_hole 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_var 3)),
                template_app
                 (template_hole 4,
                  template_app (template_hole 1, template_hole 2)))),
            template_hole 10)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_hole 6,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3, template_hole 2))),
                          template_var 3)),
                      template_hole 10))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 1,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 3, template_hole 2)))))),
            template_hole 10))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_var 3)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 3)),
               template_var 0))
           ))),
    ("Amicable_Numbers.isotopic_amicable_pair",
     "[| ?m Amic ?n; 1 <= ?m; 1 <= ?n; ?m = ?g * ?M; ?n = ?g * ?N;
         real (Esigma ?h) = real ?h / real ?g * real (Esigma ?g); ?h ~= ?g;
         1 < ?h; 1 < ?g; gcd ?g ?M = 1; gcd ?g ?N = 1; gcd ?h ?M = 1;
         gcd ?h ?N = 1 |]
      ==> (?h * ?M) Amic (?h * ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_hole 10, template_var 5),
        template_inequation (less_equals, template_hole 10, template_var 4),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 2)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 6, template_var 3))),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)))),
        template_negation
         (template_equation (template_var 0, template_var 3)),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_inequation (less_than, template_hole 10, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 3), template_var 1),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 2),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 1),
          template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1))
           ))),
    ("Amicable_Numbers.teRiele_Rule_Amicable",
     "[| 1 <= ?a; 1 <= ?u; prime ?p; prime ?r; prime ?c; prime ?q; ?r ~= ?c;
         ~ ?p dvd ?a; (?a * ?u) Amic (?a * ?p); gcd ?a (?r * ?c) = 1;
         ?q = ?r + ?c + ?u; gcd (?a * ?u) ?q = 1;
         ?r * ?c = ?p * (?r + ?c + ?u) + ?p + ?u |]
      ==> (?a * ?u * ?q) Amic (?a * ?r * ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 5),
        template_inequation (less_equals, template_hole 8, template_var 4),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 5)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_hole 8),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4)),
            template_var 0),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app
                       (template_hole 0,
                        template_app
                         (template_app (template_hole 0, template_var 2),
                          template_var 1)),
                      template_var 4))),
                template_var 3)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 4)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_var 1))
           ))),
    ("Amicable_Numbers.Euler_Rule_Amicable",
     "[| ?l < ?k; 1 <= ?l; ?f = 2 ^ ?l + 1; prime ?p; prime ?q; prime ?r;
         ?p = 2 ^ (?k - ?l) * ?f - 1; ?q = 2 ^ ?k * ?f - 1;
         ?r = 2 ^ (2 * ?k - ?l) * ?f\<^sup>2 - 1; ?m = 2 ^ ?k * ?p * ?q;
         ?n = 2 ^ ?k * ?r |]
      ==> ?m Amic ?n",
     template_implication
      ([template_inequation (less_than, template_var 7, template_var 6),
        template_inequation (less_equals, template_hole 10, template_var 7),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 7)),
            template_hole 10)),
        template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 7))),
                template_var 5)),
            template_hole 10)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 6)),
                template_var 5)),
            template_hole 10)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_app
                     (template_app
                       (template_hole 2,
                        template_app
                         (template_app
                           (template_hole 1,
                            template_app
                             (template_hole 6,
                              template_app
                               (template_hole 5, template_hole 4))),
                          template_var 6)),
                      template_var 7))),
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))))),
            template_hole 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 6)),
                template_var 4)),
            template_var 3)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 6)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Amicable_Numbers.Borho_Rule_breeders_Amicable",
     "[| 1 <= ?x; 1 <= ?a; 1 <= ?u; prime ?r; prime ?c; prime ?q; ?r ~= ?c;
         Esigma (?a * ?u) = ?a * ?u + ?a * ?x;
         Esigma (?a * ?u) = Esigma ?a * (?x + 1); gcd ?a (?r * ?c) = 1;
         gcd (?a * ?u) ?q = 1;
         ?r * ?c = ?x + ?u + ?x * ?u + ?r * ?x + ?x * ?c;
         ?q = ?r + ?c + ?u |]
      ==> (?a * ?u * ?q) Amic (?a * ?r * ?c)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 5),
        template_inequation (less_equals, template_hole 8, template_var 4),
        template_inequation (less_equals, template_hole 8, template_var 3),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3)),
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 5))),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 4)),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_hole 8))),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_hole 8),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3)),
            template_var 0),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 3))),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 5))),
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 1))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 2)),
               template_var 1))
           )))]
