Loading theory "Draft.CPair" (required by "Draft.PRecListMoreTemplates" via "Draft.PRecList" via "Draft.PRecFun")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.535s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CPair"
### 0.161s elapsed time, 0.654s cpu time, 0.053s GC time
Loading theory "Draft.PRecFun" (required by "Draft.PRecListMoreTemplates" via "Draft.PRecList")
consts
  PrimRecOp ::
    "(nat => nat) => (nat => nat => nat => nat) => nat => nat => nat"
consts
  PrimRecOp_last ::
    "(nat => nat) => (nat => nat => nat => nat) => nat => nat => nat"
consts
  PrimRecOp1 :: "nat => (nat => nat => nat) => nat => nat"
### theory "HOL-Library.Set_Algebras"
### 0.253s elapsed time, 1.026s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "PrimRec1p", "PrimRec2p", "PrimRec3p"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.479s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 31 of "$AFP/Recursion-Theory-I/Utils.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 28 of "$AFP/Recursion-Theory-I/Utils.ML"):
### Value identifier (t2) has not been referenced.
### ML warning (line 55 of "$AFP/Recursion-Theory-I/Utils.ML"):
### Pattern is not exhaustive.
exception BadArgument
val extract_prop_arg = fn: term -> term
val extract_trueprop_arg = fn: term -> term
val extract_set_args = fn: term -> term * term
val get_num_by_set = fn: string -> int
val remove_abs = fn: term -> term
val extract_free_from_app = fn: term -> int -> string * typ * int
val extract_free_arg = fn: term -> string * typ * int
val get_comp_by_indexes = fn: int * int -> thm
val pr_comp_tac = fn: Proof.context -> int -> tactic
val prec0_tac = fn: Proof.context -> thm list -> int -> tactic
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### ML warning (line 439 of "$AFP/Recursion-Theory-I/PRecFun.thy"):
### Pattern is not exhaustive.
val get_if_by_index = fn: int -> thm
val if_comp_tac = fn: Proof.context -> int -> tactic
val prec_tac = fn: Proof.context -> thm list -> int -> tactic
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.PRecFun"
### 1.021s elapsed time, 3.877s cpu time, 0.852s GC time
Loading theory "Draft.PRecList" (required by "Draft.PRecListMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.706s cpu time, 0.852s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  c_unfold :: "nat => nat => nat list"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 3.916s cpu time, 0.850s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp c_assoc_have_key_rel (?y1, ?x1) ==>
### c_assoc_have_key ?y1 ?x1 ==
### if ?y1 = 0 then 1
### else if c_fst (c_hd ?y1) = ?x1 then 0 else c_assoc_have_key (c_tl ?y1) ?x1
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp c_assoc_value_rel (?y1, ?x1) ==>
### c_assoc_value ?y1 ?x1 ==
### if ?y1 = 0 then 0
### else if c_fst (c_hd ?y1) = ?x1 then c_snd (c_hd ?y1)
###      else c_assoc_value (c_tl ?y1) ?x1
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PRecList"
### 0.478s elapsed time, 1.317s cpu time, 0.218s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.943s elapsed time, 5.860s cpu time, 1.136s GC time
Loading theory "Draft.Templates" (required by "Draft.PRecListMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PRecListMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.506s cpu time, 0.052s GC time
Loading theory "Draft.PRecListMoreTemplates"
val templateLemmas =
   [("PRecList.c_tl_le", "c_tl ?u <= ?u",
     template_inequation
      (less_equals, template_app (template_hole 0, template_var 0),
       template_var 0)),
    ("PRecList.c_drop_at_0", "c_drop 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PRecList.list_to_nat_th", "list_to_nat (nat_to_list ?u) = ?u",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("PRecList.nat_to_list_th", "nat_to_list (list_to_nat ?ls) = ?ls",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("PRecList.c_cons_pos", "0 < c_cons ?x ?u",
     template_inequation
      (less_than, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PRecList.c_len_th_1", "c_len (list_to_nat ?ls) = length ?ls",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PRecList.c_nth_at_0", "c_nth ?x 0 = c_hd ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("PRecList.c_fold_2", "c_fold (c_unfold 1 ?u) = ?u",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("PRecList.c_hd_c_cons", "c_hd (c_cons ?x ?y) = ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("PRecList.c_tl_c_cons", "c_tl (c_cons ?x ?y) = ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("PRecList.c_tl_eq_tl", "c_tl (list_to_nat ?ls) = list_to_nat (tl ?ls)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("PRecList.tl_eq_c_tl", "tl (nat_to_list ?x) = nat_to_list (c_tl ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("PRecList.c_unfold_1", "c_unfold 1 ?u = [?u]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PRecList.th_3", "c_unfold (length ?ls) (c_fold ?ls) = ?ls",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("PRecList.c_unfold_len", "ALL u. length (c_unfold ?k u) = ?k",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("PRecList.th_1", "ALL u. c_fold (c_unfold (Suc ?k) u) = u",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("PRecList.c_f_list_to_f", "?f = (%y x. c_hd (c_f_list ?f y x))",
     template_equation (template_var 0, t_empty)),
    ("PRecList.c_cons_aux1", "c_cons ?x 0 = c_pair 0 ?x + 1",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 0)),
         template_hole 0))),
    ("PRecList.c_f_list_to_f_0", "?f ?y ?x = c_hd (c_f_list ?f ?y ?x)",
     template_equation
      (template_app
        (template_app (template_var 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("PRecList.c_drop_at_Suc1", "c_drop (Suc ?y) ?x = c_drop ?y (c_tl ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PRecList.c_drop_at_Suc", "c_drop (Suc ?y) ?x = c_tl (c_drop ?y ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("PRecList.c_tl_c_drop", "c_tl (c_drop ?y ?x) = c_drop ?y (c_tl ?x)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("PRecList.c_assoc_lm_1",
     "c_assoc_have_key (c_cons (c_pair ?x ?y) ?z) ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 2),
       template_hole 0)),
    ("PRecList.c_assoc_lm_2",
     "c_assoc_value (c_cons (c_pair ?x ?y) ?z) ?x = ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 2),
       template_var 1)),
    ("PRecList.c_len_3", "0 < ?u ==> 0 < c_len ?u",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("PRecList.c_tl_less", "0 < ?u ==> c_tl ?u < ?u",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_var 0))),
    ("PRecList.c_f_list_is_pr", "?f : PrimRec2 ==> c_f_list ?f : PrimRec2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("PRecList.c_len_4", "c_len ?u = 0 ==> ?u = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("PRecList.c_len_5", "0 < c_len ?u ==> 0 < ?u",
     template_implication
      ([template_inequation
         (less_than, template_hole 1,
          template_app (template_hole 0, template_var 0))],
       template_inequation (less_than, template_hole 1, template_var 0))),
    ("PRecList.c_f_list_f_is_pr",
     "c_f_list ?f : PrimRec2 ==> ?f : PrimRec2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0)
           ))),
    ("PRecList.c_f_list_at_0", "c_f_list ?f 0 ?x = c_cons (?f 0 ?x) 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 1, template_hole 1),
             template_var 0)),
         template_hole 1))),
    ("PRecList.c_f_list_lm_1",
     "c_nth (c_cons ?x ?y) (Suc ?z) = c_nth ?y ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("PRecList.c_fold_1", "c_unfold 1 (c_fold [?x]) = [?x]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PRecList.c_tl_aux1", "c_len ?u = 1 ==> c_tl ?u = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PRecList.c_drop_df",
     "ALL ls. drop ?n ls = nat_to_list (c_drop ?n (list_to_nat ls))",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("PRecList.c_len_1",
     "c_len ?u = (case ?u of 0 => 0 | Suc v => c_fst v + 1)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_var 0))),
    ("PRecList.c_unfold_6", "0 < ?k ==> c_unfold ?k ?u ~= []",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("PRecList.c_unfold_3", "c_unfold (Suc 1) ?u = [c_fst ?u, c_snd ?u]",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("PRecList.c_unfold_2",
     "c_unfold (Suc 1) ?u = c_fst ?u # c_unfold 1 (c_snd ?u)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 5, template_hole 3),
           template_app (template_hole 0, template_var 0))))),
    ("PRecList.c_unfold_4_1", "0 < ?k ==> c_unfold (Suc ?k) ?u ~= []",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             template_hole 0)
           ))),
    ("PRecList.c_unfold_5", "c_unfold 2 ?u = [c_fst ?u, c_snd ?u]",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("PRecList.th_lm_1", "?k = 1 ==> ALL u. c_fold (c_unfold ?k u) = u",
     template_implication
      ([template_equation (template_var 0, template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("PRecList.th_2", "0 < ?k ==> ALL u. c_fold (c_unfold ?k u) = u",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("PRecList.c_hd_aux1", "c_len ?u = 1 ==> c_hd ?u = c_snd (?u - 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 3))))),
    ("PRecList.c_hd_aux2",
     "1 < c_len ?u ==> c_hd ?u = c_fst (c_snd (?u - 1))",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 6)))))),
    ("PRecList.c_f_list_at_Suc",
     "c_f_list ?f (Suc ?y) ?x =
      c_cons (?f (Suc ?y) ?x) (c_f_list ?f ?y ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("PRecList.nat_to_list_of_pos",
     "0 < ?u ==> nat_to_list ?u = c_unfold (c_len ?u) (c_snd (?u - 1))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("PRecList.c_len_2", "?u ~= 0 ==> c_len ?u = c_fst (?u - 1) + 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_hole 0)))),
    ("PRecList.c_fold_0",
     "?ls ~= [] ==> c_fold (?x # ?ls) = c_pair ?x (c_fold ?ls)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("PRecList.c_hd_aux0",
     "c_len ?u = 1 ==> nat_to_list ?u = [c_snd (?u - 1)]",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 6))),
           template_hole 0)))),
    ("PRecList.c_fold_3", "c_unfold 2 (c_fold [?x, ?y]) = [?x, ?y]",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("PRecList.c_f_list_nth",
     "?z <= ?y --> c_nth (c_f_list ?f ?y ?x) (?y - ?z) = ?f ?z ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3))),
             template_app
              (template_app (template_var 1, template_var 3),
               template_var 0)))
         )),
    ("PRecList.c_unfold_4",
     "0 < ?k ==> c_unfold (Suc ?k) ?u = c_fst ?u # c_unfold ?k (c_snd ?u)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("PRecList.c_assoc_lm_3",
     "?x1.0 ~= ?x ==>
      c_assoc_have_key (c_cons (c_pair ?x ?y) ?z) ?x1.0 =
      c_assoc_have_key ?z ?x1.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 3)))),
    ("PRecList.c_assoc_lm_4",
     "?x1.0 ~= ?x ==>
      c_assoc_value (c_cons (c_pair ?x ?y) ?z) ?x1.0 =
      c_assoc_value ?z ?x1.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 3)))),
    ("PRecList.c_assoc_have_key_df",
     "c_assoc_have_key ?y ?x =
      (if ?y = 0 then 1
       else if c_fst (c_hd ?y) = ?x then 0
            else c_assoc_have_key (c_tl ?y) ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1))),
                     template_var 0)),
                 template_hole 4),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))
           ))),
    ("PRecList.c_cons_aux2",
     "0 < ?u ==>
      c_cons ?x ?u = c_pair (c_len ?u) (c_pair ?x (c_snd (?u - 1))) + 1",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))))),
           template_hole 0)))),
    ("PRecList.c_assoc_have_key_lm_1",
     "?y ~= 0 ==>
      c_assoc_have_key ?y ?x =
      (if c_fst (c_hd ?y) = ?x then 0 else c_assoc_have_key (c_tl ?y) ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1))),
                     template_var 0)),
                 template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))
             )))),
    ("PRecList.th_lm_3",
     "ALL u. c_fold (c_unfold (Suc ?k) u) = u ==>
      ALL u. c_fold (c_unfold (Suc (Suc ?k)) u) = u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("PRecList.c_hd_aux4",
     "c_hd ?u =
      (if ?u = 0 then 0
       else if c_len ?u = 1 then c_snd (?u - 1)
            else c_fst (c_snd (?u - 1)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 5)),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 3)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 3))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 3)))))
           ))),
    ("PRecList.c_assoc_value_df",
     "c_assoc_value ?y ?x =
      (if ?y = 0 then 0
       else if c_fst (c_hd ?y) = ?x then c_snd (c_hd ?y)
            else c_assoc_value (c_tl ?y) ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 4)),
               template_hole 4),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1))),
                     template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))
           ))),
    ("PRecList.c_hd_aux3",
     "0 < ?u ==>
      c_hd ?u =
      (if c_len ?u = 1 then c_snd (?u - 1) else c_fst (c_snd (?u - 1)))",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 0)],
       template_implication
        ([template_predicate
           (template_app (template_hole 6, template_var 0))],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 3)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 3))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 3))))
             )))),
    ("PRecList.th_3_lm_2",
     "c_unfold (length ?ls) (c_fold ?ls) = ?ls ==>
      c_unfold (length (?x # ?ls)) (c_fold (?x # ?ls)) = ?x # ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 1, template_var 1)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("PRecList.c_tl_aux3",
     "c_tl ?u =
      sgn1 (c_len ?u - 1) *
      (c_pair (c_len ?u - 2) (c_snd (c_snd (?u - 1))) + 1)",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               template_hole 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 6))))),
           template_hole 6)))),
    ("PRecList.c_assoc_value_lm_1",
     "?y ~= 0 ==>
      c_assoc_value ?y ?x =
      (if c_fst (c_hd ?y) = ?x then c_snd (c_hd ?y)
       else c_assoc_value (c_tl ?y) ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1))),
                     template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))
             )))),
    ("PRecList.c_tl_aux2",
     "1 < c_len ?u ==>
      c_tl ?u = c_pair (c_len ?u - 2) (c_snd (c_snd (?u - 1))) + 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 9, template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 10))))),
           template_hole 10)))),
    ("PRecList.th_lm_2",
     "[| 0 < ?k; ALL u. c_fold (c_unfold ?k u) = u |]
      ==> ALL u. c_fold (c_unfold (Suc ?k) u) = u",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("PRecList.c_f_list_lm_2",
     "?z < Suc ?n ==>
      c_nth (c_f_list ?f (Suc ?n) ?x) (Suc ?n - ?z) =
      c_nth (c_f_list ?f ?n ?x) (?n - ?z)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 4, template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 2)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3))))),
    ("PRecList.th_3_lm_1",
     "[| c_unfold (length ?ls) (c_fold ?ls) = ?ls; ?ls = ?a # ?ls1.0 |]
      ==> c_unfold (length (?x # ?ls)) (c_fold (?x # ?ls)) = ?x # ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 3)),
            template_app (template_hole 1, template_var 3)),
          template_var 3),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("PRecList.th_3_lm_0",
     "[| c_unfold (length ?ls) (c_fold ?ls) = ?ls; ?ls = ?a # ?ls1.0;
         ?ls1.0 = ?aa # ?list |]
      ==> c_unfold (length (?x # ?ls)) (c_fold (?x # ?ls)) = ?x # ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 5)),
            template_app (template_hole 1, template_var 5)),
          template_var 5),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 0, template_var 4),
            template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 5))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 5))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 5)))),
    ("PRecList.th_pr_rec",
     "[| ?g : PrimRec1; ?h : PrimRec3; ALL x. ?f 0 x = ?g x;
         ALL x y. ?f (Suc y) x = ?h y (?f y x) x |]
      ==> ?f : PrimRec2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("PRecList.th_rec",
     "[| ?g : PrimRec1; ?\<alpha> : PrimRec2; ?h : PrimRec3;
         ALL x y. ?\<alpha> y x <= y; ALL x. ?f 0 x = ?g x;
         ALL x y. ?f (Suc y) x = ?h y (?f (?\<alpha> y x) x) x |]
      ==> ?f : PrimRec2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7)
           )))]:
   (string * thm * template) list
### theory "Draft.PRecListMoreTemplates"
### 0.470s elapsed time, 1.075s cpu time, 0.690s GC time
val it = (): unit
