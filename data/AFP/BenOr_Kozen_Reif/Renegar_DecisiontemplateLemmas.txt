   [("Renegar_Decision.poly_f_nonzero", "poly_f ?qs ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Renegar_Decision.prod_list_var_nonzero", "prod_list_var ?qs ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Renegar_Decision.main_step_R",
     "set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Renegar_Decision.decision_procedure_R",
     "EX x. real_sem ?fml x = decide_existential_R ?fml",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Renegar_Decision.decision_procedure_R",
     "(ALL x. real_sem ?fml x) = decide_universal_R ?fml",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Renegar_Decision.check_all_const_deg_prop",
     "(check_all_const_deg ?l = True) = (ALL p:set ?l. degree p = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("Renegar_Decision.main_step_aux2_R",
     "check_all_const_deg ?qs = False ==>
      set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Renegar_Decision.main_step_aux1_R",
     "check_all_const_deg ?qs = True ==>
      set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Renegar_Decision.convert_semantics_R",
     "real_sem ?fml ?x =
      lookup_sem (fst (convert ?fml))
       (map (%p. poly p ?x) (snd (convert ?fml)))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)))))),
    ("Renegar_Decision.q_dvd_prod_list_var_prop",
     "[| ?q : set ?qs; ?q ~= 0 |] ==> ?q dvd prod_list_var ?qs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Renegar_Decision.decide_univ_lem_helper_R",
     "(?fml_struct, ?polys) = convert ?fml ==>
      (ALL x. lookup_sem ?fml_struct (map (%p. poly p x) ?polys)) =
      decide_universal_R ?fml",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Renegar_Decision.decide_exis_lem_helper_R",
     "(?fml_struct, ?polys) = convert ?fml ==>
      (EX x. lookup_sem ?fml_struct (map (%p. poly p x) ?polys)) =
      decide_existential_R ?fml",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Renegar_Decision.consistent_sign_vec_semantics_R",
     "(!!i. i : set_fml ?fml ==> i < length ?ls) ==>
      lookup_sem ?fml (map (%p. poly p ?x) ?ls) =
      lookup_sem ?fml (consistent_sign_vec ?ls ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Renegar_Decision.convert_semantics_lem_R",
     "(!!p. p : set (poly_list ?fml) ==>
            ?ls ! index_of ?ps p = poly p ?x) ==>
      real_sem ?fml ?x = lookup_sem (map_fml (index_of ?ps) ?fml) ?ls",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 1)),
               template_var 3)),
           template_var 2)))),
    ("Renegar_Decision.universal_lookup_sem_R",
     "[| !!i. i : set_fml ?fml ==> i < length ?qs;
         set ?signs = consistent_sign_vectors_R ?qs UNIV |]
      ==> (ALL x. lookup_sem ?fml (map (%p. poly p x) ?qs)) =
          list_all (lookup_sem ?fml) ?signs",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_app (template_hole 9, template_var 0),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_hole 7))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Renegar_Decision.existential_lookup_sem_R",
     "[| !!i. i : set_fml ?fml ==> i < length ?qs;
         set ?signs = consistent_sign_vectors_R ?qs UNIV |]
      ==> (EX x. lookup_sem ?fml (map (%p. poly p x) ?qs)) =
          (find (lookup_sem ?fml) ?signs ~= None)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_hole 10))],
       template_implication
        ([template_predicate (template_app (template_hole 8, t_empty))],
         template_negation
          (
             template_equation
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0),
               template_hole 0)
             )))),
    ("Renegar_Decision.all_sample_points_prop",
     "[| check_all_const_deg ?qs = False;
         ?S =
         characterize_root_list_p
          (pderiv (prod_list_var ?qs) * prod_list_var ?qs *
           [:real_of_int (- crb (prod_list_var ?qs)), 1:] *
           [:real_of_int (crb (prod_list_var ?qs)), 1:]) |]
      ==> consistent_sign_vectors_R ?qs UNIV =
          consistent_sign_vectors_R ?qs (set ?S)",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 1),
          template_hole 15),
        template_equation
         (template_var 0,
          template_app
           (template_hole 13,
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app (template_hole 10, template_var 1))),
                      template_app (template_hole 10, template_var 1))),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6,
                            template_app
                             (template_hole 10, template_var 1))))),
                    template_app
                     (template_app (template_hole 9, template_hole 5),
                      template_hole 4)))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 10, template_var 1)))),
                template_app
                 (template_app (template_hole 9, template_hole 5),
                  template_hole 4)))))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Renegar_Decision.sorted_list_lemma_var",
     "[| 1 < length ?l; sorted_wrt (<) ?l; ~ List.member ?l ?x; ?l ! 0 < ?x;
         ?x < ?l ! (length ?l - 1) |]
      ==> EX n<length ?l - 1. ?l ! n < ?x & ?x < ?l ! (n + 1)",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 10, template_var 1)),
              template_hole 11)))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Renegar_Decision.poly_f_roots_prop_1",
     "check_all_const_deg ?qs = False ==>
      ALL x1 x2.
         x1 < x2 &
         (EX q1:set ?qs. q1 ~= 0 & poly q1 x1 = 0) &
         (EX q2:set ?qs. q2 ~= 0 & poly q2 x2 = 0) -->
         (EX q>x1. q < x2 & poly (poly_f ?qs) q = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_hole 14)],
       template_predicate (template_app (template_hole 13, t_empty))))]
