Loading theory "Draft.More_Matrix" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision" via "Draft.Renegar_Proofs" via "Draft.Renegar_Algorithm" via "Draft.BKR_Algorithm")
Loading theory "Draft.Templates" (required by "Draft.Renegar_DecisionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.186s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Renegar_DecisionTemplates")
instantiation
  mat :: (conjugate) conjugate
  conjugate_mat == conjugate :: 'a mat => 'a mat
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.105s cpu time, 0.120s GC time
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale conjugatable_vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale conjugatable_vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.More_Matrix"
### 1.986s elapsed time, 2.923s cpu time, 0.645s GC time
Loading theory "Draft.BKR_Algorithm" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision" via "Draft.Renegar_Proofs" via "Draft.Renegar_Algorithm")
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?A * ?B' = 1\<^sub>m ?n
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?B' * ?A = 1\<^sub>m ?n
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?B' : carrier_mat ?n ?n
consts
  matr_option :: "nat => 'a mat option => 'a mat"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.BKR_Algorithm"
### 1.007s elapsed time, 1.053s cpu time, 0.099s GC time
Loading theory "Draft.Matrix_Equation_Construction" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision" via "Draft.Renegar_Proofs" via "Draft.BKR_Proofs")
Loading theory "Draft.Renegar_Algorithm" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision" via "Draft.Renegar_Proofs")
Found termination order: "{}"
?p ~= 0 ==> finite {x. poly ?p x = (0::?'a)}
construct_lhs_vector ?p ?qs ?signs ==
vec_of_list
 (map (%w. rat_of_int
            (int (length
                   (filter (%v. v = w)
                     (map (consistent_sign_vec_copr ?qs)
                       (characterize_root_list_p ?p))))))
   ?signs)
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Matrix_Equation_Construction"
### 0.340s elapsed time, 0.681s cpu time, 0.059s GC time
Loading theory "Draft.BKR_Proofs" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision" via "Draft.Renegar_Proofs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Renegar_Algorithm"
### 0.734s elapsed time, 1.492s cpu time, 0.227s GC time
### theory "Draft.BKR_Proofs"
### 0.718s elapsed time, 1.470s cpu time, 0.706s GC time
Loading theory "Draft.Renegar_Proofs" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision")
Loading theory "Draft.BKR_Decision" (required by "Draft.Renegar_DecisionTemplates" via "Draft.Renegar_Decision")
[| ?A : carrier_mat ?n ?nc; ?n <= ?nc |]
==> vec_space.rank ?n
     (take_cols ?A (map snd (pivot_positions (gauss_jordan_single ?A)))) =
    vec_space.rank ?n ?A
[| ?A : carrier_mat ?n ?nc; vec_space.rank ?n ?A = ?nc;
   distinct (cols ?A) |]
==> ~ module.lin_dep class_ring (module_vec TYPE(?'a) ?n) (set (cols ?A))
### theory "Draft.Renegar_Proofs"
### 0.999s elapsed time, 2.052s cpu time, 0.308s GC time
consts
  lookup_sem :: "nat fml => 'a list => bool"
consts
  poly_list :: "'a fml => 'a list"
consts
  index_of_aux :: "'a list => 'a => nat => nat"
consts
  real_sem :: "real poly fml => real => bool"
consts
  fml_sem :: "rat poly fml => real => bool"
### theory "Draft.BKR_Decision"
### 3.354s elapsed time, 4.668s cpu time, 0.733s GC time
Loading theory "Draft.Renegar_Decision" (required by "Draft.Renegar_DecisionTemplates")
consts
  prod_list_var :: "real poly list => real poly"
consts
  check_all_const_deg :: "real poly list => bool"
### theory "Draft.Renegar_Decision"
### 2.320s elapsed time, 3.091s cpu time, 1.119s GC time
Loading theory "Draft.Renegar_DecisionTemplates"
val templateLemmas =
   [("Renegar_Decision.poly_f_nonzero", "poly_f ?qs ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Renegar_Decision.prod_list_var_nonzero", "prod_list_var ?qs ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Renegar_Decision.main_step_R",
     "set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Renegar_Decision.decision_procedure_R",
     "EX x. real_sem ?fml x = decide_existential_R ?fml",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Renegar_Decision.decision_procedure_R",
     "(ALL x. real_sem ?fml x) = decide_universal_R ?fml",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Renegar_Decision.check_all_const_deg_prop",
     "(check_all_const_deg ?l = True) = (ALL p:set ?l. degree p = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("Renegar_Decision.main_step_aux2_R",
     "check_all_const_deg ?qs = False ==>
      set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Renegar_Decision.main_step_aux1_R",
     "check_all_const_deg ?qs = True ==>
      set (find_consistent_signs_R ?qs) =
      consistent_sign_vectors_R ?qs UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Renegar_Decision.convert_semantics_R",
     "real_sem ?fml ?x =
      lookup_sem (fst (convert ?fml))
       (map (%p. poly p ?x) (snd (convert ?fml)))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)))))),
    ("Renegar_Decision.q_dvd_prod_list_var_prop",
     "[| ?q : set ?qs; ?q ~= 0 |] ==> ?q dvd prod_list_var ?qs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Renegar_Decision.decide_univ_lem_helper_R",
     "(?fml_struct, ?polys) = convert ?fml ==>
      (ALL x. lookup_sem ?fml_struct (map (%p. poly p x) ?polys)) =
      decide_universal_R ?fml",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Renegar_Decision.decide_exis_lem_helper_R",
     "(?fml_struct, ?polys) = convert ?fml ==>
      (EX x. lookup_sem ?fml_struct (map (%p. poly p x) ?polys)) =
      decide_existential_R ?fml",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Renegar_Decision.consistent_sign_vec_semantics_R",
     "(!!i. i : set_fml ?fml ==> i < length ?ls) ==>
      lookup_sem ?fml (map (%p. poly p ?x) ?ls) =
      lookup_sem ?fml (consistent_sign_vec ?ls ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Renegar_Decision.convert_semantics_lem_R",
     "(!!p. p : set (poly_list ?fml) ==>
            ?ls ! index_of ?ps p = poly p ?x) ==>
      real_sem ?fml ?x = lookup_sem (map_fml (index_of ?ps) ?fml) ?ls",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 1)),
               template_var 3)),
           template_var 2)))),
    ("Renegar_Decision.universal_lookup_sem_R",
     "[| !!i. i : set_fml ?fml ==> i < length ?qs;
         set ?signs = consistent_sign_vectors_R ?qs UNIV |]
      ==> (ALL x. lookup_sem ?fml (map (%p. poly p x) ?qs)) =
          list_all (lookup_sem ?fml) ?signs",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_app (template_hole 9, template_var 0),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_hole 7))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Renegar_Decision.existential_lookup_sem_R",
     "[| !!i. i : set_fml ?fml ==> i < length ?qs;
         set ?signs = consistent_sign_vectors_R ?qs UNIV |]
      ==> (EX x. lookup_sem ?fml (map (%p. poly p x) ?qs)) =
          (find (lookup_sem ?fml) ?signs ~= None)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_hole 10))],
       template_implication
        ([template_predicate (template_app (template_hole 8, t_empty))],
         template_negation
          (
             template_equation
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0),
               template_hole 0)
             )))),
    ("Renegar_Decision.all_sample_points_prop",
     "[| check_all_const_deg ?qs = False;
         ?S =
         characterize_root_list_p
          (pderiv (prod_list_var ?qs) * prod_list_var ?qs *
           [:real_of_int (- crb (prod_list_var ?qs)), 1:] *
           [:real_of_int (crb (prod_list_var ?qs)), 1:]) |]
      ==> consistent_sign_vectors_R ?qs UNIV =
          consistent_sign_vectors_R ?qs (set ?S)",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 1),
          template_hole 15),
        template_equation
         (template_var 0,
          template_app
           (template_hole 13,
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app (template_hole 10, template_var 1))),
                      template_app (template_hole 10, template_var 1))),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6,
                            template_app
                             (template_hole 10, template_var 1))))),
                    template_app
                     (template_app (template_hole 9, template_hole 5),
                      template_hole 4)))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 10, template_var 1)))),
                template_app
                 (template_app (template_hole 9, template_hole 5),
                  template_hole 4)))))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Renegar_Decision.sorted_list_lemma_var",
     "[| 1 < length ?l; sorted_wrt (<) ?l; ~ List.member ?l ?x; ?l ! 0 < ?x;
         ?x < ?l ! (length ?l - 1) |]
      ==> EX n<length ?l - 1. ?l ! n < ?x & ?x < ?l ! (n + 1)",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 10, template_var 1)),
              template_hole 11)))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Renegar_Decision.poly_f_roots_prop_1",
     "check_all_const_deg ?qs = False ==>
      ALL x1 x2.
         x1 < x2 &
         (EX q1:set ?qs. q1 ~= 0 & poly q1 x1 = 0) &
         (EX q2:set ?qs. q2 ~= 0 & poly q2 x2 = 0) -->
         (EX q>x1. q < x2 & poly (poly_f ?qs) q = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 0),
          template_hole 14)],
       template_predicate (template_app (template_hole 13, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Renegar_DecisionTemplates"
### 2.547s elapsed time, 3.035s cpu time, 0.448s GC time
val it = (): unit
