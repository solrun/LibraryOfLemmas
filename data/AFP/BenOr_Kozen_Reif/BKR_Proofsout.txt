Loading theory "Draft.More_Matrix" (required by "Draft.BKR_ProofsTemplates" via "Draft.BKR_Proofs" via "Draft.Matrix_Equation_Construction" via "Draft.BKR_Algorithm")
Loading theory "Draft.Templates" (required by "Draft.BKR_ProofsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.183s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BKR_ProofsTemplates")
instantiation
  mat :: (conjugate) conjugate
  conjugate_mat == conjugate :: 'a mat => 'a mat
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.567s elapsed time, 1.143s cpu time, 0.146s GC time
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale conjugatable_vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale conjugatable_vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.More_Matrix"
### 2.020s elapsed time, 2.963s cpu time, 0.690s GC time
Loading theory "Draft.BKR_Algorithm" (required by "Draft.BKR_ProofsTemplates" via "Draft.BKR_Proofs" via "Draft.Matrix_Equation_Construction")
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?A * ?B' = 1\<^sub>m ?n
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?B' * ?A = 1\<^sub>m ?n
[| ?A : carrier_mat ?n ?n;
   gauss_jordan ?A (1\<^sub>m ?n) = (1\<^sub>m ?n, ?B') |]
==> ?B' : carrier_mat ?n ?n
consts
  matr_option :: "nat => 'a mat option => 'a mat"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.BKR_Algorithm"
### 0.992s elapsed time, 1.038s cpu time, 0.098s GC time
Loading theory "Draft.Matrix_Equation_Construction" (required by "Draft.BKR_ProofsTemplates" via "Draft.BKR_Proofs")
?p ~= 0 ==> finite {x. poly ?p x = (0::?'a)}
construct_lhs_vector ?p ?qs ?signs ==
vec_of_list
 (map (%w. rat_of_int
            (int (length
                   (filter (%v. v = w)
                     (map (consistent_sign_vec_copr ?qs)
                       (characterize_root_list_p ?p))))))
   ?signs)
### theory "Draft.Matrix_Equation_Construction"
### 0.321s elapsed time, 0.363s cpu time, 0.073s GC time
Loading theory "Draft.BKR_Proofs" (required by "Draft.BKR_ProofsTemplates")
### theory "Draft.BKR_Proofs"
### 0.481s elapsed time, 0.553s cpu time, 0.115s GC time
Loading theory "Draft.BKR_ProofsTemplates"
val templateLemmas =
   [("BKR_Proofs.mat_inverse_same", "mat_inverse_var ?A = mat_inverse ?A",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("BKR_Proofs.dim_col_mat_of_rows_list",
     "dim_col (mat_of_rows_list ?nr ?ls) = ?nr",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("BKR_Proofs.rows_and_cols_transpose", "rows ?M = cols ?M\<^sup>T",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("BKR_Proofs.dim_col_matrix_A",
     "dim_col (M_mat ?signs ?subsets) = length ?signs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("BKR_Proofs.dim_row_mat_of_rows_list",
     "dim_row (mat_of_rows_list ?nr ?ls) = length ?ls",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BKR_Proofs.dim_row_matrix_A",
     "dim_row (M_mat ?signs ?subsets) = length ?subsets",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BKR_Proofs.rechar_take_cols",
     "take_cols_var ?A ?B = take_cols_from_matrix ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BKR_Proofs.size_of_rhs",
     "dim_vec (v_vec ?p ?qs ?subsets) = length ?subsets",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BKR_Proofs.size_of_lhs",
     "dim_vec (w_vec ?p ?qs ?signs) = length ?signs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BKR_Proofs.take_rows_and_take_cols",
     "take_rows_from_matrix ?M ?r =
      (take_cols_from_matrix ?M\<^sup>T ?r)\<^sup>T",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("BKR_Proofs.size_of_mat",
     "M_mat ?signs ?subsets
      : carrier_mat (length ?subsets) (length ?signs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1)))
         )),
    ("BKR_Proofs.distinct_map_append",
     "distinct ?ls ==> distinct (map ((@) ?xs) ?ls)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("BKR_Proofs.length_signs_smash",
     "length (signs_smash ?signs1.0 ?signs2.0) =
      length ?signs1.0 * length ?signs2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("BKR_Proofs.length_subsets_smash",
     "length (subsets_smash ?n ?subs1.0 ?subs2.0) =
      length ?subs1.0 * length ?subs2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("BKR_Proofs.same_size",
     "invertible_mat (M_mat ?signs ?subsets) ==>
      length ?subsets = length ?signs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("BKR_Proofs.rows_to_keep_lem",
     "?ell : set (rows_to_keep ?A) ==> ?ell < dim_row ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("BKR_Proofs.less_two", "(?j < Suc (Suc 0)) = (?j = 0 | ?j = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("BKR_Proofs.list_constr_append",
     "list_constr ?a ?n & list_constr ?b ?n --> list_constr (?a @ ?b) ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))
         )),
    ("BKR_Proofs.append_not_distinct_helper",
     "List.member ?l1.0 ?m & List.member ?l2.0 ?m -->
      distinct (?l1.0 @ ?l2.0) = False",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_hole 0))
         )),
    ("BKR_Proofs.invertible_means_mult_id",
     "invertible_mat ?A ==>
      matr_option (dim_row ?A) (mat_inverse ?A) * ?A =
      1\<^sub>m (dim_row ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 1, template_var 0))),
           template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("BKR_Proofs.find_consistent_signs_at_roots_0",
     "?p ~= 0 ==>
      set (find_consistent_signs_at_roots ?p []) =
      set (characterize_consistent_signs_at_roots_copr ?p [])",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1))))),
    ("BKR_Proofs.reduction_subsets_is_get_subsets",
     "reduction_subsets ?p ?qs ?signs ?subsets ?m =
      get_subsets (reduce_system ?p (?qs, ?m, ?subsets, ?signs))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))))))),
    ("BKR_Proofs.reduction_signs_is_get_signs",
     "reduction_signs ?p ?qs ?signs ?subsets ?m =
      get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))))))),
    ("BKR_Proofs.find_zeros_from_vec_prop",
     "ALL n<dim_vec ?input_vec.
         (?input_vec $ n ~= 0) =
         List.member (find_nonzeros_from_input_vec ?input_vec) n",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("BKR_Proofs.getter_functions",
     "calculate_data ?p ?qs =
      (get_matrix (calculate_data ?p ?qs),
       get_subsets (calculate_data ?p ?qs),
       get_signs (calculate_data ?p ?qs))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))))),
    ("BKR_Proofs.dim_invertible",
     "[| invertible_mat ?A; ?A : carrier_mat ?n ?n |]
      ==> matr_option (dim_row ?A) (mat_inverse ?A) : carrier_mat ?n ?n",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 0))
           ))),
    ("BKR_Proofs.signs_smash_property",
     "ALL elem.
         elem : set (signs_smash ?signs1.0 ?signs2.0) -->
         (EX n m. elem = ?signs1.0 ! n @ ?signs2.0 ! m)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("BKR_Proofs.length_eq_append",
     "length ?y = length ?b ==> (?x @ ?y = ?a @ ?b) = (?x = ?a & ?y = ?b)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2))
             )))),
    ("BKR_Proofs.mat_equal_list_lem",
     "dim_row ?A = dim_row ?B &
      dim_col ?A = dim_col ?B & mat_to_list ?A = mat_to_list ?B ==>
      ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_app (template_hole 4, template_var 0))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 3, template_var 1)),
                    template_app (template_hole 3, template_var 0))),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_app (template_hole 1, template_var 0))))
            )],
       template_equation (template_var 1, template_var 0))),
    ("BKR_Proofs.distinct_step",
     "[| well_def_signs ?n1.0 ?signs1.0; well_def_signs ?n2.0 ?signs2.0;
         distinct ?signs1.0; distinct ?signs2.0 |]
      ==> distinct (signs_smash ?signs1.0 ?signs2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("BKR_Proofs.subset_smash_signs",
     "[| set ?a1.0 <= set ?a2.0; set ?b1.0 <= set ?b2.0 |]
      ==> set (signs_smash ?a1.0 ?b1.0) <= set (signs_smash ?a2.0 ?b2.0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("BKR_Proofs.subset_helper",
     "ALL x:set (characterize_consistent_signs_at_roots_copr ?p
                  (?qs1.0 @ ?qs2.0)).
         EX x1:set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0).
            EX x2:set (characterize_consistent_signs_at_roots_copr ?p
                        ?qs2.0).
               x = x1 @ x2",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))),
           t_empty)
         )),
    ("BKR_Proofs.construct_lhs_matches_solve_for_lhs",
     "[| satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> w_vec ?p ?qs ?signs =
          solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("BKR_Proofs.reduction_signs_are_distinct",
     "[| satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets); distinct ?signs |]
      ==> distinct
           (reduction_signs ?p ?qs ?signs ?subsets
             (M_mat ?signs ?subsets))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 0),
                 template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)))
           ))),
    ("BKR_Proofs.combining_to_smash",
     "combine_systems ?p (?qs1.0, ?m1.0, ?sub1.0, ?sgn1.0)
       (?qs2.0, ?m2.0, ?sub2.0, ?sgn2.0) =
      smash_systems ?p ?qs1.0 ?qs2.0 ?sub1.0 ?sub2.0 ?sgn1.0 ?sgn2.0 ?m1.0
       ?m2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 8),
           template_app
            (template_app (template_hole 3, template_var 7),
             template_app
              (template_app (template_hole 2, template_var 6),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)))),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 7),
                     template_var 3),
                   template_var 5),
                 template_var 1),
               template_var 4),
             template_var 0),
           template_var 6),
         template_var 2))),
    ("BKR_Proofs.signs_smash_property_set",
     "ALL elem.
         elem : set (signs_smash ?signs1.0 ?signs2.0) -->
         (EX elem1 elem2.
             elem1 : set ?signs1.0 &
             elem2 : set ?signs2.0 & elem = elem1 @ elem2)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("BKR_Proofs.base_case_sgas",
     "[| ?p ~= 0; coprime ?p ?q |]
      ==> set (characterize_consistent_signs_at_roots_copr ?p [?q])
          <= {[1], [- 1]}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_hole 3)),
                 template_hole 2)),
             template_hole 0))))),
    ("BKR_Proofs.find_consistent_signs_at_roots",
     "[| ?p ~= 0; !!q. q : set ?qs ==> coprime ?p q |]
      ==> set (find_consistent_signs_at_roots ?p ?qs) =
          set (characterize_consistent_signs_at_roots ?p ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("BKR_Proofs.find_consistent_signs_at_roots_copr",
     "[| ?p ~= 0; !!q. q : set ?qs ==> coprime ?p q |]
      ==> set (find_consistent_signs_at_roots ?p ?qs) =
          set (characterize_consistent_signs_at_roots_copr ?p ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("BKR_Proofs.find_consistent_signs_at_roots_1",
     "?p ~= 0 &
      0 < length ?qs & (ALL q. List.member ?qs q --> coprime ?p q) -->
      set (find_consistent_signs_at_roots ?p ?qs) =
      set (characterize_consistent_signs_at_roots_copr ?p ?qs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_hole 10))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 0))),
                 template_app (template_hole 6, t_empty)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("BKR_Proofs.subset_step",
     "[| set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0)
         <= set ?signs1.0;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs2.0)
         <= set ?signs2.0 |]
      ==> set (characterize_consistent_signs_at_roots_copr ?p
                (?qs1.0 @ ?qs2.0))
          <= set (signs_smash ?signs1.0 ?signs2.0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)),
          template_app (template_hole 3, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("BKR_Proofs.reduce_system_matrix_signs_helper_aux",
     "[| ALL x. List.member ?S x --> x < length ?signs; ?p ~= 0 |]
      ==> alt_matrix_A (take_indices ?signs ?S) ?subsets =
          take_cols_from_matrix (alt_matrix_A ?signs ?subsets) ?S",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 3)))),
    ("BKR_Proofs.reduce_system_matrix_signs_helper",
     "[| ALL x. List.member ?S x --> x < length ?signs; ?p ~= 0 |]
      ==> M_mat (take_indices ?signs ?S) ?subsets =
          take_cols_from_matrix (M_mat ?signs ?subsets) ?S",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 3)))),
    ("BKR_Proofs.subsets_smash_property",
     "ALL elem.
         List.member (subsets_smash ?n ?subsets1.0 ?subsets2.0) elem -->
         (EX elem1 elem2.
             elem1 : set ?subsets1.0 &
             elem2 : set ?subsets2.0 & elem = elem1 @ map ((+) ?n) elem2)",
     template_predicate (template_app (template_hole 11, t_empty))),
    ("BKR_Proofs.mult_assoc",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; dim_vec ?v = ?n |]
      ==> ?A *\<^sub>v (?B *\<^sub>v ?v) = ?A * ?B *\<^sub>v ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("BKR_Proofs.find_consistent_signs_at_roots_len1",
     "[| ?p ~= 0; length ?qs = 1;
         ALL q. List.member ?qs q --> coprime ?p q |]
      ==> set (find_consistent_signs_at_roots ?p ?qs) =
          set (characterize_consistent_signs_at_roots_copr ?p ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_equation
         (template_app (template_hole 9, template_var 0), template_hole 8),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("BKR_Proofs.z_append",
     "(!!i. i : set ?xs ==> i < length ?as) ==>
      z (?xs @ map ((+) (length ?as)) ?ys) (?as @ ?bs) =
      z ?xs ?as * z ?ys ?bs",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 2))),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("BKR_Proofs.base_case_satisfy_equation",
     "[| ?p ~= 0; coprime ?p ?q |]
      ==> satisfy_equation ?p [?q] [[], [0]] [[1], [- 1]]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 13, template_var 1),
                 template_app
                  (template_app (template_hole 12, template_var 0),
                   template_hole 11)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_hole 9)),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 1, template_hole 3)),
                     template_hole 2)),
                 template_hole 0)))
           ))),
    ("BKR_Proofs.calculate_data_satisfies_properties",
     "?p ~= 0 &
      0 < length ?qs & (ALL q. List.member ?qs q --> coprime ?p q) -->
      satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))
       (get_signs (calculate_data ?p ?qs))
       (get_matrix (calculate_data ?p ?qs))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 1),
                     template_hole 11))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 0))),
                 template_app (template_hole 7, t_empty)))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))))
         )),
    ("BKR_Proofs.take_indices_lem",
     "[| ?n < length (take_indices ?arb_list ?index_list);
         ALL q. List.member ?index_list q --> q < length ?arb_list |]
      ==> EX k<length ?arb_list.
             take_indices ?arb_list ?index_list ! ?n = ?arb_list ! k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("BKR_Proofs.length_eq_concat",
     "[| !!x. x : set ?ls ==> length x = ?n; ?i < ?n * length ?ls |]
      ==> concat ?ls ! ?i = ?ls ! (?i div ?n) ! (?i mod ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app (template_hole 6, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("BKR_Proofs.reduce_system_matrix_subsets_helper",
     "[| ?p ~= 0; length ?signs <= length ?subsets;
         ALL x. List.member ?S x --> x < length ?subsets |]
      ==> M_mat ?signs (take_indices ?subsets ?S) =
          take_rows_from_matrix (M_mat ?signs ?subsets) ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("BKR_Proofs.reduce_system_matrix_subsets_helper_aux",
     "[| length ?signs <= length ?subsets;
         ALL x. List.member ?S x --> x < length ?subsets; ?p ~= 0 |]
      ==> alt_matrix_A ?signs (take_indices ?subsets ?S) =
          take_rows_from_matrix (alt_matrix_A ?signs ?subsets) ?S",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1)))),
    ("BKR_Proofs.reduction_doesnt_break_subsets",
     "[| ?p ~= 0; all_list_constr ?subsets (length ?qs);
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> all_list_constr
           (reduction_subsets ?p ?qs ?signs ?subsets
             (M_mat ?signs ?subsets))
           (length ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1),
                     template_var 0),
                   template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app (template_hole 4, template_var 1))
           ))),
    ("BKR_Proofs.length_1_calculate_data_satisfies_properties",
     "[| ?p ~= 0; length ?qs = 1;
         ALL q. List.member ?qs q --> coprime ?p q |]
      ==> satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))
           (get_signs (calculate_data ?p ?qs))
           (get_matrix (calculate_data ?p ?qs))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_equation
         (template_app (template_hole 10, template_var 0), template_hole 9),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("BKR_Proofs.base_case_sgas_alt",
     "[| length ?qs = 1; ?p ~= 0;
         ALL q. List.member ?qs q --> coprime ?p q |]
      ==> set (characterize_consistent_signs_at_roots_copr ?p ?qs)
          <= {[1], [- 1]}",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 1),
          template_hole 16),
        template_negation
         (template_equation (template_var 0, template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_hole 3)),
                 template_hole 2)),
             template_hole 0))))),
    ("BKR_Proofs.reduction_doesnt_break_length_signs",
     "[| ALL x:set ?signs. length x = length ?qs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> ALL x:set (reduction_signs ?p ?qs ?signs ?subsets
                      (M_mat ?signs ?subsets)).
             length x = length ?qs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 2),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 2),
                       template_var 3),
                     template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)))),
             t_empty)
           ))),
    ("BKR_Proofs.reduction_signs_set_helper_lemma",
     "[| dim_vec ?C = length ?B; ?A <= set ?B;
         ALL n<dim_vec ?C. ?C $ n = 0 --> ?B ! n ~: ?A |]
      ==> ?A <= set (take_indices ?B (find_nonzeros_from_input_vec ?C))",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 2),
          template_app (template_hole 13, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)))))),
    ("BKR_Proofs.base_case_satisfy_equation_alt",
     "[| length ?qs = 1; ?p ~= 0;
         ALL q. List.member ?qs q --> coprime ?p q |]
      ==> satisfy_equation ?p ?qs [[], [0]] [[1], [- 1]]",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 1),
          template_hole 19),
        template_negation
         (template_equation (template_var 0, template_hole 16)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 0),
                 template_var 1),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_hole 9)),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 1, template_hole 3)),
                     template_hole 2)),
                 template_hole 0)))
           ))),
    ("BKR_Proofs.reduction_signs_set_helper_lemma2",
     "[| distinct ?B; dim_vec ?C = length ?B; ?A <= set ?B;
         ALL n<dim_vec ?C. ?C $ n ~= 0 --> ?B ! n : ?A |]
      ==> set (take_indices ?B (find_nonzeros_from_input_vec ?C)) <= ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_equation
         (template_app (template_hole 14, template_var 1),
          template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 11, template_var 2)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("BKR_Proofs.matrix_construction_is_kronecker_product",
     "[| !!l i. [| l : set ?subs1.0; i : set l |] ==> i < ?n1.0;
         !!j. j : set ?signs1.0 ==> length j = ?n1.0 |]
      ==> M_mat (signs_smash ?signs1.0 ?signs2.0)
           (subsets_smash ?n1.0 ?subs1.0 ?subs2.0) =
          kronecker_product (M_mat ?signs1.0 ?subs1.0)
           (M_mat ?signs2.0 ?subs2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 4)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("BKR_Proofs.reduction_deletes_bad_sign_conds",
     "[| ?p ~= 0; well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> set (characterize_consistent_signs_at_roots_copr ?p ?qs) =
          set (reduction_signs ?p ?qs ?signs ?subsets
                (M_mat ?signs ?subsets))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)),
          template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))))),
    ("BKR_Proofs.reduction_doesnt_break_things_signs",
     "[| ?p ~= 0; well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> set (characterize_consistent_signs_at_roots_copr ?p ?qs)
          <= set (reduction_signs ?p ?qs ?signs ?subsets
                   (M_mat ?signs ?subsets))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("BKR_Proofs.reduce_system_sign_conditions",
     "[| ?p ~= 0; well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> set (get_signs
                (reduce_system ?p
                  (?qs, M_mat ?signs ?subsets, ?subsets, ?signs))) =
          set (characterize_consistent_signs_at_roots_copr ?p ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 15)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))))),
         template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2))))),
    ("BKR_Proofs.base_case_matrix_eq",
     "[| ?p ~= 0; coprime ?p ?q |]
      ==> mat_of_rows_list 2 [[1, 1], [1, - 1]] *\<^sub>v
          w_vec ?p [?q] [[1], [- 1]] =
          v_vec ?p [?q] [[], [0]]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 22)),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_hole 15))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_hole 11))),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_hole 10, template_hole 12)),
                         template_hole 11))),
                   template_hole 9)))),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 1),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_hole 12),
                   template_hole 11)),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app (template_hole 10, template_hole 12)),
                     template_hole 11)),
                 template_hole 9)))),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 6)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 3)),
               template_hole 0)))))),
    ("BKR_Proofs.reduction_doesnt_break_things_invertibility",
     "[| length ?subsets = length ?signs;
         invertible_mat (M_mat ?signs ?subsets); ?p ~= 0;
         well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs |]
      ==> invertible_mat
           (get_matrix
             (reduce_system ?p
               (?qs, M_mat ?signs ?subsets, ?subsets, ?signs)))",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 3),
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 2),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 16,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 15, template_var 2),
                         template_var 3)),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))))))
           ))),
    ("BKR_Proofs.reducing_sys_satisfies_properties",
     "[| ?p ~= 0; 0 < length ?qs; ALL q. List.member ?qs q --> coprime ?p q;
         satisfies_properties ?p ?qs ?subsets ?signs ?matrix |]
      ==> satisfies_properties ?p ?qs
           (get_subsets (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))
           (get_signs (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))
           (get_matrix
             (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 15)),
        template_inequation
         (less_than, template_hole 13,
          template_app (template_hole 12, template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 4),
                   template_var 3),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 1)))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1)))))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))))))
           ))),
    ("BKR_Proofs.take_cols_subsets_og_cols",
     "[| length ?subsets = length ?signs;
         invertible_mat (M_mat ?signs ?subsets); ?p ~= 0;
         well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs |]
      ==> set (take_indices (cols (M_mat ?signs ?subsets))
                (find_nonzeros_from_input_vec
                  (solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets))))
          <= set (cols (M_mat ?signs ?subsets))",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 3),
          template_app (template_hole 18, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 16, template_var 2),
                   template_var 3))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 3),
                 template_app
                  (template_app (template_hole 16, template_var 2),
                   template_var 3))))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 16, template_var 2),
               template_var 3)))))),
    ("BKR_Proofs.reduction_doesnt_break_things_invertibility_step1",
     "[| length ?subsets = length ?signs;
         invertible_mat (M_mat ?signs ?subsets); ?p ~= 0;
         well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs |]
      ==> vec_space.rank (length ?signs)
           (reduce_mat_cols (M_mat ?signs ?subsets)
             (solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets))) =
          length
           (find_nonzeros_from_input_vec
             (solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)))",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 3),
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 2),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 17, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 15, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_var 3),
               template_app
                (template_app (template_hole 15, template_var 2),
                 template_var 3)))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_var 3),
               template_app
                (template_app (template_hole 15, template_var 2),
                 template_var 3))))))),
    ("BKR_Proofs.reduce_system_matrix_match",
     "[| ?p ~= 0; well_def_signs (length ?qs) ?signs; distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets) |]
      ==> M_mat
           (get_signs
             (reduce_system ?p
               (?qs, M_mat ?signs ?subsets, ?subsets, ?signs)))
           (get_subsets
             (reduce_system ?p
               (?qs, M_mat ?signs ?subsets, ?subsets, ?signs))) =
          get_matrix
           (reduce_system ?p
             (?qs, M_mat ?signs ?subsets, ?subsets, ?signs))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 17)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)),
          template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)))))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)))))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)))))))),
    ("BKR_Proofs.reduce_system_matrix_equation_preserved",
     "[| ?p ~= 0; well_def_signs (length ?qs) ?signs;
         all_list_constr ?subsets (length ?qs); distinct ?signs;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs)
         <= set ?signs;
         satisfy_equation ?p ?qs ?subsets ?signs;
         invertible_mat (M_mat ?signs ?subsets);
         ALL q. List.member ?qs q --> coprime ?p q |]
      ==> satisfy_equation ?p ?qs
           (get_subsets
             (reduce_system ?p
               (?qs, M_mat ?signs ?subsets, ?subsets, ?signs)))
           (get_signs
             (reduce_system ?p
               (?qs, M_mat ?signs ?subsets, ?subsets, ?signs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 20)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 0),
              template_app (template_hole 18, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)),
          template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 10, template_var 1),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1)))))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1))))))
           ))),
    ("BKR_Proofs.smaller_sys_are_good",
     "[| ?p ~= 0; 0 < length ?qs1.0;
         ALL q. List.member ?qs1.0 q --> coprime ?p q; 0 < length ?qs2.0;
         ALL q. List.member ?qs2.0 q --> coprime ?p q;
         set (find_consistent_signs_at_roots ?p ?qs1.0) =
         set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0);
         set (find_consistent_signs_at_roots ?p ?qs2.0) =
         set (characterize_consistent_signs_at_roots_copr ?p ?qs2.0) |]
      ==> set (snd (snd (reduce_system ?p
                          (combine_systems ?p
                            (?qs1.0, calculate_data ?p ?qs1.0)
                            (?qs2.0, calculate_data ?p ?qs2.0))))) =
          set (characterize_consistent_signs_at_roots_copr ?p
                (?qs1.0 @ ?qs2.0))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 18)),
        template_inequation
         (less_than, template_hole 16,
          template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation
         (less_than, template_hole 16,
          template_app (template_hole 15, template_var 0)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1))),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0))))))),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("BKR_Proofs.combining_sys_satisfies_properties_helper",
     "[| ?p ~= 0; 0 < length ?qs1.0;
         ALL q. List.member ?qs1.0 q --> coprime ?p q; 0 < length ?qs2.0;
         ALL q. List.member ?qs2.0 q --> coprime ?p q;
         satisfies_properties ?p ?qs1.0 ?subsets1.0 ?signs1.0 ?matrix1.0;
         satisfies_properties ?p ?qs2.0 ?subsets2.0 ?signs2.0 ?matrix2.0 |]
      ==> satisfies_properties ?p (?qs1.0 @ ?qs2.0)
           (get_subsets
             (snd (combine_systems ?p
                    (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)
                    (?qs2.0, ?matrix2.0, ?subsets2.0, ?signs2.0))))
           (get_signs
             (snd (combine_systems ?p
                    (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)
                    (?qs2.0, ?matrix2.0, ?subsets2.0, ?signs2.0))))
           (get_matrix
             (snd (combine_systems ?p
                    (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)
                    (?qs2.0, ?matrix2.0, ?subsets2.0, ?signs2.0))))",
     template_implication
      ([template_negation
         (template_equation (template_var 8, template_hole 17)),
        template_inequation
         (less_than, template_hole 15,
          template_app (template_hole 14, template_var 7)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation
         (less_than, template_hole 15,
          template_app (template_hole 14, template_var 6)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 9, template_var 8),
                   template_app
                    (template_app (template_hole 8, template_var 7),
                     template_var 6)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 8),
                         template_app
                          (template_app (template_hole 4, template_var 7),
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_app
                              (template_app
                                (template_hole 2, template_var 5),
                               template_var 4)))),
                       template_app
                        (template_app (template_hole 4, template_var 6),
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 1))))))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 5, template_var 8),
                       template_app
                        (template_app (template_hole 4, template_var 7),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_app
                            (template_app (template_hole 2, template_var 5),
                             template_var 4)))),
                     template_app
                      (template_app (template_hole 4, template_var 6),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 1))))))),
             template_app
              (template_hole 0,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 8),
                     template_app
                      (template_app (template_hole 4, template_var 7),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_app (template_hole 2, template_var 5),
                           template_var 4)))),
                   template_app
                    (template_app (template_hole 4, template_var 6),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1)))))))
           ))),
    ("BKR_Proofs.combining_sys_satisfies_properties",
     "[| ?p ~= 0; 0 < length ?qs1.0;
         ALL q. List.member ?qs1.0 q --> coprime ?p q; 0 < length ?qs2.0;
         ALL q. List.member ?qs2.0 q --> coprime ?p q;
         satisfies_properties ?p ?qs1.0
          (get_subsets (calculate_data ?p ?qs1.0))
          (get_signs (calculate_data ?p ?qs1.0))
          (get_matrix (calculate_data ?p ?qs1.0));
         satisfies_properties ?p ?qs2.0
          (get_subsets (calculate_data ?p ?qs2.0))
          (get_signs (calculate_data ?p ?qs2.0))
          (get_matrix (calculate_data ?p ?qs2.0)) |]
      ==> satisfies_properties ?p (?qs1.0 @ ?qs2.0)
           (get_subsets
             (snd (combine_systems ?p (?qs1.0, calculate_data ?p ?qs1.0)
                    (?qs2.0, calculate_data ?p ?qs2.0))))
           (get_signs
             (snd (combine_systems ?p (?qs1.0, calculate_data ?p ?qs1.0)
                    (?qs2.0, calculate_data ?p ?qs2.0))))
           (get_matrix
             (snd (combine_systems ?p (?qs1.0, calculate_data ?p ?qs1.0)
                    (?qs2.0, calculate_data ?p ?qs2.0))))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 1)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 0)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 0),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 0))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_app
                            (template_app (template_hole 6, template_var 2),
                             template_var 1))),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_app (template_hole 6, template_var 2),
                           template_var 0)))))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_app
                          (template_app (template_hole 6, template_var 2),
                           template_var 1))),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0)))))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 0))))))
           ))),
    ("BKR_Proofs.inductive_step",
     "[| ?p ~= 0; 0 < length ?qs1.0; 0 < length ?qs2.0;
         ALL q. List.member ?qs1.0 q --> coprime ?p q;
         ALL q. List.member ?qs2.0 q --> coprime ?p q;
         well_def_signs (length ?qs1.0) ?signs1.0;
         well_def_signs (length ?qs2.0) ?signs2.0; distinct ?signs1.0;
         distinct ?signs2.0;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0)
         <= set ?signs1.0;
         set (characterize_consistent_signs_at_roots_copr ?p ?qs2.0)
         <= set ?signs2.0;
         all_list_constr ?subsets1.0 (length ?qs1.0);
         all_list_constr ?subsets2.0 (length ?qs2.0);
         invertible_mat (M_mat ?signs1.0 ?subsets1.0);
         invertible_mat (M_mat ?signs2.0 ?subsets2.0) |]
      ==> satisfy_equation ?p (?qs1.0 @ ?qs2.0)
           (subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0)
           (signs_smash ?signs1.0 ?signs2.0) &
          invertible_mat
           (M_mat (signs_smash ?signs1.0 ?signs2.0)
             (subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0))",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_hole 20)),
        template_inequation
         (less_than, template_hole 18,
          template_app (template_hole 17, template_var 5)),
        template_inequation
         (less_than, template_hole 18,
          template_app (template_hole 17, template_var 4)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 17, template_var 5)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 17, template_var 4)),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5)),
          template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 4)),
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 6),
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 17, template_var 5)),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 17, template_var 5)),
                     template_var 1),
                   template_var 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.BKR_ProofsTemplates"
### 0.922s elapsed time, 1.576s cpu time, 0.763s GC time
val it = (): unit
