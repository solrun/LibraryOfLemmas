Loading theory "Draft.Infra" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.a0i_agree" via "Draft.a0n_agree" via "Draft.Refinement")
Loading theory "Draft.Agents" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.Runs" via "Draft.Atoms" via "Draft.Keys")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Infra"
### 0.061s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "Draft.Refinement" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.a0i_agree" via "Draft.a0n_agree")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.532s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "reachp"
  Proving monotonicity ...
specification
  Server_not_bad: Server ~: bad
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.306s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.804s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "behp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Agents"
### 0.555s elapsed time, 2.216s cpu time, 0.218s GC time
Loading theory "Draft.Keys" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.Runs" via "Draft.Atoms")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Proofs for inductive predicate(s) "seq_liftp"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.Refinement"
### 1.154s elapsed time, 4.405s cpu time, 0.930s GC time
Loading theory "Draft.a0n_agree" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.a0i_agree")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 4.151s cpu time, 0.885s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Keys"
### 0.876s elapsed time, 3.318s cpu time, 0.796s GC time
Loading theory "Draft.Atoms" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth" via "Draft.Runs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Atoms"
### 0.293s elapsed time, 1.161s cpu time, 0.085s GC time
Loading theory "Draft.Channels" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.075s elapsed time, 4.104s cpu time, 1.107s GC time
Loading theory "Draft.Runs" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth")
### theory "Draft.a0n_agree"
### 1.350s elapsed time, 5.180s cpu time, 1.229s GC time
Loading theory "Draft.a0i_agree" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan" via "Draft.m1_auth")
Found termination order: "size <*mlex*> {}"
### theory "Draft.a0i_agree"
### 0.140s elapsed time, 0.562s cpu time, 0.000s GC time
### theory "HOL-Library.Tree"
### 2.435s elapsed time, 9.299s cpu time, 2.105s GC time
Loading theory "Draft.Templates" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "atomsp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.m2_confid_chanMoreTemplates")
Proofs for inductive predicate(s) "extrp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.Runs"
### 0.456s elapsed time, 1.598s cpu time, 0.166s GC time
Loading theory "Draft.m1_auth" (required by "Draft.m2_confid_chanMoreTemplates" via "Draft.m2_confid_chan")
Proofs for inductive predicate(s) "fakep"
  Proving monotonicity ...
### theory "Draft.Channels"
### 1.377s elapsed time, 4.945s cpu time, 1.189s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.590s elapsed time, 1.529s cpu time, 0.131s GC time
Found termination order: "{}"
### theory "Draft.m1_auth"
### 0.546s elapsed time, 1.239s cpu time, 0.078s GC time
Loading theory "Draft.m2_confid_chan" (required by "Draft.m2_confid_chanMoreTemplates")
### theory "Draft.m2_confid_chan"
### 0.310s elapsed time, 0.349s cpu time, 0.054s GC time
Loading theory "Draft.m2_confid_chanMoreTemplates"
val templateLemmas =
   [("m2_confid_chan.PO_m2_step1_refines_m1_step1",
     "{R12} m1_step1 ?Ra ?A ?B ?Na, m2_step1 ?Ra ?A ?B ?Na {> R12}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("m2_confid_chan.PO_m2_step2_refines_m1_step2",
     "{R12} m1_step2 ?Rb ?A ?B ?Na ?Nb, m2_step2 ?Rb ?A ?B ?Na ?Nb {> R12}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("m2_confid_chan.m2_inv1_noncesD",
     "[| aNon (?R $ 0) : atoms (chan ?x); ?x : m2_inv1_nonces |]
      ==> ?R : dom (runs ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_hole 7))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("m2_confid_chan.PO_m2_step3_refines_m1_step3",
     "{R12 Int
       UNIV \<times>
       (m2_inv4_inon_secret Int
        m2_inv3_msg2)} m1_step3 ?Ra ?A ?B ?Na
                        ?Nb, m2_step3 ?Ra ?A ?B ?Na ?Nb {> R12}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     t_empty))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 7)
         )),
    ("m2_confid_chan.m2_inv1_noncesI",
     "(!!R. aNon (R $ 0) : atoms (chan ?x) ==> R : dom (runs ?x)) ==>
      ?x : m2_inv1_nonces",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("m2_confid_chan.m2_inv1_noncesE",
     "[| ?x : m2_inv1_nonces;
         (!!R. aNon (R $ 0) : atoms (chan ?x) ==> R : dom (runs ?x)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 9, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("m2_confid_chan.m2_inv4_inon_secretD",
     "[| runs ?x ?Ra = Some (Init, [?A, ?B], ?al); ?A ~: bad; ?B ~: bad;
         ?x : m2_inv4_inon_secret |]
      ==> aNon (?Ra $ 0) ~: extr ik0 (chan ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 4),
            template_var 3),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 2),
                    template_app
                     (template_app (template_hole 13, template_var 1),
                      template_hole 12))),
                template_var 0)))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_hole 9)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 9)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_hole 7)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_hole 3))),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 4)))
               )
           ))),
    ("m2_confid_chan.m2_inv4_inon_secretI",
     "(!!A B Ra al.
          [| runs ?x Ra = Some (Init, [A, B], al); A ~: bad; B ~: bad |]
          ==> aNon (Ra $ 0) ~: extr ik0 (chan ?x)) ==>
      ?x : m2_inv4_inon_secret",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("m2_confid_chan.m2_inv4_inon_secretE",
     "[| ?x : m2_inv4_inon_secret;
         (!!A B Ra al.
             [| runs ?x Ra = Some (Init, [A, B], al); A ~: bad; B ~: bad |]
             ==> aNon (Ra $ 0) ~: extr ik0 (chan ?x)) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_hole 21)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 20, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("m2_confid_chan.m2_inv3_msg2D",
     "[| Confid ?B ?A (Msg [aNon ?Na, aNon ?Nb]) : chan ?x;
         aNon ?Na ~: extr ik0 (chan ?x); ?x : m2_inv3_msg2 |]
      ==> EX Rb.
             ?Nb = Rb $ 0 & runs ?x Rb = Some (Resp, [?A, ?B], [aNon ?Na])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 27,
                        template_app
                         (template_app (template_hole 26, template_hole 25),
                          template_hole 24)),
                      template_var 4),
                    template_var 3),
                  template_app
                   (template_hole 23,
                    template_app
                     (template_app
                       (template_hole 22,
                        template_app (template_hole 21, template_var 2)),
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app (template_hole 21, template_var 1)),
                        template_hole 20))))),
              template_app (template_hole 19, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 21, template_var 2)),
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_app (template_hole 19, template_var 0)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("m2_confid_chan.m2_inv3_msg2I",
     "(!!A B Na Nb.
          [| Confid B A (Msg [aNon Na, aNon Nb]) : chan ?x;
             aNon Na ~: extr ik0 (chan ?x) |]
          ==> EX Rb.
                 Nb = Rb $ 0 &
                 runs ?x Rb = Some (Resp, [A, B], [aNon Na])) ==>
      ?x : m2_inv3_msg2",
     template_implication
      ([template_predicate (template_app (template_hole 31, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("m2_confid_chan.m2_inv3_msg2E",
     "[| ?x : m2_inv3_msg2;
         (!!A B Na Nb.
             [| Confid B A (Msg [aNon Na, aNon Nb]) : chan ?x;
                aNon Na ~: extr ik0 (chan ?x) |]
             ==> EX Rb.
                    Nb = Rb $ 0 &
                    runs ?x Rb = Some (Resp, [A, B], [aNon Na])) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 1),
              template_hole 29)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 28, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.m2_confid_chanMoreTemplates"
### 0.433s elapsed time, 0.603s cpu time, 0.075s GC time
val it = (): unit
