Loading theory "Draft.Agents" (required by "Draft.ChannelsMoreTemplates" via "Draft.Channels" via "Draft.Atoms" via "Draft.Keys")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.585s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.868s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs")
specification
  Server_not_bad: Server ~: bad
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.326s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Agents"
### 0.553s elapsed time, 2.202s cpu time, 0.196s GC time
Loading theory "Draft.Keys" (required by "Draft.ChannelsMoreTemplates" via "Draft.Channels" via "Draft.Atoms")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.952s elapsed time, 3.597s cpu time, 0.793s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.030s elapsed time, 3.753s cpu time, 0.758s GC time
### theory "Draft.Keys"
### 0.851s elapsed time, 2.979s cpu time, 0.683s GC time
Loading theory "Draft.Atoms" (required by "Draft.ChannelsMoreTemplates" via "Draft.Channels")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Atoms"
### 0.268s elapsed time, 0.573s cpu time, 0.065s GC time
Loading theory "Draft.Channels" (required by "Draft.ChannelsMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.945s elapsed time, 6.036s cpu time, 1.002s GC time
Loading theory "Draft.Templates" (required by "Draft.ChannelsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ChannelsMoreTemplates")
Proofs for inductive predicate(s) "atomsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "extrp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "fakep"
  Proving monotonicity ...
### theory "Draft.Channels"
### 0.903s elapsed time, 1.904s cpu time, 0.218s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.052s cpu time, 0.112s GC time
Loading theory "Draft.ChannelsMoreTemplates"
val templateLemmas =
   [("Channels.ik0_aAgt", "aAgt ?A : ik0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Channels.ik0_aNum", "aNum ?T : ik0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Channels.ik0_aNon", "aNon ?N ~: ik0",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)
             )
         )),
    ("Channels.extr_empty", "extr ?T {} = ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Channels.fake_expanding", "?H <= fake ?T ?U ?H",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Channels.ik0_aKey_corr", "(aKey ?K : ik0) = (?K : corrKey)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Channels.atoms_fake", "atoms (fake ?T ?U ?H) = ?T Un atoms ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("Channels.keys_for_monotone",
     "?G <= ?H ==> keys_for ?G <= keys_for ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Channels.atoms_monotone", "?G <= ?H ==> atoms ?G <= atoms ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Channels.atomsp_atoms_eq", "atomsp (%x. x : ?H) = (%x. x : atoms ?H)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Channels.keys_for_insert_StatCh",
     "keys_for (insert (StatCh ?c ?A ?B ?M) ?H) = keys_for ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Channels.keys_for_insert_DynCh",
     "keys_for (insert (DynCh ?c ?K ?M) ?H) = insert ?K (keys_for ?H)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 0)))),
    ("Channels.extr_monotone_param",
     "?T <= ?U ==> extr ?T ?H <= extr ?U ?H",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Channels.extr_monotone", "?G <= ?H ==> extr ?T ?G <= extr ?T ?H",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Channels.keys_forI", "DynCh ?c ?K ?M : ?H ==> ?K : keys_for ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Channels.extr_into_atoms",
     "?At : extr ?T ?H ==> ?At : ?T Un atoms ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Channels.atoms_insert_DynCh",
     "atoms (insert (DynCh ?c ?K (Msg ?M)) ?H) = set ?M Un atoms ?H",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("Channels.fake_monotone_param1",
     "?T <= ?T' ==> fake ?T ?U ?H <= fake ?T' ?U ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Channels.fake_monotone",
     "?G <= ?H ==> fake ?T ?U ?G <= fake ?T ?U ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Channels.extr_insert",
     "?At : extr ?T ?H ==> ?At : extr ?T (insert ?C ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Channels.atoms_insert_StatCh",
     "atoms (insert (StatCh ?c ?A ?B (Msg ?M)) ?H) = set ?M Un atoms ?H",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("Channels.extr_fake",
     "?T' <= ?T ==> extr ?T (fake ?T' ?U ?H) = extr ?T ?H",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Channels.keys_for_mono",
     "[| ?c : keys_for ?G; ?G <= ?H |] ==> ?c : keys_for ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Channels.atoms_mono",
     "[| ?c : atoms ?G; ?G <= ?H |] ==> ?c : atoms ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Channels.extrp_extr_eq",
     "extrp (%x. x : ?T) (%x. x : ?H) = (%x. x : extr ?T ?H)",
     template_equation
      (template_app (template_app (template_hole 3, t_empty), t_empty),
       t_empty)),
    ("Channels.extr_mono",
     "[| ?c : extr ?T ?G; ?G <= ?H |] ==> ?c : extr ?T ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Channels.extr_mono_param",
     "[| ?c : extr ?T ?H; ?T <= ?U |] ==> ?c : extr ?U ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Channels.fakep_fake_eq",
     "fakep (%x. x : ?T) ?U (%x. x : ?H) = (%x. x : fake ?T ?U ?H)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 1),
         t_empty),
       t_empty)),
    ("Channels.fake_mono",
     "[| ?c : fake ?T ?U ?G; ?G <= ?H |] ==> ?c : fake ?T ?U ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Channels.fake_mono_param1",
     "[| ?c : fake ?T ?U ?H; ?T <= ?T' |] ==> ?c : fake ?T' ?U ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Channels.extr_insert_unused_key_param",
     "?K ~: keys_for ?H ==>
      extr (insert (aKey ?K) ?T) ?H = insert (aKey ?K) (extr ?T ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Channels.rkeys_sesK", "sesK (?R $ ?i) : rkeys ?U ==> ?R : ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 5, template_hole 7),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, t_empty)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    t_empty))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Channels.extr_insert_non_key_param",
     "?At : range aNon Un range aAgt Un range aNum ==>
      extr (insert ?At ?T) ?H = insert ?At (extr ?T ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_hole 9)),
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_hole 6))),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Channels.extr_insert_DynCh",
     "extr ?T (insert (DynCh ?c ?K (Msg ?M)) ?H) =
      (if confid ~: ?c | aKey ?K : extr ?T ?H then extr (set ?M Un ?T) ?H
       else extr ?T ?H)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 4),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 2),
               template_app (template_hole 9, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_app (template_hole 12, template_var 4),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 4)),
             template_var 0)),
         template_app
          (template_app (template_hole 12, template_var 4),
           template_var 0)))),
    ("Channels.extr_insert_StatCh",
     "extr ?T (insert (StatCh ?c ?A ?B (Msg ?M)) ?H) =
      (if confid ~: ?c | ?A : bad | ?B : bad then extr (set ?M Un ?T) ?H
       else extr ?T ?H)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 5),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 9, template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 4))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)))),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 5)),
             template_var 0)),
         template_app
          (template_app (template_hole 12, template_var 5),
           template_var 0)))),
    ("Channels.fake_intros",
     "[| set ?M <= extr ?T ?H; auth ~: ?c | ?A : bad | ?B : bad |]
      ==> StatCh ?c ?A ?B (Msg ?M) : fake ?T ?U ?H",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 6),
          template_app
           (template_app (template_hole 10, template_var 5),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 4)),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 1, template_var 6))),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0),
               template_var 4))
           ))),
    ("Channels.fake_intros",
     "[| set ?M <= extr ?T ?H;
         auth ~: ?c & ?K : rkeys ?U | aKey ?K : extr ?T ?H |]
      ==> DynCh ?c ?K (Msg ?M) : fake ?T ?U ?H",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 20, template_var 5),
          template_app
           (template_app (template_hole 19, template_var 4),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_hole 14),
                        template_var 2))),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, t_empty)),
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          t_empty)))))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app
                 (template_app (template_hole 19, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1),
                 template_app (template_hole 1, template_var 5))),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.ChannelsMoreTemplates"
### 0.374s elapsed time, 0.507s cpu time, 0.061s GC time
val it = (): unit
