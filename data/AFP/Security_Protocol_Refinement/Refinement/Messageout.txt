Loading theory "Draft.Agents" (required by "Draft.MessageMoreTemplates" via "Draft.Message" via "Draft.Keys")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.630s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.845s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
specification
  Server_not_bad: Server ~: bad
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.360s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Agents"
### 0.558s elapsed time, 2.218s cpu time, 0.194s GC time
Loading theory "Draft.Keys" (required by "Draft.MessageMoreTemplates" via "Draft.Message")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.966s elapsed time, 3.657s cpu time, 0.820s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.043s elapsed time, 3.786s cpu time, 0.784s GC time
### theory "Draft.Keys"
### 0.850s elapsed time, 2.992s cpu time, 0.707s GC time
Loading theory "Draft.Message" (required by "Draft.MessageMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 1.956s elapsed time, 6.066s cpu time, 1.031s GC time
Loading theory "Draft.Templates" (required by "Draft.MessageMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.149s cpu time, 0.043s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MessageMoreTemplates")
### theory "Draft.Message"
### 0.871s elapsed time, 1.839s cpu time, 0.219s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.684s cpu time, 0.055s GC time
Loading theory "Draft.MessageMoreTemplates"
val templateLemmas =
   [("Message.analz_increasing", "?H <= analz ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Message.parts_increasing", "?H <= parts ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Message.synth_increasing", "?H <= synth ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Message.analz_subset_parts", "analz ?H <= parts ?H",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Message.Agent_synth", "msg.Agent ?A : synth ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Message.Number_synth", "Number ?n : synth ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Message.keysFor_image_Key", "keysFor (Key ` ?E) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Message.analz_idem", "analz (analz ?H) = analz ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Message.analz_parts", "analz (parts ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Message.parts_analz", "parts (analz ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Message.parts_idem", "parts (parts ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Message.synth_idem", "synth (synth ?H) = synth ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Message.Agent_neq_HPair", "msg.Agent ?A ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Hash_neq_HPair", "Hash ?Z ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Key_neq_HPair", "Key ?K ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Nonce_neq_HPair", "Nonce ?N ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Number_neq_HPair", "Number ?N ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Hash_notin_image_Key", "Hash ?X ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Message.Nonce_Key_image_eq", "Nonce ?x ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Message.parts_emptyE", "?X : parts {} ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate (template_var 0))),
    ("Message.Crypt_neq_HPair", "Crypt ?K ?X' ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Message.Crypt_notin_image_Key", "Crypt ?K ?X ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Message.keysFor_insert_Agent",
     "keysFor (insert (msg.Agent ?A) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.keysFor_insert_Hash",
     "keysFor (insert (Hash ?X) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.keysFor_insert_Key",
     "keysFor (insert (Key ?K) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.keysFor_insert_Nonce",
     "keysFor (insert (Nonce ?N) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.keysFor_insert_Number",
     "keysFor (insert (Number ?N) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.analz_image_Key", "analz (Key ` ?N) = Key ` ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Message.parts_image_Key", "parts (Key ` ?N) = Key ` ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Message.Un_idem_collapse", "?A Un (?B Un ?A) = ?B Un ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Message.keysFor_insert_HPair",
     "keysFor (insert Hash[?X] ?Y ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.keysFor_insert_MPair",
     "keysFor (insert \<lbrace>?X, ?Y\<rbrace> ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Message.analz_synth", "analz (synth ?H) = analz ?H Un synth ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Message.parts_synth", "parts (synth ?H) = parts ?H Un synth ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Message.analz_insert", "insert ?X (analz ?H) <= analz (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.parts_insert_subset",
     "insert ?X (parts ?H) <= parts (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.synth_insert", "insert ?X (synth ?H) <= synth (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.keysFor_Un",
     "keysFor (?H Un ?H') = keysFor ?H Un keysFor ?H'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_Un", "parts (?G Un ?H) = parts ?G Un parts ?H",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Message.analz_Un_analz", "analz (?G Un analz ?H) = analz (?G Un ?H)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Message.analz_analz_Un", "analz (analz ?G Un ?H) = analz (?G Un ?H)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Message.analz_subset_iff",
     "(analz ?G <= analz ?H) = (?G <= analz ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.parts_subset_iff",
     "(parts ?G <= parts ?H) = (?G <= parts ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.synth_subset_iff",
     "(synth ?G <= synth ?H) = (?G <= synth ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.Key_synth_eq", "(Key ?K : synth ?H) = (Key ?K : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Message.Nonce_synth_eq", "(Nonce ?N : synth ?H) = (Nonce ?N : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Message.Other_image_eq",
     "(msg.Agent ?x : msg.Agent ` ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Message.Key_image_eq", "(Key ?x : Key ` ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Message.parts_Un_subset2", "parts (?G Un ?H) <= parts ?G Un parts ?H",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Message.analz_Un", "analz ?G Un analz ?H <= analz (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.parts_Un_subset1", "parts ?G Un parts ?H <= parts (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.synth_Un", "synth ?G Un synth ?H <= synth (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Message.keysFor_mono", "?G <= ?H ==> keysFor ?G <= keysFor ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.analz_mono", "?G <= ?H ==> analz ?G <= analz ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.parts_mono", "?G <= ?H ==> parts ?G <= parts ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.synth_mono", "?G <= ?H ==> synth ?G <= synth ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.analz_into_parts", "?c : analz ?H ==> ?c : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Message.analzp_analz_eq", "analzp (%x. x : ?H) = (%x. x : analz ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Message.partsp_parts_eq", "partsp (%x. x : ?H) = (%x. x : parts ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Message.synthp_synth_eq", "synthp (%x. x : ?H) = (%x. x : synth ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("Message.analz_insert_Agent",
     "analz (insert (msg.Agent ?agt) ?H) =
      insert (msg.Agent ?agt) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.analz_insert_Hash",
     "analz (insert (Hash ?X) ?H) = insert (Hash ?X) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.analz_insert_Nonce",
     "analz (insert (Nonce ?N) ?H) = insert (Nonce ?N) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.analz_insert_Number",
     "analz (insert (Number ?N) ?H) = insert (Number ?N) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_insert_Agent",
     "parts (insert (msg.Agent ?agt) ?H) =
      insert (msg.Agent ?agt) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_insert_Hash",
     "parts (insert (Hash ?X) ?H) = insert (Hash ?X) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_insert_Key",
     "parts (insert (Key ?K) ?H) = insert (Key ?K) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_insert_Nonce",
     "parts (insert (Nonce ?N) ?H) = insert (Nonce ?N) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_insert_Number",
     "parts (insert (Number ?N) ?H) = insert (Number ?N) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.analz_analzD", "?X : analz (analz ?H) ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Message.parts_partsD", "?X : parts (parts ?H) ==> ?X : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Message.synth_synthD", "?X : synth (synth ?H) ==> ?X : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Message.keysFor_insert_Crypt",
     "keysFor (insert (Crypt ?K ?X) ?H) = insert (invKey ?K) (keysFor ?H)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 0)))),
    ("Message.parts_insert",
     "parts (insert ?X ?H) = parts {?X} Un parts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Message.synth_analz_mono",
     "?G <= ?H ==> synth (analz ?G) <= synth (analz ?H)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Message.analz_insertI", "?c : analz ?G ==> ?c : analz (insert ?a ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Message.parts_insertI", "?c : parts ?G ==> ?c : parts (insert ?a ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Message.not_parts_not_analz", "?c ~: parts ?H ==> ?c ~: analz ?H",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Message.Crypt_imp_invKey_keysFor",
     "Crypt ?K ?X : ?H ==> invKey ?K : keysFor ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Message.analz_synth_Un2",
     "analz (?G Un synth ?H) = analz (?G Un ?H) Un synth ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Message.analz_synth_Un",
     "analz (synth ?G Un ?H) = analz (?G Un ?H) Un synth ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Message.analz_insert_eq",
     "?X : analz ?H ==> analz (insert ?X ?H) = analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.parts_cut_eq",
     "?X : parts ?H ==> parts (insert ?X ?H) = parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Message.analz_conj_parts",
     "(?X : analz ?H & ?X : parts ?H) = (?X : analz ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Message.analz_disj_parts",
     "(?X : analz ?H | ?X : parts ?H) = (?X : parts ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Message.keysFor_synth",
     "keysFor (synth ?H) = keysFor ?H Un invKey ` {K. Key K : ?H}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, t_empty))))),
    ("Message.keysFor_UN",
     "keysFor (\<Union> (?H ` ?A)) = (UN i:?A. keysFor (?H i))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Message.parts_insert_Crypt",
     "parts (insert (Crypt ?K ?X) ?H) =
      insert (Crypt ?K ?X) (parts (insert ?X ?H))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Message.parts_UN",
     "parts (\<Union> (?H ` ?A)) = (UN x:?A. parts (?H x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Message.pushes",
     "insert (Key ?K) (insert (msg.Agent ?C) ?A) =
      insert (msg.Agent ?C) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Key ?K) (insert (Hash ?X) ?A) =
      insert (Hash ?X) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Key ?K) (insert (Nonce ?N) ?A) =
      insert (Nonce ?N) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Key ?K) (insert (Number ?N) ?A) =
      insert (Number ?N) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("Message.HPair_eq",
     "(Hash[?X'] ?Y' = Hash[?X] ?Y) = (?X' = ?X & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Message.analz_insert_Crypt_subset",
     "analz (insert (Crypt ?K ?X) ?H)
      <= insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Message.parts_UN_subset1",
     "(UN x:?A. parts (?H x)) <= parts (\<Union> (?H ` ?A))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Message.parts_UN_subset2",
     "parts (\<Union> (?H ` ?A)) <= (UN x:?A. parts (?H x))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Message.parts_insert_subset_Un",
     "?X : ?G ==> parts (insert ?X ?H) <= parts ?G Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Message.parts_singleton", "?X : parts ?H ==> EX Y:?H. ?X : parts {Y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("Message.analz_monotonic",
     "[| ?c : analz ?G; ?G <= ?H |] ==> ?c : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.analz_UN_analz",
     "analz (UN i:?A. analz (?H i)) = analz (\<Union> (?H ` ?A))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Message.analz_insert_cong",
     "analz ?H = analz ?H' ==>
      analz (insert ?X ?H) = analz (insert ?X ?H')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Message.Fake_analz_eq",
     "?X : synth (analz ?H) ==>
      synth (analz (insert ?X ?H)) = synth (analz ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Message.analz_trans",
     "[| ?X : analz ?G; ?G <= analz ?H |] ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.parts_trans",
     "[| ?X : parts ?G; ?G <= parts ?H |] ==> ?X : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.synth_trans",
     "[| ?X : synth ?G; ?G <= synth ?H |] ==> ?X : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.analz_insert_MPair",
     "analz (insert \<lbrace>?X, ?Y\<rbrace> ?H) =
      insert \<lbrace>?X, ?Y\<rbrace> (analz (insert ?X (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("Message.parts_insert_MPair",
     "parts (insert \<lbrace>?X, ?Y\<rbrace> ?H) =
      insert \<lbrace>?X, ?Y\<rbrace> (parts (insert ?X (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("Message.pushes",
     "insert (Key ?K) (insert (Crypt ?X ?K') ?A) =
      insert (Crypt ?X ?K') (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Key ?K) (insert \<lbrace>?X, ?Y\<rbrace> ?A) =
      insert \<lbrace>?X, ?Y\<rbrace> (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Crypt ?X ?K) (insert (msg.Agent ?C) ?A) =
      insert (msg.Agent ?C) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Crypt ?X ?K) (insert (Hash ?X') ?A) =
      insert (Hash ?X') (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Crypt ?X ?K) (insert (Nonce ?N) ?A) =
      insert (Nonce ?N) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Message.pushes",
     "insert (Crypt ?X ?K) (insert (Number ?N) ?A) =
      insert (Number ?N) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Message.Key_synth",
     "[| Key ?K : synth ?H; Key ?K : ?H ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Message.Nonce_synth",
     "[| Nonce ?n : synth ?H; Nonce ?n : ?H ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Message.HPair_eq_MPair",
     "(Hash[?X] ?Y = \<lbrace>?X', ?Y'\<rbrace>) =
      (?X' = Hash \<lbrace>?X, ?Y\<rbrace> & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2))
           ))),
    ("Message.MPair_eq_HPair",
     "(\<lbrace>?X', ?Y'\<rbrace> = Hash[?X] ?Y) =
      (?X' = Hash \<lbrace>?X, ?Y\<rbrace> & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("Message.Fake_parts_insert",
     "?X : synth (analz ?H) ==>
      parts (insert ?X ?H) <= synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app (template_hole 2, template_var 0))))),
    ("Message.Fake_parts_sing",
     "?X : synth (analz ?H) ==> parts {?X} <= synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_app (template_hole 3, template_var 0))))),
    ("Message.gen_analz_insert_eq",
     "[| ?X : analz ?H; ?H <= ?G |] ==> analz (insert ?X ?G) = analz ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Message.analz_cut",
     "[| ?Y : analz (insert ?X ?H); ?X : analz ?H |] ==> ?Y : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.synth_cut",
     "[| ?Y : synth (insert ?X ?H); ?X : synth ?H |] ==> ?Y : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Message.parts_insert2",
     "parts (insert ?X (insert ?Y ?H)) =
      parts {?X} Un parts {?Y} Un parts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))),
         template_app (template_hole 3, template_var 0)))),
    ("Message.pushes",
     "insert (Crypt ?X ?K) (insert \<lbrace>?X', ?Y\<rbrace> ?A) =
      insert \<lbrace>?X', ?Y\<rbrace> (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 0)))),
    ("Message.MPair_synth_analz",
     "(\<lbrace>?X, ?Y\<rbrace> : synth (analz ?H)) =
      (?X : synth (analz ?H) & ?Y : synth (analz ?H))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("Message.Crypt_synth_eq",
     "Key ?K ~: ?H ==> (Crypt ?K ?X : synth ?H) = (Crypt ?K ?X : ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Message.analz_insert_Key",
     "?K ~: keysFor (analz ?H) ==>
      analz (insert (Key ?K) ?H) = insert (Key ?K) (analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Message.analz_insert_HPair",
     "analz (insert Hash[?X] ?Y ?H) =
      insert Hash[?X] ?Y
       (insert (Hash \<lbrace>?X, ?Y\<rbrace>) (analz (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Message.parts_insert_HPair",
     "parts (insert Hash[?X] ?Y ?H) =
      insert Hash[?X] ?Y
       (insert (Hash \<lbrace>?X, ?Y\<rbrace>) (parts (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Message.Fake_analz_insert",
     "?X : synth (analz ?G) ==>
      analz (insert ?X ?H) <= synth (analz ?G) Un analz (?G Un ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Message.parts_cut",
     "[| ?Y : parts (insert ?X ?G); ?X : parts ?H |]
      ==> ?Y : parts (?G Un ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Message.analz_UN_analz_lemma",
     "?X : analz (UN i:?A. analz (?H i)) ==>
      ?X : analz (\<Union> (?H ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, t_empty),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 0))))
           ))),
    ("Message.analz_insert_Crypt",
     "Key (invKey ?K) ~: analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H) = insert (Crypt ?K ?X) (analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 2))),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Message.analz_insert_Decrypt",
     "Key (invKey ?K) : analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H) =
      insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("Message.lemma1",
     "Key (invKey ?K) : analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H)
      <= insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("Message.lemma2",
     "Key (invKey ?K) : analz ?H ==>
      insert (Crypt ?K ?X) (analz (insert ?X ?H))
      <= analz (insert (Crypt ?K ?X) ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("Message.analz_cong",
     "[| analz ?G = analz ?G'; analz ?H = analz ?H' |]
      ==> analz (?G Un ?H) = analz (?G' Un ?H')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Message.analz_subset_cong",
     "[| analz ?G <= analz ?G'; analz ?H <= analz ?H' |]
      ==> analz (?G Un ?H) <= analz (?G' Un ?H')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Message.Fake_parts_insert_in_Un",
     "[| ?Z : parts (insert ?X ?H); ?X : synth (analz ?H) |]
      ==> ?Z : synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 4, template_var 0)))
           ))),
    ("Message.Fake_parts_sing_imp_Un",
     "[| ?c : parts {?X}; ?X : synth (analz ?H) |]
      ==> ?c : synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Message.Hash_synth_analz",
     "?X ~: synth (analz ?H) ==>
      (Hash \<lbrace>?X, ?Y\<rbrace> : synth (analz ?H)) =
      (Hash \<lbrace>?X, ?Y\<rbrace> : analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app (template_hole 3, template_var 1))))),
    ("Message.MPair_analz",
     "[| \<lbrace>?X, ?Y\<rbrace> : analz ?H;
         [| ?X : analz ?H; ?Y : analz ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Message.MPair_parts",
     "[| \<lbrace>?X, ?Y\<rbrace> : parts ?H;
         [| ?X : parts ?H; ?Y : parts ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Message.synth_analz_insert_eq",
     "[| ?X : synth (analz ?H); ?H <= ?G |]
      ==> (Key ?K : analz (insert ?X ?G)) = (Key ?K : analz ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 4, template_var 1))))),
    ("Message.Hash_synth",
     "[| Hash ?X : synth ?H; Hash ?X : ?H ==> ?P; ?X : synth ?H ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Message.analz_insert_eq_I",
     "(!!x. x : analz (insert ?X ?H) ==> x : insert ?X (analz ?H)) ==>
      analz (insert ?X ?H) = insert ?X (analz ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Message.parts_insert_eq_I",
     "(!!x. x : parts (insert ?X ?H) ==> x : insert ?X (parts ?H)) ==>
      parts (insert ?X ?H) = insert ?X (parts ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Message.in_parts_UnE",
     "[| ?c : parts (?G Un ?H); ?c : parts ?G ==> ?P;
         ?c : parts ?H ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Message.analz_Crypt_if",
     "analz (insert (Crypt ?K ?X) ?H) =
      (if Key (invKey ?K) : analz ?H
       then insert (Crypt ?K ?X) (analz (insert ?X ?H))
       else insert (Crypt ?K ?X) (analz ?H))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2))),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app (template_hole 6, template_var 0))))),
    ("Message.Crypt_synth_analz",
     "[| Key ?K : analz ?H; Key (invKey ?K) : analz ?H |]
      ==> (Crypt ?K ?X : synth (analz ?H)) = (?X : synth (analz ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 3, template_var 2))),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)))))),
    ("Message.analz_trivial",
     "[| ALL X Y. \<lbrace>X, Y\<rbrace> ~: ?H; ALL X K. Crypt K X ~: ?H |]
      ==> analz ?H = ?H",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Message.HPair_synth_analz",
     "?X ~: synth (analz ?H) ==>
      (Hash[?X] ?Y : synth (analz ?H)) =
      (Hash \<lbrace>?X, ?Y\<rbrace> : analz ?H & ?Y : synth (analz ?H))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0))),
               template_app (template_hole 5, template_var 1))),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1))))))),
    ("Message.Crypt_synth",
     "[| Crypt ?K ?X : synth ?H; Crypt ?K ?X : ?H ==> ?P;
         [| ?X : synth ?H; Key ?K : ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 1, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 0, template_var 3)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Message.MPair_synth",
     "[| \<lbrace>?X, ?Y\<rbrace> : synth ?H;
         \<lbrace>?X, ?Y\<rbrace> : ?H ==> ?P;
         [| ?X : synth ?H; ?Y : synth ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MessageMoreTemplates"
### 0.370s elapsed time, 0.462s cpu time, 0.026s GC time
val it = (): unit
