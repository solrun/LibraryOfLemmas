Loading theory "Draft.Agents" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist" via "Draft.Runs" via "Draft.Atoms" via "Draft.Keys")
Loading theory "Draft.Infra" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist" via "Draft.s0g_secrecy" via "Draft.Refinement")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Infra"
### 0.065s elapsed time, 0.295s cpu time, 0.000s GC time
Loading theory "Draft.Refinement" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist" via "Draft.s0g_secrecy")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.502s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "reachp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.808s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "behp"
  Proving monotonicity ...
specification
  Server_not_bad: Server ~: bad
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.444s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Agents"
### 0.590s elapsed time, 2.353s cpu time, 0.219s GC time
Loading theory "Draft.Keys" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist" via "Draft.Runs" via "Draft.Atoms")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "seq_liftp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Refinement"
### 1.145s elapsed time, 4.359s cpu time, 0.934s GC time
Loading theory "Draft.s0g_secrecy" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.092s elapsed time, 4.162s cpu time, 0.893s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Keys"
### 0.887s elapsed time, 3.341s cpu time, 0.801s GC time
Loading theory "Draft.Atoms" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist" via "Draft.Runs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Atoms"
### 0.316s elapsed time, 1.245s cpu time, 0.154s GC time
Loading theory "Draft.Runs" (required by "Draft.m1_keydistMoreTemplates" via "Draft.m1_keydist")
Found termination order: "size <*mlex*> {}"
### theory "Draft.s0g_secrecy"
### 0.603s elapsed time, 2.383s cpu time, 0.239s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Runs"
### 0.385s elapsed time, 1.219s cpu time, 0.151s GC time
Loading theory "Draft.m1_keydist" (required by "Draft.m1_keydistMoreTemplates")
### theory "HOL-Library.BigO"
### 0.803s elapsed time, 2.788s cpu time, 0.305s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.106s elapsed time, 7.485s cpu time, 1.253s GC time
Loading theory "Draft.Templates" (required by "Draft.m1_keydistMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.m1_keydistMoreTemplates")
Proofs for inductive predicate(s) "knCp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "azCp"
  Proving monotonicity ...
### theory "Draft.m1_keydist"
### 0.686s elapsed time, 1.541s cpu time, 0.172s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 0.981s cpu time, 0.116s GC time
Loading theory "Draft.m1_keydistMoreTemplates"
val templateLemmas =
   [("m1_keydist.azC_map_runs", "azC (map_runs ?h ?runz) = azC ?runz",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("m1_keydist.PO_m1x_step1_refines_skip",
     "{R01x} Id, m1x_step1 ?Ra ?A ?B {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("m1_keydist.PO_m1x_step2_refines_skip",
     "{R01x} Id, m1x_step2 ?Rb ?A ?B {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 2)
         )),
    ("m1_keydist.PO_m1x_leak_refines_s0g_leak",
     "{R01x} s0g_leak (sesK (?Rs $ sk)), m1x_leak ?Rs {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)))),
             template_app (template_hole 0, template_var 0)),
           template_hole 5)
         )),
    ("m1_keydist.azCp_azC_eq", "azCp ?runz = (%x xa. (x, xa) : azC ?runz)",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty)),
    ("m1_keydist.knCp_knC_eq", "knCp ?runz = (%x xa. (x, xa) : knC ?runz)",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty)),
    ("m1_keydist.PO_m1x_step4_refines_s0g_learn",
     "{R01x} s0g_learn ?Kab ?A, m1x_step4 ?Ra ?A ?B ?Kab {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0),
               template_var 3)),
           template_hole 2)
         )),
    ("m1_keydist.PO_m1x_step5_refines_s0g_learn",
     "{R01x} s0g_learn ?Kab ?B, m1x_step5 ?Rb ?A ?B ?Kab {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2),
               template_var 3)),
           template_hole 2)
         )),
    ("m1_keydist.m1x_secrecyI",
     "knC (runs ?x) <= azC (runs ?x) Un leak ?x \<times> UNIV ==>
      ?x : m1x_secrecy",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 0))),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("m1_keydist.m1x_secrecyE",
     "[| ?x : m1x_secrecy;
         knC (runs ?x) <= azC (runs ?x) Un leak ?x \<times> UNIV ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 t_empty)))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("m1_keydist.PO_m1x_step3_refines_s0g_gen",
     "{R01x Int
       UNIV \<times>
       m1x_inv1_key} s0g_gen ?Kab Sv
                      {Sv, ?A, ?B}, m1x_step3 ?Rs ?A ?B ?Kab {> R01x}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     t_empty))),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 1))))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1),
               template_var 3)),
           template_hole 8)
         )),
    ("m1_keydist.azC_upd_Init_None",
     "?Ra ~: dom ?runz ==>
      azC (?runz(?Ra |-> (Init, [?A, ?B], []))) = azC ?runz",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app (template_hole 10, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_var 3),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 1))),
                   template_hole 0))))),
         template_app (template_hole 8, template_var 2)))),
    ("m1_keydist.azC_upd_Resp_None",
     "?Rb ~: dom ?runz ==>
      azC (?runz(?Rb |-> (Resp, [?A, ?B], []))) = azC ?runz",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app (template_hole 10, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_var 3),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 1))),
                   template_hole 0))))),
         template_app (template_hole 8, template_var 2)))),
    ("m1_keydist.knC_upd_Server",
     "?Rs ~: dom ?runz ==>
      knC (?runz(?Rs |-> (Serv, [?A, ?B], []))) =
      insert (sesK (?Rs $ sk), Sv) (knC ?runz)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_app (template_hole 16, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_app (template_hole 13, template_var 2),
               template_var 3),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_app
                        (template_app (template_hole 8, template_var 0),
                         template_hole 7))),
                   template_hole 6))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_hole 1))),
               template_hole 0)),
           template_app (template_hole 14, template_var 2))))),
    ("m1_keydist.azC_upd_Init_Some",
     "?runz ?Ra = Some (Init, [?A, ?B], []) ==>
      azC (?runz(?Ra |-> (Init, [?A, ?B], ?al))) = azC ?runz",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_hole 4))),
                template_hole 3))))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_hole 4))),
                   template_var 0))))),
         template_app (template_hole 1, template_var 4)))),
    ("m1_keydist.azC_upd_Resp_Some",
     "?runz ?Rb = Some (Resp, [?A, ?B], []) ==>
      azC (?runz(?Rb |-> (Resp, [?A, ?B], ?al))) = azC ?runz",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_hole 4))),
                template_hole 3))))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_hole 4))),
                   template_var 0))))),
         template_app (template_hole 1, template_var 4)))),
    ("m1_keydist.knC_upd_Init_Resp_None",
     "[| ?R ~: dom ?runz; ?rol : {Init, Resp} |]
      ==> knC (?runz(?R |-> (?rol, [?A, ?B], []))) = knC ?runz",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_var 4),
                  template_app (template_hole 14, template_var 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_app
                 (template_app (template_hole 12, template_hole 10),
                  template_hole 9)))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 4),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_hole 1))),
                   template_hole 0))))),
         template_app (template_hole 7, template_var 3)))),
    ("m1_keydist.knC_upd_Init_Some",
     "?runz ?Ra = Some (Init, [?A, ?B], []) ==>
      knC (?runz(?Ra |-> (Init, [?A, ?B], [aKey ?Kab]))) =
      insert (?Kab, ?A) (knC ?runz)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_app (template_hole 9, template_var 1),
                      template_hole 8))),
                template_hole 7))))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 7)))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app (template_hole 5, template_var 4))))),
    ("m1_keydist.knC_upd_Resp_Some",
     "?runz ?Ra = Some (Resp, [?A, ?B], []) ==>
      knC (?runz(?Ra |-> (Resp, [?A, ?B], [aKey ?Kab]))) =
      insert (?Kab, ?B) (knC ?runz)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_app (template_hole 9, template_var 1),
                      template_hole 8))),
                template_hole 7))))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 7)))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 5, template_var 4))))),
    ("m1_keydist.azC_upd_Serv_bad",
     "[| ?Rs ~: dom ?runz; ?A : bad | ?B : bad |]
      ==> azC (?runz(?Rs |-> (Serv, [?A, ?B], ?al))) =
          azC ?runz Un {sesK (?Rs $ sk)} \<times> UNIV",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 21, template_var 4),
                  template_app (template_hole 20, template_var 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_hole 17)),
              template_app
               (template_app (template_hole 18, template_var 1),
                template_hole 17))
            )],
       template_equation
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_app (template_hole 14, template_var 3),
               template_var 4),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 15, template_var 3)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_hole 2))),
                 template_hole 1)),
             t_empty))))),
    ("m1_keydist.m1x_inv1_keyD",
     "[| ?Rs ~: dom (runs ?x); ?x : m1x_inv1_key |]
      ==> (sesK (?Rs $ sk), ?A) ~: knC (runs ?x) &
          (sesK (?Rs $ sk), ?A) ~: azC (runs ?x) &
          sesK (?Rs $ sk) ~: leak ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 2),
                             template_hole 4))),
                       template_var 0)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 12, template_var 1))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 2),
                               template_hole 4))),
                         template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 12, template_var 1))))),
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_hole 4))),
                   template_app (template_hole 0, template_var 1)))))
           ))),
    ("m1_keydist.m1x_inv1_keyI",
     "(!!Rs A.
          Rs ~: dom (runs ?x) ==>
          (sesK (Rs $ sk), A) ~: knC (runs ?x) &
          (sesK (Rs $ sk), A) ~: azC (runs ?x) &
          sesK (Rs $ sk) ~: leak ?x) ==>
      ?x : m1x_inv1_key",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("m1_keydist.m1x_inv1_keyE",
     "[| ?x : m1x_inv1_key;
         (!!Rs A.
             Rs ~: dom (runs ?x) ==>
             (sesK (Rs $ sk), A) ~: knC (runs ?x) &
             (sesK (Rs $ sk), A) ~: azC (runs ?x) &
             sesK (Rs $ sk) ~: leak ?x) ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_hole 16)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 15, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("m1_keydist.azC_upd_Serv",
     "[| ?Rs ~: dom ?runz; ?K = sesK (?Rs $ sk) |]
      ==> azC (?runz(?Rs |-> (Serv, [?A, ?B], ?al))) =
          azC ?runz Un
          {?K} \<times>
          (if ?A ~: bad & ?B ~: bad then {?A, ?B, Sv} else UNIV)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 26, template_var 5),
                  template_app (template_hole 25, template_var 4))
                )
            ),
        template_equation
         (template_var 3,
          template_app
           (template_hole 23,
            template_app
             (template_app (template_hole 22, template_var 5),
              template_hole 21)))],
       template_equation
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_app (template_hole 18, template_var 4),
               template_var 5),
             template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_var 2),
                       template_app
                        (template_app (template_hole 13, template_var 1),
                         template_hole 12))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 19, template_var 4)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_hole 8)),
             t_empty))))),
    ("m1_keydist.azC_upd_Serv_good",
     "[| ?Rs ~: dom ?runz; ?K = sesK (?Rs $ sk); ?A ~: bad; ?B ~: bad |]
      ==> azC (?runz(?Rs |-> (Serv, [?A, ?B], ?al))) =
          azC ?runz Un {(?K, ?A), (?K, ?B), (?K, Sv)}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 21, template_var 5),
                  template_app (template_hole 20, template_var 4))
                )
            ),
        template_equation
         (template_var 3,
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, template_var 5),
              template_hole 16))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_hole 14)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_hole 14)
                )
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app (template_hole 11, template_var 4),
               template_var 5),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_hole 5))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 12, template_var 4)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_hole 1)),
                 template_hole 0)))))))]:
   (string * thm * template) list
### theory "Draft.m1_keydistMoreTemplates"
### 0.393s elapsed time, 0.540s cpu time, 0.059s GC time
val it = (): unit
