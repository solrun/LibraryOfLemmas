   [("Semantics.shift_eq",
     "?n = ?m ==> (?E\<langle>?n:?x\<rangle>) ?m = ?x",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_var 0))),
    ("Semantics.lift_lemma",
     "\<lparr>?E\<langle>0:?x\<rangle>, ?F\<rparr> (\<^bold>\<up> ?t) =
      \<lparr>?E, ?F\<rparr> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 1),
         template_var 0))),
    ("Semantics.shift_gt",
     "?m < ?n ==> (?E\<langle>?n:?x\<rangle>) ?m = ?E ?m",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("Semantics.shift_lt",
     "?n < ?m ==> (?E\<langle>?n:?x\<rangle>) ?m = ?E (?m - 1)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Semantics.shift_commute",
     "?E\<langle>?n:?y\<rangle>\<langle>0:?x\<rangle> =
      ?E\<langle>0:?x\<rangle>\<langle>?n + 1:?y\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 1))),
    ("Semantics.inst_tm_semantics",
     "\<lparr>?E, ?F\<rparr> (?t\<llangle>?s/?m\<rrangle>) =
      \<lparr>?E\<langle>?m:\<lparr>?E, ?F\<rparr> ?s\<rangle>, ?F\<rparr>
       ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 1))),
           template_var 3),
         template_var 2))),
    ("Semantics.inst_fm_semantics",
     "\<lbrakk>?E, ?F, ?G\<rbrakk> (?p\<langle>?t/?m\<rangle>) =
      \<lbrakk>?E\<langle>?m:\<lparr>?E, ?F\<rparr>
                              ?t\<rangle>, ?F, ?G\<rbrakk>
       ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 1))),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("Semantics.upd_vars_tm",
     "?n [\<notin>] vars_tm ?t ==>
      \<lparr>?E(?n := ?x), ?F\<rparr> ?t = \<lparr>?E, ?F\<rparr> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 3)))),
    ("Semantics.shift_upd_commute",
     "?m <= ?n ==>
      ?E(?n := ?x)\<langle>?m:?y\<rangle> = (?E\<langle>?m:?y\<rangle>)
      (Suc ?n := ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 4),
                 template_var 0)),
             template_app (template_hole 0, template_var 3)),
           template_var 1)))),
    ("Semantics.upd_vars_fm",
     "max_list (vars_fm ?p) < ?n ==>
      \<lbrakk>?E(?n := ?x), ?F, ?G\<rbrakk> ?p =
      \<lbrakk>?E, ?F, ?G\<rbrakk> ?p",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 5)),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 2)),
               template_var 1),
             template_var 0),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0),
           template_var 5))))]
