Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.526s cpu time, 0.042s GC time
Loading theory "Draft.Sqrt_Babylonian_Auxiliary" (required by "Draft.Log_ImplTemplates" via "Draft.Log_Impl")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.859s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.299s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
consts
  left :: "'a tree => 'a tree"
### theory "Draft.Sqrt_Babylonian_Auxiliary"
### 0.409s elapsed time, 1.608s cpu time, 0.169s GC time
Loading theory "Draft.Log_Impl" (required by "Draft.Log_ImplTemplates")
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.Log_Impl"
### 0.234s elapsed time, 0.924s cpu time, 0.121s GC time
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.958s elapsed time, 3.398s cpu time, 0.826s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.007s elapsed time, 3.310s cpu time, 0.784s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.900s elapsed time, 5.261s cpu time, 0.986s GC time
Loading theory "Draft.Templates" (required by "Draft.Log_ImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.115s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Log_ImplTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.468s elapsed time, 0.481s cpu time, 0.000s GC time
Loading theory "Draft.Log_ImplTemplates"
val templateLemmas =
   [("Log_Impl.b_less_square_base_b",
     "get_base ?b < get_base (square_base ?b)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Log_Impl.get_base_2", "2 <= get_base ?b",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Log_Impl.square_base",
     "get_base (square_base ?b) = get_base ?b * get_base ?b",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Log_Impl.b_less_div_base_b",
     "~ ?x < get_base ?b ==> ?x div get_base ?b < ?x",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 1,
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_var 1))),
    ("Log_Impl.log_ceiling",
     "[| 1 < ?b; 0 < ?x |]
      ==> int (log_ceiling ?b ?x) =
          \<lceil>log (real_of_int ?b) (real_of_int ?x)\<rceil>",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Log_Impl.log_floor",
     "[| 1 < ?b; 0 < ?x |]
      ==> int (log_floor ?b ?x) =
          \<lfloor>log (real_of_int ?b) (real_of_int ?x)\<rfloor>",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Log_Impl.log_ceiling_sound",
     "[| 1 < ?b; 0 < ?x; log_ceiling ?b ?x = ?y |] ==> ?x <= ?b ^ ?y",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Log_Impl.log_floor_sound",
     "[| 1 < ?b; 0 < ?x; log_floor ?b ?x = ?y |] ==> ?b ^ ?y <= ?x",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Log_Impl.log_floor_sound",
     "[| 1 < ?b; 0 < ?x; log_floor ?b ?x = ?y |] ==> ?x < ?b ^ Suc ?y",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_than, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Log_Impl.log_ceiling_sound",
     "[| 1 < ?b; 0 < ?x; log_ceiling ?b ?x = ?y; ?y ~= 0 |]
      ==> ?b ^ (?y - 1) < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 1))),
    ("Log_Impl.log_main",
     "[| 0 < ?x; log_main ?b ?x = (?y, ?by) |]
      ==> ?by = get_base ?b ^ ?y &
          get_base ?b ^ ?y <= ?x & ?x < get_base ?b ^ Suc ?y",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 3),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 2)),
                       template_var 1)),
                   template_var 3)),
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_app (template_hole 0, template_var 1)))))
           )))]:
   (string * thm * template) list
### theory "Draft.Log_ImplTemplates"
### 0.306s elapsed time, 0.440s cpu time, 0.071s GC time
val it = (): unit
