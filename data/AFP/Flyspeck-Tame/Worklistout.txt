Loading theory "Draft.RTranCl" (required by "Draft.WorklistTemplates" via "Draft.Worklist")
Loading theory "Draft.Quasi_Order" (required by "Draft.WorklistTemplates" via "Draft.Worklist")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
Proofs for inductive predicate(s) "RTranClp"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.092s elapsed time, 0.395s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.RTranCl"
### 0.141s elapsed time, 0.576s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.607s cpu time, 0.032s GC time
Loading theory "Draft.Worklist" (required by "Draft.WorklistTemplates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.189s elapsed time, 0.739s cpu time, 0.032s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.504s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs")
locale set_modulo
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
    and empty :: "'s"
    and insert_mod :: "'a => 's => 's"
    and set_of :: "'s => 'a set"
    and I :: "'a => bool"
    and S :: "'s => bool"
  assumes "set_modulo (\<preceq>) empty insert_mod set_of I S"
### theory "Draft.Worklist"
### 0.509s elapsed time, 2.007s cpu time, 0.201s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.944s elapsed time, 3.209s cpu time, 0.798s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.035s elapsed time, 3.282s cpu time, 0.844s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.899s elapsed time, 4.917s cpu time, 1.006s GC time
Loading theory "Draft.Templates" (required by "Draft.WorklistTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WorklistTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.484s elapsed time, 0.531s cpu time, 0.057s GC time
Loading theory "Draft.WorklistTemplates"
val templateLemmas =
   [("Worklist.worklist_aux_Nil",
     "worklist_aux ?succs ?f ([], ?s) = Some ([], ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Worklist.worklist_end_empty",
     "worklist_aux ?succs ?f (?ws, ?s) = Some (?ws', ?s') ==> ?ws' = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation (template_var 1, template_hole 0))),
    ("Worklist.RTranCl_conv",
     "(?g [?succs]\<rightarrow>* ?h) = ((?g, ?h) : (Rel ?succs)^*)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))))),
    ("Worklist.worklist_aux_Cons",
     "worklist_aux ?succs ?f (?x # ?ws', ?s) =
      worklist_aux ?succs ?f (?succs ?s ?x @ ?ws', ?f ?x ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_var 4, template_var 0),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Worklist.worklist_tree_aux_unfold",
     "worklist_tree_aux ?succs ?f (?ws, ?s) =
      (case ?ws of [] => Some ([], ?s)
       | x # ws' => worklist_tree_aux ?succs ?f (?succs x @ ws', ?f x ?s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_hole 1),
                 template_var 0))),
           t_empty),
         template_var 1))),
    ("Worklist.worklist_aux_unfold",
     "worklist_aux ?succs ?f (?ws, ?s) =
      (case ?ws of [] => Some ([], ?s)
       | x # ws' => worklist_aux ?succs ?f (?succs ?s x @ ws', ?f x ?s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_hole 1),
                 template_var 0))),
           t_empty),
         template_var 1))),
    ("Worklist.invariant_succs",
     "[| invariant ?I ?succs; ALL x:?S. ?I x |]
      ==> ALL x:(Rel ?succs)^* `` ?S. ?I x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, t_empty)))),
                 template_var 0)),
             t_empty)
           ))),
    ("Worklist.Image_Rel_set",
     "(Rel ?succs)^* `` set (?succs ?x) = (Rel ?succs)^+ `` {?x}",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))),
         template_app
          (template_hole 3, template_app (template_var 1, template_var 0))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 2,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Worklist.worklist_tree_state_inv",
     "[| worklist_tree ?succs ?f ?ws ?s = Some ?s'; ?I ?s;
         !!x s. ?I s ==> ?I (?f x s) |]
      ==> ?I ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Worklist.worklist_tree_aux_state_inv",
     "[| worklist_tree_aux ?succs ?f (?ws, ?s) = Some (?ws', ?s'); ?I ?s;
         !!x s. ?I s ==> ?I (?f x s) |]
      ==> ?I ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_var 0, template_var 3)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Worklist.worklist_tree_Some_foldl",
     "worklist_tree ?succs ?f ?ws ?s = Some ?s' ==>
      EX rs.
         set rs = (Rel ?succs)^* `` set ?ws &
         ?s' = foldl (%s x. ?f x s) ?s rs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Worklist.worklist_tree_aux_Some_foldl",
     "worklist_tree_aux ?succs ?f (?ws, ?s) = Some (?ws', ?s') ==>
      EX rs.
         set rs = (Rel ?succs)^* `` set ?ws &
         ?s' = foldl (%s x. ?f x s) ?s rs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4),
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)),
          template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Worklist.worklist_tree_rule",
     "[| worklist_tree ?succs ?f ?ws ?s = Some ?s'; invariant ?I ?succs;
         ALL x:set ?ws. ?I x; !!s. ?P [] s s;
         !!r x ws s.
            [| ?I x; ALL x:set ws. ?I x; ?P ws (?f x s) r |]
            ==> ?P (x # ws) s r |]
      ==> EX rs. set rs = (Rel ?succs)^* `` set ?ws & ?P rs ?s ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 4)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Worklist.worklist_tree_aux_rule",
     "[| worklist_tree_aux ?succs ?f (?ws, ?s) = Some (?ws', ?s');
         invariant ?I ?succs; ALL x:set ?ws. ?I x; !!s. ?P [] s s;
         !!r x ws s.
            [| ?I x; ALL x:set ws. ?I x; ?P ws (?f x s) r |]
            ==> ?P (x # ws) s r |]
      ==> EX rs. set rs = (Rel ?succs)^* `` set ?ws & ?P rs ?s ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 7),
              template_var 6),
            template_app
             (template_app (template_hole 17, template_var 5),
              template_var 4)),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 5)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Worklist.worklist_tree_rule2",
     "[| worklist_tree ?succs ?f ?ws ?s = Some ?s'; invariant ?I ?succs;
         ALL x:set ?ws. ?I x; ?S ?s;
         !!x s. [| ?I x; ?S s |] ==> ?S (?f x s); !!s. ?P [] s s;
         !!r x ws s.
            [| ?I x; ALL x:set ws. ?I x; ?S s; ?P ws (?f x s) r |]
            ==> ?P (x # ws) s r |]
      ==> EX rs. set rs = (Rel ?succs)^* `` set ?ws & ?P rs ?s ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app (template_hole 16, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 5)),
              t_empty)
            ),
        template_predicate (template_app (template_var 1, template_var 4)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Worklist.worklist_tree_aux_rule2",
     "[| worklist_tree_aux ?succs ?f (?ws, ?s) = Some (?ws', ?s');
         invariant ?I ?succs; ALL x:set ?ws. ?I x; ?S ?s;
         !!x s. [| ?I x; ?S s |] ==> ?S (?f x s); !!s. ?P [] s s;
         !!r x ws s.
            [| ?I x; ALL x:set ws. ?I x; ?S s; ?P ws (?f x s) r |]
            ==> ?P (x # ws) s r |]
      ==> EX rs. set rs = (Rel ?succs)^* `` set ?ws & ?P rs ?s ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 8),
              template_var 7),
            template_app
             (template_app (template_hole 17, template_var 6),
              template_var 5)),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 6)),
              t_empty)
            ),
        template_predicate (template_app (template_var 1, template_var 5)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty))))]:
   (string * thm * template) list
### theory "Draft.WorklistTemplates"
### 0.351s elapsed time, 0.500s cpu time, 0.067s GC time
val it = (): unit
