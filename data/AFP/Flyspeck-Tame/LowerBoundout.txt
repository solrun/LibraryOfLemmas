Loading theory "Draft.ListAux" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
Loading theory "Draft.Quasi_Order" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "Draft.RTranCl" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "RTranClp"
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.106s elapsed time, 0.447s cpu time, 0.041s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
### theory "Draft.RTranCl"
### 0.129s elapsed time, 0.532s cpu time, 0.041s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
consts
  min_list :: "nat list => nat"
### No equation for constructor "[]"
consts
  max_list :: "nat list => nat"
consts
  replace :: "'a => 'a list => 'a list => 'a list"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.622s cpu time, 0.041s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
### theory "Draft.IArray_Syntax"
### 0.050s elapsed time, 0.195s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.807s cpu time, 0.113s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
Found termination order: "size_list size <*mlex*> {}"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "HOL-Library.Nat_Bijection"
### 0.405s elapsed time, 1.596s cpu time, 0.191s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs")
### theory "Draft.ListAux"
### 0.580s elapsed time, 2.289s cpu time, 0.322s GC time
Loading theory "Draft.ListSum" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps")
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
consts
  ListSum :: "'b list => ('b => 'a) => 'a"
### theory "Draft.ListSum"
### 0.057s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.567s elapsed time, 2.218s cpu time, 0.281s GC time
Loading theory "Draft.Rotation" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "Draft.Rotation"
### 0.179s elapsed time, 0.712s cpu time, 0.086s GC time
Loading theory "Draft.Graph" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.031s elapsed time, 3.937s cpu time, 0.814s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.973s elapsed time, 3.693s cpu time, 0.814s GC time
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
Found termination order: "size <*mlex*> {}"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
overloading
  finalGraph \<equiv> final :: graph => bool
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.303s elapsed time, 4.019s cpu time, 0.852s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.GraphProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.EnumeratorProps")
Loading theory "Draft.Tame" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps" via "Draft.TameEnum" via "Draft.Generator")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
### Ambiguous input (line 204 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivision"
### 0.141s elapsed time, 0.548s cpu time, 0.042s GC time
Loading theory "Draft.Enumerator" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
### Ambiguous input (line 215 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Flyspeck-Tame/Tame.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("\<^const>Set.not_member"
###       ("_applC"
###         ("\<^const>Graph.nextFace"
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f)))
###         ("_position" v))
###       ("_position" V))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("\<^const>Set.not_member"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Ball" ("_position" v) ("_position" V)
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f))))
###       ("_position" v))
###     ("_position" V)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.061s elapsed time, 6.991s cpu time, 1.191s GC time
Loading theory "Draft.Templates" (required by "Draft.LowerBoundTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 343 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 403 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.GraphProps"
### 0.320s elapsed time, 1.256s cpu time, 0.085s GC time
### theory "Draft.Tame"
### 0.370s elapsed time, 1.417s cpu time, 0.146s GC time
Loading theory "Draft.TameProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.091s elapsed time, 0.323s cpu time, 0.061s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LowerBoundTemplates")
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
consts
  hideDups :: "'a list => 'a option list"
### theory "Draft.Enumerator"
### 0.286s elapsed time, 1.047s cpu time, 0.104s GC time
Loading theory "Draft.EnumeratorProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps")
Loading theory "Draft.Plane" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps")
### theory "Draft.TameProps"
### 0.212s elapsed time, 0.781s cpu time, 0.061s GC time
### theory "Draft.EnumeratorProps"
### 0.320s elapsed time, 1.099s cpu time, 0.061s GC time
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.Plane"
### 0.435s elapsed time, 1.382s cpu time, 0.144s GC time
Loading theory "Draft.FaceDivisionProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps" via "Draft.Invariants")
Loading theory "Draft.Plane1" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps" via "Draft.TameEnum" via "Draft.Generator")
### theory "Draft.Plane1"
### 0.047s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.Generator" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps" via "Draft.TameEnum")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.625s elapsed time, 1.948s cpu time, 0.144s GC time
### Ambiguous input (line 48 of "$AFP/Flyspeck-Tame/Generator.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Flyspeck-Tame/Generator.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Generator"
### 0.353s elapsed time, 0.865s cpu time, 0.156s GC time
Loading theory "Draft.TameEnum" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.ScoreProps")
### theory "Draft.TameEnum"
### 0.039s elapsed time, 0.077s cpu time, 0.000s GC time
### Ambiguous input (line 1398 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1622 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  natToVertexListRec :: "nat => nat => face => nat list => nat option list"
consts
  natToVertexList :: "nat => face => nat list => nat option list"
### Ambiguous input (line 3534 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3912 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" a))
###             ("_case_syntax"
###               ("\<^const>List.nth" ("_position" vs)
###                 ("\<^const>Groups.plus_class.plus" ("_position" i)
###                   ("\<^const>Groups.one_class.one")))
###               ("_case1" ("_position" None) ("_position" False))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" b))
###             ("_applC" ("_position" is_duplicateEdge)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" a) ("_position" b)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case1" ("_applC" ("_position" Some) ("_position" a))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" vs)
###               ("\<^const>Groups.plus_class.plus" ("_position" i)
###                 ("\<^const>Groups.one_class.one")))
###             ("_case2" ("_case1" ("_position" None) ("_position" False))
###               ("_case1" ("_applC" ("_position" Some) ("_position" b))
###                 ("_applC" ("_position" is_duplicateEdge)
###                   ("_cargs" ("_position" g)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" a) ("_position" b)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### [| ?v'3 : \<V> ?f3; pre_between (vertices ?f3) ?u3 ?v3 |]
### ==> between (vertices ?f3) ?u3 ?v3 =
###     between (verticesFrom ?f3 ?v'3) ?u3 ?v3 ==
###     True
### Rewrite rule not in simpset:
### [| ?v'1 : \<V> ?f1; pre_between (vertices ?f1) ?u1 ?v1 |]
### ==> between (vertices ?f1) ?u1 ?v1 ==
###     between (verticesFrom ?f1 ?v'1) ?u1 ?v1
### Ambiguous input (line 4879 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4951 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivisionProps"
### 1.669s elapsed time, 3.083s cpu time, 1.391s GC time
Loading theory "Draft.Invariants" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound" via "Draft.PlaneProps")
### Ambiguous input (line 247 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### ?m1 <= ?n1 ==> ?m1 - ?n1 == 0
consts
  replacefacesAt2 ::
    "nat list => face => face list => face list list => face list list"
### theory "Draft.Invariants"
### 0.939s elapsed time, 1.986s cpu time, 1.429s GC time
Loading theory "Draft.PlaneProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound")
### Ignoring duplicate rewrite rule:
### ?i1 : {?l1..<?u1} == ?l1 <= ?i1 & ?i1 < ?u1
### theory "Draft.PlaneProps"
### 0.143s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.ScoreProps" (required by "Draft.LowerBoundTemplates" via "Draft.LowerBound")
### Ambiguous input (line 14 of "$AFP/Flyspeck-Tame/ScoreProps.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a))
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" a))
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextFace" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextFace" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a))
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextFace" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" a))
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextFace" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" a)
###           ("\<^const>List.list.Cons" ("_position" p) ("_position" ps)))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_applC" ("_position" fst) ("_position" p))
###         ("_Coll" ("_position" v)
###           ("_Bex" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" a))))
###             ("\<^const>HOL.disj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_Finset"
###                     ("_args"
###                       ("_applC"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" a))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_applC"
###                           ("\<^const>Graph.nextVertex" ("_position" f))
###                           ("_position" a)))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.not_equal"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("\<^const>HOL.eq" ("_position" v)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a))))))))
###       ("_applC" ("_position" deleteAround)
###         ("_cargs" ("_position" g)
###           ("_cargs" ("_position" a) ("_position" ps))))
###       ("\<^const>List.list.Cons" ("_position" p)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Flyspeck-Tame/ScoreProps.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround')
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_binds"
###         ("_bind" ("_position" vs)
###           ("_lambda" ("_position" f)
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" n1)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" v)))
###                 ("_bind" ("_position" n2)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n1))))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("_list" ("_args" ("_position" n1) ("_position" n2)))
###                 ("_list" ("_position" n1))))))
###         ("_bind" ("_position" ws)
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs) ("_position" fs)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround')
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_binds"
###         ("_bind" ("_position" vs)
###           ("_lambda" ("_position" f)
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" n1)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" v)))
###                 ("_bind" ("_position" n2)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n1))))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("_list" ("_args" ("_position" n1) ("_position" n2)))
###                 ("_list" ("_position" n1))))))
###         ("_bind" ("_position" ws)
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs) ("_position" fs)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround')
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_binds"
###         ("_bind" ("_position" vs)
###           ("_lambda" ("_position" f)
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" n1)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" v)))
###                 ("_bind" ("_position" n2)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n1))))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("_list" ("_args" ("_position" n1) ("_position" n2)))
###                 ("_list" ("_position" n1))))))
###         ("_bind" ("_position" ws)
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs) ("_position" fs)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround')
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_binds"
###         ("_bind" ("_position" vs)
###           ("_lambda" ("_position" f)
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" n1)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" v)))
###                 ("_bind" ("_position" n2)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n1))))
###               ("\<^const>HOL.If"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length)
###                     ("_applC" ("_position" vertices) ("_position" f)))
###                   ("_Numeral" ("_constify" ("_position" 4))))
###                 ("_list" ("_args" ("_position" n1) ("_position" n2)))
###                 ("_list" ("_position" n1))))))
###         ("_bind" ("_position" ws)
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs) ("_position" fs)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/ScoreProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member"
###       ("_tuple"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_tuple_arg" ("_position" b)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member"
###       ("_tuple"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_tuple_arg" ("_position" b)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" deleteAround)
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" a) ("_position" ps))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/Flyspeck-Tame/ScoreProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_tuple"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" deleteAround)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" a) ("_position" ps)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_tuple"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" deleteAround)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" a) ("_position" ps)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_tuple"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" deleteAround)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" a) ("_position" ps)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" a))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_tuple"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" deleteAround)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" a) ("_position" ps)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Flyspeck-Tame/ScoreProps.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" V)))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ExcessTable_cont :: "(nat => nat) => nat list => (nat * nat) list"
### theory "Draft.ScoreProps"
### 0.486s elapsed time, 0.637s cpu time, 0.191s GC time
Loading theory "Draft.LowerBound" (required by "Draft.LowerBoundTemplates")
### theory "Draft.LowerBound"
### 0.042s elapsed time, 0.042s cpu time, 0.000s GC time
Loading theory "Draft.LowerBoundTemplates"
val templateLemmas =
   [("LowerBound.trans2",
     "[| ?l = ?a1.0 + ?a2.0 + ?a3.0; ?a1.0 <= ?r |]
      ==> ?l <= ?r + ?a2.0 + ?a3.0",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1)),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_inequation
        (less_equals, template_var 4,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("LowerBound.trans4",
     "[| ?l <= ?a1.0 + ?a2.0 + ?a3.0; ?a3.0 <= ?r |]
      ==> ?l <= ?a1.0 + ?a2.0 + ?r",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2)),
            template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 4,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("LowerBound.trans5",
     "[| ?l <= ?a1.0 + ?a2.0 + ?a3.0; ?a2.0 + ?a3.0 = ?r |]
      ==> ?l <= ?a1.0 + ?r",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 4,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("LowerBound.trans6",
     "[| ?a = ?b1.0 + (?b2.0 + ?b3.0) + ?b4.0; ?b3.0 = 0 |]
      ==> ?a = ?b1.0 + ?b2.0 + ?b4.0",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1))),
            template_var 0)),
        template_equation (template_var 1, template_hole 0)],
       template_equation
        (template_var 4,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("LowerBound.trans1",
     "[| ?l = ?a1.0 + ?a2.0 + (?a3.0 + ?a4.0); ?a1.0 + ?a3.0 = ?r |]
      ==> ?l = ?r + ?a2.0 + ?a4.0",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1))),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 4), template_var 2),
          template_var 0)],
       template_equation
        (template_var 5,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1)))),
    ("LowerBound.trans3",
     "[| ?l <= ?a1.0 + ?a2.0 + (?a3.0 + ?a4.0); ?a2.0 + ?a3.0 <= ?r |]
      ==> ?l <= ?a1.0 + ?r + ?a4.0",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_var 0)],
       template_inequation
        (less_equals, template_var 5,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0)),
           template_var 1)))),
    ("LowerBound.total_weight_lowerbound",
     "[| Invariants.inv ?g; final ?g; tame ?g; admissible ?w ?g;
         ListSum (faces ?g) ?w < squanderTarget |]
      ==> squanderLowerBound ?g <= ListSum (faces ?g) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            t_empty),
          template_hole 2)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.LowerBoundTemplates"
### 0.397s elapsed time, 0.599s cpu time, 0.092s GC time
val it = (): unit
